
transmit_simple_test.elf:     file format elf32-littlenios2
transmit_simple_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000063c memsz 0x0000063c flags r-x
    LOAD off    0x0000165c vaddr 0x0000065c paddr 0x000006cc align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x0000173c vaddr 0x0000073c paddr 0x0000073c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000016cc  2**0
                  CONTENTS
  2 .text         00000604  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00000624  00000624  00001624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  0000065c  000006cc  0000165c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000073c  0000073c  0000173c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000748  00000748  000016cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000268  00000000  00000000  000016f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001b25  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d1d  00000000  00000000  0000347d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000d69  00000000  00000000  0000419a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000338  00000000  00000000  00004f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a11  00000000  00000000  0000523c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005a6  00000000  00000000  00005c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000061f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00006238  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007352  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00007355  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007358  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007359  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000735a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00007363  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000736c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00007375  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0000737c  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  000073b5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006be72  00000000  00000000  0000aa28  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000624 l    d  .rodata	00000000 .rodata
0000065c l    d  .rwdata	00000000 .rwdata
0000073c l    d  .bss	00000000 .bss
00000748 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../transmit_simple_test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000004a0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000004d0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000002b0 g     F .text	0000002c alt_main
000006cc g       *ABS*	00000000 __flash_rwdata_start
00000324 g     F .text	00000038 alt_putstr
000006b4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000740 g     O .bss	00000004 alt_argv
000086b4 g       *ABS*	00000000 _gp
0000035c g     F .text	00000004 usleep
0000065c g     O .rwdata	00000030 alt_fd_list
00000384 g     F .text	0000005c altera_avalon_jtag_uart_read
000005ec g     F .text	00000008 .hidden __udivsi3
000006b8 g     O .rwdata	00000004 alt_max_fd
00000748 g       *ABS*	00000000 __bss_end
00000174 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
0000068c g     O .rwdata	00000028 alt_dev_null
0000049c g     F .text	00000004 alt_dcache_flush_all
000006cc g       *ABS*	00000000 __ram_rwdata_end
000006bc g     O .rwdata	00000008 alt_dev_list
0000065c g       *ABS*	00000000 __ram_rodata_end
000005f4 g     F .text	00000008 .hidden __umodsi3
00000748 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000003e0 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000380 g     F .text	00000004 alt_sys_init
000005fc g     F .text	00000028 .hidden __mulsi3
0000065c g       *ABS*	00000000 __ram_rwdata_start
00000624 g       *ABS*	00000000 __ram_rodata_start
00000414 g     F .text	00000088 alt_busy_sleep
00000748 g       *ABS*	00000000 __alt_stack_base
0000073c g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000118 main
0000073c g     O .bss	00000004 alt_envp
0000053c g     F .text	00000054 .hidden __divsi3
00000624 g       *ABS*	00000000 __flash_rodata_start
00000360 g     F .text	00000020 alt_irq_init
00000744 g     O .bss	00000004 alt_argc
000006c4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000006cc g       *ABS*	00000000 _edata
00000748 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000004ac g     F .text	00000008 altera_nios2_qsys_irq_init
00000590 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000004b4 g     F .text	0000001c strlen
000002dc g     F .text	00000048 alt_putchar
000004a8 g     F .text	00000004 alt_icache_flush_all
000001b8 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a1ad14 	ori	gp,gp,34484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1081cf14 	ori	r2,r2,1852

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c1d214 	ori	r3,r3,1864

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7990>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00001b80 	call	1b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00002b00 	call	2b0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff79a4>

0000005c <main>:
#define character_received (volatile char *) 0x00003090
#define data_bus_LEDs (volatile char *) 0x00003080

int main()
{ 
	alt_putstr("Input the char you would like to send.\n");
  5c:	01000034 	movhi	r4,0
#define data_bus_input (volatile char *) 0x000030a0
#define character_received (volatile char *) 0x00003090
#define data_bus_LEDs (volatile char *) 0x00003080

int main()
{ 
  60:	defffc04 	addi	sp,sp,-16
	alt_putstr("Input the char you would like to send.\n");
  64:	21018904 	addi	r4,r4,1572
#define data_bus_input (volatile char *) 0x000030a0
#define character_received (volatile char *) 0x00003090
#define data_bus_LEDs (volatile char *) 0x00003080

int main()
{ 
  68:	dfc00315 	stw	ra,12(sp)
  6c:	dc800215 	stw	r18,8(sp)
  70:	dc400115 	stw	r17,4(sp)
  74:	dc000015 	stw	r16,0(sp)
	alt_putstr("Input the char you would like to send.\n");
  78:	00003240 	call	324 <alt_putstr>
  	alt_putchar(*data_bus_input);
  7c:	008c2804 	movi	r2,12448
  80:	11000003 	ldbu	r4,0(r2)
  	alt_putstr("\n");
  	int c = alt_getchar();
  	alt_putstr("\n");

  	*transmit_enable = 0x0;
  84:	040c1004 	movi	r16,12352
  	*load = 0x0;
  88:	044c1804 	movi	r17,12384
#define data_bus_LEDs (volatile char *) 0x00003080

int main()
{ 
	alt_putstr("Input the char you would like to send.\n");
  	alt_putchar(*data_bus_input);
  8c:	21003fcc 	andi	r4,r4,255
  90:	2100201c 	xori	r4,r4,128
  94:	213fe004 	addi	r4,r4,-128
  98:	00002dc0 	call	2dc <alt_putchar>
  	alt_putstr("\n");
  9c:	01000034 	movhi	r4,0
  a0:	21019304 	addi	r4,r4,1612
  a4:	00003240 	call	324 <alt_putstr>
  	int c = alt_getchar();
  a8:	00001740 	call	174 <alt_getchar>
  	alt_putstr("\n");
  ac:	01000034 	movhi	r4,0
  b0:	21019304 	addi	r4,r4,1612
int main()
{ 
	alt_putstr("Input the char you would like to send.\n");
  	alt_putchar(*data_bus_input);
  	alt_putstr("\n");
  	int c = alt_getchar();
  b4:	1025883a 	mov	r18,r2
  	alt_putstr("\n");
  b8:	00003240 	call	324 <alt_putstr>

  	*transmit_enable = 0x0;
  bc:	80000005 	stb	zero,0(r16)
  	*load = 0x0;
  c0:	88000005 	stb	zero,0(r17)
  	*data_bus_output = c;
  c4:	008c1c04 	movi	r2,12400
  	usleep(1000);
  c8:	0100fa04 	movi	r4,1000
  	int c = alt_getchar();
  	alt_putstr("\n");

  	*transmit_enable = 0x0;
  	*load = 0x0;
  	*data_bus_output = c;
  cc:	14800005 	stb	r18,0(r2)
  	usleep(1000);
  d0:	000035c0 	call	35c <usleep>
  	*transmit_enable = 0x1;
  d4:	00800044 	movi	r2,1
  d8:	80800005 	stb	r2,0(r16)
  	*load = 0x1;
  dc:	88800005 	stb	r2,0(r17)
  	usleep(50);
  e0:	01000c84 	movi	r4,50
  e4:	000035c0 	call	35c <usleep>
  	*load = 0x0;

  	*data_bus_LEDs = c;
  e8:	008c2004 	movi	r2,12416
  	*data_bus_output = c;
  	usleep(1000);
  	*transmit_enable = 0x1;
  	*load = 0x1;
  	usleep(50);
  	*load = 0x0;
  ec:	88000005 	stb	zero,0(r17)

  	*data_bus_LEDs = c;
  f0:	14800005 	stb	r18,0(r2)
  	while (!*character_sent) {
  f4:	00cc1404 	movi	r3,12368
  f8:	18800003 	ldbu	r2,0(r3)
  fc:	10803fcc 	andi	r2,r2,255
 100:	1080201c 	xori	r2,r2,128
 104:	10bfe004 	addi	r2,r2,-128
 108:	103ffb26 	beq	r2,zero,f8 <_gp+0xffff7a44>
  	}
  	*transmit_enable = 0x0;
 10c:	80000005 	stb	zero,0(r16)

  	while (!*character_received) {
 110:	00cc2404 	movi	r3,12432
 114:	18800003 	ldbu	r2,0(r3)
 118:	10803fcc 	andi	r2,r2,255
 11c:	1080201c 	xori	r2,r2,128
 120:	10bfe004 	addi	r2,r2,-128
 124:	103ffb26 	beq	r2,zero,114 <_gp+0xffff7a60>
  	}
  	*data_bus_LEDs = 0xFF;
 128:	00ffffc4 	movi	r3,-1
 12c:	008c2004 	movi	r2,12416
 130:	10c00005 	stb	r3,0(r2)
  	alt_putchar(*data_bus_input);
 134:	008c2804 	movi	r2,12448
 138:	11000003 	ldbu	r4,0(r2)
 13c:	21003fcc 	andi	r4,r4,255
 140:	2100201c 	xori	r4,r4,128
 144:	213fe004 	addi	r4,r4,-128
 148:	00002dc0 	call	2dc <alt_putchar>
  	alt_putstr("\n");
 14c:	01000034 	movhi	r4,0
 150:	21019304 	addi	r4,r4,1612
 154:	00003240 	call	324 <alt_putstr>

  return 0;
}
 158:	0005883a 	mov	r2,zero
 15c:	dfc00317 	ldw	ra,12(sp)
 160:	dc800217 	ldw	r18,8(sp)
 164:	dc400117 	ldw	r17,4(sp)
 168:	dc000017 	ldw	r16,0(sp)
 16c:	dec00404 	addi	sp,sp,16
 170:	f800283a 	ret

00000174 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 174:	00800034 	movhi	r2,0
 178:	10819704 	addi	r2,r2,1628
 17c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 180:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 184:	01000034 	movhi	r4,0
 188:	2101ad04 	addi	r4,r4,1716
 18c:	d80b883a 	mov	r5,sp
 190:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 194:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 198:	00003840 	call	384 <altera_avalon_jtag_uart_read>
 19c:	0080020e 	bge	zero,r2,1a8 <alt_getchar+0x34>
        return -1;
    }
    return c;
 1a0:	d8800007 	ldb	r2,0(sp)
 1a4:	00000106 	br	1ac <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 1a8:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

000001b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1b8:	deffff04 	addi	sp,sp,-4
 1bc:	01000034 	movhi	r4,0
 1c0:	01400034 	movhi	r5,0
 1c4:	dfc00015 	stw	ra,0(sp)
 1c8:	21019704 	addi	r4,r4,1628
 1cc:	2941b304 	addi	r5,r5,1740

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1d0:	2140061e 	bne	r4,r5,1ec <alt_load+0x34>
 1d4:	01000034 	movhi	r4,0
 1d8:	01400034 	movhi	r5,0
 1dc:	21000804 	addi	r4,r4,32
 1e0:	29400804 	addi	r5,r5,32
 1e4:	2140141e 	bne	r4,r5,238 <alt_load+0x80>
 1e8:	00000d06 	br	220 <alt_load+0x68>
 1ec:	00c00034 	movhi	r3,0
 1f0:	18c1b304 	addi	r3,r3,1740
 1f4:	00bfff04 	movi	r2,-4
 1f8:	1907c83a 	sub	r3,r3,r4
 1fc:	1886703a 	and	r3,r3,r2
 200:	0005883a 	mov	r2,zero
  {
    while( to != end )
 204:	10fff326 	beq	r2,r3,1d4 <_gp+0xffff7b20>
 208:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 20c:	39c00017 	ldw	r7,0(r7)
 210:	110d883a 	add	r6,r2,r4
 214:	10800104 	addi	r2,r2,4
 218:	31c00015 	stw	r7,0(r6)
 21c:	003ff906 	br	204 <_gp+0xffff7b50>
 220:	01000034 	movhi	r4,0
 224:	01400034 	movhi	r5,0
 228:	21018904 	addi	r4,r4,1572
 22c:	29418904 	addi	r5,r5,1572

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 230:	2140121e 	bne	r4,r5,27c <alt_load+0xc4>
 234:	00000d06 	br	26c <alt_load+0xb4>
 238:	00c00034 	movhi	r3,0
 23c:	18c00804 	addi	r3,r3,32
 240:	00bfff04 	movi	r2,-4
 244:	1907c83a 	sub	r3,r3,r4
 248:	1886703a 	and	r3,r3,r2
 24c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 250:	10fff326 	beq	r2,r3,220 <_gp+0xffff7b6c>
 254:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 258:	39c00017 	ldw	r7,0(r7)
 25c:	110d883a 	add	r6,r2,r4
 260:	10800104 	addi	r2,r2,4
 264:	31c00015 	stw	r7,0(r6)
 268:	003ff906 	br	250 <_gp+0xffff7b9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 26c:	000049c0 	call	49c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 270:	dfc00017 	ldw	ra,0(sp)
 274:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 278:	00004a81 	jmpi	4a8 <alt_icache_flush_all>
 27c:	00c00034 	movhi	r3,0
 280:	18c19704 	addi	r3,r3,1628
 284:	00bfff04 	movi	r2,-4
 288:	1907c83a 	sub	r3,r3,r4
 28c:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 290:	0005883a 	mov	r2,zero
  {
    while( to != end )
 294:	10fff526 	beq	r2,r3,26c <_gp+0xffff7bb8>
 298:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 29c:	39c00017 	ldw	r7,0(r7)
 2a0:	110d883a 	add	r6,r2,r4
 2a4:	10800104 	addi	r2,r2,4
 2a8:	31c00015 	stw	r7,0(r6)
 2ac:	003ff906 	br	294 <_gp+0xffff7be0>

000002b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2b0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2b4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2b8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2bc:	00003600 	call	360 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2c0:	00003800 	call	380 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2c4:	d1202417 	ldw	r4,-32624(gp)
 2c8:	d1602317 	ldw	r5,-32628(gp)
 2cc:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2d0:	dfc00017 	ldw	ra,0(sp)
 2d4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2d8:	000005c1 	jmpi	5c <main>

000002dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 2dc:	defffd04 	addi	sp,sp,-12
 2e0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 2e4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 2e8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 2ec:	01000034 	movhi	r4,0
 2f0:	2101ad04 	addi	r4,r4,1716
 2f4:	d80b883a 	mov	r5,sp
 2f8:	01800044 	movi	r6,1
 2fc:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 300:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 304:	00003e00 	call	3e0 <altera_avalon_jtag_uart_write>
 308:	00ffffc4 	movi	r3,-1
 30c:	10c00126 	beq	r2,r3,314 <alt_putchar+0x38>
        return -1;
    }
    return c;
 310:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 314:	dfc00217 	ldw	ra,8(sp)
 318:	dc000117 	ldw	r16,4(sp)
 31c:	dec00304 	addi	sp,sp,12
 320:	f800283a 	ret

00000324 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 324:	defffe04 	addi	sp,sp,-8
 328:	dc000015 	stw	r16,0(sp)
 32c:	dfc00115 	stw	ra,4(sp)
 330:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 334:	00004b40 	call	4b4 <strlen>
 338:	01000034 	movhi	r4,0
 33c:	2101ad04 	addi	r4,r4,1716
 340:	800b883a 	mov	r5,r16
 344:	100d883a 	mov	r6,r2
 348:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 34c:	dfc00117 	ldw	ra,4(sp)
 350:	dc000017 	ldw	r16,0(sp)
 354:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 358:	00003e01 	jmpi	3e0 <altera_avalon_jtag_uart_write>

0000035c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 35c:	00004141 	jmpi	414 <alt_busy_sleep>

00000360 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 360:	deffff04 	addi	sp,sp,-4
 364:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 368:	00004ac0 	call	4ac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 36c:	00800044 	movi	r2,1
 370:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 374:	dfc00017 	ldw	ra,0(sp)
 378:	dec00104 	addi	sp,sp,4
 37c:	f800283a 	ret

00000380 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 380:	f800283a 	ret

00000384 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 384:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 388:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 38c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 390:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 394:	11800b2e 	bgeu	r2,r6,3c4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 398:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 39c:	1a60000c 	andi	r9,r3,32768
 3a0:	48000326 	beq	r9,zero,3b0 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 3a4:	10c00005 	stb	r3,0(r2)
 3a8:	10800044 	addi	r2,r2,1
 3ac:	003ff906 	br	394 <_gp+0xffff7ce0>
    else if (ptr != buffer)
 3b0:	11400226 	beq	r2,r5,3bc <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 3b4:	1145c83a 	sub	r2,r2,r5
 3b8:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 3bc:	403ff526 	beq	r8,zero,394 <_gp+0xffff7ce0>
 3c0:	00000106 	br	3c8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 3c4:	117ffb1e 	bne	r2,r5,3b4 <_gp+0xffff7d00>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 3c8:	39d0000c 	andi	r7,r7,16384
 3cc:	3800021e 	bne	r7,zero,3d8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 3d0:	00bffec4 	movi	r2,-5
 3d4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 3d8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 3dc:	f800283a 	ret

000003e0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 3e0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 3e4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 3e8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3ec:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 3f0:	2980072e 	bgeu	r5,r6,410 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3f4:	38c00037 	ldwio	r3,0(r7)
 3f8:	18ffffec 	andhi	r3,r3,65535
 3fc:	183ffc26 	beq	r3,zero,3f0 <_gp+0xffff7d3c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 400:	28c00007 	ldb	r3,0(r5)
 404:	20c00035 	stwio	r3,0(r4)
 408:	29400044 	addi	r5,r5,1
 40c:	003ff806 	br	3f0 <_gp+0xffff7d3c>

  return count;
}
 410:	f800283a 	ret

00000414 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 414:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 418:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 41c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 420:	dc000015 	stw	r16,0(sp)
 424:	dfc00115 	stw	ra,4(sp)
 428:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 42c:	00005ec0 	call	5ec <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 430:	10001026 	beq	r2,zero,474 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 434:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 438:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 43c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 440:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 444:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 448:	297fffc4 	addi	r5,r5,-1
 44c:	283ffe1e 	bne	r5,zero,448 <_gp+0xffff7d94>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 450:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 454:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 458:	18bffb16 	blt	r3,r2,448 <_gp+0xffff7d94>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 45c:	8009883a 	mov	r4,r16
 460:	01400144 	movi	r5,5
 464:	00005fc0 	call	5fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 468:	10bfffc4 	addi	r2,r2,-1
 46c:	103ffe1e 	bne	r2,zero,468 <_gp+0xffff7db4>
 470:	00000506 	br	488 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 474:	8009883a 	mov	r4,r16
 478:	01400144 	movi	r5,5
 47c:	00005fc0 	call	5fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 480:	10bfffc4 	addi	r2,r2,-1
 484:	00bffe16 	blt	zero,r2,480 <_gp+0xffff7dcc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 488:	0005883a 	mov	r2,zero
 48c:	dfc00117 	ldw	ra,4(sp)
 490:	dc000017 	ldw	r16,0(sp)
 494:	dec00204 	addi	sp,sp,8
 498:	f800283a 	ret

0000049c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 49c:	f800283a 	ret

000004a0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4a0:	3005883a 	mov	r2,r6
 4a4:	f800283a 	ret

000004a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4a8:	f800283a 	ret

000004ac <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4ac:	000170fa 	wrctl	ienable,zero
 4b0:	f800283a 	ret

000004b4 <strlen>:
 4b4:	2005883a 	mov	r2,r4
 4b8:	10c00007 	ldb	r3,0(r2)
 4bc:	18000226 	beq	r3,zero,4c8 <strlen+0x14>
 4c0:	10800044 	addi	r2,r2,1
 4c4:	003ffc06 	br	4b8 <_gp+0xffff7e04>
 4c8:	1105c83a 	sub	r2,r2,r4
 4cc:	f800283a 	ret

000004d0 <udivmodsi4>:
 4d0:	2900182e 	bgeu	r5,r4,534 <udivmodsi4+0x64>
 4d4:	28001716 	blt	r5,zero,534 <udivmodsi4+0x64>
 4d8:	00800804 	movi	r2,32
 4dc:	00c00044 	movi	r3,1
 4e0:	00000206 	br	4ec <udivmodsi4+0x1c>
 4e4:	10001126 	beq	r2,zero,52c <udivmodsi4+0x5c>
 4e8:	28000516 	blt	r5,zero,500 <udivmodsi4+0x30>
 4ec:	294b883a 	add	r5,r5,r5
 4f0:	10bfffc4 	addi	r2,r2,-1
 4f4:	18c7883a 	add	r3,r3,r3
 4f8:	293ffa36 	bltu	r5,r4,4e4 <_gp+0xffff7e30>
 4fc:	18000b26 	beq	r3,zero,52c <udivmodsi4+0x5c>
 500:	0005883a 	mov	r2,zero
 504:	21400236 	bltu	r4,r5,510 <udivmodsi4+0x40>
 508:	2149c83a 	sub	r4,r4,r5
 50c:	10c4b03a 	or	r2,r2,r3
 510:	1806d07a 	srli	r3,r3,1
 514:	280ad07a 	srli	r5,r5,1
 518:	183ffa1e 	bne	r3,zero,504 <_gp+0xffff7e50>
 51c:	3000011e 	bne	r6,zero,524 <udivmodsi4+0x54>
 520:	f800283a 	ret
 524:	2005883a 	mov	r2,r4
 528:	f800283a 	ret
 52c:	0005883a 	mov	r2,zero
 530:	003ffa06 	br	51c <_gp+0xffff7e68>
 534:	00c00044 	movi	r3,1
 538:	003ff106 	br	500 <_gp+0xffff7e4c>

0000053c <__divsi3>:
 53c:	defffe04 	addi	sp,sp,-8
 540:	dfc00115 	stw	ra,4(sp)
 544:	dc000015 	stw	r16,0(sp)
 548:	20000b16 	blt	r4,zero,578 <__divsi3+0x3c>
 54c:	0021883a 	mov	r16,zero
 550:	28000c16 	blt	r5,zero,584 <__divsi3+0x48>
 554:	000d883a 	mov	r6,zero
 558:	00004d00 	call	4d0 <udivmodsi4>
 55c:	0407c83a 	sub	r3,zero,r16
 560:	1884f03a 	xor	r2,r3,r2
 564:	1405883a 	add	r2,r2,r16
 568:	dfc00117 	ldw	ra,4(sp)
 56c:	dc000017 	ldw	r16,0(sp)
 570:	dec00204 	addi	sp,sp,8
 574:	f800283a 	ret
 578:	0109c83a 	sub	r4,zero,r4
 57c:	04000044 	movi	r16,1
 580:	283ff40e 	bge	r5,zero,554 <_gp+0xffff7ea0>
 584:	014bc83a 	sub	r5,zero,r5
 588:	8400005c 	xori	r16,r16,1
 58c:	003ff106 	br	554 <_gp+0xffff7ea0>

00000590 <__modsi3>:
 590:	defffd04 	addi	sp,sp,-12
 594:	dfc00215 	stw	ra,8(sp)
 598:	dc400115 	stw	r17,4(sp)
 59c:	dc000015 	stw	r16,0(sp)
 5a0:	20000c16 	blt	r4,zero,5d4 <__modsi3+0x44>
 5a4:	0023883a 	mov	r17,zero
 5a8:	0021883a 	mov	r16,zero
 5ac:	28000d16 	blt	r5,zero,5e4 <__modsi3+0x54>
 5b0:	01800044 	movi	r6,1
 5b4:	00004d00 	call	4d0 <udivmodsi4>
 5b8:	1404f03a 	xor	r2,r2,r16
 5bc:	8885883a 	add	r2,r17,r2
 5c0:	dfc00217 	ldw	ra,8(sp)
 5c4:	dc400117 	ldw	r17,4(sp)
 5c8:	dc000017 	ldw	r16,0(sp)
 5cc:	dec00304 	addi	sp,sp,12
 5d0:	f800283a 	ret
 5d4:	0109c83a 	sub	r4,zero,r4
 5d8:	04400044 	movi	r17,1
 5dc:	043fffc4 	movi	r16,-1
 5e0:	283ff30e 	bge	r5,zero,5b0 <_gp+0xffff7efc>
 5e4:	014bc83a 	sub	r5,zero,r5
 5e8:	003ff106 	br	5b0 <_gp+0xffff7efc>

000005ec <__udivsi3>:
 5ec:	000d883a 	mov	r6,zero
 5f0:	00004d01 	jmpi	4d0 <udivmodsi4>

000005f4 <__umodsi3>:
 5f4:	01800044 	movi	r6,1
 5f8:	00004d01 	jmpi	4d0 <udivmodsi4>

000005fc <__mulsi3>:
 5fc:	0005883a 	mov	r2,zero
 600:	20000726 	beq	r4,zero,620 <__mulsi3+0x24>
 604:	20c0004c 	andi	r3,r4,1
 608:	2008d07a 	srli	r4,r4,1
 60c:	18000126 	beq	r3,zero,614 <__mulsi3+0x18>
 610:	1145883a 	add	r2,r2,r5
 614:	294b883a 	add	r5,r5,r5
 618:	203ffa1e 	bne	r4,zero,604 <_gp+0xffff7f50>
 61c:	f800283a 	ret
 620:	f800283a 	ret
