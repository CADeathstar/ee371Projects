
space_invaders.elf:     file format elf32-littlenios2
space_invaders.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002308 memsz 0x00002308 flags r-x
    LOAD off    0x00003328 vaddr 0x00002328 paddr 0x00002444 align 2**12
         filesz 0x0000011c memsz 0x0000011c flags rw-
    LOAD off    0x00003560 vaddr 0x00002560 paddr 0x00002560 align 2**12
         filesz 0x00000000 memsz 0x00000838 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00003444  2**0
                  CONTENTS
  2 .text         00002208  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  00002228  00002228  00003228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000011c  00002328  00002444  00003328  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000838  00002560  00002560  00003560  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00002d98  00002d98  00003444  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004a8  00000000  00000000  00003468  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008459  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d26  00000000  00000000  0000bd69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002bac  00000000  00000000  0000ea8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a9c  00000000  00000000  0001163c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000185a  00000000  00000000  000120d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000026ff  00000000  00000000  00013932  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00016034  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000480  00000000  00000000  00016048  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00017eb0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00017eb3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017eb6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00017eb7  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00017eb8  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00017ec1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00017eca  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00017ed3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00017eda  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00017f13  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009c22b  00000000  00000000  0001b586  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00002228 l    d  .rodata	00000000 .rodata
00002328 l    d  .rwdata	00000000 .rwdata
00002560 l    d  .bss	00000000 .bss
00002d98 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../space_invaders_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ProjectileNode.c
00000000 l    df *ABS*	00000000 data_structures_constants.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 gamelogic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000110c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00002580 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000016e4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002328 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002438 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
000010e8 g     F .text	00000024 sram_free
00001558 g     F .text	00000018 putchar
00000c0c g     F .text	00000114 checkCollideAliens
00002094 g     F .text	0000002c alt_main
00001570 g     F .text	00000080 _puts_r
00002444 g       *ABS*	00000000 __flash_rwdata_start
00002d98 g     O *ABS*	00000000 __alt_heap_start
00000f10 g     F .text	00000098 getProjectile
00001504 g     F .text	0000004c printf
00002574 g     O .bss	00000004 startTimer
00002428 g     O .rwdata	00000004 gunnerLeftToggle
00000098 g     F .text	00000168 updateProjectileNodes
0000243c g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002588 g     O .bss	00000004 errno
00000e84 g     F .text	00000048 getAlien
00002590 g     O .bss	00000004 alt_argv
0000a408 g       *ABS*	00000000 _gp
0000256c g     O .bss	00000004 alienShift
00002424 g     O .rwdata	00000004 gunnerRightToggle
00000fa8 g     F .text	00000090 setProjectile
00001550 g     F .text	00000008 _putchar_r
00000474 g     F .text	00000034 getAlienApperence
0000090c g     F .text	00000068 moveGunnerLeft
000015f0 g     F .text	00000014 puts
00002420 g     O .rwdata	00000004 gunnerShootToggle
000003d8 g     F .text	0000009c initRandomAliens
00001260 g     F .text	00000014 malloc
000014c8 g     F .text	0000003c _printf_r
00001228 g     F .text	00000008 .hidden __udivsi3
00000974 g     F .text	0000006c moveGunnerRight
00001678 g     F .text	00000050 _sbrk_r
00000388 g     F .text	00000028 createProjectile
00002570 g     O .bss	00000004 pSramAliens
00000294 g     F .text	00000068 updateProjectileBuffer
00000b78 g     F .text	00000094 checkGunnerWin
00002408 g     O .rwdata	00000004 gunner
00000200 g     F .text	00000094 initProjectileBuffer
00002430 g     O .rwdata	00000004 _global_impure_ptr
00002d98 g       *ABS*	00000000 __bss_end
000003b0 g     F .text	00000028 newAlien
0000241c g     O .rwdata	00000004 alienShootToggle
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00002218 g     F .text	00000004 alt_dcache_flush_all
00002444 g       *ABS*	00000000 __ram_rwdata_end
00002154 g     F .text	0000006c write
00001de0 g     F .text	00000058 _putc_r
00002328 g       *ABS*	00000000 __ram_rodata_end
00000d20 g     F .text	00000030 checkCollideGunner
00002568 g     O .bss	00000004 gameOver
00001230 g     F .text	00000008 .hidden __umodsi3
00000770 g     F .text	000000d0 printGunnerSlice
000006c4 g     F .text	000000ac printVoid
00002410 g     O .rwdata	00000004 alien1
00002d98 g     O *ABS*	00000004 end
00000ecc g     F .text	00000044 setAlien
00002564 g     O .bss	00000004 head
00004000 g       *ABS*	00000000 __alt_stack_pointer
000021e4 g     F .text	00000034 altera_avalon_jtag_uart_write
00001750 g     F .text	0000056c ___vfprintf_internal_r
00001288 g     F .text	000000e4 _free_r
00000020 g     F .text	0000003c _start
00001618 g     F .text	00000060 rand
000021e0 g     F .text	00000004 alt_sys_init
00000640 g     F .text	00000084 printAliens
00001238 g     F .text	00000028 .hidden __mulsi3
00002328 g       *ABS*	00000000 __ram_rwdata_start
00002228 g       *ABS*	00000000 __ram_rodata_start
00002598 g     O .bss	00000800 sram
00002d98 g       *ABS*	00000000 __alt_stack_base
00002108 g     F .text	0000004c sbrk
00000588 g     F .text	000000b8 printSlice
00001ce0 g     F .text	000000ac __sfvwrite_small_dev
00002560 g       *ABS*	00000000 __bss_start
00000d50 g     F .text	00000134 main
0000258c g     O .bss	00000004 alt_envp
00001604 g     F .text	00000014 srand
00004000 g       *ABS*	00000000 __alt_heap_limit
0000136c g     F .text	0000015c _malloc_r
00002440 g     O .rwdata	00000004 alt_errno
0000105c g     F .text	0000008c sram_malloc
00001d8c g     F .text	00000054 putc
00001178 g     F .text	00000054 .hidden __divsi3
00002228 g       *ABS*	00000000 __flash_rodata_start
00000908 g     F .text	00000004 initializeGame
000021c0 g     F .text	00000020 alt_irq_init
00001038 g     F .text	00000024 resetSRAM
00001e38 g     F .text	00000058 _write_r
000009e0 g     F .text	000000a0 shootGunner
00002434 g     O .rwdata	00000004 _impure_ptr
00002594 g     O .bss	00000004 alt_argc
000002fc g     F .text	0000006c addProjectileNode
00002414 g     O .rwdata	00000004 alien0
00000368 g     F .text	00000020 listLength
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000005c g     F .text	0000003c removeProjectileNode
00002444 g       *ABS*	00000000 _edata
00002d98 g       *ABS*	00000000 _end
00000840 g     F .text	0000004c printGunner
00000020 g       *ABS*	00000000 __ram_exceptions_end
00002220 g     F .text	00000008 altera_nios2_qsys_irq_init
000011cc g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000242c g     O .rwdata	00000004 gunnerX
0000000c g       .entry	00000000 _exit
00001e90 g     F .text	0000010c .hidden __muldi3
000016c8 g     F .text	0000001c strlen
000004a8 g     F .text	000000e0 printAlienSlice
000020c0 g     F .text	00000048 alt_putchar
00002578 g     O .bss	00000004 __malloc_sbrk_start
0000221c g     F .text	00000004 alt_icache_flush_all
00000a80 g     F .text	000000f8 shootAliens
0000257c g     O .bss	00000004 __malloc_free_list
00001cbc g     F .text	00000024 __vfprintf_internal
00002418 g     O .rwdata	00000004 empty_space
00001f9c g     F .text	000000f8 alt_load
0000240c g     O .rwdata	00000004 alien2
0000088c g     F .text	0000007c updateDisplay
00001274 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a90214 	ori	gp,gp,41992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10895814 	ori	r2,r2,9568

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cb6614 	ori	r3,r3,11672

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff5c3c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0001f9c0 	call	1f9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00020940 	call	2094 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff5c50>

0000005c <removeProjectileNode>:

struct ProjectileNode *head = NULL;
struct ProjectileNode *end = NULL;

void removeProjectileNode(struct ProjectileNode* proj) {
    if(head == proj) {
      5c:	d0e05717 	ldw	r3,-32420(gp)
      60:	18800217 	ldw	r2,8(r3)
      64:	1900051e 	bne	r3,r4,7c <removeProjectileNode+0x20>
        if(proj == end) end = NULL;
      68:	d1226417 	ldw	r4,-30320(gp)
      6c:	1900011e 	bne	r3,r4,74 <removeProjectileNode+0x18>
      70:	d0226415 	stw	zero,-30320(gp)
        head = proj->next;
      74:	d0a05715 	stw	r2,-32420(gp)
      78:	f800283a 	ret
    } else {
        struct ProjectileNode* current = head;
        while(current->next != proj) { }
      7c:	113fff1e 	bne	r2,r4,7c <_gp+0xffff5c74>
        current->next = proj->next;
      80:	11000217 	ldw	r4,8(r2)
      84:	19000215 	stw	r4,8(r3)
        if(proj == end) end = current->next;
      88:	d0e26417 	ldw	r3,-30320(gp)
      8c:	10c0011e 	bne	r2,r3,94 <removeProjectileNode+0x38>
      90:	d1226415 	stw	r4,-30320(gp)
      94:	f800283a 	ret

00000098 <updateProjectileNodes>:
    }
	//printf("removed success x:%i y:%i", proj->bullet.xVal, proj->bullet.yVal);
    //free(proj);
}

void updateProjectileNodes() {
      98:	defffa04 	addi	sp,sp,-24
      9c:	dc000015 	stw	r16,0(sp)
    //if head is null, return
    if(head == NULL) return;
      a0:	d4205717 	ldw	r16,-32420(gp)
    }
	//printf("removed success x:%i y:%i", proj->bullet.xVal, proj->bullet.yVal);
    //free(proj);
}

void updateProjectileNodes() {
      a4:	dfc00515 	stw	ra,20(sp)
      a8:	dd000415 	stw	r20,16(sp)
      ac:	dcc00315 	stw	r19,12(sp)
      b0:	dc800215 	stw	r18,8(sp)
      b4:	dc400115 	stw	r17,4(sp)
    //if head is null, return
    if(head == NULL) return;
      b8:	80004926 	beq	r16,zero,1e0 <updateProjectileNodes+0x148>
			printf("Check Gunner Collison: %i", (int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            checkCollideGunner((int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
      bc:	04c00034 	movhi	r19,0
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
      c0:	04400044 	movi	r17,1

        if(tempCurrent->bullet.yVal < 0) {
			printf("Check Gunner Collison: %i", (int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            checkCollideGunner((int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
      c4:	048000c4 	movi	r18,3
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
      c8:	9cc95c04 	addi	r19,r19,9584
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
      cc:	80800083 	ldbu	r2,2(r16)
      d0:	81000143 	ldbu	r4,5(r16)
      d4:	10c03fcc 	andi	r3,r2,255
      d8:	21803fcc 	andi	r6,r4,255
      dc:	18c0201c 	xori	r3,r3,128
      e0:	3180201c 	xori	r6,r6,128
      e4:	18ffe004 	addi	r3,r3,-128
      e8:	31bfe004 	addi	r6,r6,-128
      ec:	180b883a 	mov	r5,r3
      f0:	1800010e 	bge	r3,zero,f8 <updateProjectileNodes+0x60>
      f4:	00c7c83a 	sub	r3,zero,r3
      f8:	30c0030e 	bge	r6,r3,108 <updateProjectileNodes+0x70>
            current->bullet.timeTick++;
      fc:	21000044 	addi	r4,r4,1
     100:	81000145 	stb	r4,5(r16)
     104:	00000a06 	br	130 <updateProjectileNodes+0x98>
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
     108:	80c00107 	ldb	r3,4(r16)
    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
     10c:	80000145 	stb	zero,5(r16)
            if(current->bullet.type == 1) { //Straight Line
     110:	1c40071e 	bne	r3,r17,130 <updateProjectileNodes+0x98>
     114:	81000043 	ldbu	r4,1(r16)
                current->bullet.yVal -= (current->bullet.direction < 0);
     118:	10803fcc 	andi	r2,r2,255
     11c:	1004d1fa 	srli	r2,r2,7
                current->bullet.yVal += (current->bullet.direction > 0);
     120:	0146803a 	cmplt	r3,zero,r5
     124:	1907883a 	add	r3,r3,r4
     128:	1885c83a 	sub	r2,r3,r2
     12c:	80800045 	stb	r2,1(r16)
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;

        if(tempCurrent->bullet.yVal < 0) {
     130:	80800047 	ldb	r2,1(r16)
            }
        }
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;
     134:	85000217 	ldw	r20,8(r16)

        if(tempCurrent->bullet.yVal < 0) {
     138:	1000110e 	bge	r2,zero,180 <updateProjectileNodes+0xe8>
			printf("Check Gunner Collison: %i", (int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
     13c:	81000007 	ldb	r4,0(r16)
     140:	01400a04 	movi	r5,40
     144:	00011cc0 	call	11cc <__modsi3>
     148:	11403fcc 	andi	r5,r2,255
     14c:	01000034 	movhi	r4,0
     150:	2940201c 	xori	r5,r5,128
     154:	21088a04 	addi	r4,r4,8744
     158:	297fe004 	addi	r5,r5,-128
     15c:	00015040 	call	1504 <printf>
            checkCollideGunner((int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
     160:	81000007 	ldb	r4,0(r16)
     164:	01400a04 	movi	r5,40
     168:	00011cc0 	call	11cc <__modsi3>
     16c:	11003fcc 	andi	r4,r2,255
     170:	2100201c 	xori	r4,r4,128
     174:	213fe004 	addi	r4,r4,-128
     178:	0000d200 	call	d20 <checkCollideGunner>
     17c:	00000a06 	br	1a8 <updateProjectileNodes+0x110>
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
     180:	90800b0e 	bge	r18,r2,1b0 <updateProjectileNodes+0x118>
     184:	01400a0e 	bge	zero,r5,1b0 <updateProjectileNodes+0x118>
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
     188:	81000007 	ldb	r4,0(r16)
     18c:	01400144 	movi	r5,5
     190:	00011780 	call	1178 <__divsi3>
            checkCollideAliens(pSramAliens, alienX);
     194:	11403fcc 	andi	r5,r2,255
     198:	99000017 	ldw	r4,0(r19)
     19c:	2940201c 	xori	r5,r5,128
     1a0:	297fe004 	addi	r5,r5,-128
     1a4:	0000c0c0 	call	c0c <checkCollideAliens>
            removeProjectileNode(tempCurrent);
     1a8:	8009883a 	mov	r4,r16
     1ac:	000005c0 	call	5c <removeProjectileNode>
void updateProjectileNodes() {
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
     1b0:	a0000226 	beq	r20,zero,1bc <updateProjectileNodes+0x124>
     1b4:	a021883a 	mov	r16,r20
     1b8:	003fc406 	br	cc <_gp+0xffff5cc4>
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     1bc:	01000284 	movi	r4,10
}
     1c0:	dfc00517 	ldw	ra,20(sp)
     1c4:	dd000417 	ldw	r20,16(sp)
     1c8:	dcc00317 	ldw	r19,12(sp)
     1cc:	dc800217 	ldw	r18,8(sp)
     1d0:	dc400117 	ldw	r17,4(sp)
     1d4:	dc000017 	ldw	r16,0(sp)
     1d8:	dec00604 	addi	sp,sp,24
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     1dc:	00015581 	jmpi	1558 <putchar>
}
     1e0:	dfc00517 	ldw	ra,20(sp)
     1e4:	dd000417 	ldw	r20,16(sp)
     1e8:	dcc00317 	ldw	r19,12(sp)
     1ec:	dc800217 	ldw	r18,8(sp)
     1f0:	dc400117 	ldw	r17,4(sp)
     1f4:	dc000017 	ldw	r16,0(sp)
     1f8:	dec00604 	addi	sp,sp,24
     1fc:	f800283a 	ret

00000200 <initProjectileBuffer>:


void initProjectileBuffer(int pSramBulletBuffer) {
     200:	defff704 	addi	sp,sp,-36
     204:	dd000715 	stw	r20,28(sp)
     208:	dcc00615 	stw	r19,24(sp)
     20c:	dc800515 	stw	r18,20(sp)
     210:	dc400415 	stw	r17,16(sp)
     214:	dfc00815 	stw	ra,32(sp)
     218:	dc000315 	stw	r16,12(sp)
     21c:	2025883a 	mov	r18,r4
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     220:	0023883a 	mov	r17,zero
        for(y = 0; y < VOID_HEIGHT; y++) {
     224:	04c000c4 	movi	r19,3
}


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     228:	05000a04 	movi	r20,40
    }
    printf("\n");
}


void initProjectileBuffer(int pSramBulletBuffer) {
     22c:	0021883a 	mov	r16,zero
     230:	d8000205 	stb	zero,8(sp)
     234:	d8000245 	stb	zero,9(sp)
     238:	d8000105 	stb	zero,4(sp)
     23c:	d8000145 	stb	zero,5(sp)
     240:	d8000185 	stb	zero,6(sp)
     244:	d80001c5 	stb	zero,7(sp)
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
     248:	d880020b 	ldhu	r2,8(sp)
     24c:	d9c00117 	ldw	r7,4(sp)
     250:	800d883a 	mov	r6,r16
     254:	d880000d 	sth	r2,0(sp)
     258:	9009883a 	mov	r4,r18
     25c:	880b883a 	mov	r5,r17


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
     260:	84000044 	addi	r16,r16,1
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
     264:	0000fa80 	call	fa8 <setProjectile>


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
     268:	84fff11e 	bne	r16,r19,230 <_gp+0xffff5e28>
}


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     26c:	8c400044 	addi	r17,r17,1
     270:	8d3fee1e 	bne	r17,r20,22c <_gp+0xffff5e24>
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}
     274:	dfc00817 	ldw	ra,32(sp)
     278:	dd000717 	ldw	r20,28(sp)
     27c:	dcc00617 	ldw	r19,24(sp)
     280:	dc800517 	ldw	r18,20(sp)
     284:	dc400417 	ldw	r17,16(sp)
     288:	dc000317 	ldw	r16,12(sp)
     28c:	dec00904 	addi	sp,sp,36
     290:	f800283a 	ret

00000294 <updateProjectileBuffer>:

void updateProjectileBuffer(int pSramBulletBuffer) {
    if(head == NULL) return;
     294:	d0a05717 	ldw	r2,-32420(gp)
     298:	10001726 	beq	r2,zero,2f8 <updateProjectileBuffer+0x64>
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}

void updateProjectileBuffer(int pSramBulletBuffer) {
     29c:	defffa04 	addi	sp,sp,-24
     2a0:	dc400415 	stw	r17,16(sp)
     2a4:	dc000315 	stw	r16,12(sp)
     2a8:	dfc00515 	stw	ra,20(sp)
     2ac:	2023883a 	mov	r17,r4
    if(head == NULL) return;
	initProjectileBuffer(pSramBulletBuffer);
     2b0:	00002000 	call	200 <initProjectileBuffer>
    struct ProjectileNode* current = head;
     2b4:	d4205717 	ldw	r16,-32420(gp)
    while(current != NULL) {
     2b8:	80000b26 	beq	r16,zero,2e8 <updateProjectileBuffer+0x54>
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     2bc:	8080010b 	ldhu	r2,4(r16)
     2c0:	81c00017 	ldw	r7,0(r16)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     2c4:	81400007 	ldb	r5,0(r16)
     2c8:	81800047 	ldb	r6,1(r16)
     2cc:	8809883a 	mov	r4,r17
     2d0:	d880000d 	sth	r2,0(sp)
	initProjectileBuffer(pSramBulletBuffer);
    struct ProjectileNode* current = head;
    while(current != NULL) {
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     2d4:	d9c00115 	stw	r7,4(sp)
     2d8:	d880020d 	sth	r2,8(sp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     2dc:	0000fa80 	call	fa8 <setProjectile>
        current = current->next;
     2e0:	84000217 	ldw	r16,8(r16)
     2e4:	003ff406 	br	2b8 <_gp+0xffff5eb0>
    }
}
     2e8:	dfc00517 	ldw	ra,20(sp)
     2ec:	dc400417 	ldw	r17,16(sp)
     2f0:	dc000317 	ldw	r16,12(sp)
     2f4:	dec00604 	addi	sp,sp,24
     2f8:	f800283a 	ret

000002fc <addProjectileNode>:

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     2fc:	d0a05717 	ldw	r2,-32420(gp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
     300:	defffd04 	addi	sp,sp,-12
     304:	d9000015 	stw	r4,0(sp)
     308:	dfc00215 	stw	ra,8(sp)
     30c:	d9400115 	stw	r5,4(sp)
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     310:	01000304 	movi	r4,12
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     314:	1000081e 	bne	r2,zero,338 <addProjectileNode+0x3c>
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     318:	00012600 	call	1260 <malloc>
        head->bullet = proj;
     31c:	d8c00017 	ldw	r3,0(sp)
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     320:	d0a05715 	stw	r2,-32420(gp)
        head->bullet = proj;
        head->next = NULL;
     324:	10000215 	stw	zero,8(r2)
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        head->bullet = proj;
     328:	10c00015 	stw	r3,0(r2)
     32c:	d8c0010b 	ldhu	r3,4(sp)
     330:	10c0010d 	sth	r3,4(r2)
     334:	00000806 	br	358 <addProjectileNode+0x5c>
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     338:	00012600 	call	1260 <malloc>
        nextProj->bullet = proj;
     33c:	d8c00017 	ldw	r3,0(sp)
        nextProj->next = NULL;
     340:	10000215 	stw	zero,8(r2)
        head->bullet = proj;
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        nextProj->bullet = proj;
     344:	10c00015 	stw	r3,0(r2)
     348:	d8c0010b 	ldhu	r3,4(sp)
     34c:	10c0010d 	sth	r3,4(r2)
        nextProj->next = NULL;
		
        end->next = nextProj;
     350:	d0e26417 	ldw	r3,-30320(gp)
     354:	18800215 	stw	r2,8(r3)
        end = nextProj;
     358:	d0a26415 	stw	r2,-30320(gp)
    }
}
     35c:	dfc00217 	ldw	ra,8(sp)
     360:	dec00304 	addi	sp,sp,12
     364:	f800283a 	ret

00000368 <listLength>:

int listLength() {
	if(head == NULL) return 0;
     368:	d0e05717 	ldw	r3,-32420(gp)
     36c:	0005883a 	mov	r2,zero
     370:	18000426 	beq	r3,zero,384 <listLength+0x1c>
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
     374:	18c00217 	ldw	r3,8(r3)
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
     378:	10800044 	addi	r2,r2,1
int listLength() {
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
     37c:	183ffd1e 	bne	r3,zero,374 <_gp+0xffff5f6c>
     380:	f800283a 	ret
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
    }
	return size;
}
     384:	f800283a 	ret

00000388 <createProjectile>:
    proj.yVal = 0;
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
     388:	29403fcc 	andi	r5,r5,255
     38c:	280a943a 	slli	r5,r5,16
     390:	300c963a 	slli	r6,r6,24
     394:	21003fcc 	andi	r4,r4,255
     398:	2144b03a 	or	r2,r4,r5
}
     39c:	1184b03a 	or	r2,r2,r6
     3a0:	38c03fcc 	andi	r3,r7,255
		current = current->next;
    }
	return size;
}

struct Projectile createProjectile(char x, char dir, char symb, char t) {
     3a4:	defffe04 	addi	sp,sp,-8
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
}
     3a8:	dec00204 	addi	sp,sp,8
     3ac:	f800283a 	ret

000003b0 <newAlien>:
struct Alien newAlien(char alive, char type, char id) {
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
     3b0:	29403fcc 	andi	r5,r5,255
     3b4:	31803fcc 	andi	r6,r6,255
     3b8:	280a923a 	slli	r5,r5,8
     3bc:	3004943a 	slli	r2,r6,16
     3c0:	21003fcc 	andi	r4,r4,255
     3c4:	214ab03a 	or	r5,r4,r5
};
     3c8:	2884b03a 	or	r2,r5,r2
#include "data_structures_constants.h"
#include "sram.h"
#include "display.h"


struct Alien newAlien(char alive, char type, char id) {
     3cc:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
};
     3d0:	dec00104 	addi	sp,sp,4
     3d4:	f800283a 	ret

000003d8 <initRandomAliens>:

void initRandomAliens(int pSramAliens) {
     3d8:	defff804 	addi	sp,sp,-32
     3dc:	dd400615 	stw	r21,24(sp)
     3e0:	dd000515 	stw	r20,20(sp)
     3e4:	dcc00415 	stw	r19,16(sp)
     3e8:	dc800315 	stw	r18,12(sp)
     3ec:	dc400215 	stw	r17,8(sp)
     3f0:	dfc00715 	stw	ra,28(sp)
     3f4:	dc000115 	stw	r16,4(sp)
     3f8:	2025883a 	mov	r18,r4
    int x, y;
    for(x = 0; x < 3; x++) {
     3fc:	0023883a 	mov	r17,zero
     400:	04c00044 	movi	r19,1
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     404:	050000c4 	movi	r20,3
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     408:	05400204 	movi	r21,8
    a.type = type;
    a.rowId = id;
    return a;
};

void initRandomAliens(int pSramAliens) {
     40c:	0021883a 	mov	r16,zero
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     410:	00016180 	call	1618 <rand>
     414:	1009883a 	mov	r4,r2
     418:	014000c4 	movi	r5,3
     41c:	dcc00005 	stb	r19,0(sp)
     420:	00011cc0 	call	11cc <__modsi3>
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     424:	d8800045 	stb	r2,1(sp)
     428:	dc000085 	stb	r16,2(sp)
     42c:	d9c00017 	ldw	r7,0(sp)
     430:	800d883a 	mov	r6,r16
     434:	9009883a 	mov	r4,r18
     438:	880b883a 	mov	r5,r17
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     43c:	84000044 	addi	r16,r16,1
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     440:	0000ecc0 	call	ecc <setAlien>
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     444:	857ff21e 	bne	r16,r21,410 <_gp+0xffff6008>
    return a;
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
     448:	8c400044 	addi	r17,r17,1
     44c:	8d3fef1e 	bne	r17,r20,40c <_gp+0xffff6004>
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
        }
    }
}
     450:	dfc00717 	ldw	ra,28(sp)
     454:	dd400617 	ldw	r21,24(sp)
     458:	dd000517 	ldw	r20,20(sp)
     45c:	dcc00417 	ldw	r19,16(sp)
     460:	dc800317 	ldw	r18,12(sp)
     464:	dc400217 	ldw	r17,8(sp)
     468:	dc000117 	ldw	r16,4(sp)
     46c:	dec00804 	addi	sp,sp,32
     470:	f800283a 	ret

00000474 <getAlienApperence>:

const char* getAlienApperence(int type) {
    if(type == 0) {
     474:	2000031e 	bne	r4,zero,484 <getAlienApperence+0x10>
        return alien0;
     478:	00800034 	movhi	r2,0
     47c:	10890504 	addi	r2,r2,9236
     480:	00000706 	br	4a0 <getAlienApperence+0x2c>
    } else if(type == 1) {
     484:	00800044 	movi	r2,1
     488:	2080031e 	bne	r4,r2,498 <getAlienApperence+0x24>
        return alien1;
     48c:	00800034 	movhi	r2,0
     490:	10890404 	addi	r2,r2,9232
     494:	00000206 	br	4a0 <getAlienApperence+0x2c>
    } else {
        return alien2;
     498:	00800034 	movhi	r2,0
     49c:	10890304 	addi	r2,r2,9228
     4a0:	10800017 	ldw	r2,0(r2)
    }
}
     4a4:	f800283a 	ret

000004a8 <printAlienSlice>:

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
     4a8:	defff904 	addi	sp,sp,-28
     4ac:	dc000115 	stw	r16,4(sp)
     4b0:	dfc00615 	stw	ra,24(sp)
     4b4:	dd000515 	stw	r20,20(sp)
     4b8:	dcc00415 	stw	r19,16(sp)
     4bc:	dc800315 	stw	r18,12(sp)
     4c0:	dc400215 	stw	r17,8(sp)
     4c4:	3821883a 	mov	r16,r7
    struct Alien alien = getAlien(pSramAliens, x, y);
     4c8:	0000e840 	call	e84 <getAlien>
     4cc:	1006d23a 	srli	r3,r2,8
     4d0:	d8800005 	stb	r2,0(sp)
     4d4:	d8c00045 	stb	r3,1(sp)
     4d8:	1006d43a 	srli	r3,r2,16
    if(alien.alive == 1) {
     4dc:	10803fcc 	andi	r2,r2,255
     4e0:	1080201c 	xori	r2,r2,128
        return alien2;
    }
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
     4e4:	d8c00085 	stb	r3,2(sp)
    if(alien.alive == 1) {
     4e8:	10bfe004 	addi	r2,r2,-128
     4ec:	00c00044 	movi	r3,1
     4f0:	10c0181e 	bne	r2,r3,554 <printAlienSlice+0xac>
        char* alienApperence = getAlienApperence(alien.type);
     4f4:	d9000047 	ldb	r4,1(sp)
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     4f8:	05000c04 	movi	r20,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     4fc:	04800144 	movi	r18,5
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     500:	00004740 	call	474 <getAlienApperence>
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     504:	d9000717 	ldw	r4,28(sp)
     508:	014003c4 	movi	r5,15
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     50c:	1027883a 	mov	r19,r2
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     510:	00012380 	call	1238 <__mulsi3>
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     514:	8009883a 	mov	r4,r16
     518:	01400144 	movi	r5,5

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     51c:	1023883a 	mov	r17,r2
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     520:	00012380 	call	1238 <__mulsi3>
     524:	88a3883a 	add	r17,r17,r2
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     528:	0021883a 	mov	r16,zero
     52c:	8447883a 	add	r3,r16,r17
     530:	98c7883a 	add	r3,r19,r3
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     534:	19000007 	ldb	r4,0(r3)
     538:	2500021e 	bne	r4,r20,544 <printAlienSlice+0x9c>
                putchar(alien.rowId + 48);
     53c:	d9000087 	ldb	r4,2(sp)
     540:	21000c04 	addi	r4,r4,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     544:	84000044 	addi	r16,r16,1
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
                putchar(alien.rowId + 48);
            } else {
                putchar(alienApperence[index]);
     548:	00015580 	call	1558 <putchar>
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     54c:	84bff71e 	bne	r16,r18,52c <_gp+0xffff6124>
     550:	00000506 	br	568 <printAlienSlice+0xc0>
     554:	04000144 	movi	r16,5
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
			//alt_putchar('-');
			alt_putchar(' ');
     558:	01000804 	movi	r4,32
     55c:	843fffc4 	addi	r16,r16,-1
     560:	00020c00 	call	20c0 <alt_putchar>
                putchar(alienApperence[index]);
            }
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
     564:	803ffc1e 	bne	r16,zero,558 <_gp+0xffff6150>
			//alt_putchar('-');
			alt_putchar(' ');
		}
	}
}
     568:	dfc00617 	ldw	ra,24(sp)
     56c:	dd000517 	ldw	r20,20(sp)
     570:	dcc00417 	ldw	r19,16(sp)
     574:	dc800317 	ldw	r18,12(sp)
     578:	dc400217 	ldw	r17,8(sp)
     57c:	dc000117 	ldw	r16,4(sp)
     580:	dec00704 	addi	sp,sp,28
     584:	f800283a 	ret

00000588 <printSlice>:

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     588:	defff604 	addi	sp,sp,-40
     58c:	dc400215 	stw	r17,8(sp)
     590:	dc400a17 	ldw	r17,40(sp)
     594:	dd800715 	stw	r22,28(sp)
     598:	dc000115 	stw	r16,4(sp)
     59c:	008003c4 	movi	r2,15
     5a0:	040001c4 	movi	r16,7
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     5a4:	05a00034 	movhi	r22,32768
			alt_putchar(' ');
		}
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     5a8:	ddc00815 	stw	r23,32(sp)
     5ac:	dd400615 	stw	r21,24(sp)
     5b0:	dd000515 	stw	r20,20(sp)
     5b4:	dcc00415 	stw	r19,16(sp)
     5b8:	dc800315 	stw	r18,12(sp)
     5bc:	8461c83a 	sub	r16,r16,r17
     5c0:	dfc00915 	stw	ra,36(sp)
     5c4:	2029883a 	mov	r20,r4
     5c8:	2827883a 	mov	r19,r5
     5cc:	3025883a 	mov	r18,r6
     5d0:	382b883a 	mov	r21,r7
     5d4:	1463c83a 	sub	r17,r2,r17
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     5d8:	b58001c4 	addi	r22,r22,7
     5dc:	05fffe04 	movi	r23,-8
     5e0:	858c703a 	and	r6,r16,r22
     5e4:	3000030e 	bge	r6,zero,5f4 <printSlice+0x6c>
     5e8:	31bfffc4 	addi	r6,r6,-1
     5ec:	35ccb03a 	or	r6,r6,r23
     5f0:	31800044 	addi	r6,r6,1
     5f4:	dd400015 	stw	r21,0(sp)
     5f8:	a009883a 	mov	r4,r20
     5fc:	980b883a 	mov	r5,r19
     600:	900f883a 	mov	r7,r18
     604:	84000044 	addi	r16,r16,1
     608:	00004a80 	call	4a8 <printAlienSlice>
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
     60c:	847ff41e 	bne	r16,r17,5e0 <_gp+0xffff61d8>
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     610:	01000284 	movi	r4,10
}
     614:	dfc00917 	ldw	ra,36(sp)
     618:	ddc00817 	ldw	r23,32(sp)
     61c:	dd800717 	ldw	r22,28(sp)
     620:	dd400617 	ldw	r21,24(sp)
     624:	dd000517 	ldw	r20,20(sp)
     628:	dcc00417 	ldw	r19,16(sp)
     62c:	dc800317 	ldw	r18,12(sp)
     630:	dc400217 	ldw	r17,8(sp)
     634:	dc000117 	ldw	r16,4(sp)
     638:	dec00a04 	addi	sp,sp,40
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     63c:	00015581 	jmpi	1558 <putchar>

00000640 <printAliens>:
}

void printAliens(int pSramAliens, int step, int shift) {
     640:	defff804 	addi	sp,sp,-32
     644:	dd400615 	stw	r21,24(sp)
     648:	dd000515 	stw	r20,20(sp)
     64c:	dcc00415 	stw	r19,16(sp)
     650:	dc800315 	stw	r18,12(sp)
     654:	dc400215 	stw	r17,8(sp)
     658:	dfc00715 	stw	ra,28(sp)
     65c:	dc000115 	stw	r16,4(sp)
     660:	2025883a 	mov	r18,r4
     664:	2827883a 	mov	r19,r5
     668:	3029883a 	mov	r20,r6
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     66c:	0023883a 	mov	r17,zero
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     670:	054000c4 	movi	r21,3
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
     674:	0021883a 	mov	r16,zero
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
     678:	800d883a 	mov	r6,r16
     67c:	dd000015 	stw	r20,0(sp)
     680:	9009883a 	mov	r4,r18
     684:	880b883a 	mov	r5,r17
     688:	980f883a 	mov	r7,r19
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     68c:	84000044 	addi	r16,r16,1
            printSlice(pSramAliens, x, slice, step, shift);
     690:	00005880 	call	588 <printSlice>
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     694:	857ff81e 	bne	r16,r21,678 <_gp+0xffff6270>
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     698:	8c400044 	addi	r17,r17,1
     69c:	8c3ff51e 	bne	r17,r16,674 <_gp+0xffff626c>
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}
     6a0:	dfc00717 	ldw	ra,28(sp)
     6a4:	dd400617 	ldw	r21,24(sp)
     6a8:	dd000517 	ldw	r20,20(sp)
     6ac:	dcc00417 	ldw	r19,16(sp)
     6b0:	dc800317 	ldw	r18,12(sp)
     6b4:	dc400217 	ldw	r17,8(sp)
     6b8:	dc000117 	ldw	r16,4(sp)
     6bc:	dec00804 	addi	sp,sp,32
     6c0:	f800283a 	ret

000006c4 <printVoid>:

void printVoid(int pSramBulletBuffer) {
     6c4:	defff804 	addi	sp,sp,-32
     6c8:	dd000615 	stw	r20,24(sp)
     6cc:	dcc00515 	stw	r19,20(sp)
     6d0:	dc800415 	stw	r18,16(sp)
     6d4:	dc400315 	stw	r17,12(sp)
     6d8:	dfc00715 	stw	ra,28(sp)
     6dc:	dc000215 	stw	r16,8(sp)
     6e0:	2025883a 	mov	r18,r4
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     6e4:	04400084 	movi	r17,2
        }
    }
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
     6e8:	00002940 	call	294 <updateProjectileBuffer>
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     6ec:	04c00a04 	movi	r19,40
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     6f0:	053fffc4 	movi	r20,-1
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}

void printVoid(int pSramBulletBuffer) {
     6f4:	0021883a 	mov	r16,zero
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     6f8:	9009883a 	mov	r4,r18
     6fc:	800b883a 	mov	r5,r16
     700:	880d883a 	mov	r6,r17
     704:	0000f100 	call	f10 <getProjectile>
     708:	1004d63a 	srli	r2,r2,24
			if(empty.type != 0) {
     70c:	18c03fcc 	andi	r3,r3,255
     710:	18c0201c 	xori	r3,r3,128
void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     714:	d88000c5 	stb	r2,3(sp)
			if(empty.type != 0) {
     718:	18ffe004 	addi	r3,r3,-128
     71c:	18000426 	beq	r3,zero,730 <printVoid+0x6c>
				alt_putchar(empty.symbol);
     720:	11003fcc 	andi	r4,r2,255
     724:	2100201c 	xori	r4,r4,128
     728:	213fe004 	addi	r4,r4,-128
     72c:	00000106 	br	734 <printVoid+0x70>
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
     730:	01000804 	movi	r4,32

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     734:	84000044 	addi	r16,r16,1
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
			if(empty.type != 0) {
				alt_putchar(empty.symbol);
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
     738:	00020c00 	call	20c0 <alt_putchar>

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     73c:	84ffee1e 	bne	r16,r19,6f8 <_gp+0xffff62f0>
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
			}
        }
		printf("\n");
     740:	01000284 	movi	r4,10
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     744:	8c7fffc4 	addi	r17,r17,-1
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
			}
        }
		printf("\n");
     748:	00015580 	call	1558 <putchar>
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     74c:	8d3fe91e 	bne	r17,r20,6f4 <_gp+0xffff62ec>
				alt_putchar(' ');
			}
        }
		printf("\n");
    }
}
     750:	dfc00717 	ldw	ra,28(sp)
     754:	dd000617 	ldw	r20,24(sp)
     758:	dcc00517 	ldw	r19,20(sp)
     75c:	dc800417 	ldw	r18,16(sp)
     760:	dc400317 	ldw	r17,12(sp)
     764:	dc000217 	ldw	r16,8(sp)
     768:	dec00804 	addi	sp,sp,32
     76c:	f800283a 	ret

00000770 <printGunnerSlice>:

printGunnerSlice(int gunnerX, int slice) {
     770:	defffa04 	addi	sp,sp,-24
     774:	dc800215 	stw	r18,8(sp)
     778:	2025883a 	mov	r18,r4
     77c:	dc400115 	stw	r17,4(sp)
     780:	dfc00515 	stw	ra,20(sp)
     784:	dd000415 	stw	r20,16(sp)
     788:	dcc00315 	stw	r19,12(sp)
     78c:	dc000015 	stw	r16,0(sp)
    int SCREEN_WIDTH = ALIEN_COLS * ALIEN_WIDTH;
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
     790:	947ff7c4 	addi	r17,r18,-33
        }
		printf("\n");
    }
}

printGunnerSlice(int gunnerX, int slice) {
     794:	2809883a 	mov	r4,r5
     798:	8800010e 	bge	r17,zero,7a0 <printGunnerSlice+0x30>
     79c:	0023883a 	mov	r17,zero
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     7a0:	014001c4 	movi	r5,7
     7a4:	00012380 	call	1238 <__mulsi3>
     7a8:	05000034 	movhi	r20,0
     7ac:	1027883a 	mov	r19,r2
     7b0:	1461c83a 	sub	r16,r2,r17
     7b4:	a5090204 	addi	r20,r20,9224
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
     7b8:	84c00626 	beq	r16,r19,7d4 <printGunnerSlice+0x64>
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     7bc:	a0800017 	ldw	r2,0(r20)
     7c0:	1405883a 	add	r2,r2,r16
     7c4:	110001c7 	ldb	r4,7(r2)
     7c8:	84000044 	addi	r16,r16,1
     7cc:	00015580 	call	1558 <putchar>
     7d0:	003ff906 	br	7b8 <_gp+0xffff63b0>
     7d4:	0029883a 	mov	r20,zero
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     7d8:	9465c83a 	sub	r18,r18,r17
     7dc:	a480040e 	bge	r20,r18,7f0 <printGunnerSlice+0x80>
        //putchar('-');
		putchar(' ');
     7e0:	01000804 	movi	r4,32
     7e4:	00015580 	call	1558 <putchar>
    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     7e8:	a5000044 	addi	r20,r20,1
     7ec:	003ffb06 	br	7dc <_gp+0xffff63d4>
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     7f0:	00c001c4 	movi	r3,7
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7f4:	04800034 	movhi	r18,0
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     7f8:	1c63c83a 	sub	r17,r3,r17
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7fc:	94890204 	addi	r18,r18,9224
     800:	84c5c83a 	sub	r2,r16,r19
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     804:	1440060e 	bge	r2,r17,820 <printGunnerSlice+0xb0>
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     808:	90800017 	ldw	r2,0(r18)
     80c:	1405883a 	add	r2,r2,r16
     810:	11000007 	ldb	r4,0(r2)
     814:	84000044 	addi	r16,r16,1
     818:	00015580 	call	1558 <putchar>
     81c:	003ff806 	br	800 <_gp+0xffff63f8>
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}
     820:	dfc00517 	ldw	ra,20(sp)
     824:	dd000417 	ldw	r20,16(sp)
     828:	dcc00317 	ldw	r19,12(sp)
     82c:	dc800217 	ldw	r18,8(sp)
     830:	dc400117 	ldw	r17,4(sp)
     834:	dc000017 	ldw	r16,0(sp)
     838:	dec00604 	addi	sp,sp,24
     83c:	f800283a 	ret

00000840 <printGunner>:

void printGunner(int gunnerX) {
     840:	defffd04 	addi	sp,sp,-12
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     844:	000b883a 	mov	r5,zero
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}

void printGunner(int gunnerX) {
     848:	dfc00215 	stw	ra,8(sp)
     84c:	dc400115 	stw	r17,4(sp)
     850:	dc000015 	stw	r16,0(sp)
     854:	2023883a 	mov	r17,r4
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     858:	04000284 	movi	r16,10
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     85c:	00007700 	call	770 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     860:	8009883a 	mov	r4,r16
     864:	00015580 	call	1558 <putchar>
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     868:	8809883a 	mov	r4,r17
     86c:	01400044 	movi	r5,1
     870:	00007700 	call	770 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     874:	8009883a 	mov	r4,r16
    }
    //printf("Gunner location: %i\n", gunnerX);
}
     878:	dfc00217 	ldw	ra,8(sp)
     87c:	dc400117 	ldw	r17,4(sp)
     880:	dc000017 	ldw	r16,0(sp)
     884:	dec00304 	addi	sp,sp,12
void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     888:	00015581 	jmpi	1558 <putchar>

0000088c <updateDisplay>:
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     88c:	defffa04 	addi	sp,sp,-24
     890:	dd000415 	stw	r20,16(sp)
     894:	dc800215 	stw	r18,8(sp)
     898:	2029883a 	mov	r20,r4
     89c:	dc800617 	ldw	r18,24(sp)
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     8a0:	01000034 	movhi	r4,0
     8a4:	2108b504 	addi	r4,r4,8916
        printf("\n");
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     8a8:	dfc00515 	stw	ra,20(sp)
     8ac:	dcc00315 	stw	r19,12(sp)
     8b0:	dc400115 	stw	r17,4(sp)
     8b4:	3827883a 	mov	r19,r7
     8b8:	2823883a 	mov	r17,r5
     8bc:	dc000015 	stw	r16,0(sp)
     8c0:	3021883a 	mov	r16,r6
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     8c4:	00015f00 	call	15f0 <puts>
    printAliens(pSramAliens, step, shift);
     8c8:	980b883a 	mov	r5,r19
     8cc:	900d883a 	mov	r6,r18
     8d0:	a009883a 	mov	r4,r20
     8d4:	00006400 	call	640 <printAliens>
    printVoid(pSramBulletBuffer);
     8d8:	8809883a 	mov	r4,r17
     8dc:	00006c40 	call	6c4 <printVoid>
    printGunner(gunnerX);
     8e0:	8009883a 	mov	r4,r16
     8e4:	00008400 	call	840 <printGunner>
	checkGunnerWin();
	//printf("List Length: %i\n", listLength());
}
     8e8:	dfc00517 	ldw	ra,20(sp)
     8ec:	dd000417 	ldw	r20,16(sp)
     8f0:	dcc00317 	ldw	r19,12(sp)
     8f4:	dc800217 	ldw	r18,8(sp)
     8f8:	dc400117 	ldw	r17,4(sp)
     8fc:	dc000017 	ldw	r16,0(sp)
     900:	dec00604 	addi	sp,sp,24
void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printAliens(pSramAliens, step, shift);
    printVoid(pSramBulletBuffer);
    printGunner(gunnerX);
	checkGunnerWin();
     904:	0000b781 	jmpi	b78 <checkGunnerWin>

00000908 <initializeGame>:

#include "gamelogic.h"
#include "data_structures_constants.h"
#include "sram.h"

void initializeGame() {
     908:	f800283a 	ret

0000090c <moveGunnerLeft>:
}


int gunnerLeftToggle = 1;
void moveGunnerLeft(int* gunnerX) {
	if((*gun_left) && gunnerLeftToggle) {
     90c:	00941c04 	movi	r2,20592
     910:	10c00003 	ldbu	r3,0(r2)
     914:	18c03fcc 	andi	r3,r3,255
     918:	18c0201c 	xori	r3,r3,128
     91c:	18ffe004 	addi	r3,r3,-128
     920:	18000a26 	beq	r3,zero,94c <moveGunnerLeft+0x40>
     924:	d0e00817 	ldw	r3,-32736(gp)
     928:	18000826 	beq	r3,zero,94c <moveGunnerLeft+0x40>
		gunnerLeftToggle = 0;
     92c:	d0200815 	stw	zero,-32736(gp)
		if((*gunnerX) == 0) {
     930:	20800017 	ldw	r2,0(r4)
     934:	1000021e 	bne	r2,zero,940 <moveGunnerLeft+0x34>
			(*gunnerX) = (ALIEN_WIDTH * ALIEN_COLS) - 1;
     938:	008009c4 	movi	r2,39
     93c:	00000106 	br	944 <moveGunnerLeft+0x38>
		} else {
			(*gunnerX)--;
     940:	10bfffc4 	addi	r2,r2,-1
     944:	20800015 	stw	r2,0(r4)
     948:	f800283a 	ret
		}		
	} else if (!(*gun_left) && !(gunnerLeftToggle)) {
     94c:	10800003 	ldbu	r2,0(r2)
     950:	10803fcc 	andi	r2,r2,255
     954:	1080201c 	xori	r2,r2,128
     958:	10bfe004 	addi	r2,r2,-128
     95c:	1000041e 	bne	r2,zero,970 <moveGunnerLeft+0x64>
     960:	d0a00817 	ldw	r2,-32736(gp)
     964:	1000021e 	bne	r2,zero,970 <moveGunnerLeft+0x64>
		gunnerLeftToggle = 1;
     968:	00800044 	movi	r2,1
     96c:	d0a00815 	stw	r2,-32736(gp)
     970:	f800283a 	ret

00000974 <moveGunnerRight>:
	}
}

int gunnerRightToggle = 1;
void moveGunnerRight(int* gunnerX) {	
	if((*gun_right) && gunnerRightToggle) {
     974:	00941804 	movi	r2,20576
     978:	10c00003 	ldbu	r3,0(r2)
     97c:	18c03fcc 	andi	r3,r3,255
     980:	18c0201c 	xori	r3,r3,128
     984:	18ffe004 	addi	r3,r3,-128
     988:	18000b26 	beq	r3,zero,9b8 <moveGunnerRight+0x44>
     98c:	d0e00717 	ldw	r3,-32740(gp)
     990:	18000926 	beq	r3,zero,9b8 <moveGunnerRight+0x44>
		gunnerRightToggle = 0;
     994:	d0200715 	stw	zero,-32740(gp)
		if((*gunnerX) == (ALIEN_WIDTH * ALIEN_COLS) - 1) {
     998:	20800017 	ldw	r2,0(r4)
     99c:	00c009c4 	movi	r3,39
     9a0:	10c0021e 	bne	r2,r3,9ac <moveGunnerRight+0x38>
			(*gunnerX) = 0;
     9a4:	20000015 	stw	zero,0(r4)
     9a8:	f800283a 	ret
		} else {
			(*gunnerX)++;
     9ac:	10800044 	addi	r2,r2,1
     9b0:	20800015 	stw	r2,0(r4)
     9b4:	f800283a 	ret
		}		
	} else if (!(*gun_right) && !(gunnerRightToggle)) {
     9b8:	10800003 	ldbu	r2,0(r2)
     9bc:	10803fcc 	andi	r2,r2,255
     9c0:	1080201c 	xori	r2,r2,128
     9c4:	10bfe004 	addi	r2,r2,-128
     9c8:	1000041e 	bne	r2,zero,9dc <moveGunnerRight+0x68>
     9cc:	d0a00717 	ldw	r2,-32740(gp)
     9d0:	1000021e 	bne	r2,zero,9dc <moveGunnerRight+0x68>
		gunnerRightToggle = 1;
     9d4:	00800044 	movi	r2,1
     9d8:	d0a00715 	stw	r2,-32740(gp)
     9dc:	f800283a 	ret

000009e0 <shootGunner>:
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
     9e0:	00941404 	movi	r2,20560
     9e4:	10c00003 	ldbu	r3,0(r2)
     9e8:	18c03fcc 	andi	r3,r3,255
     9ec:	18c0201c 	xori	r3,r3,128
     9f0:	18ffe004 	addi	r3,r3,-128
     9f4:	18001726 	beq	r3,zero,a54 <shootGunner+0x74>
     9f8:	d0e00617 	ldw	r3,-32744(gp)
     9fc:	18001526 	beq	r3,zero,a54 <shootGunner+0x74>
		gunnerShootToggle = 0;
     a00:	d0200615 	stw	zero,-32744(gp)
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     a04:	21000017 	ldw	r4,0(r4)
	}
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
     a08:	defffd04 	addi	sp,sp,-12
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     a0c:	01400a04 	movi	r5,40
     a10:	210000c4 	addi	r4,r4,3
	}
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
     a14:	dfc00215 	stw	ra,8(sp)
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     a18:	00011cc0 	call	11cc <__modsi3>
     a1c:	d8800005 	stb	r2,0(sp)
		proj.yVal = 0;
		proj.direction = 1;
		proj.symbol = '^';
     a20:	00c01784 	movi	r3,94
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
		proj.yVal = 0;
		proj.direction = 1;
     a24:	00800044 	movi	r2,1
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
		proj.yVal = 0;
     a28:	d8000045 	stb	zero,1(sp)
		proj.direction = 1;
     a2c:	d8800085 	stb	r2,2(sp)
		proj.symbol = '^';
     a30:	d8c000c5 	stb	r3,3(sp)
		proj.type = 1;
     a34:	d8800105 	stb	r2,4(sp)
		proj.timeTick = 0;
     a38:	d8000145 	stb	zero,5(sp)
		
		//checkCollideAliens(pSramAliens, 2);
		addProjectileNode(proj);
     a3c:	d9000017 	ldw	r4,0(sp)
     a40:	d9400117 	ldw	r5,4(sp)
     a44:	00002fc0 	call	2fc <addProjectileNode>
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
		gunnerShootToggle = 1;
	}
}
     a48:	dfc00217 	ldw	ra,8(sp)
     a4c:	dec00304 	addi	sp,sp,12
     a50:	00000a06 	br	a7c <shootGunner+0x9c>
		proj.type = 1;
		proj.timeTick = 0;
		
		//checkCollideAliens(pSramAliens, 2);
		addProjectileNode(proj);
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
     a54:	10800003 	ldbu	r2,0(r2)
     a58:	10803fcc 	andi	r2,r2,255
     a5c:	1080201c 	xori	r2,r2,128
     a60:	10bfe004 	addi	r2,r2,-128
     a64:	1000051e 	bne	r2,zero,a7c <shootGunner+0x9c>
     a68:	d0a00617 	ldw	r2,-32744(gp)
     a6c:	1000031e 	bne	r2,zero,a7c <shootGunner+0x9c>
		gunnerShootToggle = 1;
     a70:	00800044 	movi	r2,1
     a74:	d0a00615 	stw	r2,-32744(gp)
     a78:	f800283a 	ret
	}
}
     a7c:	f800283a 	ret

00000a80 <shootAliens>:


int alienShootToggle = 1;
void shootAliens() {
	if((*gun_shoot) && alienShootToggle) {
     a80:	00941404 	movi	r2,20560
     a84:	10c00003 	ldbu	r3,0(r2)
     a88:	18c03fcc 	andi	r3,r3,255
     a8c:	18c0201c 	xori	r3,r3,128
     a90:	18ffe004 	addi	r3,r3,-128
     a94:	18002d26 	beq	r3,zero,b4c <shootAliens+0xcc>
     a98:	d0e00517 	ldw	r3,-32748(gp)
     a9c:	18002b26 	beq	r3,zero,b4c <shootAliens+0xcc>
		alienShootToggle = 0;
     aa0:	d0200515 	stw	zero,-32748(gp)
		//printf("X, Y: (%i, %i)\n", (*alien_x), (*alien_y));
		
		if(*alien_x == 0 || *alien_y == 0) {
     aa4:	00d41004 	movi	r3,20544
     aa8:	18800003 	ldbu	r2,0(r3)
     aac:	10803fcc 	andi	r2,r2,255
     ab0:	1080201c 	xori	r2,r2,128
     ab4:	10bfe004 	addi	r2,r2,-128
     ab8:	10002e26 	beq	r2,zero,b74 <shootAliens+0xf4>
     abc:	00940c04 	movi	r2,20528
     ac0:	10800003 	ldbu	r2,0(r2)
     ac4:	10803fcc 	andi	r2,r2,255
     ac8:	1080201c 	xori	r2,r2,128
     acc:	10bfe004 	addi	r2,r2,-128
     ad0:	10002826 	beq	r2,zero,b74 <shootAliens+0xf4>
	}
}


int alienShootToggle = 1;
void shootAliens() {
     ad4:	defffd04 	addi	sp,sp,-12
     ad8:	dfc00215 	stw	ra,8(sp)
		if(*alien_x == 0 || *alien_y == 0) {
			return;
		}
		struct Projectile proj;
		//proj.xVal = (((*alien_x + alienShift) % ALIEN_COLS) * ALIEN_COLS) + (ALIEN_WIDTH / 2) + 1;
		proj.xVal = (((*alien_x) + alienShift + 1) * ALIEN_WIDTH) + (ALIEN_WIDTH / 2);
     adc:	19000003 	ldbu	r4,0(r3)
     ae0:	00800034 	movhi	r2,0
     ae4:	10895b04 	addi	r2,r2,9580
     ae8:	10800017 	ldw	r2,0(r2)
     aec:	21003fcc 	andi	r4,r4,255
     af0:	2100201c 	xori	r4,r4,128
     af4:	213fe004 	addi	r4,r4,-128
     af8:	2089883a 	add	r4,r4,r2
     afc:	21000044 	addi	r4,r4,1
     b00:	01400144 	movi	r5,5
     b04:	00012380 	call	1238 <__mulsi3>
     b08:	10800084 	addi	r2,r2,2
     b0c:	d8800005 	stb	r2,0(sp)
		proj.yVal = VOID_HEIGHT - 1;
     b10:	00800084 	movi	r2,2
     b14:	d8800045 	stb	r2,1(sp)
		proj.direction = -1;
     b18:	00bfffc4 	movi	r2,-1
     b1c:	d8800085 	stb	r2,2(sp)
		proj.symbol = '*';
     b20:	00800a84 	movi	r2,42
     b24:	d88000c5 	stb	r2,3(sp)
		proj.type = 1;
     b28:	00800044 	movi	r2,1
     b2c:	d8800105 	stb	r2,4(sp)
		proj.timeTick = 0;
     b30:	d8000145 	stb	zero,5(sp)
		
		addProjectileNode(proj);
     b34:	d9000017 	ldw	r4,0(sp)
     b38:	d9400117 	ldw	r5,4(sp)
     b3c:	00002fc0 	call	2fc <addProjectileNode>
		
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}
     b40:	dfc00217 	ldw	ra,8(sp)
     b44:	dec00304 	addi	sp,sp,12
     b48:	00000a06 	br	b74 <shootAliens+0xf4>
		proj.type = 1;
		proj.timeTick = 0;
		
		addProjectileNode(proj);
		
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
     b4c:	10800003 	ldbu	r2,0(r2)
     b50:	10803fcc 	andi	r2,r2,255
     b54:	1080201c 	xori	r2,r2,128
     b58:	10bfe004 	addi	r2,r2,-128
     b5c:	1000051e 	bne	r2,zero,b74 <shootAliens+0xf4>
     b60:	d0a00517 	ldw	r2,-32748(gp)
     b64:	1000031e 	bne	r2,zero,b74 <shootAliens+0xf4>
		alienShootToggle = 1;
     b68:	00800044 	movi	r2,1
     b6c:	d0a00515 	stw	r2,-32748(gp)
     b70:	f800283a 	ret
	}
}
     b74:	f800283a 	ret

00000b78 <checkGunnerWin>:

void checkGunnerWin() {
     b78:	defff904 	addi	sp,sp,-28
     b7c:	dc800315 	stw	r18,12(sp)
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
     b80:	04800034 	movhi	r18,0
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkGunnerWin() {
     b84:	dd000515 	stw	r20,20(sp)
     b88:	dcc00415 	stw	r19,16(sp)
     b8c:	dc400215 	stw	r17,8(sp)
     b90:	dfc00615 	stw	ra,24(sp)
     b94:	dc000115 	stw	r16,4(sp)
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
     b98:	0023883a 	mov	r17,zero
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
     b9c:	94895c04 	addi	r18,r18,9584
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
     ba0:	04c000c4 	movi	r19,3
	}
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
     ba4:	05000204 	movi	r20,8
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkGunnerWin() {
     ba8:	0021883a 	mov	r16,zero
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
     bac:	91000017 	ldw	r4,0(r18)
     bb0:	800b883a 	mov	r5,r16
     bb4:	880d883a 	mov	r6,r17
     bb8:	0000e840 	call	e84 <getAlien>
			if(a.alive) {
     bbc:	10803fcc 	andi	r2,r2,255
     bc0:	1080201c 	xori	r2,r2,128
     bc4:	10bfe004 	addi	r2,r2,-128
     bc8:	1000081e 	bne	r2,zero,bec <checkGunnerWin+0x74>
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
     bcc:	84000044 	addi	r16,r16,1
     bd0:	84fff61e 	bne	r16,r19,bac <_gp+0xffff67a4>
	}
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
     bd4:	8c400044 	addi	r17,r17,1
     bd8:	8d3ff31e 	bne	r17,r20,ba8 <_gp+0xffff67a0>
			if(a.alive) {
				return;
			}
		}
	}
	gameOver = 2;
     bdc:	00800034 	movhi	r2,0
     be0:	00c00084 	movi	r3,2
     be4:	10895a04 	addi	r2,r2,9576
     be8:	10c00015 	stw	r3,0(r2)
}
     bec:	dfc00617 	ldw	ra,24(sp)
     bf0:	dd000517 	ldw	r20,20(sp)
     bf4:	dcc00417 	ldw	r19,16(sp)
     bf8:	dc800317 	ldw	r18,12(sp)
     bfc:	dc400217 	ldw	r17,8(sp)
     c00:	dc000117 	ldw	r16,4(sp)
     c04:	dec00704 	addi	sp,sp,28
     c08:	f800283a 	ret

00000c0c <checkCollideAliens>:

void checkCollideAliens(int pSramAliens, int x) {
     c0c:	defff704 	addi	sp,sp,-36
     c10:	dd400615 	stw	r21,24(sp)
     c14:	dd000515 	stw	r20,20(sp)
     c18:	dcc00415 	stw	r19,16(sp)
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     c1c:	050001c4 	movi	r20,7
     c20:	04c00034 	movhi	r19,0
     c24:	05600034 	movhi	r21,32768
		}
	}
	gameOver = 2;
}

void checkCollideAliens(int pSramAliens, int x) {
     c28:	dd800715 	stw	r22,28(sp)
     c2c:	dc800315 	stw	r18,12(sp)
     c30:	dc400215 	stw	r17,8(sp)
     c34:	dc000115 	stw	r16,4(sp)
     c38:	dfc00815 	stw	ra,32(sp)
     c3c:	2025883a 	mov	r18,r4
     c40:	2821883a 	mov	r16,r5
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
     c44:	04400084 	movi	r17,2
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     c48:	9cc95b04 	addi	r19,r19,9580
     c4c:	ad2b883a 	add	r21,r21,r20
     c50:	05bffe04 	movi	r22,-8
     c54:	99800017 	ldw	r6,0(r19)
     c58:	a18dc83a 	sub	r6,r20,r6
     c5c:	818d883a 	add	r6,r16,r6
     c60:	354c703a 	and	r6,r6,r21
     c64:	3000030e 	bge	r6,zero,c74 <checkCollideAliens+0x68>
     c68:	31bfffc4 	addi	r6,r6,-1
     c6c:	358cb03a 	or	r6,r6,r22
     c70:	31800044 	addi	r6,r6,1
     c74:	9009883a 	mov	r4,r18
     c78:	880b883a 	mov	r5,r17
     c7c:	0000e840 	call	e84 <getAlien>
     c80:	1006d23a 	srli	r3,r2,8
     c84:	d8c00045 	stb	r3,1(sp)
     c88:	1006d43a 	srli	r3,r2,16
		if(a.alive) {
     c8c:	10803fcc 	andi	r2,r2,255
     c90:	1080201c 	xori	r2,r2,128
}

void checkCollideAliens(int pSramAliens, int x) {
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     c94:	d8c00085 	stb	r3,2(sp)
		if(a.alive) {
     c98:	10bfe004 	addi	r2,r2,-128
     c9c:	10001326 	beq	r2,zero,cec <checkCollideAliens+0xe0>
			//printf("KILL (%i, %i)\n", (x + (7-alienShift)) % ALIEN_COLS, y);
			a.alive = 0;
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
     ca0:	00800034 	movhi	r2,0
     ca4:	10895b04 	addi	r2,r2,9580
     ca8:	11800017 	ldw	r6,0(r2)
     cac:	840001c4 	addi	r16,r16,7
     cb0:	00a00034 	movhi	r2,32768
     cb4:	818dc83a 	sub	r6,r16,r6
     cb8:	108001c4 	addi	r2,r2,7
     cbc:	308c703a 	and	r6,r6,r2
     cc0:	3000040e 	bge	r6,zero,cd4 <checkCollideAliens+0xc8>
     cc4:	31bfffc4 	addi	r6,r6,-1
     cc8:	00bffe04 	movi	r2,-8
     ccc:	308cb03a 	or	r6,r6,r2
     cd0:	31800044 	addi	r6,r6,1
     cd4:	d8000005 	stb	zero,0(sp)
     cd8:	d9c00017 	ldw	r7,0(sp)
     cdc:	9009883a 	mov	r4,r18
     ce0:	880b883a 	mov	r5,r17
     ce4:	0000ecc0 	call	ecc <setAlien>
     ce8:	00000306 	br	cf8 <checkCollideAliens+0xec>
	gameOver = 2;
}

void checkCollideAliens(int pSramAliens, int x) {
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
     cec:	8c7fffc4 	addi	r17,r17,-1
     cf0:	00bfffc4 	movi	r2,-1
     cf4:	88bfd71e 	bne	r17,r2,c54 <_gp+0xffff684c>
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
			break;
		}
	}
	//checkGunnerWin();
}
     cf8:	dfc00817 	ldw	ra,32(sp)
     cfc:	dd800717 	ldw	r22,28(sp)
     d00:	dd400617 	ldw	r21,24(sp)
     d04:	dd000517 	ldw	r20,20(sp)
     d08:	dcc00417 	ldw	r19,16(sp)
     d0c:	dc800317 	ldw	r18,12(sp)
     d10:	dc400217 	ldw	r17,8(sp)
     d14:	dc000117 	ldw	r16,4(sp)
     d18:	dec00904 	addi	sp,sp,36
     d1c:	f800283a 	ret

00000d20 <checkCollideGunner>:


void checkCollideGunner(int projX) {
	int gunnerCenter = gunnerX + (GUNNER_WIDTH / 2);
    if ((projX > (gunnerX + 2)) && (projX < (gunnerX + GUNNER_WIDTH - 2))) {
     d20:	00800034 	movhi	r2,0
     d24:	10890b04 	addi	r2,r2,9260
     d28:	10800017 	ldw	r2,0(r2)
     d2c:	10c00084 	addi	r3,r2,2
     d30:	1900060e 	bge	r3,r4,d4c <checkCollideGunner+0x2c>
     d34:	10800104 	addi	r2,r2,4
     d38:	11000416 	blt	r2,r4,d4c <checkCollideGunner+0x2c>
        gameOver = 1;
     d3c:	00800034 	movhi	r2,0
     d40:	00c00044 	movi	r3,1
     d44:	10895a04 	addi	r2,r2,9576
     d48:	10c00015 	stw	r3,0(r2)
     d4c:	f800283a 	ret

00000d50 <main>:
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
     d50:	d1205b17 	ldw	r4,-32404(gp)
int alienShift = 0;
int gameOver = 0;
int gunnerX = ((ALIEN_WIDTH * ALIEN_COLS) / 2) - (GUNNER_WIDTH / 2);

int main()
{
     d54:	defff804 	addi	sp,sp,-32
     d58:	dfc00715 	stw	ra,28(sp)
     d5c:	dd400615 	stw	r21,24(sp)
     d60:	dd000515 	stw	r20,20(sp)
     d64:	dcc00415 	stw	r19,16(sp)
     d68:	dc800315 	stw	r18,12(sp)
     d6c:	dc400215 	stw	r17,8(sp)
     d70:	dc000115 	stw	r16,4(sp)
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
     d74:	00009080 	call	908 <initializeGame>
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
     d78:	01001204 	movi	r4,72
     d7c:	000105c0 	call	105c <sram_malloc>
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     d80:	0100b584 	movi	r4,726
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
     d84:	d0a05a15 	stw	r2,-32408(gp)
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     d88:	000105c0 	call	105c <sram_malloc>

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
		gameOver = 0;
	unsigned int  gameStartTime = *game_time;
     d8c:	04104004 	movi	r16,16640
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
		gameOver = 0;
     d90:	d0205815 	stw	zero,-32416(gp)
	unsigned int  gameStartTime = *game_time;
	unsigned int  previousUpdateBoard = *game_time;
	unsigned int  previousUpdateBullets = *game_time;
    
	initRandomAliens(pSramAliens);
     d94:	d1205a17 	ldw	r4,-32408(gp)
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     d98:	1027883a 	mov	r19,r2

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
		gameOver = 0;
	unsigned int  gameStartTime = *game_time;
     d9c:	80800017 	ldw	r2,0(r16)
	unsigned int  previousUpdateBoard = *game_time;
     da0:	84400017 	ldw	r17,0(r16)
	unsigned int  previousUpdateBullets = *game_time;
     da4:	84800017 	ldw	r18,0(r16)
    
	initRandomAliens(pSramAliens);
     da8:	00003d80 	call	3d8 <initRandomAliens>
	initProjectileBuffer(pSramBulletBuffer);
     dac:	9809883a 	mov	r4,r19
     db0:	00002000 	call	200 <initProjectileBuffer>
			}
			return 0;
		}
		//gameOver =1;
		
		if(((*game_time) - previousUpdateBoard) > 10) {
     db4:	05000284 	movi	r20,10
			//alienShift = 2;
			updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);			
			previousUpdateBoard = (*game_time);
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
     db8:	05400144 	movi	r21,5
	
	
	
	//Game Event Loop
    while(1) {
		if(gameOver) {
     dbc:	d0a05817 	ldw	r2,-32416(gp)
     dc0:	10000b26 	beq	r2,zero,df0 <main+0xa0>
			if(gameOver == 1) {
     dc4:	00c00044 	movi	r3,1
     dc8:	10c0031e 	bne	r2,r3,dd8 <main+0x88>
				printf("\nAliens Win!\n");
     dcc:	01000034 	movhi	r4,0
     dd0:	2108c204 	addi	r4,r4,8968
     dd4:	00000406 	br	de8 <main+0x98>
			} else if(gameOver ==2) {
     dd8:	00c00084 	movi	r3,2
     ddc:	10c01f1e 	bne	r2,r3,e5c <main+0x10c>
				printf("\nGunner Win!\n");
     de0:	01000034 	movhi	r4,0
     de4:	2108c604 	addi	r4,r4,8984
     de8:	00015f00 	call	15f0 <puts>
     dec:	00001b06 	br	e5c <main+0x10c>
			}
			return 0;
		}
		//gameOver =1;
		
		if(((*game_time) - previousUpdateBoard) > 10) {
     df0:	80c00017 	ldw	r3,0(r16)
     df4:	1c47c83a 	sub	r3,r3,r17
     df8:	a0c00d2e 	bgeu	r20,r3,e30 <main+0xe0>
			alienShift = ((*game_time) / 10) % 8;
     dfc:	81000017 	ldw	r4,0(r16)
     e00:	01400284 	movi	r5,10
     e04:	00012280 	call	1228 <__udivsi3>
     e08:	108001cc 	andi	r2,r2,7
     e0c:	d0a05915 	stw	r2,-32412(gp)
			//alienShift = 2;
			updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);			
     e10:	81c00017 	ldw	r7,0(r16)
     e14:	d1205a17 	ldw	r4,-32408(gp)
     e18:	d1a00917 	ldw	r6,-32732(gp)
     e1c:	d8800015 	stw	r2,0(sp)
     e20:	980b883a 	mov	r5,r19
     e24:	39c0004c 	andi	r7,r7,1
     e28:	000088c0 	call	88c <updateDisplay>
			previousUpdateBoard = (*game_time);
     e2c:	84400017 	ldw	r17,0(r16)
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
     e30:	80c00017 	ldw	r3,0(r16)
     e34:	1c87c83a 	sub	r3,r3,r18
     e38:	a8c0022e 	bgeu	r21,r3,e44 <main+0xf4>
			updateProjectileNodes();
     e3c:	00000980 	call	98 <updateProjectileNodes>
			previousUpdateBullets = (*game_time);
     e40:	84800017 	ldw	r18,0(r16)
		}
		
		moveGunnerLeft(&gunnerX);
     e44:	d1200904 	addi	r4,gp,-32732
     e48:	000090c0 	call	90c <moveGunnerLeft>
		moveGunnerRight(&gunnerX);
     e4c:	d1200904 	addi	r4,gp,-32732
     e50:	00009740 	call	974 <moveGunnerRight>
		//shootGunner(&gunnerX);
		shootAliens();
     e54:	0000a800 	call	a80 <shootAliens>
	}
     e58:	003fd806 	br	dbc <_gp+0xffff69b4>
	
    return 0;
}
     e5c:	0005883a 	mov	r2,zero
     e60:	dfc00717 	ldw	ra,28(sp)
     e64:	dd400617 	ldw	r21,24(sp)
     e68:	dd000517 	ldw	r20,20(sp)
     e6c:	dcc00417 	ldw	r19,16(sp)
     e70:	dc800317 	ldw	r18,12(sp)
     e74:	dc400217 	ldw	r17,8(sp)
     e78:	dc000117 	ldw	r16,4(sp)
     e7c:	dec00804 	addi	sp,sp,32
     e80:	f800283a 	ret

00000e84 <getAlien>:
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     e84:	280a90fa 	slli	r5,r5,3
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
     e88:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     e8c:	298d883a 	add	r6,r5,r6
     e90:	318b883a 	add	r5,r6,r6
     e94:	298d883a 	add	r6,r5,r6
     e98:	310d883a 	add	r6,r6,r4
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
     e9c:	01000034 	movhi	r4,0
     ea0:	21096604 	addi	r4,r4,9624
     ea4:	2189883a 	add	r4,r4,r6
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
     ea8:	20800043 	ldbu	r2,1(r4)
     eac:	20c00083 	ldbu	r3,2(r4)
     eb0:	21400003 	ldbu	r5,0(r4)
     eb4:	1004923a 	slli	r2,r2,8
     eb8:	1806943a 	slli	r3,r3,16
     ebc:	1144b03a 	or	r2,r2,r5
}
     ec0:	10c4b03a 	or	r2,r2,r3
     ec4:	dec00104 	addi	sp,sp,4
     ec8:	f800283a 	ret

00000ecc <setAlien>:

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     ecc:	280a90fa 	slli	r5,r5,3
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
     ed0:	deffff04 	addi	sp,sp,-4
     ed4:	d9c00015 	stw	r7,0(sp)
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     ed8:	298d883a 	add	r6,r5,r6
     edc:	318b883a 	add	r5,r6,r6
     ee0:	298d883a 	add	r6,r5,r6
     ee4:	310d883a 	add	r6,r6,r4
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     ee8:	d8800043 	ldbu	r2,1(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     eec:	01000034 	movhi	r4,0
     ef0:	21096604 	addi	r4,r4,9624
     ef4:	2189883a 	add	r4,r4,r6
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     ef8:	20800045 	stb	r2,1(r4)
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     efc:	d8800083 	ldbu	r2,2(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     f00:	21c00005 	stb	r7,0(r4)
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     f04:	20800085 	stb	r2,2(r4)
}
     f08:	dec00104 	addi	sp,sp,4
     f0c:	f800283a 	ret

00000f10 <getProjectile>:

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
     f10:	defffb04 	addi	sp,sp,-20
     f14:	dc400315 	stw	r17,12(sp)
     f18:	dc000215 	stw	r16,8(sp)
     f1c:	2823883a 	mov	r17,r5
     f20:	2021883a 	mov	r16,r4
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f24:	01400a04 	movi	r5,40
     f28:	3009883a 	mov	r4,r6
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
     f2c:	dfc00415 	stw	ra,16(sp)
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f30:	00012380 	call	1238 <__mulsi3>
     f34:	1449883a 	add	r4,r2,r17
     f38:	01400184 	movi	r5,6
     f3c:	00012380 	call	1238 <__mulsi3>
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f40:	01000034 	movhi	r4,0
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f44:	1405883a 	add	r2,r2,r16
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f48:	21096604 	addi	r4,r4,9624
     f4c:	2089883a 	add	r4,r4,r2
    p.direction = sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.symbol = sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
     f50:	20c00043 	ldbu	r3,1(r4)
     f54:	21400083 	ldbu	r5,2(r4)
     f58:	21800003 	ldbu	r6,0(r4)
     f5c:	1806923a 	slli	r3,r3,8
     f60:	280a943a 	slli	r5,r5,16
     f64:	00804034 	movhi	r2,256
     f68:	1986b03a 	or	r3,r3,r6
     f6c:	1946b03a 	or	r3,r3,r5
     f70:	218000c3 	ldbu	r6,3(r4)
     f74:	21400143 	ldbu	r5,5(r4)
     f78:	10bfffc4 	addi	r2,r2,-1
     f7c:	300c963a 	slli	r6,r6,24
     f80:	1884703a 	and	r2,r3,r2
     f84:	280a923a 	slli	r5,r5,8
     f88:	20c00103 	ldbu	r3,4(r4)
}
     f8c:	1184b03a 	or	r2,r2,r6
     f90:	1946b03a 	or	r3,r3,r5
     f94:	dfc00417 	ldw	ra,16(sp)
     f98:	dc400317 	ldw	r17,12(sp)
     f9c:	dc000217 	ldw	r16,8(sp)
     fa0:	dec00504 	addi	sp,sp,20
     fa4:	f800283a 	ret

00000fa8 <setProjectile>:

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
     fa8:	defffb04 	addi	sp,sp,-20
     fac:	dc800215 	stw	r18,8(sp)
     fb0:	dc000015 	stw	r16,0(sp)
     fb4:	2825883a 	mov	r18,r5
     fb8:	2021883a 	mov	r16,r4
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
     fbc:	01400a04 	movi	r5,40
     fc0:	3009883a 	mov	r4,r6
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
     fc4:	dfc00315 	stw	ra,12(sp)
     fc8:	dc400115 	stw	r17,4(sp)
     fcc:	d9c00415 	stw	r7,16(sp)
     fd0:	3823883a 	mov	r17,r7
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
     fd4:	00012380 	call	1238 <__mulsi3>
     fd8:	1489883a 	add	r4,r2,r18
     fdc:	01400184 	movi	r5,6
     fe0:	00012380 	call	1238 <__mulsi3>
     fe4:	00c00034 	movhi	r3,0
     fe8:	1405883a 	add	r2,r2,r16
     fec:	18c96604 	addi	r3,r3,9624
     ff0:	1885883a 	add	r2,r3,r2
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
     ff4:	d8c00443 	ldbu	r3,17(sp)
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
     ff8:	14400005 	stb	r17,0(r2)
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
     ffc:	10c00045 	stb	r3,1(r2)
    sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.direction;
    1000:	d8c00483 	ldbu	r3,18(sp)
    1004:	10c00085 	stb	r3,2(r2)
    sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.symbol;
    1008:	d8c004c3 	ldbu	r3,19(sp)
    100c:	10c000c5 	stb	r3,3(r2)
    sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.type;
    1010:	d8c00503 	ldbu	r3,20(sp)
    1014:	10c00105 	stb	r3,4(r2)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
    1018:	d8c00543 	ldbu	r3,21(sp)
    101c:	10c00145 	stb	r3,5(r2)
}
    1020:	dfc00317 	ldw	ra,12(sp)
    1024:	dc800217 	ldw	r18,8(sp)
    1028:	dc400117 	ldw	r17,4(sp)
    102c:	dc000017 	ldw	r16,0(sp)
    1030:	dec00504 	addi	sp,sp,20
    1034:	f800283a 	ret

00001038 <resetSRAM>:

void resetSRAM() {
    1038:	01400034 	movhi	r5,0
    int i;
    for (i = 0; i < 2048; i++ ) {
    103c:	0005883a 	mov	r2,zero
    1040:	29496604 	addi	r5,r5,9624
    1044:	00c20004 	movi	r3,2048
    1048:	1149883a 	add	r4,r2,r5
      sram[i] = 0;
    104c:	20000005 	stb	zero,0(r4)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
}

void resetSRAM() {
    int i;
    for (i = 0; i < 2048; i++ ) {
    1050:	10800044 	addi	r2,r2,1
    1054:	10fffc1e 	bne	r2,r3,1048 <_gp+0xffff6c40>
      sram[i] = 0;
   }
}
    1058:	f800283a 	ret

0000105c <sram_malloc>:

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
    105c:	20002026 	beq	r4,zero,10e0 <sram_malloc+0x84>
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
    1060:	20bfffc4 	addi	r2,r4,-1
    1064:	1000010e 	bge	r2,zero,106c <sram_malloc+0x10>
    1068:	20800184 	addi	r2,r4,6
    106c:	1005d0fa 	srai	r2,r2,3

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
    1070:	02000034 	movhi	r8,0
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    1074:	000b883a 	mov	r5,zero
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
    1078:	10c00044 	addi	r3,r2,1

    int currBlock = 0;
    107c:	0009883a 	mov	r4,zero
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    1080:	0005883a 	mov	r2,zero
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    1084:	01c03884 	movi	r7,226
        if(sram[currBlock] == 0) {//curr block is free
    1088:	42096604 	addi	r8,r8,9624
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    108c:	28c00916 	blt	r5,r3,10b4 <sram_malloc+0x58>
    /*printf("Blocks Needed: %i\n", blocksNeeded);
    printf("Total Blocks: %i\n", TOTAL_BLOCKS);
    printf("Free List End: %i\n", FREE_LIST_END);
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
    1090:	014038c4 	movi	r5,227
    1094:	21401226 	beq	r4,r5,10e0 <sram_malloc+0x84>
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
    1098:	01000034 	movhi	r4,0
    109c:	21096604 	addi	r4,r4,9624
    10a0:	2089883a 	add	r4,r4,r2
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    10a4:	100490fa 	slli	r2,r2,3
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
    10a8:	20c00005 	stb	r3,0(r4)
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    10ac:	108038c4 	addi	r2,r2,227
    10b0:	f800283a 	ret
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    10b4:	393ff616 	blt	r7,r4,1090 <_gp+0xffff6c88>
        if(sram[currBlock] == 0) {//curr block is free
    10b8:	410d883a 	add	r6,r8,r4
    10bc:	31800007 	ldb	r6,0(r6)
    10c0:	3000031e 	bne	r6,zero,10d0 <sram_malloc+0x74>
            foundBlocks++;
    10c4:	29400044 	addi	r5,r5,1
            currBlock++;
    10c8:	21000044 	addi	r4,r4,1
    10cc:	003fef06 	br	108c <_gp+0xffff6c84>
        } else {//curr block is allocated
            foundBlocks = 0;
            startFoundBlocks = currBlock + sram[currBlock];
    10d0:	2189883a 	add	r4,r4,r6
    10d4:	2005883a 	mov	r2,r4
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
            foundBlocks++;
            currBlock++;
        } else {//curr block is allocated
            foundBlocks = 0;
    10d8:	000b883a 	mov	r5,zero
    10dc:	003feb06 	br	108c <_gp+0xffff6c84>

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
        return -1;
    10e0:	00bfffc4 	movi	r2,-1
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    }
}
    10e4:	f800283a 	ret

000010e8 <sram_free>:
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int freeListLoc = (loc - FREE_LIST_END) / (BLOCK_SIZE);
    10e8:	20bfc744 	addi	r2,r4,-227
    10ec:	1000010e 	bge	r2,zero,10f4 <sram_free+0xc>
    10f0:	20bfc904 	addi	r2,r4,-220
    10f4:	1005d0fa 	srai	r2,r2,3

    //printf("Free List Location: %i\n", freeListLoc);

    sram[freeListLoc] = 0;
    10f8:	00c00034 	movhi	r3,0
    10fc:	18c96604 	addi	r3,r3,9624
    1100:	1887883a 	add	r3,r3,r2
    1104:	18000005 	stb	zero,0(r3)
    return freeListLoc;

}
    1108:	f800283a 	ret

0000110c <udivmodsi4>:
    110c:	2900182e 	bgeu	r5,r4,1170 <udivmodsi4+0x64>
    1110:	28001716 	blt	r5,zero,1170 <udivmodsi4+0x64>
    1114:	00800804 	movi	r2,32
    1118:	00c00044 	movi	r3,1
    111c:	00000206 	br	1128 <udivmodsi4+0x1c>
    1120:	10001126 	beq	r2,zero,1168 <udivmodsi4+0x5c>
    1124:	28000516 	blt	r5,zero,113c <udivmodsi4+0x30>
    1128:	294b883a 	add	r5,r5,r5
    112c:	10bfffc4 	addi	r2,r2,-1
    1130:	18c7883a 	add	r3,r3,r3
    1134:	293ffa36 	bltu	r5,r4,1120 <_gp+0xffff6d18>
    1138:	18000b26 	beq	r3,zero,1168 <udivmodsi4+0x5c>
    113c:	0005883a 	mov	r2,zero
    1140:	21400236 	bltu	r4,r5,114c <udivmodsi4+0x40>
    1144:	2149c83a 	sub	r4,r4,r5
    1148:	10c4b03a 	or	r2,r2,r3
    114c:	1806d07a 	srli	r3,r3,1
    1150:	280ad07a 	srli	r5,r5,1
    1154:	183ffa1e 	bne	r3,zero,1140 <_gp+0xffff6d38>
    1158:	3000011e 	bne	r6,zero,1160 <udivmodsi4+0x54>
    115c:	f800283a 	ret
    1160:	2005883a 	mov	r2,r4
    1164:	f800283a 	ret
    1168:	0005883a 	mov	r2,zero
    116c:	003ffa06 	br	1158 <_gp+0xffff6d50>
    1170:	00c00044 	movi	r3,1
    1174:	003ff106 	br	113c <_gp+0xffff6d34>

00001178 <__divsi3>:
    1178:	defffe04 	addi	sp,sp,-8
    117c:	dfc00115 	stw	ra,4(sp)
    1180:	dc000015 	stw	r16,0(sp)
    1184:	20000b16 	blt	r4,zero,11b4 <__divsi3+0x3c>
    1188:	0021883a 	mov	r16,zero
    118c:	28000c16 	blt	r5,zero,11c0 <__divsi3+0x48>
    1190:	000d883a 	mov	r6,zero
    1194:	000110c0 	call	110c <udivmodsi4>
    1198:	0407c83a 	sub	r3,zero,r16
    119c:	1884f03a 	xor	r2,r3,r2
    11a0:	1405883a 	add	r2,r2,r16
    11a4:	dfc00117 	ldw	ra,4(sp)
    11a8:	dc000017 	ldw	r16,0(sp)
    11ac:	dec00204 	addi	sp,sp,8
    11b0:	f800283a 	ret
    11b4:	0109c83a 	sub	r4,zero,r4
    11b8:	04000044 	movi	r16,1
    11bc:	283ff40e 	bge	r5,zero,1190 <_gp+0xffff6d88>
    11c0:	014bc83a 	sub	r5,zero,r5
    11c4:	8400005c 	xori	r16,r16,1
    11c8:	003ff106 	br	1190 <_gp+0xffff6d88>

000011cc <__modsi3>:
    11cc:	defffd04 	addi	sp,sp,-12
    11d0:	dfc00215 	stw	ra,8(sp)
    11d4:	dc400115 	stw	r17,4(sp)
    11d8:	dc000015 	stw	r16,0(sp)
    11dc:	20000c16 	blt	r4,zero,1210 <__modsi3+0x44>
    11e0:	0023883a 	mov	r17,zero
    11e4:	0021883a 	mov	r16,zero
    11e8:	28000d16 	blt	r5,zero,1220 <__modsi3+0x54>
    11ec:	01800044 	movi	r6,1
    11f0:	000110c0 	call	110c <udivmodsi4>
    11f4:	1404f03a 	xor	r2,r2,r16
    11f8:	8885883a 	add	r2,r17,r2
    11fc:	dfc00217 	ldw	ra,8(sp)
    1200:	dc400117 	ldw	r17,4(sp)
    1204:	dc000017 	ldw	r16,0(sp)
    1208:	dec00304 	addi	sp,sp,12
    120c:	f800283a 	ret
    1210:	0109c83a 	sub	r4,zero,r4
    1214:	04400044 	movi	r17,1
    1218:	043fffc4 	movi	r16,-1
    121c:	283ff30e 	bge	r5,zero,11ec <_gp+0xffff6de4>
    1220:	014bc83a 	sub	r5,zero,r5
    1224:	003ff106 	br	11ec <_gp+0xffff6de4>

00001228 <__udivsi3>:
    1228:	000d883a 	mov	r6,zero
    122c:	000110c1 	jmpi	110c <udivmodsi4>

00001230 <__umodsi3>:
    1230:	01800044 	movi	r6,1
    1234:	000110c1 	jmpi	110c <udivmodsi4>

00001238 <__mulsi3>:
    1238:	0005883a 	mov	r2,zero
    123c:	20000726 	beq	r4,zero,125c <__mulsi3+0x24>
    1240:	20c0004c 	andi	r3,r4,1
    1244:	2008d07a 	srli	r4,r4,1
    1248:	18000126 	beq	r3,zero,1250 <__mulsi3+0x18>
    124c:	1145883a 	add	r2,r2,r5
    1250:	294b883a 	add	r5,r5,r5
    1254:	203ffa1e 	bne	r4,zero,1240 <_gp+0xffff6e38>
    1258:	f800283a 	ret
    125c:	f800283a 	ret

00001260 <malloc>:
    1260:	00800034 	movhi	r2,0
    1264:	10890d04 	addi	r2,r2,9268
    1268:	200b883a 	mov	r5,r4
    126c:	11000017 	ldw	r4,0(r2)
    1270:	000136c1 	jmpi	136c <_malloc_r>

00001274 <free>:
    1274:	00800034 	movhi	r2,0
    1278:	10890d04 	addi	r2,r2,9268
    127c:	200b883a 	mov	r5,r4
    1280:	11000017 	ldw	r4,0(r2)
    1284:	00012881 	jmpi	1288 <_free_r>

00001288 <_free_r>:
    1288:	28003726 	beq	r5,zero,1368 <_free_r+0xe0>
    128c:	28ffff17 	ldw	r3,-4(r5)
    1290:	28bfff04 	addi	r2,r5,-4
    1294:	1800010e 	bge	r3,zero,129c <_free_r+0x14>
    1298:	10c5883a 	add	r2,r2,r3
    129c:	01400034 	movhi	r5,0
    12a0:	29495f04 	addi	r5,r5,9596
    12a4:	28c00017 	ldw	r3,0(r5)
    12a8:	280d883a 	mov	r6,r5
    12ac:	1800031e 	bne	r3,zero,12bc <_free_r+0x34>
    12b0:	10000115 	stw	zero,4(r2)
    12b4:	28800015 	stw	r2,0(r5)
    12b8:	f800283a 	ret
    12bc:	10c00c2e 	bgeu	r2,r3,12f0 <_free_r+0x68>
    12c0:	11400017 	ldw	r5,0(r2)
    12c4:	1149883a 	add	r4,r2,r5
    12c8:	20c0041e 	bne	r4,r3,12dc <_free_r+0x54>
    12cc:	20c00017 	ldw	r3,0(r4)
    12d0:	28c7883a 	add	r3,r5,r3
    12d4:	10c00015 	stw	r3,0(r2)
    12d8:	20c00117 	ldw	r3,4(r4)
    12dc:	10c00115 	stw	r3,4(r2)
    12e0:	30800015 	stw	r2,0(r6)
    12e4:	f800283a 	ret
    12e8:	11400336 	bltu	r2,r5,12f8 <_free_r+0x70>
    12ec:	2807883a 	mov	r3,r5
    12f0:	19400117 	ldw	r5,4(r3)
    12f4:	283ffc1e 	bne	r5,zero,12e8 <_gp+0xffff6ee0>
    12f8:	19c00017 	ldw	r7,0(r3)
    12fc:	19cd883a 	add	r6,r3,r7
    1300:	30800a1e 	bne	r6,r2,132c <_free_r+0xa4>
    1304:	10800017 	ldw	r2,0(r2)
    1308:	3885883a 	add	r2,r7,r2
    130c:	18800015 	stw	r2,0(r3)
    1310:	1889883a 	add	r4,r3,r2
    1314:	2140141e 	bne	r4,r5,1368 <_free_r+0xe0>
    1318:	29000017 	ldw	r4,0(r5)
    131c:	1105883a 	add	r2,r2,r4
    1320:	18800015 	stw	r2,0(r3)
    1324:	28800117 	ldw	r2,4(r5)
    1328:	00000e06 	br	1364 <_free_r+0xdc>
    132c:	1180032e 	bgeu	r2,r6,133c <_free_r+0xb4>
    1330:	00800304 	movi	r2,12
    1334:	20800015 	stw	r2,0(r4)
    1338:	f800283a 	ret
    133c:	11800017 	ldw	r6,0(r2)
    1340:	1189883a 	add	r4,r2,r6
    1344:	2140061e 	bne	r4,r5,1360 <_free_r+0xd8>
    1348:	29000017 	ldw	r4,0(r5)
    134c:	3109883a 	add	r4,r6,r4
    1350:	11000015 	stw	r4,0(r2)
    1354:	29000117 	ldw	r4,4(r5)
    1358:	11000115 	stw	r4,4(r2)
    135c:	00000106 	br	1364 <_free_r+0xdc>
    1360:	11400115 	stw	r5,4(r2)
    1364:	18800115 	stw	r2,4(r3)
    1368:	f800283a 	ret

0000136c <_malloc_r>:
    136c:	defffb04 	addi	sp,sp,-20
    1370:	00bfff04 	movi	r2,-4
    1374:	dc000015 	stw	r16,0(sp)
    1378:	2c0000c4 	addi	r16,r5,3
    137c:	80a0703a 	and	r16,r16,r2
    1380:	dc800215 	stw	r18,8(sp)
    1384:	dfc00415 	stw	ra,16(sp)
    1388:	dcc00315 	stw	r19,12(sp)
    138c:	dc400115 	stw	r17,4(sp)
    1390:	84000204 	addi	r16,r16,8
    1394:	00800304 	movi	r2,12
    1398:	2025883a 	mov	r18,r4
    139c:	8080022e 	bgeu	r16,r2,13a8 <_malloc_r+0x3c>
    13a0:	1021883a 	mov	r16,r2
    13a4:	00000506 	br	13bc <_malloc_r+0x50>
    13a8:	8000040e 	bge	r16,zero,13bc <_malloc_r+0x50>
    13ac:	00800304 	movi	r2,12
    13b0:	90800015 	stw	r2,0(r18)
    13b4:	0005883a 	mov	r2,zero
    13b8:	00003c06 	br	14ac <_malloc_r+0x140>
    13bc:	817ffb36 	bltu	r16,r5,13ac <_gp+0xffff6fa4>
    13c0:	01000034 	movhi	r4,0
    13c4:	21095f04 	addi	r4,r4,9596
    13c8:	20800017 	ldw	r2,0(r4)
    13cc:	1007883a 	mov	r3,r2
    13d0:	18000926 	beq	r3,zero,13f8 <_malloc_r+0x8c>
    13d4:	19400017 	ldw	r5,0(r3)
    13d8:	2c0bc83a 	sub	r5,r5,r16
    13dc:	28001716 	blt	r5,zero,143c <_malloc_r+0xd0>
    13e0:	018002c4 	movi	r6,11
    13e4:	31400d2e 	bgeu	r6,r5,141c <_malloc_r+0xb0>
    13e8:	19400015 	stw	r5,0(r3)
    13ec:	1945883a 	add	r2,r3,r5
    13f0:	14000015 	stw	r16,0(r2)
    13f4:	1000231e 	bne	r2,zero,1484 <_malloc_r+0x118>
    13f8:	04400034 	movhi	r17,0
    13fc:	8c495e04 	addi	r17,r17,9592
    1400:	88800017 	ldw	r2,0(r17)
    1404:	1000101e 	bne	r2,zero,1448 <_malloc_r+0xdc>
    1408:	9009883a 	mov	r4,r18
    140c:	000b883a 	mov	r5,zero
    1410:	00016780 	call	1678 <_sbrk_r>
    1414:	88800015 	stw	r2,0(r17)
    1418:	00000b06 	br	1448 <_malloc_r+0xdc>
    141c:	10c0031e 	bne	r2,r3,142c <_malloc_r+0xc0>
    1420:	10c00117 	ldw	r3,4(r2)
    1424:	20c00015 	stw	r3,0(r4)
    1428:	00001606 	br	1484 <_malloc_r+0x118>
    142c:	19000117 	ldw	r4,4(r3)
    1430:	11000115 	stw	r4,4(r2)
    1434:	1805883a 	mov	r2,r3
    1438:	00001206 	br	1484 <_malloc_r+0x118>
    143c:	1805883a 	mov	r2,r3
    1440:	18c00117 	ldw	r3,4(r3)
    1444:	003fe206 	br	13d0 <_gp+0xffff6fc8>
    1448:	9009883a 	mov	r4,r18
    144c:	800b883a 	mov	r5,r16
    1450:	00016780 	call	1678 <_sbrk_r>
    1454:	04ffffc4 	movi	r19,-1
    1458:	14ffd426 	beq	r2,r19,13ac <_gp+0xffff6fa4>
    145c:	144000c4 	addi	r17,r2,3
    1460:	00ffff04 	movi	r3,-4
    1464:	88e2703a 	and	r17,r17,r3
    1468:	88800526 	beq	r17,r2,1480 <_malloc_r+0x114>
    146c:	9009883a 	mov	r4,r18
    1470:	888bc83a 	sub	r5,r17,r2
    1474:	00016780 	call	1678 <_sbrk_r>
    1478:	14ffcc26 	beq	r2,r19,13ac <_gp+0xffff6fa4>
    147c:	8805883a 	mov	r2,r17
    1480:	14000015 	stw	r16,0(r2)
    1484:	114002c4 	addi	r5,r2,11
    1488:	00fffe04 	movi	r3,-8
    148c:	11000104 	addi	r4,r2,4
    1490:	28c6703a 	and	r3,r5,r3
    1494:	1909c83a 	sub	r4,r3,r4
    1498:	20000326 	beq	r4,zero,14a8 <_malloc_r+0x13c>
    149c:	110b883a 	add	r5,r2,r4
    14a0:	0109c83a 	sub	r4,zero,r4
    14a4:	29000015 	stw	r4,0(r5)
    14a8:	1805883a 	mov	r2,r3
    14ac:	dfc00417 	ldw	ra,16(sp)
    14b0:	dcc00317 	ldw	r19,12(sp)
    14b4:	dc800217 	ldw	r18,8(sp)
    14b8:	dc400117 	ldw	r17,4(sp)
    14bc:	dc000017 	ldw	r16,0(sp)
    14c0:	dec00504 	addi	sp,sp,20
    14c4:	f800283a 	ret

000014c8 <_printf_r>:
    14c8:	defffd04 	addi	sp,sp,-12
    14cc:	dfc00015 	stw	ra,0(sp)
    14d0:	d9800115 	stw	r6,4(sp)
    14d4:	d9c00215 	stw	r7,8(sp)
    14d8:	20c00217 	ldw	r3,8(r4)
    14dc:	280d883a 	mov	r6,r5
    14e0:	01400034 	movhi	r5,0
    14e4:	29473804 	addi	r5,r5,7392
    14e8:	19400115 	stw	r5,4(r3)
    14ec:	21400217 	ldw	r5,8(r4)
    14f0:	d9c00104 	addi	r7,sp,4
    14f4:	00017500 	call	1750 <___vfprintf_internal_r>
    14f8:	dfc00017 	ldw	ra,0(sp)
    14fc:	dec00304 	addi	sp,sp,12
    1500:	f800283a 	ret

00001504 <printf>:
    1504:	defffc04 	addi	sp,sp,-16
    1508:	dfc00015 	stw	ra,0(sp)
    150c:	d9400115 	stw	r5,4(sp)
    1510:	d9800215 	stw	r6,8(sp)
    1514:	d9c00315 	stw	r7,12(sp)
    1518:	00800034 	movhi	r2,0
    151c:	10890d04 	addi	r2,r2,9268
    1520:	10800017 	ldw	r2,0(r2)
    1524:	200b883a 	mov	r5,r4
    1528:	01000034 	movhi	r4,0
    152c:	10c00217 	ldw	r3,8(r2)
    1530:	21073804 	addi	r4,r4,7392
    1534:	d9800104 	addi	r6,sp,4
    1538:	19000115 	stw	r4,4(r3)
    153c:	11000217 	ldw	r4,8(r2)
    1540:	0001cbc0 	call	1cbc <__vfprintf_internal>
    1544:	dfc00017 	ldw	ra,0(sp)
    1548:	dec00404 	addi	sp,sp,16
    154c:	f800283a 	ret

00001550 <_putchar_r>:
    1550:	21800217 	ldw	r6,8(r4)
    1554:	0001de01 	jmpi	1de0 <_putc_r>

00001558 <putchar>:
    1558:	00800034 	movhi	r2,0
    155c:	10890d04 	addi	r2,r2,9268
    1560:	200b883a 	mov	r5,r4
    1564:	11000017 	ldw	r4,0(r2)
    1568:	21800217 	ldw	r6,8(r4)
    156c:	0001de01 	jmpi	1de0 <_putc_r>

00001570 <_puts_r>:
    1570:	defffd04 	addi	sp,sp,-12
    1574:	dc000015 	stw	r16,0(sp)
    1578:	2021883a 	mov	r16,r4
    157c:	2809883a 	mov	r4,r5
    1580:	dfc00215 	stw	ra,8(sp)
    1584:	dc400115 	stw	r17,4(sp)
    1588:	2823883a 	mov	r17,r5
    158c:	00016c80 	call	16c8 <strlen>
    1590:	81400217 	ldw	r5,8(r16)
    1594:	00c00034 	movhi	r3,0
    1598:	18c73804 	addi	r3,r3,7392
    159c:	28c00115 	stw	r3,4(r5)
    15a0:	8009883a 	mov	r4,r16
    15a4:	880d883a 	mov	r6,r17
    15a8:	100f883a 	mov	r7,r2
    15ac:	0001ce00 	call	1ce0 <__sfvwrite_small_dev>
    15b0:	00ffffc4 	movi	r3,-1
    15b4:	10c00926 	beq	r2,r3,15dc <_puts_r+0x6c>
    15b8:	81400217 	ldw	r5,8(r16)
    15bc:	01800034 	movhi	r6,0
    15c0:	8009883a 	mov	r4,r16
    15c4:	28800117 	ldw	r2,4(r5)
    15c8:	3188c104 	addi	r6,r6,8964
    15cc:	01c00044 	movi	r7,1
    15d0:	103ee83a 	callr	r2
    15d4:	10bfffe0 	cmpeqi	r2,r2,-1
    15d8:	0085c83a 	sub	r2,zero,r2
    15dc:	dfc00217 	ldw	ra,8(sp)
    15e0:	dc400117 	ldw	r17,4(sp)
    15e4:	dc000017 	ldw	r16,0(sp)
    15e8:	dec00304 	addi	sp,sp,12
    15ec:	f800283a 	ret

000015f0 <puts>:
    15f0:	00800034 	movhi	r2,0
    15f4:	10890d04 	addi	r2,r2,9268
    15f8:	200b883a 	mov	r5,r4
    15fc:	11000017 	ldw	r4,0(r2)
    1600:	00015701 	jmpi	1570 <_puts_r>

00001604 <srand>:
    1604:	00800034 	movhi	r2,0
    1608:	10896004 	addi	r2,r2,9600
    160c:	11000015 	stw	r4,0(r2)
    1610:	10000115 	stw	zero,4(r2)
    1614:	f800283a 	ret

00001618 <rand>:
    1618:	defffe04 	addi	sp,sp,-8
    161c:	dc000015 	stw	r16,0(sp)
    1620:	04000034 	movhi	r16,0
    1624:	84096004 	addi	r16,r16,9600
    1628:	81000017 	ldw	r4,0(r16)
    162c:	81400117 	ldw	r5,4(r16)
    1630:	01932574 	movhi	r6,19605
    1634:	01d614b4 	movhi	r7,22610
    1638:	319fcb44 	addi	r6,r6,32557
    163c:	39fd0b44 	addi	r7,r7,-3027
    1640:	dfc00115 	stw	ra,4(sp)
    1644:	0001e900 	call	1e90 <__muldi3>
    1648:	11000044 	addi	r4,r2,1
    164c:	2085803a 	cmpltu	r2,r4,r2
    1650:	10c7883a 	add	r3,r2,r3
    1654:	00a00034 	movhi	r2,32768
    1658:	10bfffc4 	addi	r2,r2,-1
    165c:	1884703a 	and	r2,r3,r2
    1660:	81000015 	stw	r4,0(r16)
    1664:	80c00115 	stw	r3,4(r16)
    1668:	dfc00117 	ldw	ra,4(sp)
    166c:	dc000017 	ldw	r16,0(sp)
    1670:	dec00204 	addi	sp,sp,8
    1674:	f800283a 	ret

00001678 <_sbrk_r>:
    1678:	defffd04 	addi	sp,sp,-12
    167c:	dc000015 	stw	r16,0(sp)
    1680:	04000034 	movhi	r16,0
    1684:	dc400115 	stw	r17,4(sp)
    1688:	84096204 	addi	r16,r16,9608
    168c:	2023883a 	mov	r17,r4
    1690:	2809883a 	mov	r4,r5
    1694:	dfc00215 	stw	ra,8(sp)
    1698:	80000015 	stw	zero,0(r16)
    169c:	00021080 	call	2108 <sbrk>
    16a0:	00ffffc4 	movi	r3,-1
    16a4:	10c0031e 	bne	r2,r3,16b4 <_sbrk_r+0x3c>
    16a8:	80c00017 	ldw	r3,0(r16)
    16ac:	18000126 	beq	r3,zero,16b4 <_sbrk_r+0x3c>
    16b0:	88c00015 	stw	r3,0(r17)
    16b4:	dfc00217 	ldw	ra,8(sp)
    16b8:	dc400117 	ldw	r17,4(sp)
    16bc:	dc000017 	ldw	r16,0(sp)
    16c0:	dec00304 	addi	sp,sp,12
    16c4:	f800283a 	ret

000016c8 <strlen>:
    16c8:	2005883a 	mov	r2,r4
    16cc:	10c00007 	ldb	r3,0(r2)
    16d0:	18000226 	beq	r3,zero,16dc <strlen+0x14>
    16d4:	10800044 	addi	r2,r2,1
    16d8:	003ffc06 	br	16cc <_gp+0xffff72c4>
    16dc:	1105c83a 	sub	r2,r2,r4
    16e0:	f800283a 	ret

000016e4 <print_repeat>:
    16e4:	defffb04 	addi	sp,sp,-20
    16e8:	dc800315 	stw	r18,12(sp)
    16ec:	dc400215 	stw	r17,8(sp)
    16f0:	dc000115 	stw	r16,4(sp)
    16f4:	dfc00415 	stw	ra,16(sp)
    16f8:	2025883a 	mov	r18,r4
    16fc:	2823883a 	mov	r17,r5
    1700:	d9800005 	stb	r6,0(sp)
    1704:	3821883a 	mov	r16,r7
    1708:	04000a0e 	bge	zero,r16,1734 <print_repeat+0x50>
    170c:	88800117 	ldw	r2,4(r17)
    1710:	9009883a 	mov	r4,r18
    1714:	880b883a 	mov	r5,r17
    1718:	d80d883a 	mov	r6,sp
    171c:	01c00044 	movi	r7,1
    1720:	103ee83a 	callr	r2
    1724:	843fffc4 	addi	r16,r16,-1
    1728:	103ff726 	beq	r2,zero,1708 <_gp+0xffff7300>
    172c:	00bfffc4 	movi	r2,-1
    1730:	00000106 	br	1738 <print_repeat+0x54>
    1734:	0005883a 	mov	r2,zero
    1738:	dfc00417 	ldw	ra,16(sp)
    173c:	dc800317 	ldw	r18,12(sp)
    1740:	dc400217 	ldw	r17,8(sp)
    1744:	dc000117 	ldw	r16,4(sp)
    1748:	dec00504 	addi	sp,sp,20
    174c:	f800283a 	ret

00001750 <___vfprintf_internal_r>:
    1750:	deffe304 	addi	sp,sp,-116
    1754:	d8c00804 	addi	r3,sp,32
    1758:	df001b15 	stw	fp,108(sp)
    175c:	ddc01a15 	stw	r23,104(sp)
    1760:	dd801915 	stw	r22,100(sp)
    1764:	dd401815 	stw	r21,96(sp)
    1768:	dd001715 	stw	r20,92(sp)
    176c:	dcc01615 	stw	r19,88(sp)
    1770:	dc801515 	stw	r18,84(sp)
    1774:	dc401415 	stw	r17,80(sp)
    1778:	dc001315 	stw	r16,76(sp)
    177c:	dfc01c15 	stw	ra,112(sp)
    1780:	2029883a 	mov	r20,r4
    1784:	2823883a 	mov	r17,r5
    1788:	3839883a 	mov	fp,r7
    178c:	d9800f15 	stw	r6,60(sp)
    1790:	0021883a 	mov	r16,zero
    1794:	d8000e15 	stw	zero,56(sp)
    1798:	002f883a 	mov	r23,zero
    179c:	002b883a 	mov	r21,zero
    17a0:	0027883a 	mov	r19,zero
    17a4:	0025883a 	mov	r18,zero
    17a8:	d8000c15 	stw	zero,48(sp)
    17ac:	d8000b15 	stw	zero,44(sp)
    17b0:	002d883a 	mov	r22,zero
    17b4:	d8c00915 	stw	r3,36(sp)
    17b8:	d8c00f17 	ldw	r3,60(sp)
    17bc:	19000003 	ldbu	r4,0(r3)
    17c0:	20803fcc 	andi	r2,r4,255
    17c4:	1080201c 	xori	r2,r2,128
    17c8:	10bfe004 	addi	r2,r2,-128
    17cc:	10012e26 	beq	r2,zero,1c88 <___vfprintf_internal_r+0x538>
    17d0:	01400044 	movi	r5,1
    17d4:	b1401426 	beq	r22,r5,1828 <___vfprintf_internal_r+0xd8>
    17d8:	2d800216 	blt	r5,r22,17e4 <___vfprintf_internal_r+0x94>
    17dc:	b0000626 	beq	r22,zero,17f8 <___vfprintf_internal_r+0xa8>
    17e0:	00012506 	br	1c78 <___vfprintf_internal_r+0x528>
    17e4:	01400084 	movi	r5,2
    17e8:	b1401d26 	beq	r22,r5,1860 <___vfprintf_internal_r+0x110>
    17ec:	014000c4 	movi	r5,3
    17f0:	b1402b26 	beq	r22,r5,18a0 <___vfprintf_internal_r+0x150>
    17f4:	00012006 	br	1c78 <___vfprintf_internal_r+0x528>
    17f8:	01400944 	movi	r5,37
    17fc:	11410d26 	beq	r2,r5,1c34 <___vfprintf_internal_r+0x4e4>
    1800:	88800117 	ldw	r2,4(r17)
    1804:	d9000005 	stb	r4,0(sp)
    1808:	880b883a 	mov	r5,r17
    180c:	a009883a 	mov	r4,r20
    1810:	d80d883a 	mov	r6,sp
    1814:	01c00044 	movi	r7,1
    1818:	103ee83a 	callr	r2
    181c:	1000e81e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1820:	84000044 	addi	r16,r16,1
    1824:	00011406 	br	1c78 <___vfprintf_internal_r+0x528>
    1828:	01400c04 	movi	r5,48
    182c:	11410a26 	beq	r2,r5,1c58 <___vfprintf_internal_r+0x508>
    1830:	01400944 	movi	r5,37
    1834:	11400a1e 	bne	r2,r5,1860 <___vfprintf_internal_r+0x110>
    1838:	d8800005 	stb	r2,0(sp)
    183c:	88800117 	ldw	r2,4(r17)
    1840:	a009883a 	mov	r4,r20
    1844:	880b883a 	mov	r5,r17
    1848:	d80d883a 	mov	r6,sp
    184c:	b00f883a 	mov	r7,r22
    1850:	103ee83a 	callr	r2
    1854:	1000da1e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1858:	84000044 	addi	r16,r16,1
    185c:	00010506 	br	1c74 <___vfprintf_internal_r+0x524>
    1860:	25bff404 	addi	r22,r4,-48
    1864:	b5803fcc 	andi	r22,r22,255
    1868:	00c00244 	movi	r3,9
    186c:	1d800936 	bltu	r3,r22,1894 <___vfprintf_internal_r+0x144>
    1870:	00bfffc4 	movi	r2,-1
    1874:	90800426 	beq	r18,r2,1888 <___vfprintf_internal_r+0x138>
    1878:	9009883a 	mov	r4,r18
    187c:	01400284 	movi	r5,10
    1880:	00012380 	call	1238 <__mulsi3>
    1884:	00000106 	br	188c <___vfprintf_internal_r+0x13c>
    1888:	0005883a 	mov	r2,zero
    188c:	15a5883a 	add	r18,r2,r22
    1890:	0000f206 	br	1c5c <___vfprintf_internal_r+0x50c>
    1894:	01400b84 	movi	r5,46
    1898:	1140f426 	beq	r2,r5,1c6c <___vfprintf_internal_r+0x51c>
    189c:	05800084 	movi	r22,2
    18a0:	213ff404 	addi	r4,r4,-48
    18a4:	20c03fcc 	andi	r3,r4,255
    18a8:	01000244 	movi	r4,9
    18ac:	20c00b36 	bltu	r4,r3,18dc <___vfprintf_internal_r+0x18c>
    18b0:	00bfffc4 	movi	r2,-1
    18b4:	98800626 	beq	r19,r2,18d0 <___vfprintf_internal_r+0x180>
    18b8:	9809883a 	mov	r4,r19
    18bc:	01400284 	movi	r5,10
    18c0:	d8c01115 	stw	r3,68(sp)
    18c4:	00012380 	call	1238 <__mulsi3>
    18c8:	d8c01117 	ldw	r3,68(sp)
    18cc:	00000106 	br	18d4 <___vfprintf_internal_r+0x184>
    18d0:	0005883a 	mov	r2,zero
    18d4:	10e7883a 	add	r19,r2,r3
    18d8:	0000e706 	br	1c78 <___vfprintf_internal_r+0x528>
    18dc:	01401b04 	movi	r5,108
    18e0:	1140e026 	beq	r2,r5,1c64 <___vfprintf_internal_r+0x514>
    18e4:	013fffc4 	movi	r4,-1
    18e8:	99000226 	beq	r19,r4,18f4 <___vfprintf_internal_r+0x1a4>
    18ec:	d8000b15 	stw	zero,44(sp)
    18f0:	00000106 	br	18f8 <___vfprintf_internal_r+0x1a8>
    18f4:	04c00044 	movi	r19,1
    18f8:	01001a44 	movi	r4,105
    18fc:	11001626 	beq	r2,r4,1958 <___vfprintf_internal_r+0x208>
    1900:	20800916 	blt	r4,r2,1928 <___vfprintf_internal_r+0x1d8>
    1904:	010018c4 	movi	r4,99
    1908:	11009626 	beq	r2,r4,1b64 <___vfprintf_internal_r+0x414>
    190c:	01001904 	movi	r4,100
    1910:	11001126 	beq	r2,r4,1958 <___vfprintf_internal_r+0x208>
    1914:	01001604 	movi	r4,88
    1918:	1100d61e 	bne	r2,r4,1c74 <___vfprintf_internal_r+0x524>
    191c:	00c00044 	movi	r3,1
    1920:	d8c00e15 	stw	r3,56(sp)
    1924:	00001406 	br	1978 <___vfprintf_internal_r+0x228>
    1928:	01001cc4 	movi	r4,115
    192c:	1100a626 	beq	r2,r4,1bc8 <___vfprintf_internal_r+0x478>
    1930:	20800416 	blt	r4,r2,1944 <___vfprintf_internal_r+0x1f4>
    1934:	01001bc4 	movi	r4,111
    1938:	1100ce1e 	bne	r2,r4,1c74 <___vfprintf_internal_r+0x524>
    193c:	05400204 	movi	r21,8
    1940:	00000e06 	br	197c <___vfprintf_internal_r+0x22c>
    1944:	01001d44 	movi	r4,117
    1948:	11000c26 	beq	r2,r4,197c <___vfprintf_internal_r+0x22c>
    194c:	01001e04 	movi	r4,120
    1950:	11000926 	beq	r2,r4,1978 <___vfprintf_internal_r+0x228>
    1954:	0000c706 	br	1c74 <___vfprintf_internal_r+0x524>
    1958:	e0800104 	addi	r2,fp,4
    195c:	b8000726 	beq	r23,zero,197c <___vfprintf_internal_r+0x22c>
    1960:	d8800d15 	stw	r2,52(sp)
    1964:	e7000017 	ldw	fp,0(fp)
    1968:	e000080e 	bge	fp,zero,198c <___vfprintf_internal_r+0x23c>
    196c:	0739c83a 	sub	fp,zero,fp
    1970:	02000044 	movi	r8,1
    1974:	00000606 	br	1990 <___vfprintf_internal_r+0x240>
    1978:	05400404 	movi	r21,16
    197c:	e0c00104 	addi	r3,fp,4
    1980:	d8c00d15 	stw	r3,52(sp)
    1984:	e7000017 	ldw	fp,0(fp)
    1988:	002f883a 	mov	r23,zero
    198c:	0011883a 	mov	r8,zero
    1990:	002d883a 	mov	r22,zero
    1994:	dd87883a 	add	r3,sp,r22
    1998:	e0001a26 	beq	fp,zero,1a04 <___vfprintf_internal_r+0x2b4>
    199c:	e009883a 	mov	r4,fp
    19a0:	a80b883a 	mov	r5,r21
    19a4:	d8c01115 	stw	r3,68(sp)
    19a8:	da001215 	stw	r8,72(sp)
    19ac:	00012280 	call	1228 <__udivsi3>
    19b0:	a809883a 	mov	r4,r21
    19b4:	100b883a 	mov	r5,r2
    19b8:	d8801015 	stw	r2,64(sp)
    19bc:	00012380 	call	1238 <__mulsi3>
    19c0:	e085c83a 	sub	r2,fp,r2
    19c4:	01000244 	movi	r4,9
    19c8:	d8c01117 	ldw	r3,68(sp)
    19cc:	d9801017 	ldw	r6,64(sp)
    19d0:	da001217 	ldw	r8,72(sp)
    19d4:	20800216 	blt	r4,r2,19e0 <___vfprintf_internal_r+0x290>
    19d8:	17000c04 	addi	fp,r2,48
    19dc:	00000506 	br	19f4 <___vfprintf_internal_r+0x2a4>
    19e0:	d9400e17 	ldw	r5,56(sp)
    19e4:	28000226 	beq	r5,zero,19f0 <___vfprintf_internal_r+0x2a0>
    19e8:	17000dc4 	addi	fp,r2,55
    19ec:	00000106 	br	19f4 <___vfprintf_internal_r+0x2a4>
    19f0:	170015c4 	addi	fp,r2,87
    19f4:	1f000005 	stb	fp,0(r3)
    19f8:	b5800044 	addi	r22,r22,1
    19fc:	3039883a 	mov	fp,r6
    1a00:	003fe406 	br	1994 <_gp+0xffff758c>
    1a04:	1ec5c83a 	sub	r2,r3,sp
    1a08:	d8800a15 	stw	r2,40(sp)
    1a0c:	9885c83a 	sub	r2,r19,r2
    1a10:	1839883a 	mov	fp,r3
    1a14:	00800e0e 	bge	zero,r2,1a50 <___vfprintf_internal_r+0x300>
    1a18:	182d883a 	mov	r22,r3
    1a1c:	1885883a 	add	r2,r3,r2
    1a20:	01000c04 	movi	r4,48
    1a24:	d9400917 	ldw	r5,36(sp)
    1a28:	b007883a 	mov	r3,r22
    1a2c:	b140052e 	bgeu	r22,r5,1a44 <___vfprintf_internal_r+0x2f4>
    1a30:	b5800044 	addi	r22,r22,1
    1a34:	19000005 	stb	r4,0(r3)
    1a38:	b039883a 	mov	fp,r22
    1a3c:	b0bff91e 	bne	r22,r2,1a24 <_gp+0xffff761c>
    1a40:	00000106 	br	1a48 <___vfprintf_internal_r+0x2f8>
    1a44:	b039883a 	mov	fp,r22
    1a48:	b6edc83a 	sub	r22,r22,sp
    1a4c:	dd800a15 	stw	r22,40(sp)
    1a50:	d8800a17 	ldw	r2,40(sp)
    1a54:	1207883a 	add	r3,r2,r8
    1a58:	90edc83a 	sub	r22,r18,r3
    1a5c:	d8c00b17 	ldw	r3,44(sp)
    1a60:	18001726 	beq	r3,zero,1ac0 <___vfprintf_internal_r+0x370>
    1a64:	40000a26 	beq	r8,zero,1a90 <___vfprintf_internal_r+0x340>
    1a68:	00800b44 	movi	r2,45
    1a6c:	d8800805 	stb	r2,32(sp)
    1a70:	88800117 	ldw	r2,4(r17)
    1a74:	a009883a 	mov	r4,r20
    1a78:	880b883a 	mov	r5,r17
    1a7c:	d9800804 	addi	r6,sp,32
    1a80:	01c00044 	movi	r7,1
    1a84:	103ee83a 	callr	r2
    1a88:	10004d1e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1a8c:	84000044 	addi	r16,r16,1
    1a90:	0580070e 	bge	zero,r22,1ab0 <___vfprintf_internal_r+0x360>
    1a94:	a009883a 	mov	r4,r20
    1a98:	880b883a 	mov	r5,r17
    1a9c:	01800c04 	movi	r6,48
    1aa0:	b00f883a 	mov	r7,r22
    1aa4:	00016e40 	call	16e4 <print_repeat>
    1aa8:	1000451e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1aac:	85a1883a 	add	r16,r16,r22
    1ab0:	d9000a17 	ldw	r4,40(sp)
    1ab4:	e007883a 	mov	r3,fp
    1ab8:	272dc83a 	sub	r22,r4,fp
    1abc:	00002206 	br	1b48 <___vfprintf_internal_r+0x3f8>
    1ac0:	0580090e 	bge	zero,r22,1ae8 <___vfprintf_internal_r+0x398>
    1ac4:	a009883a 	mov	r4,r20
    1ac8:	880b883a 	mov	r5,r17
    1acc:	01800804 	movi	r6,32
    1ad0:	b00f883a 	mov	r7,r22
    1ad4:	da001215 	stw	r8,72(sp)
    1ad8:	00016e40 	call	16e4 <print_repeat>
    1adc:	da001217 	ldw	r8,72(sp)
    1ae0:	1000371e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1ae4:	85a1883a 	add	r16,r16,r22
    1ae8:	403ff126 	beq	r8,zero,1ab0 <_gp+0xffff76a8>
    1aec:	00800b44 	movi	r2,45
    1af0:	d8800805 	stb	r2,32(sp)
    1af4:	88800117 	ldw	r2,4(r17)
    1af8:	a009883a 	mov	r4,r20
    1afc:	880b883a 	mov	r5,r17
    1b00:	d9800804 	addi	r6,sp,32
    1b04:	01c00044 	movi	r7,1
    1b08:	103ee83a 	callr	r2
    1b0c:	10002c1e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1b10:	84000044 	addi	r16,r16,1
    1b14:	003fe606 	br	1ab0 <_gp+0xffff76a8>
    1b18:	18ffffc4 	addi	r3,r3,-1
    1b1c:	18800003 	ldbu	r2,0(r3)
    1b20:	a009883a 	mov	r4,r20
    1b24:	d8c01115 	stw	r3,68(sp)
    1b28:	d8800805 	stb	r2,32(sp)
    1b2c:	88800117 	ldw	r2,4(r17)
    1b30:	880b883a 	mov	r5,r17
    1b34:	d9800804 	addi	r6,sp,32
    1b38:	01c00044 	movi	r7,1
    1b3c:	103ee83a 	callr	r2
    1b40:	d8c01117 	ldw	r3,68(sp)
    1b44:	10001e1e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1b48:	80c5c83a 	sub	r2,r16,r3
    1b4c:	1d89883a 	add	r4,r3,r22
    1b50:	e085883a 	add	r2,fp,r2
    1b54:	013ff016 	blt	zero,r4,1b18 <_gp+0xffff7710>
    1b58:	1021883a 	mov	r16,r2
    1b5c:	df000d17 	ldw	fp,52(sp)
    1b60:	00004406 	br	1c74 <___vfprintf_internal_r+0x524>
    1b64:	01000044 	movi	r4,1
    1b68:	2480080e 	bge	r4,r18,1b8c <___vfprintf_internal_r+0x43c>
    1b6c:	95bfffc4 	addi	r22,r18,-1
    1b70:	a009883a 	mov	r4,r20
    1b74:	880b883a 	mov	r5,r17
    1b78:	01800804 	movi	r6,32
    1b7c:	b00f883a 	mov	r7,r22
    1b80:	00016e40 	call	16e4 <print_repeat>
    1b84:	10000e1e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1b88:	85a1883a 	add	r16,r16,r22
    1b8c:	e0800017 	ldw	r2,0(fp)
    1b90:	a009883a 	mov	r4,r20
    1b94:	880b883a 	mov	r5,r17
    1b98:	d8800005 	stb	r2,0(sp)
    1b9c:	88800117 	ldw	r2,4(r17)
    1ba0:	d80d883a 	mov	r6,sp
    1ba4:	01c00044 	movi	r7,1
    1ba8:	e5800104 	addi	r22,fp,4
    1bac:	103ee83a 	callr	r2
    1bb0:	1000031e 	bne	r2,zero,1bc0 <___vfprintf_internal_r+0x470>
    1bb4:	84000044 	addi	r16,r16,1
    1bb8:	b039883a 	mov	fp,r22
    1bbc:	00002d06 	br	1c74 <___vfprintf_internal_r+0x524>
    1bc0:	00bfffc4 	movi	r2,-1
    1bc4:	00003106 	br	1c8c <___vfprintf_internal_r+0x53c>
    1bc8:	e5800017 	ldw	r22,0(fp)
    1bcc:	e0c00104 	addi	r3,fp,4
    1bd0:	d8c00a15 	stw	r3,40(sp)
    1bd4:	b009883a 	mov	r4,r22
    1bd8:	00016c80 	call	16c8 <strlen>
    1bdc:	9091c83a 	sub	r8,r18,r2
    1be0:	1039883a 	mov	fp,r2
    1be4:	0200090e 	bge	zero,r8,1c0c <___vfprintf_internal_r+0x4bc>
    1be8:	400f883a 	mov	r7,r8
    1bec:	a009883a 	mov	r4,r20
    1bf0:	880b883a 	mov	r5,r17
    1bf4:	01800804 	movi	r6,32
    1bf8:	da001215 	stw	r8,72(sp)
    1bfc:	00016e40 	call	16e4 <print_repeat>
    1c00:	da001217 	ldw	r8,72(sp)
    1c04:	103fee1e 	bne	r2,zero,1bc0 <_gp+0xffff77b8>
    1c08:	8221883a 	add	r16,r16,r8
    1c0c:	88800117 	ldw	r2,4(r17)
    1c10:	a009883a 	mov	r4,r20
    1c14:	880b883a 	mov	r5,r17
    1c18:	b00d883a 	mov	r6,r22
    1c1c:	e00f883a 	mov	r7,fp
    1c20:	103ee83a 	callr	r2
    1c24:	103fe61e 	bne	r2,zero,1bc0 <_gp+0xffff77b8>
    1c28:	8721883a 	add	r16,r16,fp
    1c2c:	df000a17 	ldw	fp,40(sp)
    1c30:	00001006 	br	1c74 <___vfprintf_internal_r+0x524>
    1c34:	05c00044 	movi	r23,1
    1c38:	04ffffc4 	movi	r19,-1
    1c3c:	d8000e15 	stw	zero,56(sp)
    1c40:	05400284 	movi	r21,10
    1c44:	9825883a 	mov	r18,r19
    1c48:	d8000c15 	stw	zero,48(sp)
    1c4c:	d8000b15 	stw	zero,44(sp)
    1c50:	b82d883a 	mov	r22,r23
    1c54:	00000806 	br	1c78 <___vfprintf_internal_r+0x528>
    1c58:	dd800b15 	stw	r22,44(sp)
    1c5c:	05800084 	movi	r22,2
    1c60:	00000506 	br	1c78 <___vfprintf_internal_r+0x528>
    1c64:	00c00044 	movi	r3,1
    1c68:	d8c00c15 	stw	r3,48(sp)
    1c6c:	058000c4 	movi	r22,3
    1c70:	00000106 	br	1c78 <___vfprintf_internal_r+0x528>
    1c74:	002d883a 	mov	r22,zero
    1c78:	d8c00f17 	ldw	r3,60(sp)
    1c7c:	18c00044 	addi	r3,r3,1
    1c80:	d8c00f15 	stw	r3,60(sp)
    1c84:	003ecc06 	br	17b8 <_gp+0xffff73b0>
    1c88:	8005883a 	mov	r2,r16
    1c8c:	dfc01c17 	ldw	ra,112(sp)
    1c90:	df001b17 	ldw	fp,108(sp)
    1c94:	ddc01a17 	ldw	r23,104(sp)
    1c98:	dd801917 	ldw	r22,100(sp)
    1c9c:	dd401817 	ldw	r21,96(sp)
    1ca0:	dd001717 	ldw	r20,92(sp)
    1ca4:	dcc01617 	ldw	r19,88(sp)
    1ca8:	dc801517 	ldw	r18,84(sp)
    1cac:	dc401417 	ldw	r17,80(sp)
    1cb0:	dc001317 	ldw	r16,76(sp)
    1cb4:	dec01d04 	addi	sp,sp,116
    1cb8:	f800283a 	ret

00001cbc <__vfprintf_internal>:
    1cbc:	2007883a 	mov	r3,r4
    1cc0:	01000034 	movhi	r4,0
    1cc4:	21090d04 	addi	r4,r4,9268
    1cc8:	21000017 	ldw	r4,0(r4)
    1ccc:	2805883a 	mov	r2,r5
    1cd0:	300f883a 	mov	r7,r6
    1cd4:	180b883a 	mov	r5,r3
    1cd8:	100d883a 	mov	r6,r2
    1cdc:	00017501 	jmpi	1750 <___vfprintf_internal_r>

00001ce0 <__sfvwrite_small_dev>:
    1ce0:	2880000b 	ldhu	r2,0(r5)
    1ce4:	defffa04 	addi	sp,sp,-24
    1ce8:	dc000015 	stw	r16,0(sp)
    1cec:	dfc00515 	stw	ra,20(sp)
    1cf0:	dd000415 	stw	r20,16(sp)
    1cf4:	dcc00315 	stw	r19,12(sp)
    1cf8:	dc800215 	stw	r18,8(sp)
    1cfc:	dc400115 	stw	r17,4(sp)
    1d00:	1080020c 	andi	r2,r2,8
    1d04:	2821883a 	mov	r16,r5
    1d08:	10001726 	beq	r2,zero,1d68 <__sfvwrite_small_dev+0x88>
    1d0c:	2880008f 	ldh	r2,2(r5)
    1d10:	10001216 	blt	r2,zero,1d5c <__sfvwrite_small_dev+0x7c>
    1d14:	2027883a 	mov	r19,r4
    1d18:	3025883a 	mov	r18,r6
    1d1c:	3823883a 	mov	r17,r7
    1d20:	05010004 	movi	r20,1024
    1d24:	04400b0e 	bge	zero,r17,1d54 <__sfvwrite_small_dev+0x74>
    1d28:	8140008f 	ldh	r5,2(r16)
    1d2c:	880f883a 	mov	r7,r17
    1d30:	a440010e 	bge	r20,r17,1d38 <__sfvwrite_small_dev+0x58>
    1d34:	01c10004 	movi	r7,1024
    1d38:	9809883a 	mov	r4,r19
    1d3c:	900d883a 	mov	r6,r18
    1d40:	0001e380 	call	1e38 <_write_r>
    1d44:	0080050e 	bge	zero,r2,1d5c <__sfvwrite_small_dev+0x7c>
    1d48:	88a3c83a 	sub	r17,r17,r2
    1d4c:	90a5883a 	add	r18,r18,r2
    1d50:	003ff406 	br	1d24 <_gp+0xffff791c>
    1d54:	0005883a 	mov	r2,zero
    1d58:	00000406 	br	1d6c <__sfvwrite_small_dev+0x8c>
    1d5c:	8080000b 	ldhu	r2,0(r16)
    1d60:	10801014 	ori	r2,r2,64
    1d64:	8080000d 	sth	r2,0(r16)
    1d68:	00bfffc4 	movi	r2,-1
    1d6c:	dfc00517 	ldw	ra,20(sp)
    1d70:	dd000417 	ldw	r20,16(sp)
    1d74:	dcc00317 	ldw	r19,12(sp)
    1d78:	dc800217 	ldw	r18,8(sp)
    1d7c:	dc400117 	ldw	r17,4(sp)
    1d80:	dc000017 	ldw	r16,0(sp)
    1d84:	dec00604 	addi	sp,sp,24
    1d88:	f800283a 	ret

00001d8c <putc>:
    1d8c:	defffd04 	addi	sp,sp,-12
    1d90:	00800034 	movhi	r2,0
    1d94:	dc000115 	stw	r16,4(sp)
    1d98:	dfc00215 	stw	ra,8(sp)
    1d9c:	10873804 	addi	r2,r2,7392
    1da0:	28800115 	stw	r2,4(r5)
    1da4:	00800034 	movhi	r2,0
    1da8:	10890d04 	addi	r2,r2,9268
    1dac:	d9000005 	stb	r4,0(sp)
    1db0:	2021883a 	mov	r16,r4
    1db4:	11000017 	ldw	r4,0(r2)
    1db8:	d80d883a 	mov	r6,sp
    1dbc:	01c00044 	movi	r7,1
    1dc0:	0001ce00 	call	1ce0 <__sfvwrite_small_dev>
    1dc4:	00ffffc4 	movi	r3,-1
    1dc8:	10c00126 	beq	r2,r3,1dd0 <putc+0x44>
    1dcc:	8005883a 	mov	r2,r16
    1dd0:	dfc00217 	ldw	ra,8(sp)
    1dd4:	dc000117 	ldw	r16,4(sp)
    1dd8:	dec00304 	addi	sp,sp,12
    1ddc:	f800283a 	ret

00001de0 <_putc_r>:
    1de0:	defffd04 	addi	sp,sp,-12
    1de4:	00800034 	movhi	r2,0
    1de8:	dc000115 	stw	r16,4(sp)
    1dec:	dfc00215 	stw	ra,8(sp)
    1df0:	10873804 	addi	r2,r2,7392
    1df4:	30800115 	stw	r2,4(r6)
    1df8:	00800034 	movhi	r2,0
    1dfc:	10890d04 	addi	r2,r2,9268
    1e00:	11000017 	ldw	r4,0(r2)
    1e04:	2821883a 	mov	r16,r5
    1e08:	01c00044 	movi	r7,1
    1e0c:	300b883a 	mov	r5,r6
    1e10:	d80d883a 	mov	r6,sp
    1e14:	dc000005 	stb	r16,0(sp)
    1e18:	0001ce00 	call	1ce0 <__sfvwrite_small_dev>
    1e1c:	00ffffc4 	movi	r3,-1
    1e20:	10c00126 	beq	r2,r3,1e28 <_putc_r+0x48>
    1e24:	8005883a 	mov	r2,r16
    1e28:	dfc00217 	ldw	ra,8(sp)
    1e2c:	dc000117 	ldw	r16,4(sp)
    1e30:	dec00304 	addi	sp,sp,12
    1e34:	f800283a 	ret

00001e38 <_write_r>:
    1e38:	defffd04 	addi	sp,sp,-12
    1e3c:	dc000015 	stw	r16,0(sp)
    1e40:	04000034 	movhi	r16,0
    1e44:	dc400115 	stw	r17,4(sp)
    1e48:	84096204 	addi	r16,r16,9608
    1e4c:	2023883a 	mov	r17,r4
    1e50:	2809883a 	mov	r4,r5
    1e54:	300b883a 	mov	r5,r6
    1e58:	380d883a 	mov	r6,r7
    1e5c:	dfc00215 	stw	ra,8(sp)
    1e60:	80000015 	stw	zero,0(r16)
    1e64:	00021540 	call	2154 <write>
    1e68:	00ffffc4 	movi	r3,-1
    1e6c:	10c0031e 	bne	r2,r3,1e7c <_write_r+0x44>
    1e70:	80c00017 	ldw	r3,0(r16)
    1e74:	18000126 	beq	r3,zero,1e7c <_write_r+0x44>
    1e78:	88c00015 	stw	r3,0(r17)
    1e7c:	dfc00217 	ldw	ra,8(sp)
    1e80:	dc400117 	ldw	r17,4(sp)
    1e84:	dc000017 	ldw	r16,0(sp)
    1e88:	dec00304 	addi	sp,sp,12
    1e8c:	f800283a 	ret

00001e90 <__muldi3>:
    1e90:	defff604 	addi	sp,sp,-40
    1e94:	dd800615 	stw	r22,24(sp)
    1e98:	dd400515 	stw	r21,20(sp)
    1e9c:	25bfffcc 	andi	r22,r4,65535
    1ea0:	357fffcc 	andi	r21,r6,65535
    1ea4:	dc400115 	stw	r17,4(sp)
    1ea8:	2022d43a 	srli	r17,r4,16
    1eac:	dcc00315 	stw	r19,12(sp)
    1eb0:	dc800215 	stw	r18,8(sp)
    1eb4:	2027883a 	mov	r19,r4
    1eb8:	2825883a 	mov	r18,r5
    1ebc:	a809883a 	mov	r4,r21
    1ec0:	b00b883a 	mov	r5,r22
    1ec4:	dfc00915 	stw	ra,36(sp)
    1ec8:	df000815 	stw	fp,32(sp)
    1ecc:	ddc00715 	stw	r23,28(sp)
    1ed0:	3839883a 	mov	fp,r7
    1ed4:	302ed43a 	srli	r23,r6,16
    1ed8:	dd000415 	stw	r20,16(sp)
    1edc:	dc000015 	stw	r16,0(sp)
    1ee0:	3029883a 	mov	r20,r6
    1ee4:	00012380 	call	1238 <__mulsi3>
    1ee8:	a809883a 	mov	r4,r21
    1eec:	880b883a 	mov	r5,r17
    1ef0:	1021883a 	mov	r16,r2
    1ef4:	00012380 	call	1238 <__mulsi3>
    1ef8:	880b883a 	mov	r5,r17
    1efc:	b809883a 	mov	r4,r23
    1f00:	102b883a 	mov	r21,r2
    1f04:	00012380 	call	1238 <__mulsi3>
    1f08:	b809883a 	mov	r4,r23
    1f0c:	b00b883a 	mov	r5,r22
    1f10:	1023883a 	mov	r17,r2
    1f14:	00012380 	call	1238 <__mulsi3>
    1f18:	8012d43a 	srli	r9,r16,16
    1f1c:	a885883a 	add	r2,r21,r2
    1f20:	1251883a 	add	r8,r2,r9
    1f24:	4540022e 	bgeu	r8,r21,1f30 <__muldi3+0xa0>
    1f28:	00800074 	movhi	r2,1
    1f2c:	88a3883a 	add	r17,r17,r2
    1f30:	4006d43a 	srli	r3,r8,16
    1f34:	4010943a 	slli	r8,r8,16
    1f38:	9809883a 	mov	r4,r19
    1f3c:	e00b883a 	mov	r5,fp
    1f40:	843fffcc 	andi	r16,r16,65535
    1f44:	88e3883a 	add	r17,r17,r3
    1f48:	4421883a 	add	r16,r8,r16
    1f4c:	00012380 	call	1238 <__mulsi3>
    1f50:	a009883a 	mov	r4,r20
    1f54:	900b883a 	mov	r5,r18
    1f58:	1027883a 	mov	r19,r2
    1f5c:	00012380 	call	1238 <__mulsi3>
    1f60:	9885883a 	add	r2,r19,r2
    1f64:	1447883a 	add	r3,r2,r17
    1f68:	8005883a 	mov	r2,r16
    1f6c:	dfc00917 	ldw	ra,36(sp)
    1f70:	df000817 	ldw	fp,32(sp)
    1f74:	ddc00717 	ldw	r23,28(sp)
    1f78:	dd800617 	ldw	r22,24(sp)
    1f7c:	dd400517 	ldw	r21,20(sp)
    1f80:	dd000417 	ldw	r20,16(sp)
    1f84:	dcc00317 	ldw	r19,12(sp)
    1f88:	dc800217 	ldw	r18,8(sp)
    1f8c:	dc400117 	ldw	r17,4(sp)
    1f90:	dc000017 	ldw	r16,0(sp)
    1f94:	dec00a04 	addi	sp,sp,40
    1f98:	f800283a 	ret

00001f9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1f9c:	deffff04 	addi	sp,sp,-4
    1fa0:	01000034 	movhi	r4,0
    1fa4:	01400034 	movhi	r5,0
    1fa8:	dfc00015 	stw	ra,0(sp)
    1fac:	2108ca04 	addi	r4,r4,9000
    1fb0:	29491104 	addi	r5,r5,9284

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1fb4:	2140061e 	bne	r4,r5,1fd0 <alt_load+0x34>
    1fb8:	01000034 	movhi	r4,0
    1fbc:	01400034 	movhi	r5,0
    1fc0:	21000804 	addi	r4,r4,32
    1fc4:	29400804 	addi	r5,r5,32
    1fc8:	2140141e 	bne	r4,r5,201c <alt_load+0x80>
    1fcc:	00000d06 	br	2004 <alt_load+0x68>
    1fd0:	00c00034 	movhi	r3,0
    1fd4:	18c91104 	addi	r3,r3,9284
    1fd8:	00bfff04 	movi	r2,-4
    1fdc:	1907c83a 	sub	r3,r3,r4
    1fe0:	1886703a 	and	r3,r3,r2
    1fe4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1fe8:	10fff326 	beq	r2,r3,1fb8 <_gp+0xffff7bb0>
    1fec:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1ff0:	39c00017 	ldw	r7,0(r7)
    1ff4:	110d883a 	add	r6,r2,r4
    1ff8:	10800104 	addi	r2,r2,4
    1ffc:	31c00015 	stw	r7,0(r6)
    2000:	003ff906 	br	1fe8 <_gp+0xffff7be0>
    2004:	01000034 	movhi	r4,0
    2008:	01400034 	movhi	r5,0
    200c:	21088a04 	addi	r4,r4,8744
    2010:	29488a04 	addi	r5,r5,8744

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2014:	2140121e 	bne	r4,r5,2060 <alt_load+0xc4>
    2018:	00000d06 	br	2050 <alt_load+0xb4>
    201c:	00c00034 	movhi	r3,0
    2020:	18c00804 	addi	r3,r3,32
    2024:	00bfff04 	movi	r2,-4
    2028:	1907c83a 	sub	r3,r3,r4
    202c:	1886703a 	and	r3,r3,r2
    2030:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2034:	10fff326 	beq	r2,r3,2004 <_gp+0xffff7bfc>
    2038:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    203c:	39c00017 	ldw	r7,0(r7)
    2040:	110d883a 	add	r6,r2,r4
    2044:	10800104 	addi	r2,r2,4
    2048:	31c00015 	stw	r7,0(r6)
    204c:	003ff906 	br	2034 <_gp+0xffff7c2c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2050:	00022180 	call	2218 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2054:	dfc00017 	ldw	ra,0(sp)
    2058:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    205c:	000221c1 	jmpi	221c <alt_icache_flush_all>
    2060:	00c00034 	movhi	r3,0
    2064:	18c8ca04 	addi	r3,r3,9000
    2068:	00bfff04 	movi	r2,-4
    206c:	1907c83a 	sub	r3,r3,r4
    2070:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2074:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2078:	10fff526 	beq	r2,r3,2050 <_gp+0xffff7c48>
    207c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2080:	39c00017 	ldw	r7,0(r7)
    2084:	110d883a 	add	r6,r2,r4
    2088:	10800104 	addi	r2,r2,4
    208c:	31c00015 	stw	r7,0(r6)
    2090:	003ff906 	br	2078 <_gp+0xffff7c70>

00002094 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2094:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2098:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    209c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    20a0:	00021c00 	call	21c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    20a4:	00021e00 	call	21e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    20a8:	d1206317 	ldw	r4,-32372(gp)
    20ac:	d1606217 	ldw	r5,-32376(gp)
    20b0:	d1a06117 	ldw	r6,-32380(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    20b4:	dfc00017 	ldw	ra,0(sp)
    20b8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    20bc:	0000d501 	jmpi	d50 <main>

000020c0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    20c0:	defffd04 	addi	sp,sp,-12
    20c4:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    20c8:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    20cc:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    20d0:	01000034 	movhi	r4,0
    20d4:	21090f04 	addi	r4,r4,9276
    20d8:	d80b883a 	mov	r5,sp
    20dc:	01800044 	movi	r6,1
    20e0:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    20e4:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    20e8:	00021e40 	call	21e4 <altera_avalon_jtag_uart_write>
    20ec:	00ffffc4 	movi	r3,-1
    20f0:	10c00126 	beq	r2,r3,20f8 <alt_putchar+0x38>
        return -1;
    }
    return c;
    20f4:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    20f8:	dfc00217 	ldw	ra,8(sp)
    20fc:	dc000117 	ldw	r16,4(sp)
    2100:	dec00304 	addi	sp,sp,12
    2104:	f800283a 	ret

00002108 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2108:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    210c:	00bfff84 	movi	r2,-2
    2110:	2884703a 	and	r2,r5,r2
    2114:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2118:	d0a00c17 	ldw	r2,-32720(gp)
    211c:	00ffff04 	movi	r3,-4
    2120:	108000c4 	addi	r2,r2,3
    2124:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2128:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    212c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2130:	1109883a 	add	r4,r2,r4
    2134:	18d00004 	addi	r3,r3,16384
    2138:	1900032e 	bgeu	r3,r4,2148 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    213c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    2140:	00bfffc4 	movi	r2,-1
    2144:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    2148:	d1200c15 	stw	r4,-32720(gp)
    214c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    2150:	f800283a 	ret

00002154 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2154:	00800044 	movi	r2,1
    2158:	20800226 	beq	r4,r2,2164 <write+0x10>
    215c:	00800084 	movi	r2,2
    2160:	2080041e 	bne	r4,r2,2174 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2164:	01000034 	movhi	r4,0
    2168:	21090f04 	addi	r4,r4,9276
    216c:	000f883a 	mov	r7,zero
    2170:	00021e41 	jmpi	21e4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2174:	00800034 	movhi	r2,0
    2178:	10891004 	addi	r2,r2,9280
    217c:	10800017 	ldw	r2,0(r2)
    2180:	10000926 	beq	r2,zero,21a8 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2184:	deffff04 	addi	sp,sp,-4
    2188:	dfc00015 	stw	ra,0(sp)
    218c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2190:	00c01444 	movi	r3,81
    2194:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2198:	00bfffc4 	movi	r2,-1
    219c:	dfc00017 	ldw	ra,0(sp)
    21a0:	dec00104 	addi	sp,sp,4
    21a4:	f800283a 	ret
    21a8:	00800034 	movhi	r2,0
    21ac:	10896204 	addi	r2,r2,9608
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    21b0:	00c01444 	movi	r3,81
    21b4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    21b8:	00bfffc4 	movi	r2,-1
    21bc:	f800283a 	ret

000021c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    21c0:	deffff04 	addi	sp,sp,-4
    21c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    21c8:	00022200 	call	2220 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    21cc:	00800044 	movi	r2,1
    21d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    21d4:	dfc00017 	ldw	ra,0(sp)
    21d8:	dec00104 	addi	sp,sp,4
    21dc:	f800283a 	ret

000021e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    21e0:	f800283a 	ret

000021e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    21e4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    21e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    21ec:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    21f0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    21f4:	2980072e 	bgeu	r5,r6,2214 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    21f8:	38c00037 	ldwio	r3,0(r7)
    21fc:	18ffffec 	andhi	r3,r3,65535
    2200:	183ffc26 	beq	r3,zero,21f4 <_gp+0xffff7dec>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2204:	28c00007 	ldb	r3,0(r5)
    2208:	20c00035 	stwio	r3,0(r4)
    220c:	29400044 	addi	r5,r5,1
    2210:	003ff806 	br	21f4 <_gp+0xffff7dec>

  return count;
}
    2214:	f800283a 	ret

00002218 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2218:	f800283a 	ret

0000221c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    221c:	f800283a 	ret

00002220 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2220:	000170fa 	wrctl	ienable,zero
    2224:	f800283a 	ret
