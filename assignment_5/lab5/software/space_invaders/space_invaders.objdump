
space_invaders.elf:     file format elf32-littlenios2
space_invaders.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002358 memsz 0x00002358 flags r-x
    LOAD off    0x00003378 vaddr 0x00002378 paddr 0x00002494 align 2**12
         filesz 0x0000011c memsz 0x0000011c flags rw-
    LOAD off    0x000035b0 vaddr 0x000025b0 paddr 0x000025b0 align 2**12
         filesz 0x00000000 memsz 0x00000838 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00003494  2**0
                  CONTENTS
  2 .text         00002254  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000104  00002274  00002274  00003274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000011c  00002378  00002494  00003378  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000838  000025b0  000025b0  000035b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00002de8  00002de8  00003494  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003494  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004a8  00000000  00000000  000034b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008490  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d27  00000000  00000000  0000bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002bb9  00000000  00000000  0000eb17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ac0  00000000  00000000  000116d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000184d  00000000  00000000  00012190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000270d  00000000  00000000  000139dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000160ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000468  00000000  00000000  00016100  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00017f50  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00017f53  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017f56  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00017f57  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00017f58  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00017f61  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00017f6a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00017f73  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00017f7a  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00017fb3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009c22b  00000000  00000000  0001b626  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00002274 l    d  .rodata	00000000 .rodata
00002378 l    d  .rwdata	00000000 .rwdata
000025b0 l    d  .bss	00000000 .bss
00002de8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../space_invaders_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ProjectileNode.c
00000000 l    df *ABS*	00000000 data_structures_constants.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 gamelogic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001158 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
000025d0 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001730 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002378 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002488 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00001134 g     F .text	00000024 sram_free
000015a4 g     F .text	00000018 putchar
00000c20 g     F .text	00000158 checkCollideAliens
000020e0 g     F .text	0000002c alt_main
000015bc g     F .text	00000080 _puts_r
00002494 g       *ABS*	00000000 __flash_rwdata_start
00002de8 g     O *ABS*	00000000 __alt_heap_start
00000f5c g     F .text	00000098 getProjectile
00001550 g     F .text	0000004c printf
000025c4 g     O .bss	00000004 startTimer
00002478 g     O .rwdata	00000004 gunnerLeftToggle
00000098 g     F .text	00000140 updateProjectileNodes
0000248c g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000025d8 g     O .bss	00000004 errno
00000ed0 g     F .text	00000048 getAlien
000025e0 g     O .bss	00000004 alt_argv
0000a458 g       *ABS*	00000000 _gp
000025bc g     O .bss	00000004 alienShift
00002474 g     O .rwdata	00000004 gunnerRightToggle
00000ff4 g     F .text	00000090 setProjectile
0000159c g     F .text	00000008 _putchar_r
0000044c g     F .text	00000034 getAlienApperence
000008e4 g     F .text	00000068 moveGunnerLeft
0000163c g     F .text	00000014 puts
00002470 g     O .rwdata	00000004 gunnerShootToggle
000003b0 g     F .text	0000009c initRandomAliens
000012ac g     F .text	00000014 malloc
00001514 g     F .text	0000003c _printf_r
00001274 g     F .text	00000008 .hidden __udivsi3
0000094c g     F .text	0000006c moveGunnerRight
000016c4 g     F .text	00000050 _sbrk_r
00000360 g     F .text	00000028 createProjectile
000025c0 g     O .bss	00000004 pSramAliens
0000026c g     F .text	00000068 updateProjectileBuffer
00000b8c g     F .text	00000094 checkGunnerWin
00002458 g     O .rwdata	00000004 gunner
000001d8 g     F .text	00000094 initProjectileBuffer
00002480 g     O .rwdata	00000004 _global_impure_ptr
00002de8 g       *ABS*	00000000 __bss_end
00000388 g     F .text	00000028 newAlien
0000246c g     O .rwdata	00000004 alienShootToggle
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00002264 g     F .text	00000004 alt_dcache_flush_all
00002494 g       *ABS*	00000000 __ram_rwdata_end
000021a0 g     F .text	0000006c write
00001e2c g     F .text	00000058 _putc_r
00002378 g       *ABS*	00000000 __ram_rodata_end
00000d78 g     F .text	00000024 checkCollideGunner
000025b8 g     O .bss	00000004 gameOver
0000127c g     F .text	00000008 .hidden __umodsi3
00000748 g     F .text	000000d0 printGunnerSlice
0000069c g     F .text	000000ac printVoid
00002460 g     O .rwdata	00000004 alien1
00002de8 g     O *ABS*	00000004 end
00000f18 g     F .text	00000044 setAlien
000025b4 g     O .bss	00000004 head
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002230 g     F .text	00000034 altera_avalon_jtag_uart_write
0000179c g     F .text	0000056c ___vfprintf_internal_r
000012d4 g     F .text	000000e4 _free_r
00000020 g     F .text	0000003c _start
00001664 g     F .text	00000060 rand
0000222c g     F .text	00000004 alt_sys_init
00000618 g     F .text	00000084 printAliens
00001284 g     F .text	00000028 .hidden __mulsi3
00002378 g       *ABS*	00000000 __ram_rwdata_start
00002274 g       *ABS*	00000000 __ram_rodata_start
000025e8 g     O .bss	00000800 sram
00002de8 g       *ABS*	00000000 __alt_stack_base
00002154 g     F .text	0000004c sbrk
00000560 g     F .text	000000b8 printSlice
00001d2c g     F .text	000000ac __sfvwrite_small_dev
000025b0 g       *ABS*	00000000 __bss_start
00000d9c g     F .text	00000134 main
000025dc g     O .bss	00000004 alt_envp
00001650 g     F .text	00000014 srand
00004000 g       *ABS*	00000000 __alt_heap_limit
000013b8 g     F .text	0000015c _malloc_r
00002490 g     O .rwdata	00000004 alt_errno
000010a8 g     F .text	0000008c sram_malloc
00001dd8 g     F .text	00000054 putc
000011c4 g     F .text	00000054 .hidden __divsi3
00002274 g       *ABS*	00000000 __flash_rodata_start
000008e0 g     F .text	00000004 initializeGame
0000220c g     F .text	00000020 alt_irq_init
00001084 g     F .text	00000024 resetSRAM
00001e84 g     F .text	00000058 _write_r
000009b8 g     F .text	000000a0 shootGunner
00002484 g     O .rwdata	00000004 _impure_ptr
000025e4 g     O .bss	00000004 alt_argc
000002d4 g     F .text	0000006c addProjectileNode
00002464 g     O .rwdata	00000004 alien0
00000340 g     F .text	00000020 listLength
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000005c g     F .text	0000003c removeProjectileNode
00002494 g       *ABS*	00000000 _edata
00002de8 g       *ABS*	00000000 _end
00000818 g     F .text	0000004c printGunner
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000226c g     F .text	00000008 altera_nios2_qsys_irq_init
00001218 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000247c g     O .rwdata	00000004 gunnerX
0000000c g       .entry	00000000 _exit
00001edc g     F .text	0000010c .hidden __muldi3
00001714 g     F .text	0000001c strlen
00000480 g     F .text	000000e0 printAlienSlice
0000210c g     F .text	00000048 alt_putchar
000025c8 g     O .bss	00000004 __malloc_sbrk_start
00002268 g     F .text	00000004 alt_icache_flush_all
00000a58 g     F .text	00000134 shootAliens
000025cc g     O .bss	00000004 __malloc_free_list
00001d08 g     F .text	00000024 __vfprintf_internal
00002468 g     O .rwdata	00000004 empty_space
00001fe8 g     F .text	000000f8 alt_load
0000245c g     O .rwdata	00000004 alien2
00000864 g     F .text	0000007c updateDisplay
000012c0 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a91614 	ori	gp,gp,42072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10896c14 	ori	r2,r2,9648

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cb7a14 	ori	r3,r3,11752

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff5bec>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0001fe80 	call	1fe8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00020e00 	call	20e0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff5c00>

0000005c <removeProjectileNode>:

struct ProjectileNode *head = NULL;
struct ProjectileNode *end = NULL;

void removeProjectileNode(struct ProjectileNode* proj) {
    if(head == proj) {
      5c:	d0e05717 	ldw	r3,-32420(gp)
      60:	18800217 	ldw	r2,8(r3)
      64:	1900051e 	bne	r3,r4,7c <removeProjectileNode+0x20>
        if(proj == end) end = NULL;
      68:	d1226417 	ldw	r4,-30320(gp)
      6c:	1900011e 	bne	r3,r4,74 <removeProjectileNode+0x18>
      70:	d0226415 	stw	zero,-30320(gp)
        head = proj->next;
      74:	d0a05715 	stw	r2,-32420(gp)
      78:	f800283a 	ret
    } else {
        struct ProjectileNode* current = head;
        while(current->next != proj) { }
      7c:	113fff1e 	bne	r2,r4,7c <_gp+0xffff5c24>
        current->next = proj->next;
      80:	11000217 	ldw	r4,8(r2)
      84:	19000215 	stw	r4,8(r3)
        if(proj == end) end = current->next;
      88:	d0e26417 	ldw	r3,-30320(gp)
      8c:	10c0011e 	bne	r2,r3,94 <removeProjectileNode+0x38>
      90:	d1226415 	stw	r4,-30320(gp)
      94:	f800283a 	ret

00000098 <updateProjectileNodes>:
    }
	//printf("removed success x:%i y:%i", proj->bullet.xVal, proj->bullet.yVal);
    //free(proj);
}

void updateProjectileNodes() {
      98:	defff904 	addi	sp,sp,-28
      9c:	dc000015 	stw	r16,0(sp)
    //if head is null, return
    if(head == NULL) return;
      a0:	d4205717 	ldw	r16,-32420(gp)
    }
	//printf("removed success x:%i y:%i", proj->bullet.xVal, proj->bullet.yVal);
    //free(proj);
}

void updateProjectileNodes() {
      a4:	dfc00615 	stw	ra,24(sp)
      a8:	dd400515 	stw	r21,20(sp)
      ac:	dd000415 	stw	r20,16(sp)
      b0:	dcc00315 	stw	r19,12(sp)
      b4:	dc800215 	stw	r18,8(sp)
      b8:	dc400115 	stw	r17,4(sp)
    //if head is null, return
    if(head == NULL) return;
      bc:	80003d26 	beq	r16,zero,1b4 <updateProjectileNodes+0x11c>
        if(tempCurrent->bullet.yVal < -1) {
            checkCollideGunner((int)tempCurrent->bullet.xVal);
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
      c0:	05000034 	movhi	r20,0
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
      c4:	04400044 	movi	r17,1
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;

        if(tempCurrent->bullet.yVal < -1) {
      c8:	04bfffc4 	movi	r18,-1
            checkCollideGunner((int)tempCurrent->bullet.xVal);
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
      cc:	04c000c4 	movi	r19,3
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
      d0:	a5097004 	addi	r20,r20,9664
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
      d4:	80800083 	ldbu	r2,2(r16)
      d8:	81000143 	ldbu	r4,5(r16)
      dc:	10c03fcc 	andi	r3,r2,255
      e0:	21803fcc 	andi	r6,r4,255
      e4:	18c0201c 	xori	r3,r3,128
      e8:	3180201c 	xori	r6,r6,128
      ec:	18ffe004 	addi	r3,r3,-128
      f0:	31bfe004 	addi	r6,r6,-128
      f4:	180b883a 	mov	r5,r3
      f8:	1800010e 	bge	r3,zero,100 <updateProjectileNodes+0x68>
      fc:	00c7c83a 	sub	r3,zero,r3
     100:	30c0030e 	bge	r6,r3,110 <updateProjectileNodes+0x78>
            current->bullet.timeTick++;
     104:	21000044 	addi	r4,r4,1
     108:	81000145 	stb	r4,5(r16)
     10c:	00000a06 	br	138 <updateProjectileNodes+0xa0>
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
     110:	80c00107 	ldb	r3,4(r16)
    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
     114:	80000145 	stb	zero,5(r16)
            if(current->bullet.type == 1) { //Straight Line
     118:	1c40071e 	bne	r3,r17,138 <updateProjectileNodes+0xa0>
     11c:	81000043 	ldbu	r4,1(r16)
                current->bullet.yVal -= (current->bullet.direction < 0);
     120:	10803fcc 	andi	r2,r2,255
     124:	1004d1fa 	srli	r2,r2,7
                current->bullet.yVal += (current->bullet.direction > 0);
     128:	0146803a 	cmplt	r3,zero,r5
     12c:	1907883a 	add	r3,r3,r4
     130:	1885c83a 	sub	r2,r3,r2
     134:	80800045 	stb	r2,1(r16)
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;

        if(tempCurrent->bullet.yVal < -1) {
     138:	80800047 	ldb	r2,1(r16)
            }
        }
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;
     13c:	85400217 	ldw	r21,8(r16)

        if(tempCurrent->bullet.yVal < -1) {
     140:	1480030e 	bge	r2,r18,150 <updateProjectileNodes+0xb8>
            checkCollideGunner((int)tempCurrent->bullet.xVal);
     144:	81000007 	ldb	r4,0(r16)
     148:	0000d780 	call	d78 <checkCollideGunner>
     14c:	00000a06 	br	178 <updateProjectileNodes+0xe0>
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
     150:	98800b0e 	bge	r19,r2,180 <updateProjectileNodes+0xe8>
     154:	01400a0e 	bge	zero,r5,180 <updateProjectileNodes+0xe8>
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
     158:	81000007 	ldb	r4,0(r16)
     15c:	01400144 	movi	r5,5
     160:	00011c40 	call	11c4 <__divsi3>
            checkCollideAliens(pSramAliens, alienX);
     164:	11403fcc 	andi	r5,r2,255
     168:	a1000017 	ldw	r4,0(r20)
     16c:	2940201c 	xori	r5,r5,128
     170:	297fe004 	addi	r5,r5,-128
     174:	0000c200 	call	c20 <checkCollideAliens>
            removeProjectileNode(tempCurrent);
     178:	8009883a 	mov	r4,r16
     17c:	000005c0 	call	5c <removeProjectileNode>
void updateProjectileNodes() {
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
     180:	a8000226 	beq	r21,zero,18c <updateProjectileNodes+0xf4>
     184:	a821883a 	mov	r16,r21
     188:	003fd206 	br	d4 <_gp+0xffff5c7c>
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     18c:	01000284 	movi	r4,10
}
     190:	dfc00617 	ldw	ra,24(sp)
     194:	dd400517 	ldw	r21,20(sp)
     198:	dd000417 	ldw	r20,16(sp)
     19c:	dcc00317 	ldw	r19,12(sp)
     1a0:	dc800217 	ldw	r18,8(sp)
     1a4:	dc400117 	ldw	r17,4(sp)
     1a8:	dc000017 	ldw	r16,0(sp)
     1ac:	dec00704 	addi	sp,sp,28
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     1b0:	00015a41 	jmpi	15a4 <putchar>
}
     1b4:	dfc00617 	ldw	ra,24(sp)
     1b8:	dd400517 	ldw	r21,20(sp)
     1bc:	dd000417 	ldw	r20,16(sp)
     1c0:	dcc00317 	ldw	r19,12(sp)
     1c4:	dc800217 	ldw	r18,8(sp)
     1c8:	dc400117 	ldw	r17,4(sp)
     1cc:	dc000017 	ldw	r16,0(sp)
     1d0:	dec00704 	addi	sp,sp,28
     1d4:	f800283a 	ret

000001d8 <initProjectileBuffer>:


void initProjectileBuffer(int pSramBulletBuffer) {
     1d8:	defff704 	addi	sp,sp,-36
     1dc:	dd000715 	stw	r20,28(sp)
     1e0:	dcc00615 	stw	r19,24(sp)
     1e4:	dc800515 	stw	r18,20(sp)
     1e8:	dc400415 	stw	r17,16(sp)
     1ec:	dfc00815 	stw	ra,32(sp)
     1f0:	dc000315 	stw	r16,12(sp)
     1f4:	2025883a 	mov	r18,r4
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     1f8:	0023883a 	mov	r17,zero
        for(y = 0; y < VOID_HEIGHT; y++) {
     1fc:	04c000c4 	movi	r19,3
}


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     200:	05000a04 	movi	r20,40
    }
    printf("\n");
}


void initProjectileBuffer(int pSramBulletBuffer) {
     204:	0021883a 	mov	r16,zero
     208:	d8000205 	stb	zero,8(sp)
     20c:	d8000245 	stb	zero,9(sp)
     210:	d8000105 	stb	zero,4(sp)
     214:	d8000145 	stb	zero,5(sp)
     218:	d8000185 	stb	zero,6(sp)
     21c:	d80001c5 	stb	zero,7(sp)
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
     220:	d880020b 	ldhu	r2,8(sp)
     224:	d9c00117 	ldw	r7,4(sp)
     228:	800d883a 	mov	r6,r16
     22c:	d880000d 	sth	r2,0(sp)
     230:	9009883a 	mov	r4,r18
     234:	880b883a 	mov	r5,r17


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
     238:	84000044 	addi	r16,r16,1
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
     23c:	0000ff40 	call	ff4 <setProjectile>


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
     240:	84fff11e 	bne	r16,r19,208 <_gp+0xffff5db0>
}


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     244:	8c400044 	addi	r17,r17,1
     248:	8d3fee1e 	bne	r17,r20,204 <_gp+0xffff5dac>
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}
     24c:	dfc00817 	ldw	ra,32(sp)
     250:	dd000717 	ldw	r20,28(sp)
     254:	dcc00617 	ldw	r19,24(sp)
     258:	dc800517 	ldw	r18,20(sp)
     25c:	dc400417 	ldw	r17,16(sp)
     260:	dc000317 	ldw	r16,12(sp)
     264:	dec00904 	addi	sp,sp,36
     268:	f800283a 	ret

0000026c <updateProjectileBuffer>:

void updateProjectileBuffer(int pSramBulletBuffer) {
    if(head == NULL) return;
     26c:	d0a05717 	ldw	r2,-32420(gp)
     270:	10001726 	beq	r2,zero,2d0 <updateProjectileBuffer+0x64>
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}

void updateProjectileBuffer(int pSramBulletBuffer) {
     274:	defffa04 	addi	sp,sp,-24
     278:	dc400415 	stw	r17,16(sp)
     27c:	dc000315 	stw	r16,12(sp)
     280:	dfc00515 	stw	ra,20(sp)
     284:	2023883a 	mov	r17,r4
    if(head == NULL) return;
	initProjectileBuffer(pSramBulletBuffer);
     288:	00001d80 	call	1d8 <initProjectileBuffer>
    struct ProjectileNode* current = head;
     28c:	d4205717 	ldw	r16,-32420(gp)
    while(current != NULL) {
     290:	80000b26 	beq	r16,zero,2c0 <updateProjectileBuffer+0x54>
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     294:	8080010b 	ldhu	r2,4(r16)
     298:	81c00017 	ldw	r7,0(r16)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     29c:	81400007 	ldb	r5,0(r16)
     2a0:	81800047 	ldb	r6,1(r16)
     2a4:	8809883a 	mov	r4,r17
     2a8:	d880000d 	sth	r2,0(sp)
	initProjectileBuffer(pSramBulletBuffer);
    struct ProjectileNode* current = head;
    while(current != NULL) {
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     2ac:	d9c00115 	stw	r7,4(sp)
     2b0:	d880020d 	sth	r2,8(sp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     2b4:	0000ff40 	call	ff4 <setProjectile>
        current = current->next;
     2b8:	84000217 	ldw	r16,8(r16)
     2bc:	003ff406 	br	290 <_gp+0xffff5e38>
    }
}
     2c0:	dfc00517 	ldw	ra,20(sp)
     2c4:	dc400417 	ldw	r17,16(sp)
     2c8:	dc000317 	ldw	r16,12(sp)
     2cc:	dec00604 	addi	sp,sp,24
     2d0:	f800283a 	ret

000002d4 <addProjectileNode>:

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     2d4:	d0a05717 	ldw	r2,-32420(gp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
     2d8:	defffd04 	addi	sp,sp,-12
     2dc:	d9000015 	stw	r4,0(sp)
     2e0:	dfc00215 	stw	ra,8(sp)
     2e4:	d9400115 	stw	r5,4(sp)
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     2e8:	01000304 	movi	r4,12
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     2ec:	1000081e 	bne	r2,zero,310 <addProjectileNode+0x3c>
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     2f0:	00012ac0 	call	12ac <malloc>
        head->bullet = proj;
     2f4:	d8c00017 	ldw	r3,0(sp)
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     2f8:	d0a05715 	stw	r2,-32420(gp)
        head->bullet = proj;
        head->next = NULL;
     2fc:	10000215 	stw	zero,8(r2)
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        head->bullet = proj;
     300:	10c00015 	stw	r3,0(r2)
     304:	d8c0010b 	ldhu	r3,4(sp)
     308:	10c0010d 	sth	r3,4(r2)
     30c:	00000806 	br	330 <addProjectileNode+0x5c>
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     310:	00012ac0 	call	12ac <malloc>
        nextProj->bullet = proj;
     314:	d8c00017 	ldw	r3,0(sp)
        nextProj->next = NULL;
     318:	10000215 	stw	zero,8(r2)
        head->bullet = proj;
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        nextProj->bullet = proj;
     31c:	10c00015 	stw	r3,0(r2)
     320:	d8c0010b 	ldhu	r3,4(sp)
     324:	10c0010d 	sth	r3,4(r2)
        nextProj->next = NULL;
		
        end->next = nextProj;
     328:	d0e26417 	ldw	r3,-30320(gp)
     32c:	18800215 	stw	r2,8(r3)
        end = nextProj;
     330:	d0a26415 	stw	r2,-30320(gp)
    }
}
     334:	dfc00217 	ldw	ra,8(sp)
     338:	dec00304 	addi	sp,sp,12
     33c:	f800283a 	ret

00000340 <listLength>:

int listLength() {
	if(head == NULL) return 0;
     340:	d0e05717 	ldw	r3,-32420(gp)
     344:	0005883a 	mov	r2,zero
     348:	18000426 	beq	r3,zero,35c <listLength+0x1c>
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
     34c:	18c00217 	ldw	r3,8(r3)
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
     350:	10800044 	addi	r2,r2,1
int listLength() {
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
     354:	183ffd1e 	bne	r3,zero,34c <_gp+0xffff5ef4>
     358:	f800283a 	ret
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
    }
	return size;
}
     35c:	f800283a 	ret

00000360 <createProjectile>:
    proj.yVal = 0;
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
     360:	29403fcc 	andi	r5,r5,255
     364:	280a943a 	slli	r5,r5,16
     368:	300c963a 	slli	r6,r6,24
     36c:	21003fcc 	andi	r4,r4,255
     370:	2144b03a 	or	r2,r4,r5
}
     374:	1184b03a 	or	r2,r2,r6
     378:	38c03fcc 	andi	r3,r7,255
		current = current->next;
    }
	return size;
}

struct Projectile createProjectile(char x, char dir, char symb, char t) {
     37c:	defffe04 	addi	sp,sp,-8
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
}
     380:	dec00204 	addi	sp,sp,8
     384:	f800283a 	ret

00000388 <newAlien>:
struct Alien newAlien(char alive, char type, char id) {
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
     388:	29403fcc 	andi	r5,r5,255
     38c:	31803fcc 	andi	r6,r6,255
     390:	280a923a 	slli	r5,r5,8
     394:	3004943a 	slli	r2,r6,16
     398:	21003fcc 	andi	r4,r4,255
     39c:	214ab03a 	or	r5,r4,r5
};
     3a0:	2884b03a 	or	r2,r5,r2
#include "data_structures_constants.h"
#include "sram.h"
#include "display.h"


struct Alien newAlien(char alive, char type, char id) {
     3a4:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
};
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <initRandomAliens>:

void initRandomAliens(int pSramAliens) {
     3b0:	defff804 	addi	sp,sp,-32
     3b4:	dd400615 	stw	r21,24(sp)
     3b8:	dd000515 	stw	r20,20(sp)
     3bc:	dcc00415 	stw	r19,16(sp)
     3c0:	dc800315 	stw	r18,12(sp)
     3c4:	dc400215 	stw	r17,8(sp)
     3c8:	dfc00715 	stw	ra,28(sp)
     3cc:	dc000115 	stw	r16,4(sp)
     3d0:	2025883a 	mov	r18,r4
    int x, y;
    for(x = 0; x < 3; x++) {
     3d4:	0023883a 	mov	r17,zero
     3d8:	04c00044 	movi	r19,1
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     3dc:	050000c4 	movi	r20,3
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     3e0:	05400204 	movi	r21,8
    a.type = type;
    a.rowId = id;
    return a;
};

void initRandomAliens(int pSramAliens) {
     3e4:	0021883a 	mov	r16,zero
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     3e8:	00016640 	call	1664 <rand>
     3ec:	1009883a 	mov	r4,r2
     3f0:	014000c4 	movi	r5,3
     3f4:	dcc00005 	stb	r19,0(sp)
     3f8:	00012180 	call	1218 <__modsi3>
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     3fc:	d8800045 	stb	r2,1(sp)
     400:	dc000085 	stb	r16,2(sp)
     404:	d9c00017 	ldw	r7,0(sp)
     408:	800d883a 	mov	r6,r16
     40c:	9009883a 	mov	r4,r18
     410:	880b883a 	mov	r5,r17
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     414:	84000044 	addi	r16,r16,1
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     418:	0000f180 	call	f18 <setAlien>
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     41c:	857ff21e 	bne	r16,r21,3e8 <_gp+0xffff5f90>
    return a;
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
     420:	8c400044 	addi	r17,r17,1
     424:	8d3fef1e 	bne	r17,r20,3e4 <_gp+0xffff5f8c>
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
        }
    }
}
     428:	dfc00717 	ldw	ra,28(sp)
     42c:	dd400617 	ldw	r21,24(sp)
     430:	dd000517 	ldw	r20,20(sp)
     434:	dcc00417 	ldw	r19,16(sp)
     438:	dc800317 	ldw	r18,12(sp)
     43c:	dc400217 	ldw	r17,8(sp)
     440:	dc000117 	ldw	r16,4(sp)
     444:	dec00804 	addi	sp,sp,32
     448:	f800283a 	ret

0000044c <getAlienApperence>:

const char* getAlienApperence(int type) {
    if(type == 0) {
     44c:	2000031e 	bne	r4,zero,45c <getAlienApperence+0x10>
        return alien0;
     450:	00800034 	movhi	r2,0
     454:	10891904 	addi	r2,r2,9316
     458:	00000706 	br	478 <getAlienApperence+0x2c>
    } else if(type == 1) {
     45c:	00800044 	movi	r2,1
     460:	2080031e 	bne	r4,r2,470 <getAlienApperence+0x24>
        return alien1;
     464:	00800034 	movhi	r2,0
     468:	10891804 	addi	r2,r2,9312
     46c:	00000206 	br	478 <getAlienApperence+0x2c>
    } else {
        return alien2;
     470:	00800034 	movhi	r2,0
     474:	10891704 	addi	r2,r2,9308
     478:	10800017 	ldw	r2,0(r2)
    }
}
     47c:	f800283a 	ret

00000480 <printAlienSlice>:

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
     480:	defff904 	addi	sp,sp,-28
     484:	dc000115 	stw	r16,4(sp)
     488:	dfc00615 	stw	ra,24(sp)
     48c:	dd000515 	stw	r20,20(sp)
     490:	dcc00415 	stw	r19,16(sp)
     494:	dc800315 	stw	r18,12(sp)
     498:	dc400215 	stw	r17,8(sp)
     49c:	3821883a 	mov	r16,r7
    struct Alien alien = getAlien(pSramAliens, x, y);
     4a0:	0000ed00 	call	ed0 <getAlien>
     4a4:	1006d23a 	srli	r3,r2,8
     4a8:	d8800005 	stb	r2,0(sp)
     4ac:	d8c00045 	stb	r3,1(sp)
     4b0:	1006d43a 	srli	r3,r2,16
    if(alien.alive == 1) {
     4b4:	10803fcc 	andi	r2,r2,255
     4b8:	1080201c 	xori	r2,r2,128
        return alien2;
    }
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
     4bc:	d8c00085 	stb	r3,2(sp)
    if(alien.alive == 1) {
     4c0:	10bfe004 	addi	r2,r2,-128
     4c4:	00c00044 	movi	r3,1
     4c8:	10c0181e 	bne	r2,r3,52c <printAlienSlice+0xac>
        char* alienApperence = getAlienApperence(alien.type);
     4cc:	d9000047 	ldb	r4,1(sp)
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     4d0:	05000c04 	movi	r20,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     4d4:	04800144 	movi	r18,5
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     4d8:	000044c0 	call	44c <getAlienApperence>
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     4dc:	d9000717 	ldw	r4,28(sp)
     4e0:	014003c4 	movi	r5,15
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     4e4:	1027883a 	mov	r19,r2
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     4e8:	00012840 	call	1284 <__mulsi3>
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     4ec:	8009883a 	mov	r4,r16
     4f0:	01400144 	movi	r5,5

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     4f4:	1023883a 	mov	r17,r2
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     4f8:	00012840 	call	1284 <__mulsi3>
     4fc:	88a3883a 	add	r17,r17,r2
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     500:	0021883a 	mov	r16,zero
     504:	8447883a 	add	r3,r16,r17
     508:	98c7883a 	add	r3,r19,r3
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     50c:	19000007 	ldb	r4,0(r3)
     510:	2500021e 	bne	r4,r20,51c <printAlienSlice+0x9c>
                putchar(alien.rowId + 48);
     514:	d9000087 	ldb	r4,2(sp)
     518:	21000c04 	addi	r4,r4,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     51c:	84000044 	addi	r16,r16,1
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
                putchar(alien.rowId + 48);
            } else {
                putchar(alienApperence[index]);
     520:	00015a40 	call	15a4 <putchar>
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     524:	84bff71e 	bne	r16,r18,504 <_gp+0xffff60ac>
     528:	00000506 	br	540 <printAlienSlice+0xc0>
     52c:	04000144 	movi	r16,5
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
			//alt_putchar('-');
			alt_putchar(' ');
     530:	01000804 	movi	r4,32
     534:	843fffc4 	addi	r16,r16,-1
     538:	000210c0 	call	210c <alt_putchar>
                putchar(alienApperence[index]);
            }
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
     53c:	803ffc1e 	bne	r16,zero,530 <_gp+0xffff60d8>
			//alt_putchar('-');
			alt_putchar(' ');
		}
	}
}
     540:	dfc00617 	ldw	ra,24(sp)
     544:	dd000517 	ldw	r20,20(sp)
     548:	dcc00417 	ldw	r19,16(sp)
     54c:	dc800317 	ldw	r18,12(sp)
     550:	dc400217 	ldw	r17,8(sp)
     554:	dc000117 	ldw	r16,4(sp)
     558:	dec00704 	addi	sp,sp,28
     55c:	f800283a 	ret

00000560 <printSlice>:

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     560:	defff604 	addi	sp,sp,-40
     564:	dc400215 	stw	r17,8(sp)
     568:	dc400a17 	ldw	r17,40(sp)
     56c:	dd800715 	stw	r22,28(sp)
     570:	dc000115 	stw	r16,4(sp)
     574:	008003c4 	movi	r2,15
     578:	040001c4 	movi	r16,7
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     57c:	05a00034 	movhi	r22,32768
			alt_putchar(' ');
		}
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     580:	ddc00815 	stw	r23,32(sp)
     584:	dd400615 	stw	r21,24(sp)
     588:	dd000515 	stw	r20,20(sp)
     58c:	dcc00415 	stw	r19,16(sp)
     590:	dc800315 	stw	r18,12(sp)
     594:	8461c83a 	sub	r16,r16,r17
     598:	dfc00915 	stw	ra,36(sp)
     59c:	2029883a 	mov	r20,r4
     5a0:	2827883a 	mov	r19,r5
     5a4:	3025883a 	mov	r18,r6
     5a8:	382b883a 	mov	r21,r7
     5ac:	1463c83a 	sub	r17,r2,r17
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     5b0:	b58001c4 	addi	r22,r22,7
     5b4:	05fffe04 	movi	r23,-8
     5b8:	858c703a 	and	r6,r16,r22
     5bc:	3000030e 	bge	r6,zero,5cc <printSlice+0x6c>
     5c0:	31bfffc4 	addi	r6,r6,-1
     5c4:	35ccb03a 	or	r6,r6,r23
     5c8:	31800044 	addi	r6,r6,1
     5cc:	dd400015 	stw	r21,0(sp)
     5d0:	a009883a 	mov	r4,r20
     5d4:	980b883a 	mov	r5,r19
     5d8:	900f883a 	mov	r7,r18
     5dc:	84000044 	addi	r16,r16,1
     5e0:	00004800 	call	480 <printAlienSlice>
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
     5e4:	847ff41e 	bne	r16,r17,5b8 <_gp+0xffff6160>
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     5e8:	01000284 	movi	r4,10
}
     5ec:	dfc00917 	ldw	ra,36(sp)
     5f0:	ddc00817 	ldw	r23,32(sp)
     5f4:	dd800717 	ldw	r22,28(sp)
     5f8:	dd400617 	ldw	r21,24(sp)
     5fc:	dd000517 	ldw	r20,20(sp)
     600:	dcc00417 	ldw	r19,16(sp)
     604:	dc800317 	ldw	r18,12(sp)
     608:	dc400217 	ldw	r17,8(sp)
     60c:	dc000117 	ldw	r16,4(sp)
     610:	dec00a04 	addi	sp,sp,40
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     614:	00015a41 	jmpi	15a4 <putchar>

00000618 <printAliens>:
}

void printAliens(int pSramAliens, int step, int shift) {
     618:	defff804 	addi	sp,sp,-32
     61c:	dd400615 	stw	r21,24(sp)
     620:	dd000515 	stw	r20,20(sp)
     624:	dcc00415 	stw	r19,16(sp)
     628:	dc800315 	stw	r18,12(sp)
     62c:	dc400215 	stw	r17,8(sp)
     630:	dfc00715 	stw	ra,28(sp)
     634:	dc000115 	stw	r16,4(sp)
     638:	2025883a 	mov	r18,r4
     63c:	2827883a 	mov	r19,r5
     640:	3029883a 	mov	r20,r6
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     644:	0023883a 	mov	r17,zero
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     648:	054000c4 	movi	r21,3
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
     64c:	0021883a 	mov	r16,zero
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
     650:	800d883a 	mov	r6,r16
     654:	dd000015 	stw	r20,0(sp)
     658:	9009883a 	mov	r4,r18
     65c:	880b883a 	mov	r5,r17
     660:	980f883a 	mov	r7,r19
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     664:	84000044 	addi	r16,r16,1
            printSlice(pSramAliens, x, slice, step, shift);
     668:	00005600 	call	560 <printSlice>
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     66c:	857ff81e 	bne	r16,r21,650 <_gp+0xffff61f8>
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     670:	8c400044 	addi	r17,r17,1
     674:	8c3ff51e 	bne	r17,r16,64c <_gp+0xffff61f4>
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}
     678:	dfc00717 	ldw	ra,28(sp)
     67c:	dd400617 	ldw	r21,24(sp)
     680:	dd000517 	ldw	r20,20(sp)
     684:	dcc00417 	ldw	r19,16(sp)
     688:	dc800317 	ldw	r18,12(sp)
     68c:	dc400217 	ldw	r17,8(sp)
     690:	dc000117 	ldw	r16,4(sp)
     694:	dec00804 	addi	sp,sp,32
     698:	f800283a 	ret

0000069c <printVoid>:

void printVoid(int pSramBulletBuffer) {
     69c:	defff804 	addi	sp,sp,-32
     6a0:	dd000615 	stw	r20,24(sp)
     6a4:	dcc00515 	stw	r19,20(sp)
     6a8:	dc800415 	stw	r18,16(sp)
     6ac:	dc400315 	stw	r17,12(sp)
     6b0:	dfc00715 	stw	ra,28(sp)
     6b4:	dc000215 	stw	r16,8(sp)
     6b8:	2025883a 	mov	r18,r4
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     6bc:	04400084 	movi	r17,2
        }
    }
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
     6c0:	000026c0 	call	26c <updateProjectileBuffer>
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     6c4:	04c00a04 	movi	r19,40
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     6c8:	053fffc4 	movi	r20,-1
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}

void printVoid(int pSramBulletBuffer) {
     6cc:	0021883a 	mov	r16,zero
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     6d0:	9009883a 	mov	r4,r18
     6d4:	800b883a 	mov	r5,r16
     6d8:	880d883a 	mov	r6,r17
     6dc:	0000f5c0 	call	f5c <getProjectile>
     6e0:	1004d63a 	srli	r2,r2,24
			if(empty.type != 0) {
     6e4:	18c03fcc 	andi	r3,r3,255
     6e8:	18c0201c 	xori	r3,r3,128
void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     6ec:	d88000c5 	stb	r2,3(sp)
			if(empty.type != 0) {
     6f0:	18ffe004 	addi	r3,r3,-128
     6f4:	18000426 	beq	r3,zero,708 <printVoid+0x6c>
				alt_putchar(empty.symbol);
     6f8:	11003fcc 	andi	r4,r2,255
     6fc:	2100201c 	xori	r4,r4,128
     700:	213fe004 	addi	r4,r4,-128
     704:	00000106 	br	70c <printVoid+0x70>
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
     708:	01000804 	movi	r4,32

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     70c:	84000044 	addi	r16,r16,1
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
			if(empty.type != 0) {
				alt_putchar(empty.symbol);
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
     710:	000210c0 	call	210c <alt_putchar>

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     714:	84ffee1e 	bne	r16,r19,6d0 <_gp+0xffff6278>
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
			}
        }
		printf("\n");
     718:	01000284 	movi	r4,10
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     71c:	8c7fffc4 	addi	r17,r17,-1
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
			}
        }
		printf("\n");
     720:	00015a40 	call	15a4 <putchar>
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     724:	8d3fe91e 	bne	r17,r20,6cc <_gp+0xffff6274>
				alt_putchar(' ');
			}
        }
		printf("\n");
    }
}
     728:	dfc00717 	ldw	ra,28(sp)
     72c:	dd000617 	ldw	r20,24(sp)
     730:	dcc00517 	ldw	r19,20(sp)
     734:	dc800417 	ldw	r18,16(sp)
     738:	dc400317 	ldw	r17,12(sp)
     73c:	dc000217 	ldw	r16,8(sp)
     740:	dec00804 	addi	sp,sp,32
     744:	f800283a 	ret

00000748 <printGunnerSlice>:

printGunnerSlice(int gunnerX, int slice) {
     748:	defffa04 	addi	sp,sp,-24
     74c:	dc800215 	stw	r18,8(sp)
     750:	2025883a 	mov	r18,r4
     754:	dc400115 	stw	r17,4(sp)
     758:	dfc00515 	stw	ra,20(sp)
     75c:	dd000415 	stw	r20,16(sp)
     760:	dcc00315 	stw	r19,12(sp)
     764:	dc000015 	stw	r16,0(sp)
    int SCREEN_WIDTH = ALIEN_COLS * ALIEN_WIDTH;
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
     768:	947ff7c4 	addi	r17,r18,-33
        }
		printf("\n");
    }
}

printGunnerSlice(int gunnerX, int slice) {
     76c:	2809883a 	mov	r4,r5
     770:	8800010e 	bge	r17,zero,778 <printGunnerSlice+0x30>
     774:	0023883a 	mov	r17,zero
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     778:	014001c4 	movi	r5,7
     77c:	00012840 	call	1284 <__mulsi3>
     780:	05000034 	movhi	r20,0
     784:	1027883a 	mov	r19,r2
     788:	1461c83a 	sub	r16,r2,r17
     78c:	a5091604 	addi	r20,r20,9304
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
     790:	84c00626 	beq	r16,r19,7ac <printGunnerSlice+0x64>
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     794:	a0800017 	ldw	r2,0(r20)
     798:	1405883a 	add	r2,r2,r16
     79c:	110001c7 	ldb	r4,7(r2)
     7a0:	84000044 	addi	r16,r16,1
     7a4:	00015a40 	call	15a4 <putchar>
     7a8:	003ff906 	br	790 <_gp+0xffff6338>
     7ac:	0029883a 	mov	r20,zero
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     7b0:	9465c83a 	sub	r18,r18,r17
     7b4:	a480040e 	bge	r20,r18,7c8 <printGunnerSlice+0x80>
        //putchar('-');
		putchar(' ');
     7b8:	01000804 	movi	r4,32
     7bc:	00015a40 	call	15a4 <putchar>
    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     7c0:	a5000044 	addi	r20,r20,1
     7c4:	003ffb06 	br	7b4 <_gp+0xffff635c>
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     7c8:	00c001c4 	movi	r3,7
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7cc:	04800034 	movhi	r18,0
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     7d0:	1c63c83a 	sub	r17,r3,r17
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7d4:	94891604 	addi	r18,r18,9304
     7d8:	84c5c83a 	sub	r2,r16,r19
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     7dc:	1440060e 	bge	r2,r17,7f8 <printGunnerSlice+0xb0>
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7e0:	90800017 	ldw	r2,0(r18)
     7e4:	1405883a 	add	r2,r2,r16
     7e8:	11000007 	ldb	r4,0(r2)
     7ec:	84000044 	addi	r16,r16,1
     7f0:	00015a40 	call	15a4 <putchar>
     7f4:	003ff806 	br	7d8 <_gp+0xffff6380>
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}
     7f8:	dfc00517 	ldw	ra,20(sp)
     7fc:	dd000417 	ldw	r20,16(sp)
     800:	dcc00317 	ldw	r19,12(sp)
     804:	dc800217 	ldw	r18,8(sp)
     808:	dc400117 	ldw	r17,4(sp)
     80c:	dc000017 	ldw	r16,0(sp)
     810:	dec00604 	addi	sp,sp,24
     814:	f800283a 	ret

00000818 <printGunner>:

void printGunner(int gunnerX) {
     818:	defffd04 	addi	sp,sp,-12
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     81c:	000b883a 	mov	r5,zero
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}

void printGunner(int gunnerX) {
     820:	dfc00215 	stw	ra,8(sp)
     824:	dc400115 	stw	r17,4(sp)
     828:	dc000015 	stw	r16,0(sp)
     82c:	2023883a 	mov	r17,r4
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     830:	04000284 	movi	r16,10
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     834:	00007480 	call	748 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     838:	8009883a 	mov	r4,r16
     83c:	00015a40 	call	15a4 <putchar>
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     840:	8809883a 	mov	r4,r17
     844:	01400044 	movi	r5,1
     848:	00007480 	call	748 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     84c:	8009883a 	mov	r4,r16
    }
    //printf("Gunner location: %i\n", gunnerX);
}
     850:	dfc00217 	ldw	ra,8(sp)
     854:	dc400117 	ldw	r17,4(sp)
     858:	dc000017 	ldw	r16,0(sp)
     85c:	dec00304 	addi	sp,sp,12
void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     860:	00015a41 	jmpi	15a4 <putchar>

00000864 <updateDisplay>:
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     864:	defffa04 	addi	sp,sp,-24
     868:	dd000415 	stw	r20,16(sp)
     86c:	dc800215 	stw	r18,8(sp)
     870:	2029883a 	mov	r20,r4
     874:	dc800617 	ldw	r18,24(sp)
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     878:	01000034 	movhi	r4,0
     87c:	2108c104 	addi	r4,r4,8964
        printf("\n");
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     880:	dfc00515 	stw	ra,20(sp)
     884:	dcc00315 	stw	r19,12(sp)
     888:	dc400115 	stw	r17,4(sp)
     88c:	3827883a 	mov	r19,r7
     890:	2823883a 	mov	r17,r5
     894:	dc000015 	stw	r16,0(sp)
     898:	3021883a 	mov	r16,r6
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     89c:	000163c0 	call	163c <puts>
    printAliens(pSramAliens, step, shift);
     8a0:	980b883a 	mov	r5,r19
     8a4:	900d883a 	mov	r6,r18
     8a8:	a009883a 	mov	r4,r20
     8ac:	00006180 	call	618 <printAliens>
    printVoid(pSramBulletBuffer);
     8b0:	8809883a 	mov	r4,r17
     8b4:	000069c0 	call	69c <printVoid>
    printGunner(gunnerX);
     8b8:	8009883a 	mov	r4,r16
     8bc:	00008180 	call	818 <printGunner>
	checkGunnerWin();
	//printf("List Length: %i\n", listLength());
}
     8c0:	dfc00517 	ldw	ra,20(sp)
     8c4:	dd000417 	ldw	r20,16(sp)
     8c8:	dcc00317 	ldw	r19,12(sp)
     8cc:	dc800217 	ldw	r18,8(sp)
     8d0:	dc400117 	ldw	r17,4(sp)
     8d4:	dc000017 	ldw	r16,0(sp)
     8d8:	dec00604 	addi	sp,sp,24
void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printAliens(pSramAliens, step, shift);
    printVoid(pSramBulletBuffer);
    printGunner(gunnerX);
	checkGunnerWin();
     8dc:	0000b8c1 	jmpi	b8c <checkGunnerWin>

000008e0 <initializeGame>:

#include "gamelogic.h"
#include "data_structures_constants.h"
#include "sram.h"

void initializeGame() {
     8e0:	f800283a 	ret

000008e4 <moveGunnerLeft>:
}


int gunnerLeftToggle = 1;
void moveGunnerLeft(int* gunnerX) {
	if((*gun_left) && gunnerLeftToggle) {
     8e4:	00941c04 	movi	r2,20592
     8e8:	10c00003 	ldbu	r3,0(r2)
     8ec:	18c03fcc 	andi	r3,r3,255
     8f0:	18c0201c 	xori	r3,r3,128
     8f4:	18ffe004 	addi	r3,r3,-128
     8f8:	18000a26 	beq	r3,zero,924 <moveGunnerLeft+0x40>
     8fc:	d0e00817 	ldw	r3,-32736(gp)
     900:	18000826 	beq	r3,zero,924 <moveGunnerLeft+0x40>
		gunnerLeftToggle = 0;
     904:	d0200815 	stw	zero,-32736(gp)
		if((*gunnerX) == 0) {
     908:	20800017 	ldw	r2,0(r4)
     90c:	1000021e 	bne	r2,zero,918 <moveGunnerLeft+0x34>
			(*gunnerX) = (ALIEN_WIDTH * ALIEN_COLS) - 1;
     910:	008009c4 	movi	r2,39
     914:	00000106 	br	91c <moveGunnerLeft+0x38>
		} else {
			(*gunnerX)--;
     918:	10bfffc4 	addi	r2,r2,-1
     91c:	20800015 	stw	r2,0(r4)
     920:	f800283a 	ret
		}		
	} else if (!(*gun_left) && !(gunnerLeftToggle)) {
     924:	10800003 	ldbu	r2,0(r2)
     928:	10803fcc 	andi	r2,r2,255
     92c:	1080201c 	xori	r2,r2,128
     930:	10bfe004 	addi	r2,r2,-128
     934:	1000041e 	bne	r2,zero,948 <moveGunnerLeft+0x64>
     938:	d0a00817 	ldw	r2,-32736(gp)
     93c:	1000021e 	bne	r2,zero,948 <moveGunnerLeft+0x64>
		gunnerLeftToggle = 1;
     940:	00800044 	movi	r2,1
     944:	d0a00815 	stw	r2,-32736(gp)
     948:	f800283a 	ret

0000094c <moveGunnerRight>:
	}
}

int gunnerRightToggle = 1;
void moveGunnerRight(int* gunnerX) {	
	if((*gun_right) && gunnerRightToggle) {
     94c:	00941804 	movi	r2,20576
     950:	10c00003 	ldbu	r3,0(r2)
     954:	18c03fcc 	andi	r3,r3,255
     958:	18c0201c 	xori	r3,r3,128
     95c:	18ffe004 	addi	r3,r3,-128
     960:	18000b26 	beq	r3,zero,990 <moveGunnerRight+0x44>
     964:	d0e00717 	ldw	r3,-32740(gp)
     968:	18000926 	beq	r3,zero,990 <moveGunnerRight+0x44>
		gunnerRightToggle = 0;
     96c:	d0200715 	stw	zero,-32740(gp)
		if((*gunnerX) == (ALIEN_WIDTH * ALIEN_COLS) - 1) {
     970:	20800017 	ldw	r2,0(r4)
     974:	00c009c4 	movi	r3,39
     978:	10c0021e 	bne	r2,r3,984 <moveGunnerRight+0x38>
			(*gunnerX) = 0;
     97c:	20000015 	stw	zero,0(r4)
     980:	f800283a 	ret
		} else {
			(*gunnerX)++;
     984:	10800044 	addi	r2,r2,1
     988:	20800015 	stw	r2,0(r4)
     98c:	f800283a 	ret
		}		
	} else if (!(*gun_right) && !(gunnerRightToggle)) {
     990:	10800003 	ldbu	r2,0(r2)
     994:	10803fcc 	andi	r2,r2,255
     998:	1080201c 	xori	r2,r2,128
     99c:	10bfe004 	addi	r2,r2,-128
     9a0:	1000041e 	bne	r2,zero,9b4 <moveGunnerRight+0x68>
     9a4:	d0a00717 	ldw	r2,-32740(gp)
     9a8:	1000021e 	bne	r2,zero,9b4 <moveGunnerRight+0x68>
		gunnerRightToggle = 1;
     9ac:	00800044 	movi	r2,1
     9b0:	d0a00715 	stw	r2,-32740(gp)
     9b4:	f800283a 	ret

000009b8 <shootGunner>:
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
     9b8:	00941404 	movi	r2,20560
     9bc:	10c00003 	ldbu	r3,0(r2)
     9c0:	18c03fcc 	andi	r3,r3,255
     9c4:	18c0201c 	xori	r3,r3,128
     9c8:	18ffe004 	addi	r3,r3,-128
     9cc:	18001726 	beq	r3,zero,a2c <shootGunner+0x74>
     9d0:	d0e00617 	ldw	r3,-32744(gp)
     9d4:	18001526 	beq	r3,zero,a2c <shootGunner+0x74>
		gunnerShootToggle = 0;
     9d8:	d0200615 	stw	zero,-32744(gp)
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     9dc:	21000017 	ldw	r4,0(r4)
	}
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
     9e0:	defffd04 	addi	sp,sp,-12
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     9e4:	01400a04 	movi	r5,40
     9e8:	210000c4 	addi	r4,r4,3
	}
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
     9ec:	dfc00215 	stw	ra,8(sp)
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     9f0:	00012180 	call	1218 <__modsi3>
     9f4:	d8800005 	stb	r2,0(sp)
		proj.yVal = 0;
		proj.direction = 1;
		proj.symbol = '^';
     9f8:	00c01784 	movi	r3,94
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
		proj.yVal = 0;
		proj.direction = 1;
     9fc:	00800044 	movi	r2,1
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
		proj.yVal = 0;
     a00:	d8000045 	stb	zero,1(sp)
		proj.direction = 1;
     a04:	d8800085 	stb	r2,2(sp)
		proj.symbol = '^';
     a08:	d8c000c5 	stb	r3,3(sp)
		proj.type = 1;
     a0c:	d8800105 	stb	r2,4(sp)
		proj.timeTick = 0;
     a10:	d8000145 	stb	zero,5(sp)
		
		//checkCollideAliens(pSramAliens, 2);
		addProjectileNode(proj);
     a14:	d9000017 	ldw	r4,0(sp)
     a18:	d9400117 	ldw	r5,4(sp)
     a1c:	00002d40 	call	2d4 <addProjectileNode>
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
		gunnerShootToggle = 1;
	}
}
     a20:	dfc00217 	ldw	ra,8(sp)
     a24:	dec00304 	addi	sp,sp,12
     a28:	00000a06 	br	a54 <shootGunner+0x9c>
		proj.type = 1;
		proj.timeTick = 0;
		
		//checkCollideAliens(pSramAliens, 2);
		addProjectileNode(proj);
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
     a2c:	10800003 	ldbu	r2,0(r2)
     a30:	10803fcc 	andi	r2,r2,255
     a34:	1080201c 	xori	r2,r2,128
     a38:	10bfe004 	addi	r2,r2,-128
     a3c:	1000051e 	bne	r2,zero,a54 <shootGunner+0x9c>
     a40:	d0a00617 	ldw	r2,-32744(gp)
     a44:	1000031e 	bne	r2,zero,a54 <shootGunner+0x9c>
		gunnerShootToggle = 1;
     a48:	00800044 	movi	r2,1
     a4c:	d0a00615 	stw	r2,-32744(gp)
     a50:	f800283a 	ret
	}
}
     a54:	f800283a 	ret

00000a58 <shootAliens>:


int alienShootToggle = 1;
void shootAliens() {
	if((*gun_shoot) && alienShootToggle) {
     a58:	00941404 	movi	r2,20560
     a5c:	10c00003 	ldbu	r3,0(r2)
     a60:	18c03fcc 	andi	r3,r3,255
     a64:	18c0201c 	xori	r3,r3,128
     a68:	18ffe004 	addi	r3,r3,-128
     a6c:	18003826 	beq	r3,zero,b50 <shootAliens+0xf8>
     a70:	d0e00517 	ldw	r3,-32748(gp)
     a74:	18003626 	beq	r3,zero,b50 <shootAliens+0xf8>
	}
}


int alienShootToggle = 1;
void shootAliens() {
     a78:	defffb04 	addi	sp,sp,-20
     a7c:	dc400315 	stw	r17,12(sp)
     a80:	dc000215 	stw	r16,8(sp)
     a84:	dfc00415 	stw	ra,16(sp)
	if((*gun_shoot) && alienShootToggle) {
		alienShootToggle = 0;
     a88:	d0200515 	stw	zero,-32748(gp)
		printf("X, Y: (%i, %i)\n", (*alien_x), (*alien_y));
     a8c:	04141004 	movi	r16,20544
     a90:	04540c04 	movi	r17,20528
     a94:	81400003 	ldbu	r5,0(r16)
     a98:	89800003 	ldbu	r6,0(r17)
     a9c:	01000034 	movhi	r4,0
     aa0:	29403fcc 	andi	r5,r5,255
     aa4:	31803fcc 	andi	r6,r6,255
     aa8:	2940201c 	xori	r5,r5,128
     aac:	3180201c 	xori	r6,r6,128
     ab0:	2108ce04 	addi	r4,r4,9016
     ab4:	297fe004 	addi	r5,r5,-128
     ab8:	31bfe004 	addi	r6,r6,-128
     abc:	00015500 	call	1550 <printf>
		
		if(*alien_x == 0 || *alien_y == 0) {
     ac0:	80800003 	ldbu	r2,0(r16)
     ac4:	10803fcc 	andi	r2,r2,255
     ac8:	1080201c 	xori	r2,r2,128
     acc:	10bfe004 	addi	r2,r2,-128
     ad0:	10002926 	beq	r2,zero,b78 <shootAliens+0x120>
     ad4:	88800003 	ldbu	r2,0(r17)
     ad8:	10803fcc 	andi	r2,r2,255
     adc:	1080201c 	xori	r2,r2,128
     ae0:	10bfe004 	addi	r2,r2,-128
     ae4:	10002426 	beq	r2,zero,b78 <shootAliens+0x120>
			return;
		}
		struct Projectile proj;
		//proj.xVal = (((*alien_x + alienShift) % ALIEN_COLS) * ALIEN_COLS) + (ALIEN_WIDTH / 2) + 1;
		proj.xVal = (((*alien_x) + alienShift + 1) * ALIEN_WIDTH) + (ALIEN_WIDTH / 2);
     ae8:	81000003 	ldbu	r4,0(r16)
     aec:	00800034 	movhi	r2,0
     af0:	10896f04 	addi	r2,r2,9660
     af4:	10800017 	ldw	r2,0(r2)
     af8:	21003fcc 	andi	r4,r4,255
     afc:	2100201c 	xori	r4,r4,128
     b00:	213fe004 	addi	r4,r4,-128
     b04:	2089883a 	add	r4,r4,r2
     b08:	21000044 	addi	r4,r4,1
     b0c:	01400144 	movi	r5,5
     b10:	00012840 	call	1284 <__mulsi3>
     b14:	10800084 	addi	r2,r2,2
     b18:	d8800005 	stb	r2,0(sp)
		proj.yVal = VOID_HEIGHT - 1;
     b1c:	00800084 	movi	r2,2
     b20:	d8800045 	stb	r2,1(sp)
		proj.direction = -1;
     b24:	00bfffc4 	movi	r2,-1
     b28:	d8800085 	stb	r2,2(sp)
		proj.symbol = '*';
     b2c:	00800a84 	movi	r2,42
     b30:	d88000c5 	stb	r2,3(sp)
		proj.type = 1;
     b34:	00800044 	movi	r2,1
     b38:	d8800105 	stb	r2,4(sp)
		proj.timeTick = 0;
     b3c:	d8000145 	stb	zero,5(sp)
		
		addProjectileNode(proj);
     b40:	d9000017 	ldw	r4,0(sp)
     b44:	d9400117 	ldw	r5,4(sp)
     b48:	00002d40 	call	2d4 <addProjectileNode>
}


int alienShootToggle = 1;
void shootAliens() {
	if((*gun_shoot) && alienShootToggle) {
     b4c:	00000a06 	br	b78 <shootAliens+0x120>
		proj.type = 1;
		proj.timeTick = 0;
		
		addProjectileNode(proj);
		
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
     b50:	10800003 	ldbu	r2,0(r2)
     b54:	10803fcc 	andi	r2,r2,255
     b58:	1080201c 	xori	r2,r2,128
     b5c:	10bfe004 	addi	r2,r2,-128
     b60:	1000091e 	bne	r2,zero,b88 <shootAliens+0x130>
     b64:	d0a00517 	ldw	r2,-32748(gp)
     b68:	1000071e 	bne	r2,zero,b88 <shootAliens+0x130>
		alienShootToggle = 1;
     b6c:	00800044 	movi	r2,1
     b70:	d0a00515 	stw	r2,-32748(gp)
     b74:	f800283a 	ret
	}
}
     b78:	dfc00417 	ldw	ra,16(sp)
     b7c:	dc400317 	ldw	r17,12(sp)
     b80:	dc000217 	ldw	r16,8(sp)
     b84:	dec00504 	addi	sp,sp,20
     b88:	f800283a 	ret

00000b8c <checkGunnerWin>:

void checkGunnerWin() {
     b8c:	defff904 	addi	sp,sp,-28
     b90:	dc800315 	stw	r18,12(sp)
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
     b94:	04800034 	movhi	r18,0
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkGunnerWin() {
     b98:	dd000515 	stw	r20,20(sp)
     b9c:	dcc00415 	stw	r19,16(sp)
     ba0:	dc400215 	stw	r17,8(sp)
     ba4:	dfc00615 	stw	ra,24(sp)
     ba8:	dc000115 	stw	r16,4(sp)
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
     bac:	0023883a 	mov	r17,zero
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
     bb0:	94897004 	addi	r18,r18,9664
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
     bb4:	04c000c4 	movi	r19,3
	}
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
     bb8:	05000204 	movi	r20,8
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkGunnerWin() {
     bbc:	0021883a 	mov	r16,zero
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
     bc0:	91000017 	ldw	r4,0(r18)
     bc4:	800b883a 	mov	r5,r16
     bc8:	880d883a 	mov	r6,r17
     bcc:	0000ed00 	call	ed0 <getAlien>
			if(a.alive) {
     bd0:	10803fcc 	andi	r2,r2,255
     bd4:	1080201c 	xori	r2,r2,128
     bd8:	10bfe004 	addi	r2,r2,-128
     bdc:	1000081e 	bne	r2,zero,c00 <checkGunnerWin+0x74>
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
     be0:	84000044 	addi	r16,r16,1
     be4:	84fff61e 	bne	r16,r19,bc0 <_gp+0xffff6768>
	}
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
     be8:	8c400044 	addi	r17,r17,1
     bec:	8d3ff31e 	bne	r17,r20,bbc <_gp+0xffff6764>
			if(a.alive) {
				return;
			}
		}
	}
	gameOver = 2;
     bf0:	00800034 	movhi	r2,0
     bf4:	00c00084 	movi	r3,2
     bf8:	10896e04 	addi	r2,r2,9656
     bfc:	10c00015 	stw	r3,0(r2)
}
     c00:	dfc00617 	ldw	ra,24(sp)
     c04:	dd000517 	ldw	r20,20(sp)
     c08:	dcc00417 	ldw	r19,16(sp)
     c0c:	dc800317 	ldw	r18,12(sp)
     c10:	dc400217 	ldw	r17,8(sp)
     c14:	dc000117 	ldw	r16,4(sp)
     c18:	dec00704 	addi	sp,sp,28
     c1c:	f800283a 	ret

00000c20 <checkCollideAliens>:

void checkCollideAliens(int pSramAliens, int x) {
     c20:	defff504 	addi	sp,sp,-44
     c24:	ddc00815 	stw	r23,32(sp)
     c28:	dd800715 	stw	r22,28(sp)
     c2c:	dd400615 	stw	r21,24(sp)
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     c30:	058001c4 	movi	r22,7
     c34:	05400034 	movhi	r21,0
     c38:	05e00034 	movhi	r23,32768
		}
	}
	gameOver = 2;
}

void checkCollideAliens(int pSramAliens, int x) {
     c3c:	df000915 	stw	fp,36(sp)
     c40:	dcc00415 	stw	r19,16(sp)
     c44:	dc800315 	stw	r18,12(sp)
     c48:	dc000115 	stw	r16,4(sp)
     c4c:	dfc00a15 	stw	ra,40(sp)
     c50:	dd000515 	stw	r20,20(sp)
     c54:	dc400215 	stw	r17,8(sp)
     c58:	2021883a 	mov	r16,r4
     c5c:	2825883a 	mov	r18,r5
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
     c60:	04c00084 	movi	r19,2
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     c64:	ad496f04 	addi	r21,r21,9660
     c68:	bdaf883a 	add	r23,r23,r22
     c6c:	073ffe04 	movi	fp,-8
     c70:	a8800017 	ldw	r2,0(r21)
     c74:	05000034 	movhi	r20,0
     c78:	04600034 	movhi	r17,32768
     c7c:	b085c83a 	sub	r2,r22,r2
     c80:	9085883a 	add	r2,r18,r2
     c84:	15cc703a 	and	r6,r2,r23
     c88:	a5096f04 	addi	r20,r20,9660
     c8c:	8c4001c4 	addi	r17,r17,7
     c90:	3000030e 	bge	r6,zero,ca0 <checkCollideAliens+0x80>
     c94:	31bfffc4 	addi	r6,r6,-1
     c98:	370cb03a 	or	r6,r6,fp
     c9c:	31800044 	addi	r6,r6,1
     ca0:	8009883a 	mov	r4,r16
     ca4:	980b883a 	mov	r5,r19
     ca8:	0000ed00 	call	ed0 <getAlien>
     cac:	1006d23a 	srli	r3,r2,8
     cb0:	d8c00045 	stb	r3,1(sp)
     cb4:	1006d43a 	srli	r3,r2,16
		if(a.alive) {
     cb8:	10803fcc 	andi	r2,r2,255
     cbc:	1080201c 	xori	r2,r2,128
}

void checkCollideAliens(int pSramAliens, int x) {
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     cc0:	d8c00085 	stb	r3,2(sp)
		if(a.alive) {
     cc4:	10bfe004 	addi	r2,r2,-128
     cc8:	10001c26 	beq	r2,zero,d3c <checkCollideAliens+0x11c>
			printf("KILL (%i, %i)\n", (x + (7-alienShift)) % ALIEN_COLS, y);
     ccc:	a1400017 	ldw	r5,0(r20)
     cd0:	908001c4 	addi	r2,r18,7
     cd4:	1145c83a 	sub	r2,r2,r5
     cd8:	144a703a 	and	r5,r2,r17
     cdc:	2800040e 	bge	r5,zero,cf0 <checkCollideAliens+0xd0>
     ce0:	297fffc4 	addi	r5,r5,-1
     ce4:	00fffe04 	movi	r3,-8
     ce8:	28cab03a 	or	r5,r5,r3
     cec:	29400044 	addi	r5,r5,1
     cf0:	01000034 	movhi	r4,0
     cf4:	980d883a 	mov	r6,r19
     cf8:	2108d204 	addi	r4,r4,9032
     cfc:	00015500 	call	1550 <printf>
			a.alive = 0;
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
     d00:	a1800017 	ldw	r6,0(r20)
     d04:	948001c4 	addi	r18,r18,7
     d08:	91a5c83a 	sub	r18,r18,r6
     d0c:	944c703a 	and	r6,r18,r17
     d10:	3000040e 	bge	r6,zero,d24 <checkCollideAliens+0x104>
     d14:	31bfffc4 	addi	r6,r6,-1
     d18:	00bffe04 	movi	r2,-8
     d1c:	308cb03a 	or	r6,r6,r2
     d20:	31800044 	addi	r6,r6,1
     d24:	d8000005 	stb	zero,0(sp)
     d28:	d9c00017 	ldw	r7,0(sp)
     d2c:	8009883a 	mov	r4,r16
     d30:	980b883a 	mov	r5,r19
     d34:	0000f180 	call	f18 <setAlien>
     d38:	00000306 	br	d48 <checkCollideAliens+0x128>
	gameOver = 2;
}

void checkCollideAliens(int pSramAliens, int x) {
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
     d3c:	9cffffc4 	addi	r19,r19,-1
     d40:	00bfffc4 	movi	r2,-1
     d44:	98bfca1e 	bne	r19,r2,c70 <_gp+0xffff6818>
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
			break;
		}
	}
	//checkGunnerWin();
}
     d48:	dfc00a17 	ldw	ra,40(sp)
     d4c:	df000917 	ldw	fp,36(sp)
     d50:	ddc00817 	ldw	r23,32(sp)
     d54:	dd800717 	ldw	r22,28(sp)
     d58:	dd400617 	ldw	r21,24(sp)
     d5c:	dd000517 	ldw	r20,20(sp)
     d60:	dcc00417 	ldw	r19,16(sp)
     d64:	dc800317 	ldw	r18,12(sp)
     d68:	dc400217 	ldw	r17,8(sp)
     d6c:	dc000117 	ldw	r16,4(sp)
     d70:	dec00b04 	addi	sp,sp,44
     d74:	f800283a 	ret

00000d78 <checkCollideGunner>:



void checkCollideGunner(int projX) {
    if (projX == gunnerX) {
     d78:	00800034 	movhi	r2,0
     d7c:	10891f04 	addi	r2,r2,9340
     d80:	10800017 	ldw	r2,0(r2)
     d84:	2080041e 	bne	r4,r2,d98 <checkCollideGunner+0x20>
        gameOver = 1;
     d88:	00800034 	movhi	r2,0
     d8c:	00c00044 	movi	r3,1
     d90:	10896e04 	addi	r2,r2,9656
     d94:	10c00015 	stw	r3,0(r2)
     d98:	f800283a 	ret

00000d9c <main>:
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
     d9c:	d1205b17 	ldw	r4,-32404(gp)
int alienShift = 0;
int gameOver = 0;
int gunnerX = ((ALIEN_WIDTH * ALIEN_COLS) / 2) - (GUNNER_WIDTH / 2);

int main()
{
     da0:	defff804 	addi	sp,sp,-32
     da4:	dfc00715 	stw	ra,28(sp)
     da8:	dd400615 	stw	r21,24(sp)
     dac:	dd000515 	stw	r20,20(sp)
     db0:	dcc00415 	stw	r19,16(sp)
     db4:	dc800315 	stw	r18,12(sp)
     db8:	dc400215 	stw	r17,8(sp)
     dbc:	dc000115 	stw	r16,4(sp)
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
     dc0:	00008e00 	call	8e0 <initializeGame>
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
     dc4:	01001204 	movi	r4,72
     dc8:	00010a80 	call	10a8 <sram_malloc>
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     dcc:	0100b584 	movi	r4,726
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
     dd0:	d0a05a15 	stw	r2,-32408(gp)
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     dd4:	00010a80 	call	10a8 <sram_malloc>

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
		gameOver = 0;
	unsigned int  gameStartTime = *game_time;
     dd8:	04104004 	movi	r16,16640
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
		gameOver = 0;
     ddc:	d0205815 	stw	zero,-32416(gp)
	unsigned int  gameStartTime = *game_time;
	unsigned int  previousUpdateBoard = *game_time;
	unsigned int  previousUpdateBullets = *game_time;
    
	initRandomAliens(pSramAliens);
     de0:	d1205a17 	ldw	r4,-32408(gp)
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     de4:	1027883a 	mov	r19,r2

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
		gameOver = 0;
	unsigned int  gameStartTime = *game_time;
     de8:	80800017 	ldw	r2,0(r16)
	unsigned int  previousUpdateBoard = *game_time;
     dec:	84400017 	ldw	r17,0(r16)
	unsigned int  previousUpdateBullets = *game_time;
     df0:	84800017 	ldw	r18,0(r16)
    
	initRandomAliens(pSramAliens);
     df4:	00003b00 	call	3b0 <initRandomAliens>
	initProjectileBuffer(pSramBulletBuffer);
     df8:	9809883a 	mov	r4,r19
     dfc:	00001d80 	call	1d8 <initProjectileBuffer>
			}
			return 0;
		}
		//gameOver =1;
		
		if(((*game_time) - previousUpdateBoard) > 10) {
     e00:	05000284 	movi	r20,10
			//alienShift = 2;
			updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);			
			previousUpdateBoard = (*game_time);
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
     e04:	05400144 	movi	r21,5
	
	
	
	//Game Event Loop
    while(1) {
		if(gameOver) {
     e08:	d0a05817 	ldw	r2,-32416(gp)
     e0c:	10000b26 	beq	r2,zero,e3c <main+0xa0>
			if(gameOver == 1) {
     e10:	00c00044 	movi	r3,1
     e14:	10c0031e 	bne	r2,r3,e24 <main+0x88>
				printf("\nAliens Win!\n");
     e18:	01000034 	movhi	r4,0
     e1c:	2108d604 	addi	r4,r4,9048
     e20:	00000406 	br	e34 <main+0x98>
			} else if(gameOver ==2) {
     e24:	00c00084 	movi	r3,2
     e28:	10c01f1e 	bne	r2,r3,ea8 <main+0x10c>
				printf("\nGunner Win!\n");
     e2c:	01000034 	movhi	r4,0
     e30:	2108da04 	addi	r4,r4,9064
     e34:	000163c0 	call	163c <puts>
     e38:	00001b06 	br	ea8 <main+0x10c>
			}
			return 0;
		}
		//gameOver =1;
		
		if(((*game_time) - previousUpdateBoard) > 10) {
     e3c:	80c00017 	ldw	r3,0(r16)
     e40:	1c47c83a 	sub	r3,r3,r17
     e44:	a0c00d2e 	bgeu	r20,r3,e7c <main+0xe0>
			alienShift = ((*game_time) / 10) % 8;
     e48:	81000017 	ldw	r4,0(r16)
     e4c:	01400284 	movi	r5,10
     e50:	00012740 	call	1274 <__udivsi3>
     e54:	108001cc 	andi	r2,r2,7
     e58:	d0a05915 	stw	r2,-32412(gp)
			//alienShift = 2;
			updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);			
     e5c:	81c00017 	ldw	r7,0(r16)
     e60:	d1205a17 	ldw	r4,-32408(gp)
     e64:	d1a00917 	ldw	r6,-32732(gp)
     e68:	d8800015 	stw	r2,0(sp)
     e6c:	980b883a 	mov	r5,r19
     e70:	39c0004c 	andi	r7,r7,1
     e74:	00008640 	call	864 <updateDisplay>
			previousUpdateBoard = (*game_time);
     e78:	84400017 	ldw	r17,0(r16)
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
     e7c:	80c00017 	ldw	r3,0(r16)
     e80:	1c87c83a 	sub	r3,r3,r18
     e84:	a8c0022e 	bgeu	r21,r3,e90 <main+0xf4>
			updateProjectileNodes();
     e88:	00000980 	call	98 <updateProjectileNodes>
			previousUpdateBullets = (*game_time);
     e8c:	84800017 	ldw	r18,0(r16)
		}
		
		moveGunnerLeft(&gunnerX);
     e90:	d1200904 	addi	r4,gp,-32732
     e94:	00008e40 	call	8e4 <moveGunnerLeft>
		moveGunnerRight(&gunnerX);
     e98:	d1200904 	addi	r4,gp,-32732
     e9c:	000094c0 	call	94c <moveGunnerRight>
		//shootGunner(&gunnerX);
		shootAliens();
     ea0:	0000a580 	call	a58 <shootAliens>
	}
     ea4:	003fd806 	br	e08 <_gp+0xffff69b0>
	
    return 0;
}
     ea8:	0005883a 	mov	r2,zero
     eac:	dfc00717 	ldw	ra,28(sp)
     eb0:	dd400617 	ldw	r21,24(sp)
     eb4:	dd000517 	ldw	r20,20(sp)
     eb8:	dcc00417 	ldw	r19,16(sp)
     ebc:	dc800317 	ldw	r18,12(sp)
     ec0:	dc400217 	ldw	r17,8(sp)
     ec4:	dc000117 	ldw	r16,4(sp)
     ec8:	dec00804 	addi	sp,sp,32
     ecc:	f800283a 	ret

00000ed0 <getAlien>:
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     ed0:	280a90fa 	slli	r5,r5,3
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
     ed4:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     ed8:	298d883a 	add	r6,r5,r6
     edc:	318b883a 	add	r5,r6,r6
     ee0:	298d883a 	add	r6,r5,r6
     ee4:	310d883a 	add	r6,r6,r4
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
     ee8:	01000034 	movhi	r4,0
     eec:	21097a04 	addi	r4,r4,9704
     ef0:	2189883a 	add	r4,r4,r6
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
     ef4:	20800043 	ldbu	r2,1(r4)
     ef8:	20c00083 	ldbu	r3,2(r4)
     efc:	21400003 	ldbu	r5,0(r4)
     f00:	1004923a 	slli	r2,r2,8
     f04:	1806943a 	slli	r3,r3,16
     f08:	1144b03a 	or	r2,r2,r5
}
     f0c:	10c4b03a 	or	r2,r2,r3
     f10:	dec00104 	addi	sp,sp,4
     f14:	f800283a 	ret

00000f18 <setAlien>:

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     f18:	280a90fa 	slli	r5,r5,3
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
     f1c:	deffff04 	addi	sp,sp,-4
     f20:	d9c00015 	stw	r7,0(sp)
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     f24:	298d883a 	add	r6,r5,r6
     f28:	318b883a 	add	r5,r6,r6
     f2c:	298d883a 	add	r6,r5,r6
     f30:	310d883a 	add	r6,r6,r4
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     f34:	d8800043 	ldbu	r2,1(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     f38:	01000034 	movhi	r4,0
     f3c:	21097a04 	addi	r4,r4,9704
     f40:	2189883a 	add	r4,r4,r6
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     f44:	20800045 	stb	r2,1(r4)
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     f48:	d8800083 	ldbu	r2,2(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     f4c:	21c00005 	stb	r7,0(r4)
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     f50:	20800085 	stb	r2,2(r4)
}
     f54:	dec00104 	addi	sp,sp,4
     f58:	f800283a 	ret

00000f5c <getProjectile>:

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
     f5c:	defffb04 	addi	sp,sp,-20
     f60:	dc400315 	stw	r17,12(sp)
     f64:	dc000215 	stw	r16,8(sp)
     f68:	2823883a 	mov	r17,r5
     f6c:	2021883a 	mov	r16,r4
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f70:	01400a04 	movi	r5,40
     f74:	3009883a 	mov	r4,r6
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
     f78:	dfc00415 	stw	ra,16(sp)
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f7c:	00012840 	call	1284 <__mulsi3>
     f80:	1449883a 	add	r4,r2,r17
     f84:	01400184 	movi	r5,6
     f88:	00012840 	call	1284 <__mulsi3>
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f8c:	01000034 	movhi	r4,0
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f90:	1405883a 	add	r2,r2,r16
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     f94:	21097a04 	addi	r4,r4,9704
     f98:	2089883a 	add	r4,r4,r2
    p.direction = sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.symbol = sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
     f9c:	20c00043 	ldbu	r3,1(r4)
     fa0:	21400083 	ldbu	r5,2(r4)
     fa4:	21800003 	ldbu	r6,0(r4)
     fa8:	1806923a 	slli	r3,r3,8
     fac:	280a943a 	slli	r5,r5,16
     fb0:	00804034 	movhi	r2,256
     fb4:	1986b03a 	or	r3,r3,r6
     fb8:	1946b03a 	or	r3,r3,r5
     fbc:	218000c3 	ldbu	r6,3(r4)
     fc0:	21400143 	ldbu	r5,5(r4)
     fc4:	10bfffc4 	addi	r2,r2,-1
     fc8:	300c963a 	slli	r6,r6,24
     fcc:	1884703a 	and	r2,r3,r2
     fd0:	280a923a 	slli	r5,r5,8
     fd4:	20c00103 	ldbu	r3,4(r4)
}
     fd8:	1184b03a 	or	r2,r2,r6
     fdc:	1946b03a 	or	r3,r3,r5
     fe0:	dfc00417 	ldw	ra,16(sp)
     fe4:	dc400317 	ldw	r17,12(sp)
     fe8:	dc000217 	ldw	r16,8(sp)
     fec:	dec00504 	addi	sp,sp,20
     ff0:	f800283a 	ret

00000ff4 <setProjectile>:

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
     ff4:	defffb04 	addi	sp,sp,-20
     ff8:	dc800215 	stw	r18,8(sp)
     ffc:	dc000015 	stw	r16,0(sp)
    1000:	2825883a 	mov	r18,r5
    1004:	2021883a 	mov	r16,r4
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
    1008:	01400a04 	movi	r5,40
    100c:	3009883a 	mov	r4,r6
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    1010:	dfc00315 	stw	ra,12(sp)
    1014:	dc400115 	stw	r17,4(sp)
    1018:	d9c00415 	stw	r7,16(sp)
    101c:	3823883a 	mov	r17,r7
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
    1020:	00012840 	call	1284 <__mulsi3>
    1024:	1489883a 	add	r4,r2,r18
    1028:	01400184 	movi	r5,6
    102c:	00012840 	call	1284 <__mulsi3>
    1030:	00c00034 	movhi	r3,0
    1034:	1405883a 	add	r2,r2,r16
    1038:	18c97a04 	addi	r3,r3,9704
    103c:	1885883a 	add	r2,r3,r2
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
    1040:	d8c00443 	ldbu	r3,17(sp)
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
    1044:	14400005 	stb	r17,0(r2)
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
    1048:	10c00045 	stb	r3,1(r2)
    sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.direction;
    104c:	d8c00483 	ldbu	r3,18(sp)
    1050:	10c00085 	stb	r3,2(r2)
    sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.symbol;
    1054:	d8c004c3 	ldbu	r3,19(sp)
    1058:	10c000c5 	stb	r3,3(r2)
    sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.type;
    105c:	d8c00503 	ldbu	r3,20(sp)
    1060:	10c00105 	stb	r3,4(r2)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
    1064:	d8c00543 	ldbu	r3,21(sp)
    1068:	10c00145 	stb	r3,5(r2)
}
    106c:	dfc00317 	ldw	ra,12(sp)
    1070:	dc800217 	ldw	r18,8(sp)
    1074:	dc400117 	ldw	r17,4(sp)
    1078:	dc000017 	ldw	r16,0(sp)
    107c:	dec00504 	addi	sp,sp,20
    1080:	f800283a 	ret

00001084 <resetSRAM>:

void resetSRAM() {
    1084:	01400034 	movhi	r5,0
    int i;
    for (i = 0; i < 2048; i++ ) {
    1088:	0005883a 	mov	r2,zero
    108c:	29497a04 	addi	r5,r5,9704
    1090:	00c20004 	movi	r3,2048
    1094:	1149883a 	add	r4,r2,r5
      sram[i] = 0;
    1098:	20000005 	stb	zero,0(r4)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
}

void resetSRAM() {
    int i;
    for (i = 0; i < 2048; i++ ) {
    109c:	10800044 	addi	r2,r2,1
    10a0:	10fffc1e 	bne	r2,r3,1094 <_gp+0xffff6c3c>
      sram[i] = 0;
   }
}
    10a4:	f800283a 	ret

000010a8 <sram_malloc>:

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
    10a8:	20002026 	beq	r4,zero,112c <sram_malloc+0x84>
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
    10ac:	20bfffc4 	addi	r2,r4,-1
    10b0:	1000010e 	bge	r2,zero,10b8 <sram_malloc+0x10>
    10b4:	20800184 	addi	r2,r4,6
    10b8:	1005d0fa 	srai	r2,r2,3

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
    10bc:	02000034 	movhi	r8,0
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    10c0:	000b883a 	mov	r5,zero
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
    10c4:	10c00044 	addi	r3,r2,1

    int currBlock = 0;
    10c8:	0009883a 	mov	r4,zero
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    10cc:	0005883a 	mov	r2,zero
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    10d0:	01c03884 	movi	r7,226
        if(sram[currBlock] == 0) {//curr block is free
    10d4:	42097a04 	addi	r8,r8,9704
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    10d8:	28c00916 	blt	r5,r3,1100 <sram_malloc+0x58>
    /*printf("Blocks Needed: %i\n", blocksNeeded);
    printf("Total Blocks: %i\n", TOTAL_BLOCKS);
    printf("Free List End: %i\n", FREE_LIST_END);
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
    10dc:	014038c4 	movi	r5,227
    10e0:	21401226 	beq	r4,r5,112c <sram_malloc+0x84>
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
    10e4:	01000034 	movhi	r4,0
    10e8:	21097a04 	addi	r4,r4,9704
    10ec:	2089883a 	add	r4,r4,r2
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    10f0:	100490fa 	slli	r2,r2,3
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
    10f4:	20c00005 	stb	r3,0(r4)
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    10f8:	108038c4 	addi	r2,r2,227
    10fc:	f800283a 	ret
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    1100:	393ff616 	blt	r7,r4,10dc <_gp+0xffff6c84>
        if(sram[currBlock] == 0) {//curr block is free
    1104:	410d883a 	add	r6,r8,r4
    1108:	31800007 	ldb	r6,0(r6)
    110c:	3000031e 	bne	r6,zero,111c <sram_malloc+0x74>
            foundBlocks++;
    1110:	29400044 	addi	r5,r5,1
            currBlock++;
    1114:	21000044 	addi	r4,r4,1
    1118:	003fef06 	br	10d8 <_gp+0xffff6c80>
        } else {//curr block is allocated
            foundBlocks = 0;
            startFoundBlocks = currBlock + sram[currBlock];
    111c:	2189883a 	add	r4,r4,r6
    1120:	2005883a 	mov	r2,r4
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
            foundBlocks++;
            currBlock++;
        } else {//curr block is allocated
            foundBlocks = 0;
    1124:	000b883a 	mov	r5,zero
    1128:	003feb06 	br	10d8 <_gp+0xffff6c80>

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
        return -1;
    112c:	00bfffc4 	movi	r2,-1
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    }
}
    1130:	f800283a 	ret

00001134 <sram_free>:
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int freeListLoc = (loc - FREE_LIST_END) / (BLOCK_SIZE);
    1134:	20bfc744 	addi	r2,r4,-227
    1138:	1000010e 	bge	r2,zero,1140 <sram_free+0xc>
    113c:	20bfc904 	addi	r2,r4,-220
    1140:	1005d0fa 	srai	r2,r2,3

    //printf("Free List Location: %i\n", freeListLoc);

    sram[freeListLoc] = 0;
    1144:	00c00034 	movhi	r3,0
    1148:	18c97a04 	addi	r3,r3,9704
    114c:	1887883a 	add	r3,r3,r2
    1150:	18000005 	stb	zero,0(r3)
    return freeListLoc;

}
    1154:	f800283a 	ret

00001158 <udivmodsi4>:
    1158:	2900182e 	bgeu	r5,r4,11bc <udivmodsi4+0x64>
    115c:	28001716 	blt	r5,zero,11bc <udivmodsi4+0x64>
    1160:	00800804 	movi	r2,32
    1164:	00c00044 	movi	r3,1
    1168:	00000206 	br	1174 <udivmodsi4+0x1c>
    116c:	10001126 	beq	r2,zero,11b4 <udivmodsi4+0x5c>
    1170:	28000516 	blt	r5,zero,1188 <udivmodsi4+0x30>
    1174:	294b883a 	add	r5,r5,r5
    1178:	10bfffc4 	addi	r2,r2,-1
    117c:	18c7883a 	add	r3,r3,r3
    1180:	293ffa36 	bltu	r5,r4,116c <_gp+0xffff6d14>
    1184:	18000b26 	beq	r3,zero,11b4 <udivmodsi4+0x5c>
    1188:	0005883a 	mov	r2,zero
    118c:	21400236 	bltu	r4,r5,1198 <udivmodsi4+0x40>
    1190:	2149c83a 	sub	r4,r4,r5
    1194:	10c4b03a 	or	r2,r2,r3
    1198:	1806d07a 	srli	r3,r3,1
    119c:	280ad07a 	srli	r5,r5,1
    11a0:	183ffa1e 	bne	r3,zero,118c <_gp+0xffff6d34>
    11a4:	3000011e 	bne	r6,zero,11ac <udivmodsi4+0x54>
    11a8:	f800283a 	ret
    11ac:	2005883a 	mov	r2,r4
    11b0:	f800283a 	ret
    11b4:	0005883a 	mov	r2,zero
    11b8:	003ffa06 	br	11a4 <_gp+0xffff6d4c>
    11bc:	00c00044 	movi	r3,1
    11c0:	003ff106 	br	1188 <_gp+0xffff6d30>

000011c4 <__divsi3>:
    11c4:	defffe04 	addi	sp,sp,-8
    11c8:	dfc00115 	stw	ra,4(sp)
    11cc:	dc000015 	stw	r16,0(sp)
    11d0:	20000b16 	blt	r4,zero,1200 <__divsi3+0x3c>
    11d4:	0021883a 	mov	r16,zero
    11d8:	28000c16 	blt	r5,zero,120c <__divsi3+0x48>
    11dc:	000d883a 	mov	r6,zero
    11e0:	00011580 	call	1158 <udivmodsi4>
    11e4:	0407c83a 	sub	r3,zero,r16
    11e8:	1884f03a 	xor	r2,r3,r2
    11ec:	1405883a 	add	r2,r2,r16
    11f0:	dfc00117 	ldw	ra,4(sp)
    11f4:	dc000017 	ldw	r16,0(sp)
    11f8:	dec00204 	addi	sp,sp,8
    11fc:	f800283a 	ret
    1200:	0109c83a 	sub	r4,zero,r4
    1204:	04000044 	movi	r16,1
    1208:	283ff40e 	bge	r5,zero,11dc <_gp+0xffff6d84>
    120c:	014bc83a 	sub	r5,zero,r5
    1210:	8400005c 	xori	r16,r16,1
    1214:	003ff106 	br	11dc <_gp+0xffff6d84>

00001218 <__modsi3>:
    1218:	defffd04 	addi	sp,sp,-12
    121c:	dfc00215 	stw	ra,8(sp)
    1220:	dc400115 	stw	r17,4(sp)
    1224:	dc000015 	stw	r16,0(sp)
    1228:	20000c16 	blt	r4,zero,125c <__modsi3+0x44>
    122c:	0023883a 	mov	r17,zero
    1230:	0021883a 	mov	r16,zero
    1234:	28000d16 	blt	r5,zero,126c <__modsi3+0x54>
    1238:	01800044 	movi	r6,1
    123c:	00011580 	call	1158 <udivmodsi4>
    1240:	1404f03a 	xor	r2,r2,r16
    1244:	8885883a 	add	r2,r17,r2
    1248:	dfc00217 	ldw	ra,8(sp)
    124c:	dc400117 	ldw	r17,4(sp)
    1250:	dc000017 	ldw	r16,0(sp)
    1254:	dec00304 	addi	sp,sp,12
    1258:	f800283a 	ret
    125c:	0109c83a 	sub	r4,zero,r4
    1260:	04400044 	movi	r17,1
    1264:	043fffc4 	movi	r16,-1
    1268:	283ff30e 	bge	r5,zero,1238 <_gp+0xffff6de0>
    126c:	014bc83a 	sub	r5,zero,r5
    1270:	003ff106 	br	1238 <_gp+0xffff6de0>

00001274 <__udivsi3>:
    1274:	000d883a 	mov	r6,zero
    1278:	00011581 	jmpi	1158 <udivmodsi4>

0000127c <__umodsi3>:
    127c:	01800044 	movi	r6,1
    1280:	00011581 	jmpi	1158 <udivmodsi4>

00001284 <__mulsi3>:
    1284:	0005883a 	mov	r2,zero
    1288:	20000726 	beq	r4,zero,12a8 <__mulsi3+0x24>
    128c:	20c0004c 	andi	r3,r4,1
    1290:	2008d07a 	srli	r4,r4,1
    1294:	18000126 	beq	r3,zero,129c <__mulsi3+0x18>
    1298:	1145883a 	add	r2,r2,r5
    129c:	294b883a 	add	r5,r5,r5
    12a0:	203ffa1e 	bne	r4,zero,128c <_gp+0xffff6e34>
    12a4:	f800283a 	ret
    12a8:	f800283a 	ret

000012ac <malloc>:
    12ac:	00800034 	movhi	r2,0
    12b0:	10892104 	addi	r2,r2,9348
    12b4:	200b883a 	mov	r5,r4
    12b8:	11000017 	ldw	r4,0(r2)
    12bc:	00013b81 	jmpi	13b8 <_malloc_r>

000012c0 <free>:
    12c0:	00800034 	movhi	r2,0
    12c4:	10892104 	addi	r2,r2,9348
    12c8:	200b883a 	mov	r5,r4
    12cc:	11000017 	ldw	r4,0(r2)
    12d0:	00012d41 	jmpi	12d4 <_free_r>

000012d4 <_free_r>:
    12d4:	28003726 	beq	r5,zero,13b4 <_free_r+0xe0>
    12d8:	28ffff17 	ldw	r3,-4(r5)
    12dc:	28bfff04 	addi	r2,r5,-4
    12e0:	1800010e 	bge	r3,zero,12e8 <_free_r+0x14>
    12e4:	10c5883a 	add	r2,r2,r3
    12e8:	01400034 	movhi	r5,0
    12ec:	29497304 	addi	r5,r5,9676
    12f0:	28c00017 	ldw	r3,0(r5)
    12f4:	280d883a 	mov	r6,r5
    12f8:	1800031e 	bne	r3,zero,1308 <_free_r+0x34>
    12fc:	10000115 	stw	zero,4(r2)
    1300:	28800015 	stw	r2,0(r5)
    1304:	f800283a 	ret
    1308:	10c00c2e 	bgeu	r2,r3,133c <_free_r+0x68>
    130c:	11400017 	ldw	r5,0(r2)
    1310:	1149883a 	add	r4,r2,r5
    1314:	20c0041e 	bne	r4,r3,1328 <_free_r+0x54>
    1318:	20c00017 	ldw	r3,0(r4)
    131c:	28c7883a 	add	r3,r5,r3
    1320:	10c00015 	stw	r3,0(r2)
    1324:	20c00117 	ldw	r3,4(r4)
    1328:	10c00115 	stw	r3,4(r2)
    132c:	30800015 	stw	r2,0(r6)
    1330:	f800283a 	ret
    1334:	11400336 	bltu	r2,r5,1344 <_free_r+0x70>
    1338:	2807883a 	mov	r3,r5
    133c:	19400117 	ldw	r5,4(r3)
    1340:	283ffc1e 	bne	r5,zero,1334 <_gp+0xffff6edc>
    1344:	19c00017 	ldw	r7,0(r3)
    1348:	19cd883a 	add	r6,r3,r7
    134c:	30800a1e 	bne	r6,r2,1378 <_free_r+0xa4>
    1350:	10800017 	ldw	r2,0(r2)
    1354:	3885883a 	add	r2,r7,r2
    1358:	18800015 	stw	r2,0(r3)
    135c:	1889883a 	add	r4,r3,r2
    1360:	2140141e 	bne	r4,r5,13b4 <_free_r+0xe0>
    1364:	29000017 	ldw	r4,0(r5)
    1368:	1105883a 	add	r2,r2,r4
    136c:	18800015 	stw	r2,0(r3)
    1370:	28800117 	ldw	r2,4(r5)
    1374:	00000e06 	br	13b0 <_free_r+0xdc>
    1378:	1180032e 	bgeu	r2,r6,1388 <_free_r+0xb4>
    137c:	00800304 	movi	r2,12
    1380:	20800015 	stw	r2,0(r4)
    1384:	f800283a 	ret
    1388:	11800017 	ldw	r6,0(r2)
    138c:	1189883a 	add	r4,r2,r6
    1390:	2140061e 	bne	r4,r5,13ac <_free_r+0xd8>
    1394:	29000017 	ldw	r4,0(r5)
    1398:	3109883a 	add	r4,r6,r4
    139c:	11000015 	stw	r4,0(r2)
    13a0:	29000117 	ldw	r4,4(r5)
    13a4:	11000115 	stw	r4,4(r2)
    13a8:	00000106 	br	13b0 <_free_r+0xdc>
    13ac:	11400115 	stw	r5,4(r2)
    13b0:	18800115 	stw	r2,4(r3)
    13b4:	f800283a 	ret

000013b8 <_malloc_r>:
    13b8:	defffb04 	addi	sp,sp,-20
    13bc:	00bfff04 	movi	r2,-4
    13c0:	dc000015 	stw	r16,0(sp)
    13c4:	2c0000c4 	addi	r16,r5,3
    13c8:	80a0703a 	and	r16,r16,r2
    13cc:	dc800215 	stw	r18,8(sp)
    13d0:	dfc00415 	stw	ra,16(sp)
    13d4:	dcc00315 	stw	r19,12(sp)
    13d8:	dc400115 	stw	r17,4(sp)
    13dc:	84000204 	addi	r16,r16,8
    13e0:	00800304 	movi	r2,12
    13e4:	2025883a 	mov	r18,r4
    13e8:	8080022e 	bgeu	r16,r2,13f4 <_malloc_r+0x3c>
    13ec:	1021883a 	mov	r16,r2
    13f0:	00000506 	br	1408 <_malloc_r+0x50>
    13f4:	8000040e 	bge	r16,zero,1408 <_malloc_r+0x50>
    13f8:	00800304 	movi	r2,12
    13fc:	90800015 	stw	r2,0(r18)
    1400:	0005883a 	mov	r2,zero
    1404:	00003c06 	br	14f8 <_malloc_r+0x140>
    1408:	817ffb36 	bltu	r16,r5,13f8 <_gp+0xffff6fa0>
    140c:	01000034 	movhi	r4,0
    1410:	21097304 	addi	r4,r4,9676
    1414:	20800017 	ldw	r2,0(r4)
    1418:	1007883a 	mov	r3,r2
    141c:	18000926 	beq	r3,zero,1444 <_malloc_r+0x8c>
    1420:	19400017 	ldw	r5,0(r3)
    1424:	2c0bc83a 	sub	r5,r5,r16
    1428:	28001716 	blt	r5,zero,1488 <_malloc_r+0xd0>
    142c:	018002c4 	movi	r6,11
    1430:	31400d2e 	bgeu	r6,r5,1468 <_malloc_r+0xb0>
    1434:	19400015 	stw	r5,0(r3)
    1438:	1945883a 	add	r2,r3,r5
    143c:	14000015 	stw	r16,0(r2)
    1440:	1000231e 	bne	r2,zero,14d0 <_malloc_r+0x118>
    1444:	04400034 	movhi	r17,0
    1448:	8c497204 	addi	r17,r17,9672
    144c:	88800017 	ldw	r2,0(r17)
    1450:	1000101e 	bne	r2,zero,1494 <_malloc_r+0xdc>
    1454:	9009883a 	mov	r4,r18
    1458:	000b883a 	mov	r5,zero
    145c:	00016c40 	call	16c4 <_sbrk_r>
    1460:	88800015 	stw	r2,0(r17)
    1464:	00000b06 	br	1494 <_malloc_r+0xdc>
    1468:	10c0031e 	bne	r2,r3,1478 <_malloc_r+0xc0>
    146c:	10c00117 	ldw	r3,4(r2)
    1470:	20c00015 	stw	r3,0(r4)
    1474:	00001606 	br	14d0 <_malloc_r+0x118>
    1478:	19000117 	ldw	r4,4(r3)
    147c:	11000115 	stw	r4,4(r2)
    1480:	1805883a 	mov	r2,r3
    1484:	00001206 	br	14d0 <_malloc_r+0x118>
    1488:	1805883a 	mov	r2,r3
    148c:	18c00117 	ldw	r3,4(r3)
    1490:	003fe206 	br	141c <_gp+0xffff6fc4>
    1494:	9009883a 	mov	r4,r18
    1498:	800b883a 	mov	r5,r16
    149c:	00016c40 	call	16c4 <_sbrk_r>
    14a0:	04ffffc4 	movi	r19,-1
    14a4:	14ffd426 	beq	r2,r19,13f8 <_gp+0xffff6fa0>
    14a8:	144000c4 	addi	r17,r2,3
    14ac:	00ffff04 	movi	r3,-4
    14b0:	88e2703a 	and	r17,r17,r3
    14b4:	88800526 	beq	r17,r2,14cc <_malloc_r+0x114>
    14b8:	9009883a 	mov	r4,r18
    14bc:	888bc83a 	sub	r5,r17,r2
    14c0:	00016c40 	call	16c4 <_sbrk_r>
    14c4:	14ffcc26 	beq	r2,r19,13f8 <_gp+0xffff6fa0>
    14c8:	8805883a 	mov	r2,r17
    14cc:	14000015 	stw	r16,0(r2)
    14d0:	114002c4 	addi	r5,r2,11
    14d4:	00fffe04 	movi	r3,-8
    14d8:	11000104 	addi	r4,r2,4
    14dc:	28c6703a 	and	r3,r5,r3
    14e0:	1909c83a 	sub	r4,r3,r4
    14e4:	20000326 	beq	r4,zero,14f4 <_malloc_r+0x13c>
    14e8:	110b883a 	add	r5,r2,r4
    14ec:	0109c83a 	sub	r4,zero,r4
    14f0:	29000015 	stw	r4,0(r5)
    14f4:	1805883a 	mov	r2,r3
    14f8:	dfc00417 	ldw	ra,16(sp)
    14fc:	dcc00317 	ldw	r19,12(sp)
    1500:	dc800217 	ldw	r18,8(sp)
    1504:	dc400117 	ldw	r17,4(sp)
    1508:	dc000017 	ldw	r16,0(sp)
    150c:	dec00504 	addi	sp,sp,20
    1510:	f800283a 	ret

00001514 <_printf_r>:
    1514:	defffd04 	addi	sp,sp,-12
    1518:	dfc00015 	stw	ra,0(sp)
    151c:	d9800115 	stw	r6,4(sp)
    1520:	d9c00215 	stw	r7,8(sp)
    1524:	20c00217 	ldw	r3,8(r4)
    1528:	280d883a 	mov	r6,r5
    152c:	01400034 	movhi	r5,0
    1530:	29474b04 	addi	r5,r5,7468
    1534:	19400115 	stw	r5,4(r3)
    1538:	21400217 	ldw	r5,8(r4)
    153c:	d9c00104 	addi	r7,sp,4
    1540:	000179c0 	call	179c <___vfprintf_internal_r>
    1544:	dfc00017 	ldw	ra,0(sp)
    1548:	dec00304 	addi	sp,sp,12
    154c:	f800283a 	ret

00001550 <printf>:
    1550:	defffc04 	addi	sp,sp,-16
    1554:	dfc00015 	stw	ra,0(sp)
    1558:	d9400115 	stw	r5,4(sp)
    155c:	d9800215 	stw	r6,8(sp)
    1560:	d9c00315 	stw	r7,12(sp)
    1564:	00800034 	movhi	r2,0
    1568:	10892104 	addi	r2,r2,9348
    156c:	10800017 	ldw	r2,0(r2)
    1570:	200b883a 	mov	r5,r4
    1574:	01000034 	movhi	r4,0
    1578:	10c00217 	ldw	r3,8(r2)
    157c:	21074b04 	addi	r4,r4,7468
    1580:	d9800104 	addi	r6,sp,4
    1584:	19000115 	stw	r4,4(r3)
    1588:	11000217 	ldw	r4,8(r2)
    158c:	0001d080 	call	1d08 <__vfprintf_internal>
    1590:	dfc00017 	ldw	ra,0(sp)
    1594:	dec00404 	addi	sp,sp,16
    1598:	f800283a 	ret

0000159c <_putchar_r>:
    159c:	21800217 	ldw	r6,8(r4)
    15a0:	0001e2c1 	jmpi	1e2c <_putc_r>

000015a4 <putchar>:
    15a4:	00800034 	movhi	r2,0
    15a8:	10892104 	addi	r2,r2,9348
    15ac:	200b883a 	mov	r5,r4
    15b0:	11000017 	ldw	r4,0(r2)
    15b4:	21800217 	ldw	r6,8(r4)
    15b8:	0001e2c1 	jmpi	1e2c <_putc_r>

000015bc <_puts_r>:
    15bc:	defffd04 	addi	sp,sp,-12
    15c0:	dc000015 	stw	r16,0(sp)
    15c4:	2021883a 	mov	r16,r4
    15c8:	2809883a 	mov	r4,r5
    15cc:	dfc00215 	stw	ra,8(sp)
    15d0:	dc400115 	stw	r17,4(sp)
    15d4:	2823883a 	mov	r17,r5
    15d8:	00017140 	call	1714 <strlen>
    15dc:	81400217 	ldw	r5,8(r16)
    15e0:	00c00034 	movhi	r3,0
    15e4:	18c74b04 	addi	r3,r3,7468
    15e8:	28c00115 	stw	r3,4(r5)
    15ec:	8009883a 	mov	r4,r16
    15f0:	880d883a 	mov	r6,r17
    15f4:	100f883a 	mov	r7,r2
    15f8:	0001d2c0 	call	1d2c <__sfvwrite_small_dev>
    15fc:	00ffffc4 	movi	r3,-1
    1600:	10c00926 	beq	r2,r3,1628 <_puts_r+0x6c>
    1604:	81400217 	ldw	r5,8(r16)
    1608:	01800034 	movhi	r6,0
    160c:	8009883a 	mov	r4,r16
    1610:	28800117 	ldw	r2,4(r5)
    1614:	3188cd04 	addi	r6,r6,9012
    1618:	01c00044 	movi	r7,1
    161c:	103ee83a 	callr	r2
    1620:	10bfffe0 	cmpeqi	r2,r2,-1
    1624:	0085c83a 	sub	r2,zero,r2
    1628:	dfc00217 	ldw	ra,8(sp)
    162c:	dc400117 	ldw	r17,4(sp)
    1630:	dc000017 	ldw	r16,0(sp)
    1634:	dec00304 	addi	sp,sp,12
    1638:	f800283a 	ret

0000163c <puts>:
    163c:	00800034 	movhi	r2,0
    1640:	10892104 	addi	r2,r2,9348
    1644:	200b883a 	mov	r5,r4
    1648:	11000017 	ldw	r4,0(r2)
    164c:	00015bc1 	jmpi	15bc <_puts_r>

00001650 <srand>:
    1650:	00800034 	movhi	r2,0
    1654:	10897404 	addi	r2,r2,9680
    1658:	11000015 	stw	r4,0(r2)
    165c:	10000115 	stw	zero,4(r2)
    1660:	f800283a 	ret

00001664 <rand>:
    1664:	defffe04 	addi	sp,sp,-8
    1668:	dc000015 	stw	r16,0(sp)
    166c:	04000034 	movhi	r16,0
    1670:	84097404 	addi	r16,r16,9680
    1674:	81000017 	ldw	r4,0(r16)
    1678:	81400117 	ldw	r5,4(r16)
    167c:	01932574 	movhi	r6,19605
    1680:	01d614b4 	movhi	r7,22610
    1684:	319fcb44 	addi	r6,r6,32557
    1688:	39fd0b44 	addi	r7,r7,-3027
    168c:	dfc00115 	stw	ra,4(sp)
    1690:	0001edc0 	call	1edc <__muldi3>
    1694:	11000044 	addi	r4,r2,1
    1698:	2085803a 	cmpltu	r2,r4,r2
    169c:	10c7883a 	add	r3,r2,r3
    16a0:	00a00034 	movhi	r2,32768
    16a4:	10bfffc4 	addi	r2,r2,-1
    16a8:	1884703a 	and	r2,r3,r2
    16ac:	81000015 	stw	r4,0(r16)
    16b0:	80c00115 	stw	r3,4(r16)
    16b4:	dfc00117 	ldw	ra,4(sp)
    16b8:	dc000017 	ldw	r16,0(sp)
    16bc:	dec00204 	addi	sp,sp,8
    16c0:	f800283a 	ret

000016c4 <_sbrk_r>:
    16c4:	defffd04 	addi	sp,sp,-12
    16c8:	dc000015 	stw	r16,0(sp)
    16cc:	04000034 	movhi	r16,0
    16d0:	dc400115 	stw	r17,4(sp)
    16d4:	84097604 	addi	r16,r16,9688
    16d8:	2023883a 	mov	r17,r4
    16dc:	2809883a 	mov	r4,r5
    16e0:	dfc00215 	stw	ra,8(sp)
    16e4:	80000015 	stw	zero,0(r16)
    16e8:	00021540 	call	2154 <sbrk>
    16ec:	00ffffc4 	movi	r3,-1
    16f0:	10c0031e 	bne	r2,r3,1700 <_sbrk_r+0x3c>
    16f4:	80c00017 	ldw	r3,0(r16)
    16f8:	18000126 	beq	r3,zero,1700 <_sbrk_r+0x3c>
    16fc:	88c00015 	stw	r3,0(r17)
    1700:	dfc00217 	ldw	ra,8(sp)
    1704:	dc400117 	ldw	r17,4(sp)
    1708:	dc000017 	ldw	r16,0(sp)
    170c:	dec00304 	addi	sp,sp,12
    1710:	f800283a 	ret

00001714 <strlen>:
    1714:	2005883a 	mov	r2,r4
    1718:	10c00007 	ldb	r3,0(r2)
    171c:	18000226 	beq	r3,zero,1728 <strlen+0x14>
    1720:	10800044 	addi	r2,r2,1
    1724:	003ffc06 	br	1718 <_gp+0xffff72c0>
    1728:	1105c83a 	sub	r2,r2,r4
    172c:	f800283a 	ret

00001730 <print_repeat>:
    1730:	defffb04 	addi	sp,sp,-20
    1734:	dc800315 	stw	r18,12(sp)
    1738:	dc400215 	stw	r17,8(sp)
    173c:	dc000115 	stw	r16,4(sp)
    1740:	dfc00415 	stw	ra,16(sp)
    1744:	2025883a 	mov	r18,r4
    1748:	2823883a 	mov	r17,r5
    174c:	d9800005 	stb	r6,0(sp)
    1750:	3821883a 	mov	r16,r7
    1754:	04000a0e 	bge	zero,r16,1780 <print_repeat+0x50>
    1758:	88800117 	ldw	r2,4(r17)
    175c:	9009883a 	mov	r4,r18
    1760:	880b883a 	mov	r5,r17
    1764:	d80d883a 	mov	r6,sp
    1768:	01c00044 	movi	r7,1
    176c:	103ee83a 	callr	r2
    1770:	843fffc4 	addi	r16,r16,-1
    1774:	103ff726 	beq	r2,zero,1754 <_gp+0xffff72fc>
    1778:	00bfffc4 	movi	r2,-1
    177c:	00000106 	br	1784 <print_repeat+0x54>
    1780:	0005883a 	mov	r2,zero
    1784:	dfc00417 	ldw	ra,16(sp)
    1788:	dc800317 	ldw	r18,12(sp)
    178c:	dc400217 	ldw	r17,8(sp)
    1790:	dc000117 	ldw	r16,4(sp)
    1794:	dec00504 	addi	sp,sp,20
    1798:	f800283a 	ret

0000179c <___vfprintf_internal_r>:
    179c:	deffe304 	addi	sp,sp,-116
    17a0:	d8c00804 	addi	r3,sp,32
    17a4:	df001b15 	stw	fp,108(sp)
    17a8:	ddc01a15 	stw	r23,104(sp)
    17ac:	dd801915 	stw	r22,100(sp)
    17b0:	dd401815 	stw	r21,96(sp)
    17b4:	dd001715 	stw	r20,92(sp)
    17b8:	dcc01615 	stw	r19,88(sp)
    17bc:	dc801515 	stw	r18,84(sp)
    17c0:	dc401415 	stw	r17,80(sp)
    17c4:	dc001315 	stw	r16,76(sp)
    17c8:	dfc01c15 	stw	ra,112(sp)
    17cc:	2029883a 	mov	r20,r4
    17d0:	2823883a 	mov	r17,r5
    17d4:	3839883a 	mov	fp,r7
    17d8:	d9800f15 	stw	r6,60(sp)
    17dc:	0021883a 	mov	r16,zero
    17e0:	d8000e15 	stw	zero,56(sp)
    17e4:	002f883a 	mov	r23,zero
    17e8:	002b883a 	mov	r21,zero
    17ec:	0027883a 	mov	r19,zero
    17f0:	0025883a 	mov	r18,zero
    17f4:	d8000c15 	stw	zero,48(sp)
    17f8:	d8000b15 	stw	zero,44(sp)
    17fc:	002d883a 	mov	r22,zero
    1800:	d8c00915 	stw	r3,36(sp)
    1804:	d8c00f17 	ldw	r3,60(sp)
    1808:	19000003 	ldbu	r4,0(r3)
    180c:	20803fcc 	andi	r2,r4,255
    1810:	1080201c 	xori	r2,r2,128
    1814:	10bfe004 	addi	r2,r2,-128
    1818:	10012e26 	beq	r2,zero,1cd4 <___vfprintf_internal_r+0x538>
    181c:	01400044 	movi	r5,1
    1820:	b1401426 	beq	r22,r5,1874 <___vfprintf_internal_r+0xd8>
    1824:	2d800216 	blt	r5,r22,1830 <___vfprintf_internal_r+0x94>
    1828:	b0000626 	beq	r22,zero,1844 <___vfprintf_internal_r+0xa8>
    182c:	00012506 	br	1cc4 <___vfprintf_internal_r+0x528>
    1830:	01400084 	movi	r5,2
    1834:	b1401d26 	beq	r22,r5,18ac <___vfprintf_internal_r+0x110>
    1838:	014000c4 	movi	r5,3
    183c:	b1402b26 	beq	r22,r5,18ec <___vfprintf_internal_r+0x150>
    1840:	00012006 	br	1cc4 <___vfprintf_internal_r+0x528>
    1844:	01400944 	movi	r5,37
    1848:	11410d26 	beq	r2,r5,1c80 <___vfprintf_internal_r+0x4e4>
    184c:	88800117 	ldw	r2,4(r17)
    1850:	d9000005 	stb	r4,0(sp)
    1854:	880b883a 	mov	r5,r17
    1858:	a009883a 	mov	r4,r20
    185c:	d80d883a 	mov	r6,sp
    1860:	01c00044 	movi	r7,1
    1864:	103ee83a 	callr	r2
    1868:	1000e81e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    186c:	84000044 	addi	r16,r16,1
    1870:	00011406 	br	1cc4 <___vfprintf_internal_r+0x528>
    1874:	01400c04 	movi	r5,48
    1878:	11410a26 	beq	r2,r5,1ca4 <___vfprintf_internal_r+0x508>
    187c:	01400944 	movi	r5,37
    1880:	11400a1e 	bne	r2,r5,18ac <___vfprintf_internal_r+0x110>
    1884:	d8800005 	stb	r2,0(sp)
    1888:	88800117 	ldw	r2,4(r17)
    188c:	a009883a 	mov	r4,r20
    1890:	880b883a 	mov	r5,r17
    1894:	d80d883a 	mov	r6,sp
    1898:	b00f883a 	mov	r7,r22
    189c:	103ee83a 	callr	r2
    18a0:	1000da1e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    18a4:	84000044 	addi	r16,r16,1
    18a8:	00010506 	br	1cc0 <___vfprintf_internal_r+0x524>
    18ac:	25bff404 	addi	r22,r4,-48
    18b0:	b5803fcc 	andi	r22,r22,255
    18b4:	00c00244 	movi	r3,9
    18b8:	1d800936 	bltu	r3,r22,18e0 <___vfprintf_internal_r+0x144>
    18bc:	00bfffc4 	movi	r2,-1
    18c0:	90800426 	beq	r18,r2,18d4 <___vfprintf_internal_r+0x138>
    18c4:	9009883a 	mov	r4,r18
    18c8:	01400284 	movi	r5,10
    18cc:	00012840 	call	1284 <__mulsi3>
    18d0:	00000106 	br	18d8 <___vfprintf_internal_r+0x13c>
    18d4:	0005883a 	mov	r2,zero
    18d8:	15a5883a 	add	r18,r2,r22
    18dc:	0000f206 	br	1ca8 <___vfprintf_internal_r+0x50c>
    18e0:	01400b84 	movi	r5,46
    18e4:	1140f426 	beq	r2,r5,1cb8 <___vfprintf_internal_r+0x51c>
    18e8:	05800084 	movi	r22,2
    18ec:	213ff404 	addi	r4,r4,-48
    18f0:	20c03fcc 	andi	r3,r4,255
    18f4:	01000244 	movi	r4,9
    18f8:	20c00b36 	bltu	r4,r3,1928 <___vfprintf_internal_r+0x18c>
    18fc:	00bfffc4 	movi	r2,-1
    1900:	98800626 	beq	r19,r2,191c <___vfprintf_internal_r+0x180>
    1904:	9809883a 	mov	r4,r19
    1908:	01400284 	movi	r5,10
    190c:	d8c01115 	stw	r3,68(sp)
    1910:	00012840 	call	1284 <__mulsi3>
    1914:	d8c01117 	ldw	r3,68(sp)
    1918:	00000106 	br	1920 <___vfprintf_internal_r+0x184>
    191c:	0005883a 	mov	r2,zero
    1920:	10e7883a 	add	r19,r2,r3
    1924:	0000e706 	br	1cc4 <___vfprintf_internal_r+0x528>
    1928:	01401b04 	movi	r5,108
    192c:	1140e026 	beq	r2,r5,1cb0 <___vfprintf_internal_r+0x514>
    1930:	013fffc4 	movi	r4,-1
    1934:	99000226 	beq	r19,r4,1940 <___vfprintf_internal_r+0x1a4>
    1938:	d8000b15 	stw	zero,44(sp)
    193c:	00000106 	br	1944 <___vfprintf_internal_r+0x1a8>
    1940:	04c00044 	movi	r19,1
    1944:	01001a44 	movi	r4,105
    1948:	11001626 	beq	r2,r4,19a4 <___vfprintf_internal_r+0x208>
    194c:	20800916 	blt	r4,r2,1974 <___vfprintf_internal_r+0x1d8>
    1950:	010018c4 	movi	r4,99
    1954:	11009626 	beq	r2,r4,1bb0 <___vfprintf_internal_r+0x414>
    1958:	01001904 	movi	r4,100
    195c:	11001126 	beq	r2,r4,19a4 <___vfprintf_internal_r+0x208>
    1960:	01001604 	movi	r4,88
    1964:	1100d61e 	bne	r2,r4,1cc0 <___vfprintf_internal_r+0x524>
    1968:	00c00044 	movi	r3,1
    196c:	d8c00e15 	stw	r3,56(sp)
    1970:	00001406 	br	19c4 <___vfprintf_internal_r+0x228>
    1974:	01001cc4 	movi	r4,115
    1978:	1100a626 	beq	r2,r4,1c14 <___vfprintf_internal_r+0x478>
    197c:	20800416 	blt	r4,r2,1990 <___vfprintf_internal_r+0x1f4>
    1980:	01001bc4 	movi	r4,111
    1984:	1100ce1e 	bne	r2,r4,1cc0 <___vfprintf_internal_r+0x524>
    1988:	05400204 	movi	r21,8
    198c:	00000e06 	br	19c8 <___vfprintf_internal_r+0x22c>
    1990:	01001d44 	movi	r4,117
    1994:	11000c26 	beq	r2,r4,19c8 <___vfprintf_internal_r+0x22c>
    1998:	01001e04 	movi	r4,120
    199c:	11000926 	beq	r2,r4,19c4 <___vfprintf_internal_r+0x228>
    19a0:	0000c706 	br	1cc0 <___vfprintf_internal_r+0x524>
    19a4:	e0800104 	addi	r2,fp,4
    19a8:	b8000726 	beq	r23,zero,19c8 <___vfprintf_internal_r+0x22c>
    19ac:	d8800d15 	stw	r2,52(sp)
    19b0:	e7000017 	ldw	fp,0(fp)
    19b4:	e000080e 	bge	fp,zero,19d8 <___vfprintf_internal_r+0x23c>
    19b8:	0739c83a 	sub	fp,zero,fp
    19bc:	02000044 	movi	r8,1
    19c0:	00000606 	br	19dc <___vfprintf_internal_r+0x240>
    19c4:	05400404 	movi	r21,16
    19c8:	e0c00104 	addi	r3,fp,4
    19cc:	d8c00d15 	stw	r3,52(sp)
    19d0:	e7000017 	ldw	fp,0(fp)
    19d4:	002f883a 	mov	r23,zero
    19d8:	0011883a 	mov	r8,zero
    19dc:	002d883a 	mov	r22,zero
    19e0:	dd87883a 	add	r3,sp,r22
    19e4:	e0001a26 	beq	fp,zero,1a50 <___vfprintf_internal_r+0x2b4>
    19e8:	e009883a 	mov	r4,fp
    19ec:	a80b883a 	mov	r5,r21
    19f0:	d8c01115 	stw	r3,68(sp)
    19f4:	da001215 	stw	r8,72(sp)
    19f8:	00012740 	call	1274 <__udivsi3>
    19fc:	a809883a 	mov	r4,r21
    1a00:	100b883a 	mov	r5,r2
    1a04:	d8801015 	stw	r2,64(sp)
    1a08:	00012840 	call	1284 <__mulsi3>
    1a0c:	e085c83a 	sub	r2,fp,r2
    1a10:	01000244 	movi	r4,9
    1a14:	d8c01117 	ldw	r3,68(sp)
    1a18:	d9801017 	ldw	r6,64(sp)
    1a1c:	da001217 	ldw	r8,72(sp)
    1a20:	20800216 	blt	r4,r2,1a2c <___vfprintf_internal_r+0x290>
    1a24:	17000c04 	addi	fp,r2,48
    1a28:	00000506 	br	1a40 <___vfprintf_internal_r+0x2a4>
    1a2c:	d9400e17 	ldw	r5,56(sp)
    1a30:	28000226 	beq	r5,zero,1a3c <___vfprintf_internal_r+0x2a0>
    1a34:	17000dc4 	addi	fp,r2,55
    1a38:	00000106 	br	1a40 <___vfprintf_internal_r+0x2a4>
    1a3c:	170015c4 	addi	fp,r2,87
    1a40:	1f000005 	stb	fp,0(r3)
    1a44:	b5800044 	addi	r22,r22,1
    1a48:	3039883a 	mov	fp,r6
    1a4c:	003fe406 	br	19e0 <_gp+0xffff7588>
    1a50:	1ec5c83a 	sub	r2,r3,sp
    1a54:	d8800a15 	stw	r2,40(sp)
    1a58:	9885c83a 	sub	r2,r19,r2
    1a5c:	1839883a 	mov	fp,r3
    1a60:	00800e0e 	bge	zero,r2,1a9c <___vfprintf_internal_r+0x300>
    1a64:	182d883a 	mov	r22,r3
    1a68:	1885883a 	add	r2,r3,r2
    1a6c:	01000c04 	movi	r4,48
    1a70:	d9400917 	ldw	r5,36(sp)
    1a74:	b007883a 	mov	r3,r22
    1a78:	b140052e 	bgeu	r22,r5,1a90 <___vfprintf_internal_r+0x2f4>
    1a7c:	b5800044 	addi	r22,r22,1
    1a80:	19000005 	stb	r4,0(r3)
    1a84:	b039883a 	mov	fp,r22
    1a88:	b0bff91e 	bne	r22,r2,1a70 <_gp+0xffff7618>
    1a8c:	00000106 	br	1a94 <___vfprintf_internal_r+0x2f8>
    1a90:	b039883a 	mov	fp,r22
    1a94:	b6edc83a 	sub	r22,r22,sp
    1a98:	dd800a15 	stw	r22,40(sp)
    1a9c:	d8800a17 	ldw	r2,40(sp)
    1aa0:	1207883a 	add	r3,r2,r8
    1aa4:	90edc83a 	sub	r22,r18,r3
    1aa8:	d8c00b17 	ldw	r3,44(sp)
    1aac:	18001726 	beq	r3,zero,1b0c <___vfprintf_internal_r+0x370>
    1ab0:	40000a26 	beq	r8,zero,1adc <___vfprintf_internal_r+0x340>
    1ab4:	00800b44 	movi	r2,45
    1ab8:	d8800805 	stb	r2,32(sp)
    1abc:	88800117 	ldw	r2,4(r17)
    1ac0:	a009883a 	mov	r4,r20
    1ac4:	880b883a 	mov	r5,r17
    1ac8:	d9800804 	addi	r6,sp,32
    1acc:	01c00044 	movi	r7,1
    1ad0:	103ee83a 	callr	r2
    1ad4:	10004d1e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1ad8:	84000044 	addi	r16,r16,1
    1adc:	0580070e 	bge	zero,r22,1afc <___vfprintf_internal_r+0x360>
    1ae0:	a009883a 	mov	r4,r20
    1ae4:	880b883a 	mov	r5,r17
    1ae8:	01800c04 	movi	r6,48
    1aec:	b00f883a 	mov	r7,r22
    1af0:	00017300 	call	1730 <print_repeat>
    1af4:	1000451e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1af8:	85a1883a 	add	r16,r16,r22
    1afc:	d9000a17 	ldw	r4,40(sp)
    1b00:	e007883a 	mov	r3,fp
    1b04:	272dc83a 	sub	r22,r4,fp
    1b08:	00002206 	br	1b94 <___vfprintf_internal_r+0x3f8>
    1b0c:	0580090e 	bge	zero,r22,1b34 <___vfprintf_internal_r+0x398>
    1b10:	a009883a 	mov	r4,r20
    1b14:	880b883a 	mov	r5,r17
    1b18:	01800804 	movi	r6,32
    1b1c:	b00f883a 	mov	r7,r22
    1b20:	da001215 	stw	r8,72(sp)
    1b24:	00017300 	call	1730 <print_repeat>
    1b28:	da001217 	ldw	r8,72(sp)
    1b2c:	1000371e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1b30:	85a1883a 	add	r16,r16,r22
    1b34:	403ff126 	beq	r8,zero,1afc <_gp+0xffff76a4>
    1b38:	00800b44 	movi	r2,45
    1b3c:	d8800805 	stb	r2,32(sp)
    1b40:	88800117 	ldw	r2,4(r17)
    1b44:	a009883a 	mov	r4,r20
    1b48:	880b883a 	mov	r5,r17
    1b4c:	d9800804 	addi	r6,sp,32
    1b50:	01c00044 	movi	r7,1
    1b54:	103ee83a 	callr	r2
    1b58:	10002c1e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1b5c:	84000044 	addi	r16,r16,1
    1b60:	003fe606 	br	1afc <_gp+0xffff76a4>
    1b64:	18ffffc4 	addi	r3,r3,-1
    1b68:	18800003 	ldbu	r2,0(r3)
    1b6c:	a009883a 	mov	r4,r20
    1b70:	d8c01115 	stw	r3,68(sp)
    1b74:	d8800805 	stb	r2,32(sp)
    1b78:	88800117 	ldw	r2,4(r17)
    1b7c:	880b883a 	mov	r5,r17
    1b80:	d9800804 	addi	r6,sp,32
    1b84:	01c00044 	movi	r7,1
    1b88:	103ee83a 	callr	r2
    1b8c:	d8c01117 	ldw	r3,68(sp)
    1b90:	10001e1e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1b94:	80c5c83a 	sub	r2,r16,r3
    1b98:	1d89883a 	add	r4,r3,r22
    1b9c:	e085883a 	add	r2,fp,r2
    1ba0:	013ff016 	blt	zero,r4,1b64 <_gp+0xffff770c>
    1ba4:	1021883a 	mov	r16,r2
    1ba8:	df000d17 	ldw	fp,52(sp)
    1bac:	00004406 	br	1cc0 <___vfprintf_internal_r+0x524>
    1bb0:	01000044 	movi	r4,1
    1bb4:	2480080e 	bge	r4,r18,1bd8 <___vfprintf_internal_r+0x43c>
    1bb8:	95bfffc4 	addi	r22,r18,-1
    1bbc:	a009883a 	mov	r4,r20
    1bc0:	880b883a 	mov	r5,r17
    1bc4:	01800804 	movi	r6,32
    1bc8:	b00f883a 	mov	r7,r22
    1bcc:	00017300 	call	1730 <print_repeat>
    1bd0:	10000e1e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1bd4:	85a1883a 	add	r16,r16,r22
    1bd8:	e0800017 	ldw	r2,0(fp)
    1bdc:	a009883a 	mov	r4,r20
    1be0:	880b883a 	mov	r5,r17
    1be4:	d8800005 	stb	r2,0(sp)
    1be8:	88800117 	ldw	r2,4(r17)
    1bec:	d80d883a 	mov	r6,sp
    1bf0:	01c00044 	movi	r7,1
    1bf4:	e5800104 	addi	r22,fp,4
    1bf8:	103ee83a 	callr	r2
    1bfc:	1000031e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x470>
    1c00:	84000044 	addi	r16,r16,1
    1c04:	b039883a 	mov	fp,r22
    1c08:	00002d06 	br	1cc0 <___vfprintf_internal_r+0x524>
    1c0c:	00bfffc4 	movi	r2,-1
    1c10:	00003106 	br	1cd8 <___vfprintf_internal_r+0x53c>
    1c14:	e5800017 	ldw	r22,0(fp)
    1c18:	e0c00104 	addi	r3,fp,4
    1c1c:	d8c00a15 	stw	r3,40(sp)
    1c20:	b009883a 	mov	r4,r22
    1c24:	00017140 	call	1714 <strlen>
    1c28:	9091c83a 	sub	r8,r18,r2
    1c2c:	1039883a 	mov	fp,r2
    1c30:	0200090e 	bge	zero,r8,1c58 <___vfprintf_internal_r+0x4bc>
    1c34:	400f883a 	mov	r7,r8
    1c38:	a009883a 	mov	r4,r20
    1c3c:	880b883a 	mov	r5,r17
    1c40:	01800804 	movi	r6,32
    1c44:	da001215 	stw	r8,72(sp)
    1c48:	00017300 	call	1730 <print_repeat>
    1c4c:	da001217 	ldw	r8,72(sp)
    1c50:	103fee1e 	bne	r2,zero,1c0c <_gp+0xffff77b4>
    1c54:	8221883a 	add	r16,r16,r8
    1c58:	88800117 	ldw	r2,4(r17)
    1c5c:	a009883a 	mov	r4,r20
    1c60:	880b883a 	mov	r5,r17
    1c64:	b00d883a 	mov	r6,r22
    1c68:	e00f883a 	mov	r7,fp
    1c6c:	103ee83a 	callr	r2
    1c70:	103fe61e 	bne	r2,zero,1c0c <_gp+0xffff77b4>
    1c74:	8721883a 	add	r16,r16,fp
    1c78:	df000a17 	ldw	fp,40(sp)
    1c7c:	00001006 	br	1cc0 <___vfprintf_internal_r+0x524>
    1c80:	05c00044 	movi	r23,1
    1c84:	04ffffc4 	movi	r19,-1
    1c88:	d8000e15 	stw	zero,56(sp)
    1c8c:	05400284 	movi	r21,10
    1c90:	9825883a 	mov	r18,r19
    1c94:	d8000c15 	stw	zero,48(sp)
    1c98:	d8000b15 	stw	zero,44(sp)
    1c9c:	b82d883a 	mov	r22,r23
    1ca0:	00000806 	br	1cc4 <___vfprintf_internal_r+0x528>
    1ca4:	dd800b15 	stw	r22,44(sp)
    1ca8:	05800084 	movi	r22,2
    1cac:	00000506 	br	1cc4 <___vfprintf_internal_r+0x528>
    1cb0:	00c00044 	movi	r3,1
    1cb4:	d8c00c15 	stw	r3,48(sp)
    1cb8:	058000c4 	movi	r22,3
    1cbc:	00000106 	br	1cc4 <___vfprintf_internal_r+0x528>
    1cc0:	002d883a 	mov	r22,zero
    1cc4:	d8c00f17 	ldw	r3,60(sp)
    1cc8:	18c00044 	addi	r3,r3,1
    1ccc:	d8c00f15 	stw	r3,60(sp)
    1cd0:	003ecc06 	br	1804 <_gp+0xffff73ac>
    1cd4:	8005883a 	mov	r2,r16
    1cd8:	dfc01c17 	ldw	ra,112(sp)
    1cdc:	df001b17 	ldw	fp,108(sp)
    1ce0:	ddc01a17 	ldw	r23,104(sp)
    1ce4:	dd801917 	ldw	r22,100(sp)
    1ce8:	dd401817 	ldw	r21,96(sp)
    1cec:	dd001717 	ldw	r20,92(sp)
    1cf0:	dcc01617 	ldw	r19,88(sp)
    1cf4:	dc801517 	ldw	r18,84(sp)
    1cf8:	dc401417 	ldw	r17,80(sp)
    1cfc:	dc001317 	ldw	r16,76(sp)
    1d00:	dec01d04 	addi	sp,sp,116
    1d04:	f800283a 	ret

00001d08 <__vfprintf_internal>:
    1d08:	2007883a 	mov	r3,r4
    1d0c:	01000034 	movhi	r4,0
    1d10:	21092104 	addi	r4,r4,9348
    1d14:	21000017 	ldw	r4,0(r4)
    1d18:	2805883a 	mov	r2,r5
    1d1c:	300f883a 	mov	r7,r6
    1d20:	180b883a 	mov	r5,r3
    1d24:	100d883a 	mov	r6,r2
    1d28:	000179c1 	jmpi	179c <___vfprintf_internal_r>

00001d2c <__sfvwrite_small_dev>:
    1d2c:	2880000b 	ldhu	r2,0(r5)
    1d30:	defffa04 	addi	sp,sp,-24
    1d34:	dc000015 	stw	r16,0(sp)
    1d38:	dfc00515 	stw	ra,20(sp)
    1d3c:	dd000415 	stw	r20,16(sp)
    1d40:	dcc00315 	stw	r19,12(sp)
    1d44:	dc800215 	stw	r18,8(sp)
    1d48:	dc400115 	stw	r17,4(sp)
    1d4c:	1080020c 	andi	r2,r2,8
    1d50:	2821883a 	mov	r16,r5
    1d54:	10001726 	beq	r2,zero,1db4 <__sfvwrite_small_dev+0x88>
    1d58:	2880008f 	ldh	r2,2(r5)
    1d5c:	10001216 	blt	r2,zero,1da8 <__sfvwrite_small_dev+0x7c>
    1d60:	2027883a 	mov	r19,r4
    1d64:	3025883a 	mov	r18,r6
    1d68:	3823883a 	mov	r17,r7
    1d6c:	05010004 	movi	r20,1024
    1d70:	04400b0e 	bge	zero,r17,1da0 <__sfvwrite_small_dev+0x74>
    1d74:	8140008f 	ldh	r5,2(r16)
    1d78:	880f883a 	mov	r7,r17
    1d7c:	a440010e 	bge	r20,r17,1d84 <__sfvwrite_small_dev+0x58>
    1d80:	01c10004 	movi	r7,1024
    1d84:	9809883a 	mov	r4,r19
    1d88:	900d883a 	mov	r6,r18
    1d8c:	0001e840 	call	1e84 <_write_r>
    1d90:	0080050e 	bge	zero,r2,1da8 <__sfvwrite_small_dev+0x7c>
    1d94:	88a3c83a 	sub	r17,r17,r2
    1d98:	90a5883a 	add	r18,r18,r2
    1d9c:	003ff406 	br	1d70 <_gp+0xffff7918>
    1da0:	0005883a 	mov	r2,zero
    1da4:	00000406 	br	1db8 <__sfvwrite_small_dev+0x8c>
    1da8:	8080000b 	ldhu	r2,0(r16)
    1dac:	10801014 	ori	r2,r2,64
    1db0:	8080000d 	sth	r2,0(r16)
    1db4:	00bfffc4 	movi	r2,-1
    1db8:	dfc00517 	ldw	ra,20(sp)
    1dbc:	dd000417 	ldw	r20,16(sp)
    1dc0:	dcc00317 	ldw	r19,12(sp)
    1dc4:	dc800217 	ldw	r18,8(sp)
    1dc8:	dc400117 	ldw	r17,4(sp)
    1dcc:	dc000017 	ldw	r16,0(sp)
    1dd0:	dec00604 	addi	sp,sp,24
    1dd4:	f800283a 	ret

00001dd8 <putc>:
    1dd8:	defffd04 	addi	sp,sp,-12
    1ddc:	00800034 	movhi	r2,0
    1de0:	dc000115 	stw	r16,4(sp)
    1de4:	dfc00215 	stw	ra,8(sp)
    1de8:	10874b04 	addi	r2,r2,7468
    1dec:	28800115 	stw	r2,4(r5)
    1df0:	00800034 	movhi	r2,0
    1df4:	10892104 	addi	r2,r2,9348
    1df8:	d9000005 	stb	r4,0(sp)
    1dfc:	2021883a 	mov	r16,r4
    1e00:	11000017 	ldw	r4,0(r2)
    1e04:	d80d883a 	mov	r6,sp
    1e08:	01c00044 	movi	r7,1
    1e0c:	0001d2c0 	call	1d2c <__sfvwrite_small_dev>
    1e10:	00ffffc4 	movi	r3,-1
    1e14:	10c00126 	beq	r2,r3,1e1c <putc+0x44>
    1e18:	8005883a 	mov	r2,r16
    1e1c:	dfc00217 	ldw	ra,8(sp)
    1e20:	dc000117 	ldw	r16,4(sp)
    1e24:	dec00304 	addi	sp,sp,12
    1e28:	f800283a 	ret

00001e2c <_putc_r>:
    1e2c:	defffd04 	addi	sp,sp,-12
    1e30:	00800034 	movhi	r2,0
    1e34:	dc000115 	stw	r16,4(sp)
    1e38:	dfc00215 	stw	ra,8(sp)
    1e3c:	10874b04 	addi	r2,r2,7468
    1e40:	30800115 	stw	r2,4(r6)
    1e44:	00800034 	movhi	r2,0
    1e48:	10892104 	addi	r2,r2,9348
    1e4c:	11000017 	ldw	r4,0(r2)
    1e50:	2821883a 	mov	r16,r5
    1e54:	01c00044 	movi	r7,1
    1e58:	300b883a 	mov	r5,r6
    1e5c:	d80d883a 	mov	r6,sp
    1e60:	dc000005 	stb	r16,0(sp)
    1e64:	0001d2c0 	call	1d2c <__sfvwrite_small_dev>
    1e68:	00ffffc4 	movi	r3,-1
    1e6c:	10c00126 	beq	r2,r3,1e74 <_putc_r+0x48>
    1e70:	8005883a 	mov	r2,r16
    1e74:	dfc00217 	ldw	ra,8(sp)
    1e78:	dc000117 	ldw	r16,4(sp)
    1e7c:	dec00304 	addi	sp,sp,12
    1e80:	f800283a 	ret

00001e84 <_write_r>:
    1e84:	defffd04 	addi	sp,sp,-12
    1e88:	dc000015 	stw	r16,0(sp)
    1e8c:	04000034 	movhi	r16,0
    1e90:	dc400115 	stw	r17,4(sp)
    1e94:	84097604 	addi	r16,r16,9688
    1e98:	2023883a 	mov	r17,r4
    1e9c:	2809883a 	mov	r4,r5
    1ea0:	300b883a 	mov	r5,r6
    1ea4:	380d883a 	mov	r6,r7
    1ea8:	dfc00215 	stw	ra,8(sp)
    1eac:	80000015 	stw	zero,0(r16)
    1eb0:	00021a00 	call	21a0 <write>
    1eb4:	00ffffc4 	movi	r3,-1
    1eb8:	10c0031e 	bne	r2,r3,1ec8 <_write_r+0x44>
    1ebc:	80c00017 	ldw	r3,0(r16)
    1ec0:	18000126 	beq	r3,zero,1ec8 <_write_r+0x44>
    1ec4:	88c00015 	stw	r3,0(r17)
    1ec8:	dfc00217 	ldw	ra,8(sp)
    1ecc:	dc400117 	ldw	r17,4(sp)
    1ed0:	dc000017 	ldw	r16,0(sp)
    1ed4:	dec00304 	addi	sp,sp,12
    1ed8:	f800283a 	ret

00001edc <__muldi3>:
    1edc:	defff604 	addi	sp,sp,-40
    1ee0:	dd800615 	stw	r22,24(sp)
    1ee4:	dd400515 	stw	r21,20(sp)
    1ee8:	25bfffcc 	andi	r22,r4,65535
    1eec:	357fffcc 	andi	r21,r6,65535
    1ef0:	dc400115 	stw	r17,4(sp)
    1ef4:	2022d43a 	srli	r17,r4,16
    1ef8:	dcc00315 	stw	r19,12(sp)
    1efc:	dc800215 	stw	r18,8(sp)
    1f00:	2027883a 	mov	r19,r4
    1f04:	2825883a 	mov	r18,r5
    1f08:	a809883a 	mov	r4,r21
    1f0c:	b00b883a 	mov	r5,r22
    1f10:	dfc00915 	stw	ra,36(sp)
    1f14:	df000815 	stw	fp,32(sp)
    1f18:	ddc00715 	stw	r23,28(sp)
    1f1c:	3839883a 	mov	fp,r7
    1f20:	302ed43a 	srli	r23,r6,16
    1f24:	dd000415 	stw	r20,16(sp)
    1f28:	dc000015 	stw	r16,0(sp)
    1f2c:	3029883a 	mov	r20,r6
    1f30:	00012840 	call	1284 <__mulsi3>
    1f34:	a809883a 	mov	r4,r21
    1f38:	880b883a 	mov	r5,r17
    1f3c:	1021883a 	mov	r16,r2
    1f40:	00012840 	call	1284 <__mulsi3>
    1f44:	880b883a 	mov	r5,r17
    1f48:	b809883a 	mov	r4,r23
    1f4c:	102b883a 	mov	r21,r2
    1f50:	00012840 	call	1284 <__mulsi3>
    1f54:	b809883a 	mov	r4,r23
    1f58:	b00b883a 	mov	r5,r22
    1f5c:	1023883a 	mov	r17,r2
    1f60:	00012840 	call	1284 <__mulsi3>
    1f64:	8012d43a 	srli	r9,r16,16
    1f68:	a885883a 	add	r2,r21,r2
    1f6c:	1251883a 	add	r8,r2,r9
    1f70:	4540022e 	bgeu	r8,r21,1f7c <__muldi3+0xa0>
    1f74:	00800074 	movhi	r2,1
    1f78:	88a3883a 	add	r17,r17,r2
    1f7c:	4006d43a 	srli	r3,r8,16
    1f80:	4010943a 	slli	r8,r8,16
    1f84:	9809883a 	mov	r4,r19
    1f88:	e00b883a 	mov	r5,fp
    1f8c:	843fffcc 	andi	r16,r16,65535
    1f90:	88e3883a 	add	r17,r17,r3
    1f94:	4421883a 	add	r16,r8,r16
    1f98:	00012840 	call	1284 <__mulsi3>
    1f9c:	a009883a 	mov	r4,r20
    1fa0:	900b883a 	mov	r5,r18
    1fa4:	1027883a 	mov	r19,r2
    1fa8:	00012840 	call	1284 <__mulsi3>
    1fac:	9885883a 	add	r2,r19,r2
    1fb0:	1447883a 	add	r3,r2,r17
    1fb4:	8005883a 	mov	r2,r16
    1fb8:	dfc00917 	ldw	ra,36(sp)
    1fbc:	df000817 	ldw	fp,32(sp)
    1fc0:	ddc00717 	ldw	r23,28(sp)
    1fc4:	dd800617 	ldw	r22,24(sp)
    1fc8:	dd400517 	ldw	r21,20(sp)
    1fcc:	dd000417 	ldw	r20,16(sp)
    1fd0:	dcc00317 	ldw	r19,12(sp)
    1fd4:	dc800217 	ldw	r18,8(sp)
    1fd8:	dc400117 	ldw	r17,4(sp)
    1fdc:	dc000017 	ldw	r16,0(sp)
    1fe0:	dec00a04 	addi	sp,sp,40
    1fe4:	f800283a 	ret

00001fe8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1fe8:	deffff04 	addi	sp,sp,-4
    1fec:	01000034 	movhi	r4,0
    1ff0:	01400034 	movhi	r5,0
    1ff4:	dfc00015 	stw	ra,0(sp)
    1ff8:	2108de04 	addi	r4,r4,9080
    1ffc:	29492504 	addi	r5,r5,9364

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2000:	2140061e 	bne	r4,r5,201c <alt_load+0x34>
    2004:	01000034 	movhi	r4,0
    2008:	01400034 	movhi	r5,0
    200c:	21000804 	addi	r4,r4,32
    2010:	29400804 	addi	r5,r5,32
    2014:	2140141e 	bne	r4,r5,2068 <alt_load+0x80>
    2018:	00000d06 	br	2050 <alt_load+0x68>
    201c:	00c00034 	movhi	r3,0
    2020:	18c92504 	addi	r3,r3,9364
    2024:	00bfff04 	movi	r2,-4
    2028:	1907c83a 	sub	r3,r3,r4
    202c:	1886703a 	and	r3,r3,r2
    2030:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2034:	10fff326 	beq	r2,r3,2004 <_gp+0xffff7bac>
    2038:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    203c:	39c00017 	ldw	r7,0(r7)
    2040:	110d883a 	add	r6,r2,r4
    2044:	10800104 	addi	r2,r2,4
    2048:	31c00015 	stw	r7,0(r6)
    204c:	003ff906 	br	2034 <_gp+0xffff7bdc>
    2050:	01000034 	movhi	r4,0
    2054:	01400034 	movhi	r5,0
    2058:	21089d04 	addi	r4,r4,8820
    205c:	29489d04 	addi	r5,r5,8820

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2060:	2140121e 	bne	r4,r5,20ac <alt_load+0xc4>
    2064:	00000d06 	br	209c <alt_load+0xb4>
    2068:	00c00034 	movhi	r3,0
    206c:	18c00804 	addi	r3,r3,32
    2070:	00bfff04 	movi	r2,-4
    2074:	1907c83a 	sub	r3,r3,r4
    2078:	1886703a 	and	r3,r3,r2
    207c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2080:	10fff326 	beq	r2,r3,2050 <_gp+0xffff7bf8>
    2084:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2088:	39c00017 	ldw	r7,0(r7)
    208c:	110d883a 	add	r6,r2,r4
    2090:	10800104 	addi	r2,r2,4
    2094:	31c00015 	stw	r7,0(r6)
    2098:	003ff906 	br	2080 <_gp+0xffff7c28>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    209c:	00022640 	call	2264 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    20a0:	dfc00017 	ldw	ra,0(sp)
    20a4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    20a8:	00022681 	jmpi	2268 <alt_icache_flush_all>
    20ac:	00c00034 	movhi	r3,0
    20b0:	18c8de04 	addi	r3,r3,9080
    20b4:	00bfff04 	movi	r2,-4
    20b8:	1907c83a 	sub	r3,r3,r4
    20bc:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    20c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    20c4:	10fff526 	beq	r2,r3,209c <_gp+0xffff7c44>
    20c8:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    20cc:	39c00017 	ldw	r7,0(r7)
    20d0:	110d883a 	add	r6,r2,r4
    20d4:	10800104 	addi	r2,r2,4
    20d8:	31c00015 	stw	r7,0(r6)
    20dc:	003ff906 	br	20c4 <_gp+0xffff7c6c>

000020e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    20e0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    20e4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    20e8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    20ec:	000220c0 	call	220c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    20f0:	000222c0 	call	222c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    20f4:	d1206317 	ldw	r4,-32372(gp)
    20f8:	d1606217 	ldw	r5,-32376(gp)
    20fc:	d1a06117 	ldw	r6,-32380(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2100:	dfc00017 	ldw	ra,0(sp)
    2104:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2108:	0000d9c1 	jmpi	d9c <main>

0000210c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    210c:	defffd04 	addi	sp,sp,-12
    2110:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2114:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2118:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    211c:	01000034 	movhi	r4,0
    2120:	21092304 	addi	r4,r4,9356
    2124:	d80b883a 	mov	r5,sp
    2128:	01800044 	movi	r6,1
    212c:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2130:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2134:	00022300 	call	2230 <altera_avalon_jtag_uart_write>
    2138:	00ffffc4 	movi	r3,-1
    213c:	10c00126 	beq	r2,r3,2144 <alt_putchar+0x38>
        return -1;
    }
    return c;
    2140:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    2144:	dfc00217 	ldw	ra,8(sp)
    2148:	dc000117 	ldw	r16,4(sp)
    214c:	dec00304 	addi	sp,sp,12
    2150:	f800283a 	ret

00002154 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2154:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2158:	00bfff84 	movi	r2,-2
    215c:	2884703a 	and	r2,r5,r2
    2160:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2164:	d0a00c17 	ldw	r2,-32720(gp)
    2168:	00ffff04 	movi	r3,-4
    216c:	108000c4 	addi	r2,r2,3
    2170:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2174:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2178:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    217c:	1109883a 	add	r4,r2,r4
    2180:	18d00004 	addi	r3,r3,16384
    2184:	1900032e 	bgeu	r3,r4,2194 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2188:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    218c:	00bfffc4 	movi	r2,-1
    2190:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    2194:	d1200c15 	stw	r4,-32720(gp)
    2198:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    219c:	f800283a 	ret

000021a0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    21a0:	00800044 	movi	r2,1
    21a4:	20800226 	beq	r4,r2,21b0 <write+0x10>
    21a8:	00800084 	movi	r2,2
    21ac:	2080041e 	bne	r4,r2,21c0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    21b0:	01000034 	movhi	r4,0
    21b4:	21092304 	addi	r4,r4,9356
    21b8:	000f883a 	mov	r7,zero
    21bc:	00022301 	jmpi	2230 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    21c0:	00800034 	movhi	r2,0
    21c4:	10892404 	addi	r2,r2,9360
    21c8:	10800017 	ldw	r2,0(r2)
    21cc:	10000926 	beq	r2,zero,21f4 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    21d0:	deffff04 	addi	sp,sp,-4
    21d4:	dfc00015 	stw	ra,0(sp)
    21d8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    21dc:	00c01444 	movi	r3,81
    21e0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    21e4:	00bfffc4 	movi	r2,-1
    21e8:	dfc00017 	ldw	ra,0(sp)
    21ec:	dec00104 	addi	sp,sp,4
    21f0:	f800283a 	ret
    21f4:	00800034 	movhi	r2,0
    21f8:	10897604 	addi	r2,r2,9688
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    21fc:	00c01444 	movi	r3,81
    2200:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2204:	00bfffc4 	movi	r2,-1
    2208:	f800283a 	ret

0000220c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    220c:	deffff04 	addi	sp,sp,-4
    2210:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2214:	000226c0 	call	226c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2218:	00800044 	movi	r2,1
    221c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2220:	dfc00017 	ldw	ra,0(sp)
    2224:	dec00104 	addi	sp,sp,4
    2228:	f800283a 	ret

0000222c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    222c:	f800283a 	ret

00002230 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2230:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2234:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2238:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    223c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2240:	2980072e 	bgeu	r5,r6,2260 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2244:	38c00037 	ldwio	r3,0(r7)
    2248:	18ffffec 	andhi	r3,r3,65535
    224c:	183ffc26 	beq	r3,zero,2240 <_gp+0xffff7de8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2250:	28c00007 	ldb	r3,0(r5)
    2254:	20c00035 	stwio	r3,0(r4)
    2258:	29400044 	addi	r5,r5,1
    225c:	003ff806 	br	2240 <_gp+0xffff7de8>

  return count;
}
    2260:	f800283a 	ret

00002264 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2264:	f800283a 	ret

00002268 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2268:	f800283a 	ret

0000226c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    226c:	000170fa 	wrctl	ienable,zero
    2270:	f800283a 	ret
