
space_invaders.elf:     file format elf32-littlenios2
space_invaders.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000022d8 memsz 0x000022d8 flags r-x
    LOAD off    0x000032f8 vaddr 0x000022f8 paddr 0x00002418 align 2**12
         filesz 0x00000120 memsz 0x00000120 flags rw-
    LOAD off    0x00003538 vaddr 0x00002538 paddr 0x00002538 align 2**12
         filesz 0x00000000 memsz 0x0000083c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00003418  2**0
                  CONTENTS
  2 .text         000021f4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e4  00002214  00002214  00003214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000120  000022f8  00002418  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000083c  00002538  00002538  00003538  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00002d74  00002d74  00003418  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000528  00000000  00000000  00003440  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000943d  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000032ac  00000000  00000000  0000cda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003239  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b0c  00000000  00000000  0001328c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a37  00000000  00000000  00013d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000027b1  00000000  00000000  000157cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00017f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004d8  00000000  00000000  00017f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00019f3f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00019f42  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00019f45  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00019f46  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00019f47  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00019f50  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00019f59  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00019f62  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00019f69  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00019fa2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009c22b  00000000  00000000  0001d615  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00002214 l    d  .rodata	00000000 .rodata
000022f8 l    d  .rwdata	00000000 .rwdata
00002538 l    d  .bss	00000000 .bss
00002d74 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../space_invaders_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ProjectileNode.c
00000000 l    df *ABS*	00000000 data_structures_constants.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 gamelogic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000f3c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
000022f8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00002554 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001568 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002404 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000f18 g     F .text	00000024 sram_free
000013d4 g     F .text	00000018 putchar
00000a00 g     F .text	00000158 checkCollideAliens
00001f18 g     F .text	0000002c alt_main
000013ec g     F .text	00000080 _puts_r
00002418 g       *ABS*	00000000 __flash_rwdata_start
00002d74 g     O *ABS*	00000000 __alt_heap_start
00000d40 g     F .text	00000098 getProjectile
00001380 g     F .text	0000004c printf
00002548 g     O .bss	00000004 startTimer
000023f8 g     O .rwdata	00000004 gunnerLeftToggle
00000220 g     F .text	0000010c updateProjectileNodes
00002408 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00001fd8 g     F .text	0000007c times
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000255c g     O .bss	00000004 errno
00000cb4 g     F .text	00000048 getAlien
00002564 g     O .bss	00000004 alt_argv
0000a3d8 g       *ABS*	00000000 _gp
00002540 g     O .bss	00000004 alienShift
000023f4 g     O .rwdata	00000004 gunnerRightToggle
00000dd8 g     F .text	00000090 setProjectile
000013cc g     F .text	00000008 _putchar_r
00000418 g     F .text	00000034 getAlienApperence
00001560 g     F .text	00000008 _times_r
000008ac g     F .text	00000068 moveGunnerLeft
0000146c g     F .text	00000014 puts
000023f0 g     O .rwdata	00000004 gunnerShootToggle
0000037c g     F .text	0000009c initRandomAliens
000010dc g     F .text	00000014 malloc
00001344 g     F .text	0000003c _printf_r
00001058 g     F .text	00000008 .hidden __udivsi3
00000914 g     F .text	0000006c moveGunnerRight
000014f4 g     F .text	00000050 _sbrk_r
0000032c g     F .text	00000028 createProjectile
00002544 g     O .bss	00000004 pSramAliens
000000f0 g     F .text	00000068 updateProjectileBuffer
000023d8 g     O .rwdata	00000004 gunner
0000005c g     F .text	00000094 initProjectileBuffer
000023fc g     O .rwdata	00000004 _global_impure_ptr
00002d74 g       *ABS*	00000000 __bss_end
00002154 g     F .text	000000b8 alt_tick
00002120 g     F .text	00000034 alt_alarm_stop
00000354 g     F .text	00000028 newAlien
000023ec g     O .rwdata	00000004 alienShootToggle
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00002118 g     F .text	00000004 alt_dcache_flush_all
00002418 g       *ABS*	00000000 __ram_rwdata_end
00002054 g     F .text	0000006c write
00001c64 g     F .text	00000058 _putc_r
000022f8 g       *ABS*	00000000 __ram_rodata_end
00000bb8 g     F .text	0000001c checkCollideGunner
00001060 g     F .text	00000008 .hidden __umodsi3
00000714 g     F .text	000000d0 printGunnerSlice
00000668 g     F .text	000000ac printVoid
000023e0 g     O .rwdata	00000004 alien1
00002d74 g     O *ABS*	00000004 end
00000cfc g     F .text	00000044 setAlien
0000253c g     O .bss	00000004 head
00004000 g       *ABS*	00000000 __alt_stack_pointer
000020e4 g     F .text	00000034 altera_avalon_jtag_uart_write
000015d4 g     F .text	0000056c ___vfprintf_internal_r
00001104 g     F .text	000000e4 _free_r
00000020 g     F .text	0000003c _start
00002570 g     O .bss	00000004 _alt_tick_rate
00001494 g     F .text	00000060 rand
0000256c g     O .bss	00000004 _alt_nticks
000020e0 g     F .text	00000004 alt_sys_init
000005e4 g     F .text	00000084 printAliens
00001068 g     F .text	00000028 .hidden __mulsi3
000022f8 g       *ABS*	00000000 __ram_rwdata_start
00002214 g       *ABS*	00000000 __ram_rodata_start
00002574 g     O .bss	00000800 sram
00002d74 g       *ABS*	00000000 __alt_stack_base
00001f8c g     F .text	0000004c sbrk
0000052c g     F .text	000000b8 printSlice
00001b64 g     F .text	000000ac __sfvwrite_small_dev
00002538 g       *ABS*	00000000 __bss_start
00000bd4 g     F .text	000000e0 main
00002560 g     O .bss	00000004 alt_envp
00001480 g     F .text	00000014 srand
00004000 g       *ABS*	00000000 __alt_heap_limit
000011e8 g     F .text	0000015c _malloc_r
0000240c g     O .rwdata	00000004 alt_errno
00000e8c g     F .text	0000008c sram_malloc
00001c10 g     F .text	00000054 putc
00000fa8 g     F .text	00000054 .hidden __divsi3
00002214 g       *ABS*	00000000 __flash_rodata_start
000008a8 g     F .text	00000004 initializeGame
000020c0 g     F .text	00000020 alt_irq_init
00000e68 g     F .text	00000024 resetSRAM
00001cbc g     F .text	00000058 _write_r
00000b58 g     F .text	00000060 shootGunner
00002400 g     O .rwdata	00000004 _impure_ptr
00002568 g     O .bss	00000004 alt_argc
00000158 g     F .text	0000006c addProjectileNode
000023e4 g     O .rwdata	00000004 alien0
000001c4 g     F .text	00000020 listLength
00000020 g       *ABS*	00000000 __ram_exceptions_start
000001e4 g     F .text	0000003c removeProjectileNode
00002418 g       *ABS*	00000000 _edata
00002d74 g       *ABS*	00000000 _end
000007e4 g     F .text	0000004c printGunner
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000220c g     F .text	00000008 altera_nios2_qsys_irq_init
00000ffc g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00001d14 g     F .text	0000010c .hidden __muldi3
00001544 g     F .text	0000001c strlen
0000044c g     F .text	000000e0 printAlienSlice
00001f44 g     F .text	00000048 alt_putchar
0000254c g     O .bss	00000004 __malloc_sbrk_start
00001090 g     F .text	0000004c clock
0000211c g     F .text	00000004 alt_icache_flush_all
00000980 g     F .text	00000080 shootAliens
00002550 g     O .bss	00000004 __malloc_free_list
00001b40 g     F .text	00000024 __vfprintf_internal
00002410 g     O .rwdata	00000008 alt_alarm_list
000023e8 g     O .rwdata	00000004 empty_space
00001e20 g     F .text	000000f8 alt_load
000023dc g     O .rwdata	00000004 alien2
00000830 g     F .text	00000078 updateDisplay
000010f0 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a8f614 	ori	gp,gp,41944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10894e14 	ori	r2,r2,9528

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cb5d14 	ori	r3,r3,11636

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff5c6c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0001e200 	call	1e20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	0001f180 	call	1f18 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff5c80>

0000005c <initProjectileBuffer>:
    }
    printf("\n");
}


void initProjectileBuffer(int pSramBulletBuffer) {
      5c:	defff704 	addi	sp,sp,-36
      60:	dd000715 	stw	r20,28(sp)
      64:	dcc00615 	stw	r19,24(sp)
      68:	dc800515 	stw	r18,20(sp)
      6c:	dc400415 	stw	r17,16(sp)
      70:	dfc00815 	stw	ra,32(sp)
      74:	dc000315 	stw	r16,12(sp)
      78:	2025883a 	mov	r18,r4
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
      7c:	0023883a 	mov	r17,zero
        for(y = 0; y < VOID_HEIGHT; y++) {
      80:	04c000c4 	movi	r19,3
}


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
      84:	05000a04 	movi	r20,40
    }
    printf("\n");
}


void initProjectileBuffer(int pSramBulletBuffer) {
      88:	0021883a 	mov	r16,zero
      8c:	d8000205 	stb	zero,8(sp)
      90:	d8000245 	stb	zero,9(sp)
      94:	d8000105 	stb	zero,4(sp)
      98:	d8000145 	stb	zero,5(sp)
      9c:	d8000185 	stb	zero,6(sp)
      a0:	d80001c5 	stb	zero,7(sp)
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
      a4:	d880020b 	ldhu	r2,8(sp)
      a8:	d9c00117 	ldw	r7,4(sp)
      ac:	800d883a 	mov	r6,r16
      b0:	d880000d 	sth	r2,0(sp)
      b4:	9009883a 	mov	r4,r18
      b8:	880b883a 	mov	r5,r17


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
      bc:	84000044 	addi	r16,r16,1
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
      c0:	0000dd80 	call	dd8 <setProjectile>


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
      c4:	84fff11e 	bne	r16,r19,8c <_gp+0xffff5cb4>
}


void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
      c8:	8c400044 	addi	r17,r17,1
      cc:	8d3fee1e 	bne	r17,r20,88 <_gp+0xffff5cb0>
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}
      d0:	dfc00817 	ldw	ra,32(sp)
      d4:	dd000717 	ldw	r20,28(sp)
      d8:	dcc00617 	ldw	r19,24(sp)
      dc:	dc800517 	ldw	r18,20(sp)
      e0:	dc400417 	ldw	r17,16(sp)
      e4:	dc000317 	ldw	r16,12(sp)
      e8:	dec00904 	addi	sp,sp,36
      ec:	f800283a 	ret

000000f0 <updateProjectileBuffer>:

void updateProjectileBuffer(int pSramBulletBuffer) {
    if(head == NULL) return;
      f0:	d0a05917 	ldw	r2,-32412(gp)
      f4:	10001726 	beq	r2,zero,154 <updateProjectileBuffer+0x64>
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}

void updateProjectileBuffer(int pSramBulletBuffer) {
      f8:	defffa04 	addi	sp,sp,-24
      fc:	dc400415 	stw	r17,16(sp)
     100:	dc000315 	stw	r16,12(sp)
     104:	dfc00515 	stw	ra,20(sp)
     108:	2023883a 	mov	r17,r4
    if(head == NULL) return;
	initProjectileBuffer(pSramBulletBuffer);
     10c:	000005c0 	call	5c <initProjectileBuffer>
    struct ProjectileNode* current = head;
     110:	d4205917 	ldw	r16,-32412(gp)
    while(current != NULL) {
     114:	80000b26 	beq	r16,zero,144 <updateProjectileBuffer+0x54>
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     118:	8080010b 	ldhu	r2,4(r16)
     11c:	81c00017 	ldw	r7,0(r16)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     120:	81400007 	ldb	r5,0(r16)
     124:	81800047 	ldb	r6,1(r16)
     128:	8809883a 	mov	r4,r17
     12c:	d880000d 	sth	r2,0(sp)
	initProjectileBuffer(pSramBulletBuffer);
    struct ProjectileNode* current = head;
    while(current != NULL) {
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     130:	d9c00115 	stw	r7,4(sp)
     134:	d880020d 	sth	r2,8(sp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     138:	0000dd80 	call	dd8 <setProjectile>
        current = current->next;
     13c:	84000217 	ldw	r16,8(r16)
     140:	003ff406 	br	114 <_gp+0xffff5d3c>
    }
}
     144:	dfc00517 	ldw	ra,20(sp)
     148:	dc400417 	ldw	r17,16(sp)
     14c:	dc000317 	ldw	r16,12(sp)
     150:	dec00604 	addi	sp,sp,24
     154:	f800283a 	ret

00000158 <addProjectileNode>:

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     158:	d0a05917 	ldw	r2,-32412(gp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
     15c:	defffd04 	addi	sp,sp,-12
     160:	d9000015 	stw	r4,0(sp)
     164:	dfc00215 	stw	ra,8(sp)
     168:	d9400115 	stw	r5,4(sp)
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     16c:	01000304 	movi	r4,12
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     170:	1000081e 	bne	r2,zero,194 <addProjectileNode+0x3c>
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     174:	00010dc0 	call	10dc <malloc>
        head->bullet = proj;
     178:	d8c00017 	ldw	r3,0(sp)
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     17c:	d0a05915 	stw	r2,-32412(gp)
        head->bullet = proj;
        head->next = NULL;
     180:	10000215 	stw	zero,8(r2)
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        head->bullet = proj;
     184:	10c00015 	stw	r3,0(r2)
     188:	d8c0010b 	ldhu	r3,4(sp)
     18c:	10c0010d 	sth	r3,4(r2)
     190:	00000806 	br	1b4 <addProjectileNode+0x5c>
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     194:	00010dc0 	call	10dc <malloc>
        nextProj->bullet = proj;
     198:	d8c00017 	ldw	r3,0(sp)
        nextProj->next = NULL;
     19c:	10000215 	stw	zero,8(r2)
        head->bullet = proj;
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        nextProj->bullet = proj;
     1a0:	10c00015 	stw	r3,0(r2)
     1a4:	d8c0010b 	ldhu	r3,4(sp)
     1a8:	10c0010d 	sth	r3,4(r2)
        nextProj->next = NULL;
		
        end->next = nextProj;
     1ac:	d0e26717 	ldw	r3,-30308(gp)
     1b0:	18800215 	stw	r2,8(r3)
        end = nextProj;
     1b4:	d0a26715 	stw	r2,-30308(gp)
    }
}
     1b8:	dfc00217 	ldw	ra,8(sp)
     1bc:	dec00304 	addi	sp,sp,12
     1c0:	f800283a 	ret

000001c4 <listLength>:

int listLength() {
	if(head == NULL) return 0;
     1c4:	d0e05917 	ldw	r3,-32412(gp)
     1c8:	0005883a 	mov	r2,zero
     1cc:	18000426 	beq	r3,zero,1e0 <listLength+0x1c>
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
     1d0:	18c00217 	ldw	r3,8(r3)
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
     1d4:	10800044 	addi	r2,r2,1
int listLength() {
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
     1d8:	183ffd1e 	bne	r3,zero,1d0 <_gp+0xffff5df8>
     1dc:	f800283a 	ret
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
    }
	return size;
}
     1e0:	f800283a 	ret

000001e4 <removeProjectileNode>:

void removeProjectileNode(struct ProjectileNode* proj) {
    if(head == proj) {
     1e4:	d0a05917 	ldw	r2,-32412(gp)
     1e8:	10c00217 	ldw	r3,8(r2)
     1ec:	1100051e 	bne	r2,r4,204 <removeProjectileNode+0x20>
        if(proj == end) end = NULL;
     1f0:	d0a26717 	ldw	r2,-30308(gp)
     1f4:	2080011e 	bne	r4,r2,1fc <removeProjectileNode+0x18>
     1f8:	d0226715 	stw	zero,-30308(gp)
        head = proj->next;
     1fc:	d0e05915 	stw	r3,-32412(gp)
     200:	00000606 	br	21c <removeProjectileNode+0x38>
    } else {
        struct ProjectileNode* current = head;
        while(current->next != proj) { }
     204:	193fff1e 	bne	r3,r4,204 <_gp+0xffff5e2c>
        current->next = proj->next;
     208:	20c00217 	ldw	r3,8(r4)
     20c:	10c00215 	stw	r3,8(r2)
        if(proj == end) end = current->next;
     210:	d0a26717 	ldw	r2,-30308(gp)
     214:	2080011e 	bne	r4,r2,21c <removeProjectileNode+0x38>
     218:	d0e26715 	stw	r3,-30308(gp)
    }
    free(proj);
     21c:	00010f01 	jmpi	10f0 <free>

00000220 <updateProjectileNodes>:
#include <stdlib.h>

struct ProjectileNode *head = NULL;
struct ProjectileNode *end = NULL;

void updateProjectileNodes() {
     220:	defffa04 	addi	sp,sp,-24
     224:	dc000015 	stw	r16,0(sp)
    //if head is null, return
    if(head == NULL) return;
     228:	d4205917 	ldw	r16,-32412(gp)
#include <stdlib.h>

struct ProjectileNode *head = NULL;
struct ProjectileNode *end = NULL;

void updateProjectileNodes() {
     22c:	dfc00515 	stw	ra,20(sp)
     230:	dd000415 	stw	r20,16(sp)
     234:	dcc00315 	stw	r19,12(sp)
     238:	dc800215 	stw	r18,8(sp)
     23c:	dc400115 	stw	r17,4(sp)
    //if head is null, return
    if(head == NULL) return;
     240:	80003226 	beq	r16,zero,30c <updateProjectileNodes+0xec>

        if(tempCurrent->bullet.yVal < 0) {
            //checkCollideGunner();
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT) {
            checkCollideAliens(pSramAliens, ((tempCurrent->bullet.xVal)));
     244:	04c00034 	movhi	r19,0
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
     248:	04400044 	movi	r17,1
        current = current->next;

        if(tempCurrent->bullet.yVal < 0) {
            //checkCollideGunner();
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT) {
     24c:	048000c4 	movi	r18,3
            checkCollideAliens(pSramAliens, ((tempCurrent->bullet.xVal)));
     250:	9cc95104 	addi	r19,r19,9540
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
     254:	80800083 	ldbu	r2,2(r16)
     258:	81400143 	ldbu	r5,5(r16)
     25c:	11003fcc 	andi	r4,r2,255
     260:	29803fcc 	andi	r6,r5,255
     264:	2100201c 	xori	r4,r4,128
     268:	3180201c 	xori	r6,r6,128
     26c:	213fe004 	addi	r4,r4,-128
     270:	31bfe004 	addi	r6,r6,-128
     274:	2007883a 	mov	r3,r4
     278:	2000010e 	bge	r4,zero,280 <updateProjectileNodes+0x60>
     27c:	0109c83a 	sub	r4,zero,r4
     280:	3100030e 	bge	r6,r4,290 <updateProjectileNodes+0x70>
            current->bullet.timeTick++;
     284:	29400044 	addi	r5,r5,1
     288:	81400145 	stb	r5,5(r16)
     28c:	00000a06 	br	2b8 <updateProjectileNodes+0x98>
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
     290:	81000107 	ldb	r4,4(r16)
    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
     294:	80000145 	stb	zero,5(r16)
            if(current->bullet.type == 1) { //Straight Line
     298:	2440071e 	bne	r4,r17,2b8 <updateProjectileNodes+0x98>
                current->bullet.yVal -= (current->bullet.direction < 0);
                current->bullet.yVal += (current->bullet.direction > 0);
     29c:	00c8803a 	cmplt	r4,zero,r3
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
                current->bullet.yVal -= (current->bullet.direction < 0);
     2a0:	10803fcc 	andi	r2,r2,255
     2a4:	80c00043 	ldbu	r3,1(r16)
     2a8:	1004d1fa 	srli	r2,r2,7
     2ac:	20c7883a 	add	r3,r4,r3
                current->bullet.yVal += (current->bullet.direction > 0);
     2b0:	1885c83a 	sub	r2,r3,r2
     2b4:	80800045 	stb	r2,1(r16)
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;

        if(tempCurrent->bullet.yVal < 0) {
     2b8:	80800047 	ldb	r2,1(r16)
            }
        }
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;
     2bc:	85000217 	ldw	r20,8(r16)

        if(tempCurrent->bullet.yVal < 0) {
     2c0:	10000416 	blt	r2,zero,2d4 <updateProjectileNodes+0xb4>
            //checkCollideGunner();
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT) {
     2c4:	9080050e 	bge	r18,r2,2dc <updateProjectileNodes+0xbc>
            checkCollideAliens(pSramAliens, ((tempCurrent->bullet.xVal)));
     2c8:	99000017 	ldw	r4,0(r19)
     2cc:	81400007 	ldb	r5,0(r16)
     2d0:	0000a000 	call	a00 <checkCollideAliens>
            removeProjectileNode(tempCurrent);
     2d4:	8009883a 	mov	r4,r16
     2d8:	00001e40 	call	1e4 <removeProjectileNode>
void updateProjectileNodes() {
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
     2dc:	a0000226 	beq	r20,zero,2e8 <updateProjectileNodes+0xc8>
     2e0:	a021883a 	mov	r16,r20
     2e4:	003fdb06 	br	254 <_gp+0xffff5e7c>
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT) {
            checkCollideAliens(pSramAliens, ((tempCurrent->bullet.xVal)));
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     2e8:	01000284 	movi	r4,10
}
     2ec:	dfc00517 	ldw	ra,20(sp)
     2f0:	dd000417 	ldw	r20,16(sp)
     2f4:	dcc00317 	ldw	r19,12(sp)
     2f8:	dc800217 	ldw	r18,8(sp)
     2fc:	dc400117 	ldw	r17,4(sp)
     300:	dc000017 	ldw	r16,0(sp)
     304:	dec00604 	addi	sp,sp,24
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT) {
            checkCollideAliens(pSramAliens, ((tempCurrent->bullet.xVal)));
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     308:	00013d41 	jmpi	13d4 <putchar>
}
     30c:	dfc00517 	ldw	ra,20(sp)
     310:	dd000417 	ldw	r20,16(sp)
     314:	dcc00317 	ldw	r19,12(sp)
     318:	dc800217 	ldw	r18,8(sp)
     31c:	dc400117 	ldw	r17,4(sp)
     320:	dc000017 	ldw	r16,0(sp)
     324:	dec00604 	addi	sp,sp,24
     328:	f800283a 	ret

0000032c <createProjectile>:
    proj.yVal = 0;
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
     32c:	29403fcc 	andi	r5,r5,255
     330:	280a943a 	slli	r5,r5,16
     334:	300c963a 	slli	r6,r6,24
     338:	21003fcc 	andi	r4,r4,255
     33c:	2144b03a 	or	r2,r4,r5
}
     340:	1184b03a 	or	r2,r2,r6
     344:	38c03fcc 	andi	r3,r7,255
        if(proj == end) end = current->next;
    }
    free(proj);
}

struct Projectile createProjectile(char x, char dir, char symb, char t) {
     348:	defffe04 	addi	sp,sp,-8
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
}
     34c:	dec00204 	addi	sp,sp,8
     350:	f800283a 	ret

00000354 <newAlien>:
struct Alien newAlien(char alive, char type, char id) {
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
     354:	29403fcc 	andi	r5,r5,255
     358:	31803fcc 	andi	r6,r6,255
     35c:	280a923a 	slli	r5,r5,8
     360:	3004943a 	slli	r2,r6,16
     364:	21003fcc 	andi	r4,r4,255
     368:	214ab03a 	or	r5,r4,r5
};
     36c:	2884b03a 	or	r2,r5,r2
#include "data_structures_constants.h"
#include "sram.h"
#include "display.h"


struct Alien newAlien(char alive, char type, char id) {
     370:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
};
     374:	dec00104 	addi	sp,sp,4
     378:	f800283a 	ret

0000037c <initRandomAliens>:

void initRandomAliens(int pSramAliens) {
     37c:	defff804 	addi	sp,sp,-32
     380:	dd400615 	stw	r21,24(sp)
     384:	dd000515 	stw	r20,20(sp)
     388:	dcc00415 	stw	r19,16(sp)
     38c:	dc800315 	stw	r18,12(sp)
     390:	dc400215 	stw	r17,8(sp)
     394:	dfc00715 	stw	ra,28(sp)
     398:	dc000115 	stw	r16,4(sp)
     39c:	2025883a 	mov	r18,r4
    int x, y;
    for(x = 0; x < 3; x++) {
     3a0:	0023883a 	mov	r17,zero
     3a4:	04c00044 	movi	r19,1
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     3a8:	050000c4 	movi	r20,3
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     3ac:	05400204 	movi	r21,8
    a.type = type;
    a.rowId = id;
    return a;
};

void initRandomAliens(int pSramAliens) {
     3b0:	0021883a 	mov	r16,zero
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     3b4:	00014940 	call	1494 <rand>
     3b8:	1009883a 	mov	r4,r2
     3bc:	014000c4 	movi	r5,3
     3c0:	dcc00005 	stb	r19,0(sp)
     3c4:	0000ffc0 	call	ffc <__modsi3>
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     3c8:	d8800045 	stb	r2,1(sp)
     3cc:	dc000085 	stb	r16,2(sp)
     3d0:	d9c00017 	ldw	r7,0(sp)
     3d4:	800d883a 	mov	r6,r16
     3d8:	9009883a 	mov	r4,r18
     3dc:	880b883a 	mov	r5,r17
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     3e0:	84000044 	addi	r16,r16,1
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     3e4:	0000cfc0 	call	cfc <setAlien>
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     3e8:	857ff21e 	bne	r16,r21,3b4 <_gp+0xffff5fdc>
    return a;
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
     3ec:	8c400044 	addi	r17,r17,1
     3f0:	8d3fef1e 	bne	r17,r20,3b0 <_gp+0xffff5fd8>
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
        }
    }
}
     3f4:	dfc00717 	ldw	ra,28(sp)
     3f8:	dd400617 	ldw	r21,24(sp)
     3fc:	dd000517 	ldw	r20,20(sp)
     400:	dcc00417 	ldw	r19,16(sp)
     404:	dc800317 	ldw	r18,12(sp)
     408:	dc400217 	ldw	r17,8(sp)
     40c:	dc000117 	ldw	r16,4(sp)
     410:	dec00804 	addi	sp,sp,32
     414:	f800283a 	ret

00000418 <getAlienApperence>:

const char* getAlienApperence(int type) {
    if(type == 0) {
     418:	2000031e 	bne	r4,zero,428 <getAlienApperence+0x10>
        return alien0;
     41c:	00800034 	movhi	r2,0
     420:	1088f904 	addi	r2,r2,9188
     424:	00000706 	br	444 <getAlienApperence+0x2c>
    } else if(type == 1) {
     428:	00800044 	movi	r2,1
     42c:	2080031e 	bne	r4,r2,43c <getAlienApperence+0x24>
        return alien1;
     430:	00800034 	movhi	r2,0
     434:	1088f804 	addi	r2,r2,9184
     438:	00000206 	br	444 <getAlienApperence+0x2c>
    } else {
        return alien2;
     43c:	00800034 	movhi	r2,0
     440:	1088f704 	addi	r2,r2,9180
     444:	10800017 	ldw	r2,0(r2)
    }
}
     448:	f800283a 	ret

0000044c <printAlienSlice>:

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
     44c:	defff904 	addi	sp,sp,-28
     450:	dc000115 	stw	r16,4(sp)
     454:	dfc00615 	stw	ra,24(sp)
     458:	dd000515 	stw	r20,20(sp)
     45c:	dcc00415 	stw	r19,16(sp)
     460:	dc800315 	stw	r18,12(sp)
     464:	dc400215 	stw	r17,8(sp)
     468:	3821883a 	mov	r16,r7
    struct Alien alien = getAlien(pSramAliens, x, y);
     46c:	0000cb40 	call	cb4 <getAlien>
     470:	1006d23a 	srli	r3,r2,8
     474:	d8800005 	stb	r2,0(sp)
     478:	d8c00045 	stb	r3,1(sp)
     47c:	1006d43a 	srli	r3,r2,16
    if(alien.alive == 1) {
     480:	10803fcc 	andi	r2,r2,255
     484:	1080201c 	xori	r2,r2,128
        return alien2;
    }
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
     488:	d8c00085 	stb	r3,2(sp)
    if(alien.alive == 1) {
     48c:	10bfe004 	addi	r2,r2,-128
     490:	00c00044 	movi	r3,1
     494:	10c0181e 	bne	r2,r3,4f8 <printAlienSlice+0xac>
        char* alienApperence = getAlienApperence(alien.type);
     498:	d9000047 	ldb	r4,1(sp)
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     49c:	05000c04 	movi	r20,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     4a0:	04800144 	movi	r18,5
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     4a4:	00004180 	call	418 <getAlienApperence>
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     4a8:	d9000717 	ldw	r4,28(sp)
     4ac:	014003c4 	movi	r5,15
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     4b0:	1027883a 	mov	r19,r2
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     4b4:	00010680 	call	1068 <__mulsi3>
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     4b8:	8009883a 	mov	r4,r16
     4bc:	01400144 	movi	r5,5

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     4c0:	1023883a 	mov	r17,r2
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     4c4:	00010680 	call	1068 <__mulsi3>
     4c8:	88a3883a 	add	r17,r17,r2
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     4cc:	0021883a 	mov	r16,zero
     4d0:	8447883a 	add	r3,r16,r17
     4d4:	98c7883a 	add	r3,r19,r3
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     4d8:	19000007 	ldb	r4,0(r3)
     4dc:	2500021e 	bne	r4,r20,4e8 <printAlienSlice+0x9c>
                putchar(alien.rowId + 48);
     4e0:	d9000087 	ldb	r4,2(sp)
     4e4:	21000c04 	addi	r4,r4,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     4e8:	84000044 	addi	r16,r16,1
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
                putchar(alien.rowId + 48);
            } else {
                putchar(alienApperence[index]);
     4ec:	00013d40 	call	13d4 <putchar>
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     4f0:	84bff71e 	bne	r16,r18,4d0 <_gp+0xffff60f8>
     4f4:	00000506 	br	50c <printAlienSlice+0xc0>
     4f8:	04000144 	movi	r16,5
            }
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
			alt_putchar(' ');
     4fc:	01000804 	movi	r4,32
     500:	843fffc4 	addi	r16,r16,-1
     504:	0001f440 	call	1f44 <alt_putchar>
                putchar(alienApperence[index]);
            }
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
     508:	803ffc1e 	bne	r16,zero,4fc <_gp+0xffff6124>
			alt_putchar(' ');
		}
	}
}
     50c:	dfc00617 	ldw	ra,24(sp)
     510:	dd000517 	ldw	r20,20(sp)
     514:	dcc00417 	ldw	r19,16(sp)
     518:	dc800317 	ldw	r18,12(sp)
     51c:	dc400217 	ldw	r17,8(sp)
     520:	dc000117 	ldw	r16,4(sp)
     524:	dec00704 	addi	sp,sp,28
     528:	f800283a 	ret

0000052c <printSlice>:

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     52c:	defff604 	addi	sp,sp,-40
     530:	dc400215 	stw	r17,8(sp)
     534:	dc400a17 	ldw	r17,40(sp)
     538:	dd800715 	stw	r22,28(sp)
     53c:	dc000115 	stw	r16,4(sp)
     540:	008003c4 	movi	r2,15
     544:	040001c4 	movi	r16,7
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     548:	05a00034 	movhi	r22,32768
			alt_putchar(' ');
		}
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     54c:	ddc00815 	stw	r23,32(sp)
     550:	dd400615 	stw	r21,24(sp)
     554:	dd000515 	stw	r20,20(sp)
     558:	dcc00415 	stw	r19,16(sp)
     55c:	dc800315 	stw	r18,12(sp)
     560:	8461c83a 	sub	r16,r16,r17
     564:	dfc00915 	stw	ra,36(sp)
     568:	2029883a 	mov	r20,r4
     56c:	2827883a 	mov	r19,r5
     570:	3025883a 	mov	r18,r6
     574:	382b883a 	mov	r21,r7
     578:	1463c83a 	sub	r17,r2,r17
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     57c:	b58001c4 	addi	r22,r22,7
     580:	05fffe04 	movi	r23,-8
     584:	858c703a 	and	r6,r16,r22
     588:	3000030e 	bge	r6,zero,598 <printSlice+0x6c>
     58c:	31bfffc4 	addi	r6,r6,-1
     590:	35ccb03a 	or	r6,r6,r23
     594:	31800044 	addi	r6,r6,1
     598:	dd400015 	stw	r21,0(sp)
     59c:	a009883a 	mov	r4,r20
     5a0:	980b883a 	mov	r5,r19
     5a4:	900f883a 	mov	r7,r18
     5a8:	84000044 	addi	r16,r16,1
     5ac:	000044c0 	call	44c <printAlienSlice>
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
     5b0:	847ff41e 	bne	r16,r17,584 <_gp+0xffff61ac>
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     5b4:	01000284 	movi	r4,10
}
     5b8:	dfc00917 	ldw	ra,36(sp)
     5bc:	ddc00817 	ldw	r23,32(sp)
     5c0:	dd800717 	ldw	r22,28(sp)
     5c4:	dd400617 	ldw	r21,24(sp)
     5c8:	dd000517 	ldw	r20,20(sp)
     5cc:	dcc00417 	ldw	r19,16(sp)
     5d0:	dc800317 	ldw	r18,12(sp)
     5d4:	dc400217 	ldw	r17,8(sp)
     5d8:	dc000117 	ldw	r16,4(sp)
     5dc:	dec00a04 	addi	sp,sp,40
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     5e0:	00013d41 	jmpi	13d4 <putchar>

000005e4 <printAliens>:
}

void printAliens(int pSramAliens, int step, int shift) {
     5e4:	defff804 	addi	sp,sp,-32
     5e8:	dd400615 	stw	r21,24(sp)
     5ec:	dd000515 	stw	r20,20(sp)
     5f0:	dcc00415 	stw	r19,16(sp)
     5f4:	dc800315 	stw	r18,12(sp)
     5f8:	dc400215 	stw	r17,8(sp)
     5fc:	dfc00715 	stw	ra,28(sp)
     600:	dc000115 	stw	r16,4(sp)
     604:	2025883a 	mov	r18,r4
     608:	2827883a 	mov	r19,r5
     60c:	3029883a 	mov	r20,r6
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     610:	0023883a 	mov	r17,zero
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     614:	054000c4 	movi	r21,3
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
     618:	0021883a 	mov	r16,zero
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
     61c:	800d883a 	mov	r6,r16
     620:	dd000015 	stw	r20,0(sp)
     624:	9009883a 	mov	r4,r18
     628:	880b883a 	mov	r5,r17
     62c:	980f883a 	mov	r7,r19
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     630:	84000044 	addi	r16,r16,1
            printSlice(pSramAliens, x, slice, step, shift);
     634:	000052c0 	call	52c <printSlice>
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     638:	857ff81e 	bne	r16,r21,61c <_gp+0xffff6244>
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     63c:	8c400044 	addi	r17,r17,1
     640:	8c3ff51e 	bne	r17,r16,618 <_gp+0xffff6240>
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}
     644:	dfc00717 	ldw	ra,28(sp)
     648:	dd400617 	ldw	r21,24(sp)
     64c:	dd000517 	ldw	r20,20(sp)
     650:	dcc00417 	ldw	r19,16(sp)
     654:	dc800317 	ldw	r18,12(sp)
     658:	dc400217 	ldw	r17,8(sp)
     65c:	dc000117 	ldw	r16,4(sp)
     660:	dec00804 	addi	sp,sp,32
     664:	f800283a 	ret

00000668 <printVoid>:

void printVoid(int pSramBulletBuffer) {
     668:	defff804 	addi	sp,sp,-32
     66c:	dd000615 	stw	r20,24(sp)
     670:	dcc00515 	stw	r19,20(sp)
     674:	dc800415 	stw	r18,16(sp)
     678:	dc400315 	stw	r17,12(sp)
     67c:	dfc00715 	stw	ra,28(sp)
     680:	dc000215 	stw	r16,8(sp)
     684:	2025883a 	mov	r18,r4
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     688:	04400084 	movi	r17,2
        }
    }
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
     68c:	00000f00 	call	f0 <updateProjectileBuffer>
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     690:	04c00a04 	movi	r19,40
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     694:	053fffc4 	movi	r20,-1
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}

void printVoid(int pSramBulletBuffer) {
     698:	0021883a 	mov	r16,zero
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     69c:	9009883a 	mov	r4,r18
     6a0:	800b883a 	mov	r5,r16
     6a4:	880d883a 	mov	r6,r17
     6a8:	0000d400 	call	d40 <getProjectile>
     6ac:	1004d63a 	srli	r2,r2,24
			if(empty.type != 0) {
     6b0:	18c03fcc 	andi	r3,r3,255
     6b4:	18c0201c 	xori	r3,r3,128
void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     6b8:	d88000c5 	stb	r2,3(sp)
			if(empty.type != 0) {
     6bc:	18ffe004 	addi	r3,r3,-128
     6c0:	18000426 	beq	r3,zero,6d4 <printVoid+0x6c>
				alt_putchar(empty.symbol);
     6c4:	11003fcc 	andi	r4,r2,255
     6c8:	2100201c 	xori	r4,r4,128
     6cc:	213fe004 	addi	r4,r4,-128
     6d0:	00000106 	br	6d8 <printVoid+0x70>
			} else {
				alt_putchar(' ');
     6d4:	01000804 	movi	r4,32

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     6d8:	84000044 	addi	r16,r16,1
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
			if(empty.type != 0) {
				alt_putchar(empty.symbol);
			} else {
				alt_putchar(' ');
     6dc:	0001f440 	call	1f44 <alt_putchar>

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     6e0:	84ffee1e 	bne	r16,r19,69c <_gp+0xffff62c4>
				alt_putchar(empty.symbol);
			} else {
				alt_putchar(' ');
			}
        }
		printf("\n");
     6e4:	01000284 	movi	r4,10
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     6e8:	8c7fffc4 	addi	r17,r17,-1
				alt_putchar(empty.symbol);
			} else {
				alt_putchar(' ');
			}
        }
		printf("\n");
     6ec:	00013d40 	call	13d4 <putchar>
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     6f0:	8d3fe91e 	bne	r17,r20,698 <_gp+0xffff62c0>
				alt_putchar(' ');
			}
        }
		printf("\n");
    }
}
     6f4:	dfc00717 	ldw	ra,28(sp)
     6f8:	dd000617 	ldw	r20,24(sp)
     6fc:	dcc00517 	ldw	r19,20(sp)
     700:	dc800417 	ldw	r18,16(sp)
     704:	dc400317 	ldw	r17,12(sp)
     708:	dc000217 	ldw	r16,8(sp)
     70c:	dec00804 	addi	sp,sp,32
     710:	f800283a 	ret

00000714 <printGunnerSlice>:

printGunnerSlice(int gunnerX, int slice) {
     714:	defffa04 	addi	sp,sp,-24
     718:	dc800215 	stw	r18,8(sp)
     71c:	2025883a 	mov	r18,r4
     720:	dc400115 	stw	r17,4(sp)
     724:	dfc00515 	stw	ra,20(sp)
     728:	dd000415 	stw	r20,16(sp)
     72c:	dcc00315 	stw	r19,12(sp)
     730:	dc000015 	stw	r16,0(sp)
    int SCREEN_WIDTH = ALIEN_COLS * ALIEN_WIDTH;
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
     734:	947ff7c4 	addi	r17,r18,-33
        }
		printf("\n");
    }
}

printGunnerSlice(int gunnerX, int slice) {
     738:	2809883a 	mov	r4,r5
     73c:	8800010e 	bge	r17,zero,744 <printGunnerSlice+0x30>
     740:	0023883a 	mov	r17,zero
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     744:	014001c4 	movi	r5,7
     748:	00010680 	call	1068 <__mulsi3>
     74c:	05000034 	movhi	r20,0
     750:	1027883a 	mov	r19,r2
     754:	1461c83a 	sub	r16,r2,r17
     758:	a508f604 	addi	r20,r20,9176
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
     75c:	84c00626 	beq	r16,r19,778 <printGunnerSlice+0x64>
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     760:	a0800017 	ldw	r2,0(r20)
     764:	1405883a 	add	r2,r2,r16
     768:	110001c7 	ldb	r4,7(r2)
     76c:	84000044 	addi	r16,r16,1
     770:	00013d40 	call	13d4 <putchar>
     774:	003ff906 	br	75c <_gp+0xffff6384>
     778:	0029883a 	mov	r20,zero
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     77c:	9465c83a 	sub	r18,r18,r17
     780:	a480040e 	bge	r20,r18,794 <printGunnerSlice+0x80>
        putchar(' ');
     784:	01000804 	movi	r4,32
     788:	00013d40 	call	13d4 <putchar>
    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     78c:	a5000044 	addi	r20,r20,1
     790:	003ffb06 	br	780 <_gp+0xffff63a8>
        putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     794:	00c001c4 	movi	r3,7
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     798:	04800034 	movhi	r18,0
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     79c:	1c63c83a 	sub	r17,r3,r17
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7a0:	9488f604 	addi	r18,r18,9176
     7a4:	84c5c83a 	sub	r2,r16,r19
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     7a8:	1440060e 	bge	r2,r17,7c4 <printGunnerSlice+0xb0>
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     7ac:	90800017 	ldw	r2,0(r18)
     7b0:	1405883a 	add	r2,r2,r16
     7b4:	11000007 	ldb	r4,0(r2)
     7b8:	84000044 	addi	r16,r16,1
     7bc:	00013d40 	call	13d4 <putchar>
     7c0:	003ff806 	br	7a4 <_gp+0xffff63cc>
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}
     7c4:	dfc00517 	ldw	ra,20(sp)
     7c8:	dd000417 	ldw	r20,16(sp)
     7cc:	dcc00317 	ldw	r19,12(sp)
     7d0:	dc800217 	ldw	r18,8(sp)
     7d4:	dc400117 	ldw	r17,4(sp)
     7d8:	dc000017 	ldw	r16,0(sp)
     7dc:	dec00604 	addi	sp,sp,24
     7e0:	f800283a 	ret

000007e4 <printGunner>:

void printGunner(int gunnerX) {
     7e4:	defffd04 	addi	sp,sp,-12
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     7e8:	000b883a 	mov	r5,zero
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}

void printGunner(int gunnerX) {
     7ec:	dfc00215 	stw	ra,8(sp)
     7f0:	dc400115 	stw	r17,4(sp)
     7f4:	dc000015 	stw	r16,0(sp)
     7f8:	2023883a 	mov	r17,r4
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     7fc:	04000284 	movi	r16,10
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     800:	00007140 	call	714 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     804:	8009883a 	mov	r4,r16
     808:	00013d40 	call	13d4 <putchar>
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     80c:	8809883a 	mov	r4,r17
     810:	01400044 	movi	r5,1
     814:	00007140 	call	714 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     818:	8009883a 	mov	r4,r16
    }
    //printf("Gunner location: %i\n", gunnerX);
}
     81c:	dfc00217 	ldw	ra,8(sp)
     820:	dc400117 	ldw	r17,4(sp)
     824:	dc000017 	ldw	r16,0(sp)
     828:	dec00304 	addi	sp,sp,12
void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     82c:	00013d41 	jmpi	13d4 <putchar>

00000830 <updateDisplay>:
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     830:	defffa04 	addi	sp,sp,-24
     834:	dd000415 	stw	r20,16(sp)
     838:	dc800215 	stw	r18,8(sp)
     83c:	2029883a 	mov	r20,r4
     840:	dc800617 	ldw	r18,24(sp)
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     844:	01000034 	movhi	r4,0
     848:	2108a904 	addi	r4,r4,8868
        printf("\n");
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     84c:	dfc00515 	stw	ra,20(sp)
     850:	dcc00315 	stw	r19,12(sp)
     854:	dc400115 	stw	r17,4(sp)
     858:	3827883a 	mov	r19,r7
     85c:	2823883a 	mov	r17,r5
     860:	dc000015 	stw	r16,0(sp)
     864:	3021883a 	mov	r16,r6
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     868:	000146c0 	call	146c <puts>
    printAliens(pSramAliens, step, shift);
     86c:	a009883a 	mov	r4,r20
     870:	980b883a 	mov	r5,r19
     874:	900d883a 	mov	r6,r18
     878:	00005e40 	call	5e4 <printAliens>
    printVoid(pSramBulletBuffer);
     87c:	8809883a 	mov	r4,r17
     880:	00006680 	call	668 <printVoid>
    printGunner(gunnerX);
     884:	8009883a 	mov	r4,r16
	//printf("List Length: %i\n", listLength());
}
     888:	dfc00517 	ldw	ra,20(sp)
     88c:	dd000417 	ldw	r20,16(sp)
     890:	dcc00317 	ldw	r19,12(sp)
     894:	dc800217 	ldw	r18,8(sp)
     898:	dc400117 	ldw	r17,4(sp)
     89c:	dc000017 	ldw	r16,0(sp)
     8a0:	dec00604 	addi	sp,sp,24

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printAliens(pSramAliens, step, shift);
    printVoid(pSramBulletBuffer);
    printGunner(gunnerX);
     8a4:	00007e41 	jmpi	7e4 <printGunner>

000008a8 <initializeGame>:
#include "sram.h"

void initializeGame(clock_t startTimer) {
    //resetSRAM();
    //srand(time(NULL)); //Seed random number generator
    startTimer = clock();
     8a8:	00010901 	jmpi	1090 <clock>

000008ac <moveGunnerLeft>:
}


int gunnerLeftToggle = 1;
void moveGunnerLeft(int* gunnerX) {
	if((*gun_left) && gunnerLeftToggle) {
     8ac:	00941c04 	movi	r2,20592
     8b0:	10c00003 	ldbu	r3,0(r2)
     8b4:	18c03fcc 	andi	r3,r3,255
     8b8:	18c0201c 	xori	r3,r3,128
     8bc:	18ffe004 	addi	r3,r3,-128
     8c0:	18000a26 	beq	r3,zero,8ec <moveGunnerLeft+0x40>
     8c4:	d0e00817 	ldw	r3,-32736(gp)
     8c8:	18000826 	beq	r3,zero,8ec <moveGunnerLeft+0x40>
		gunnerLeftToggle = 0;
     8cc:	d0200815 	stw	zero,-32736(gp)
		if((*gunnerX) == 0) {
     8d0:	20800017 	ldw	r2,0(r4)
     8d4:	1000021e 	bne	r2,zero,8e0 <moveGunnerLeft+0x34>
			(*gunnerX) = (ALIEN_WIDTH * ALIEN_COLS) - 1;
     8d8:	008009c4 	movi	r2,39
     8dc:	00000106 	br	8e4 <moveGunnerLeft+0x38>
		} else {
			(*gunnerX)--;
     8e0:	10bfffc4 	addi	r2,r2,-1
     8e4:	20800015 	stw	r2,0(r4)
     8e8:	f800283a 	ret
		}		
	} else if (!(*gun_left) && !(gunnerLeftToggle)) {
     8ec:	10800003 	ldbu	r2,0(r2)
     8f0:	10803fcc 	andi	r2,r2,255
     8f4:	1080201c 	xori	r2,r2,128
     8f8:	10bfe004 	addi	r2,r2,-128
     8fc:	1000041e 	bne	r2,zero,910 <moveGunnerLeft+0x64>
     900:	d0a00817 	ldw	r2,-32736(gp)
     904:	1000021e 	bne	r2,zero,910 <moveGunnerLeft+0x64>
		gunnerLeftToggle = 1;
     908:	00800044 	movi	r2,1
     90c:	d0a00815 	stw	r2,-32736(gp)
     910:	f800283a 	ret

00000914 <moveGunnerRight>:
	}
}

int gunnerRightToggle = 1;
void moveGunnerRight(int* gunnerX) {	
	if((*gun_right) && gunnerRightToggle) {
     914:	00941804 	movi	r2,20576
     918:	10c00003 	ldbu	r3,0(r2)
     91c:	18c03fcc 	andi	r3,r3,255
     920:	18c0201c 	xori	r3,r3,128
     924:	18ffe004 	addi	r3,r3,-128
     928:	18000b26 	beq	r3,zero,958 <moveGunnerRight+0x44>
     92c:	d0e00717 	ldw	r3,-32740(gp)
     930:	18000926 	beq	r3,zero,958 <moveGunnerRight+0x44>
		gunnerRightToggle = 0;
     934:	d0200715 	stw	zero,-32740(gp)
		if((*gunnerX) == (ALIEN_WIDTH * ALIEN_COLS) - 1) {
     938:	20800017 	ldw	r2,0(r4)
     93c:	00c009c4 	movi	r3,39
     940:	10c0021e 	bne	r2,r3,94c <moveGunnerRight+0x38>
			(*gunnerX) = 0;
     944:	20000015 	stw	zero,0(r4)
     948:	f800283a 	ret
		} else {
			(*gunnerX)++;
     94c:	10800044 	addi	r2,r2,1
     950:	20800015 	stw	r2,0(r4)
     954:	f800283a 	ret
		}		
	} else if (!(*gun_right) && !(gunnerRightToggle)) {
     958:	10800003 	ldbu	r2,0(r2)
     95c:	10803fcc 	andi	r2,r2,255
     960:	1080201c 	xori	r2,r2,128
     964:	10bfe004 	addi	r2,r2,-128
     968:	1000041e 	bne	r2,zero,97c <moveGunnerRight+0x68>
     96c:	d0a00717 	ldw	r2,-32740(gp)
     970:	1000021e 	bne	r2,zero,97c <moveGunnerRight+0x68>
		gunnerRightToggle = 1;
     974:	00800044 	movi	r2,1
     978:	d0a00715 	stw	r2,-32740(gp)
     97c:	f800283a 	ret

00000980 <shootAliens>:
}


int alienShootToggle = 1;
void shootAliens() {
	if((*gun_shoot) && alienShootToggle) {
     980:	00941404 	movi	r2,20560
     984:	10c00003 	ldbu	r3,0(r2)
     988:	18c03fcc 	andi	r3,r3,255
     98c:	18c0201c 	xori	r3,r3,128
     990:	18ffe004 	addi	r3,r3,-128
     994:	18001026 	beq	r3,zero,9d8 <shootAliens+0x58>
     998:	d0e00517 	ldw	r3,-32748(gp)
     99c:	18000e26 	beq	r3,zero,9d8 <shootAliens+0x58>
		alienShootToggle = 0;
     9a0:	d0200515 	stw	zero,-32748(gp)
		printf("X, Y: %i, %i\n", (*alien_x), (*alien_y));
     9a4:	00941004 	movi	r2,20544
     9a8:	11400003 	ldbu	r5,0(r2)
     9ac:	00940c04 	movi	r2,20528
     9b0:	11800003 	ldbu	r6,0(r2)
     9b4:	29403fcc 	andi	r5,r5,255
     9b8:	01000034 	movhi	r4,0
     9bc:	31803fcc 	andi	r6,r6,255
     9c0:	2940201c 	xori	r5,r5,128
     9c4:	3180201c 	xori	r6,r6,128
     9c8:	2108b604 	addi	r4,r4,8920
     9cc:	297fe004 	addi	r5,r5,-128
     9d0:	31bfe004 	addi	r6,r6,-128
     9d4:	00013801 	jmpi	1380 <printf>
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
     9d8:	10800003 	ldbu	r2,0(r2)
     9dc:	10803fcc 	andi	r2,r2,255
     9e0:	1080201c 	xori	r2,r2,128
     9e4:	10bfe004 	addi	r2,r2,-128
     9e8:	1000041e 	bne	r2,zero,9fc <shootAliens+0x7c>
     9ec:	d0a00517 	ldw	r2,-32748(gp)
     9f0:	1000021e 	bne	r2,zero,9fc <shootAliens+0x7c>
		alienShootToggle = 1;
     9f4:	00800044 	movi	r2,1
     9f8:	d0a00515 	stw	r2,-32748(gp)
     9fc:	f800283a 	ret

00000a00 <checkCollideAliens>:
	}
}

void checkCollideAliens(int pSramAliens, int x) {
     a00:	defff504 	addi	sp,sp,-44
     a04:	ddc00815 	stw	r23,32(sp)
     a08:	dd800715 	stw	r22,28(sp)
     a0c:	dd400615 	stw	r21,24(sp)
            }
        }
    }*/
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     a10:	058001c4 	movi	r22,7
     a14:	05400034 	movhi	r21,0
     a18:	05e00034 	movhi	r23,32768
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkCollideAliens(int pSramAliens, int x) {
     a1c:	df000915 	stw	fp,36(sp)
     a20:	dcc00415 	stw	r19,16(sp)
     a24:	dc800315 	stw	r18,12(sp)
     a28:	dc000115 	stw	r16,4(sp)
     a2c:	dfc00a15 	stw	ra,40(sp)
     a30:	dd000515 	stw	r20,20(sp)
     a34:	dc400215 	stw	r17,8(sp)
     a38:	2021883a 	mov	r16,r4
     a3c:	2825883a 	mov	r18,r5
                return 0;
            }
        }
    }*/
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
     a40:	04c00084 	movi	r19,2
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     a44:	ad495004 	addi	r21,r21,9536
     a48:	bdaf883a 	add	r23,r23,r22
     a4c:	073ffe04 	movi	fp,-8
     a50:	a8800017 	ldw	r2,0(r21)
     a54:	05000034 	movhi	r20,0
     a58:	04600034 	movhi	r17,32768
     a5c:	b085c83a 	sub	r2,r22,r2
     a60:	9085883a 	add	r2,r18,r2
     a64:	15cc703a 	and	r6,r2,r23
     a68:	a5095004 	addi	r20,r20,9536
     a6c:	8c4001c4 	addi	r17,r17,7
     a70:	3000030e 	bge	r6,zero,a80 <checkCollideAliens+0x80>
     a74:	31bfffc4 	addi	r6,r6,-1
     a78:	370cb03a 	or	r6,r6,fp
     a7c:	31800044 	addi	r6,r6,1
     a80:	8009883a 	mov	r4,r16
     a84:	980b883a 	mov	r5,r19
     a88:	0000cb40 	call	cb4 <getAlien>
     a8c:	1006d23a 	srli	r3,r2,8
     a90:	d8c00045 	stb	r3,1(sp)
     a94:	1006d43a 	srli	r3,r2,16
		if(a.alive) {
     a98:	10803fcc 	andi	r2,r2,255
     a9c:	1080201c 	xori	r2,r2,128
            }
        }
    }*/
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
     aa0:	d8c00085 	stb	r3,2(sp)
		if(a.alive) {
     aa4:	10bfe004 	addi	r2,r2,-128
     aa8:	10001c26 	beq	r2,zero,b1c <checkCollideAliens+0x11c>
			printf("KILL (%i, %i)\n", (x + (7-alienShift)) % ALIEN_COLS, y);
     aac:	a1400017 	ldw	r5,0(r20)
     ab0:	908001c4 	addi	r2,r18,7
     ab4:	1145c83a 	sub	r2,r2,r5
     ab8:	144a703a 	and	r5,r2,r17
     abc:	2800040e 	bge	r5,zero,ad0 <checkCollideAliens+0xd0>
     ac0:	297fffc4 	addi	r5,r5,-1
     ac4:	00fffe04 	movi	r3,-8
     ac8:	28cab03a 	or	r5,r5,r3
     acc:	29400044 	addi	r5,r5,1
     ad0:	01000034 	movhi	r4,0
     ad4:	980d883a 	mov	r6,r19
     ad8:	2108ba04 	addi	r4,r4,8936
     adc:	00013800 	call	1380 <printf>
			a.alive = 0;
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
     ae0:	a1800017 	ldw	r6,0(r20)
     ae4:	948001c4 	addi	r18,r18,7
     ae8:	91a5c83a 	sub	r18,r18,r6
     aec:	944c703a 	and	r6,r18,r17
     af0:	3000040e 	bge	r6,zero,b04 <checkCollideAliens+0x104>
     af4:	31bfffc4 	addi	r6,r6,-1
     af8:	00bffe04 	movi	r2,-8
     afc:	308cb03a 	or	r6,r6,r2
     b00:	31800044 	addi	r6,r6,1
     b04:	d8000005 	stb	zero,0(sp)
     b08:	d9c00017 	ldw	r7,0(sp)
     b0c:	8009883a 	mov	r4,r16
     b10:	980b883a 	mov	r5,r19
     b14:	0000cfc0 	call	cfc <setAlien>
     b18:	00000306 	br	b28 <checkCollideAliens+0x128>
                return 0;
            }
        }
    }*/
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
     b1c:	9cffffc4 	addi	r19,r19,-1
     b20:	00bfffc4 	movi	r2,-1
     b24:	98bfca1e 	bne	r19,r2,a50 <_gp+0xffff6678>
			a.alive = 0;
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
			break;
		}
	}
}
     b28:	dfc00a17 	ldw	ra,40(sp)
     b2c:	df000917 	ldw	fp,36(sp)
     b30:	ddc00817 	ldw	r23,32(sp)
     b34:	dd800717 	ldw	r22,28(sp)
     b38:	dd400617 	ldw	r21,24(sp)
     b3c:	dd000517 	ldw	r20,20(sp)
     b40:	dcc00417 	ldw	r19,16(sp)
     b44:	dc800317 	ldw	r18,12(sp)
     b48:	dc400217 	ldw	r17,8(sp)
     b4c:	dc000117 	ldw	r16,4(sp)
     b50:	dec00b04 	addi	sp,sp,44
     b54:	f800283a 	ret

00000b58 <shootGunner>:
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
     b58:	00941404 	movi	r2,20560
     b5c:	10c00003 	ldbu	r3,0(r2)
     b60:	18c03fcc 	andi	r3,r3,255
     b64:	18c0201c 	xori	r3,r3,128
     b68:	18ffe004 	addi	r3,r3,-128
     b6c:	18000826 	beq	r3,zero,b90 <shootGunner+0x38>
     b70:	d0e00617 	ldw	r3,-32744(gp)
     b74:	18000626 	beq	r3,zero,b90 <shootGunner+0x38>
		proj.direction = 1;
		proj.symbol = '^';
		proj.type = 1;
		proj.timeTick = 0;
		
		checkCollideAliens(pSramAliens, 2);
     b78:	00800034 	movhi	r2,0
     b7c:	10895104 	addi	r2,r2,9540
     b80:	11000017 	ldw	r4,0(r2)
     b84:	01400084 	movi	r5,2


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
     b88:	d0200615 	stw	zero,-32744(gp)
		proj.direction = 1;
		proj.symbol = '^';
		proj.type = 1;
		proj.timeTick = 0;
		
		checkCollideAliens(pSramAliens, 2);
     b8c:	0000a001 	jmpi	a00 <checkCollideAliens>
		//addProjectileNode(proj);
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
     b90:	10800003 	ldbu	r2,0(r2)
     b94:	10803fcc 	andi	r2,r2,255
     b98:	1080201c 	xori	r2,r2,128
     b9c:	10bfe004 	addi	r2,r2,-128
     ba0:	1000041e 	bne	r2,zero,bb4 <shootGunner+0x5c>
     ba4:	d0a00617 	ldw	r2,-32744(gp)
     ba8:	1000021e 	bne	r2,zero,bb4 <shootGunner+0x5c>
		gunnerShootToggle = 1;
     bac:	00800044 	movi	r2,1
     bb0:	d0a00615 	stw	r2,-32744(gp)
     bb4:	f800283a 	ret

00000bb8 <checkCollideGunner>:
		}
	}
}

int checkCollideGunner(int gunnerX, int projX, int projY, int* gameOver) {
    if (projX == gunnerX && projY == gunnerX) {
     bb8:	2900041e 	bne	r5,r4,bcc <checkCollideGunner+0x14>
     bbc:	3140031e 	bne	r6,r5,bcc <checkCollideGunner+0x14>
        *gameOver = 1;
     bc0:	00800044 	movi	r2,1
     bc4:	38800015 	stw	r2,0(r7)
        return 1;
     bc8:	f800283a 	ret
    } else {
        return 0;
     bcc:	0005883a 	mov	r2,zero
    }
}
     bd0:	f800283a 	ret

00000bd4 <main>:
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
     bd4:	d1205c17 	ldw	r4,-32400(gp)

int pSramAliens = 0;
int alienShift = 0;

int main()
{
     bd8:	defff704 	addi	sp,sp,-36
     bdc:	dfc00815 	stw	ra,32(sp)
     be0:	dd400715 	stw	r21,28(sp)
     be4:	dd000615 	stw	r20,24(sp)
     be8:	dcc00515 	stw	r19,20(sp)
     bec:	dc800415 	stw	r18,16(sp)
     bf0:	dc400315 	stw	r17,12(sp)
     bf4:	dc000215 	stw	r16,8(sp)
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
     bf8:	00008a80 	call	8a8 <initializeGame>
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
     bfc:	01001204 	movi	r4,72
     c00:	0000e8c0 	call	e8c <sram_malloc>
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     c04:	0100b584 	movi	r4,726
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
     c08:	d0a05b15 	stw	r2,-32404(gp)
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     c0c:	0000e8c0 	call	e8c <sram_malloc>

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
	unsigned int  gameStartTime = *game_time;
     c10:	04104004 	movi	r16,16640
	unsigned int  previousUpdateBoard = *game_time;
	unsigned int  previousUpdateBullets = *game_time;
    
    initRandomAliens(pSramAliens);
     c14:	d1205b17 	ldw	r4,-32404(gp)
    //sram_free_test();

    //Game Init
    initializeGame(startTimer);
    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
     c18:	1027883a 	mov	r19,r2

    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
	unsigned int  gameStartTime = *game_time;
     c1c:	80800017 	ldw	r2,0(r16)
	unsigned int  previousUpdateBoard = *game_time;
     c20:	84400017 	ldw	r17,0(r16)
	unsigned int  previousUpdateBullets = *game_time;
     c24:	84800017 	ldw	r18,0(r16)
    
    initRandomAliens(pSramAliens);
     c28:	000037c0 	call	37c <initRandomAliens>
	initProjectileBuffer(pSramBulletBuffer);
     c2c:	9809883a 	mov	r4,r19
     c30:	000005c0 	call	5c <initProjectileBuffer>
	int gunnerX = 37; //max value 39 (ALIEN_WIDTH * ALIEN_COLS)
     c34:	00800944 	movi	r2,37
     c38:	d8800115 	stw	r2,4(sp)
	
	
	
	//Game Event Loop
    while(1) {
		if(((*game_time) - previousUpdateBoard) > 10) {
     c3c:	05000284 	movi	r20,10
			alienShift = ((*game_time) / 10) % 8;
            updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);			
			previousUpdateBoard = (*game_time);
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
     c40:	05400144 	movi	r21,5
	
	
	
	//Game Event Loop
    while(1) {
		if(((*game_time) - previousUpdateBoard) > 10) {
     c44:	80c00017 	ldw	r3,0(r16)
     c48:	1c47c83a 	sub	r3,r3,r17
     c4c:	a0c00d2e 	bgeu	r20,r3,c84 <main+0xb0>
			alienShift = ((*game_time) / 10) % 8;
     c50:	81000017 	ldw	r4,0(r16)
     c54:	01400284 	movi	r5,10
     c58:	00010580 	call	1058 <__udivsi3>
     c5c:	108001cc 	andi	r2,r2,7
     c60:	d0a05a15 	stw	r2,-32408(gp)
            updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);			
     c64:	81c00017 	ldw	r7,0(r16)
     c68:	d1205b17 	ldw	r4,-32404(gp)
     c6c:	d9800117 	ldw	r6,4(sp)
     c70:	d8800015 	stw	r2,0(sp)
     c74:	980b883a 	mov	r5,r19
     c78:	39c0004c 	andi	r7,r7,1
     c7c:	00008300 	call	830 <updateDisplay>
			previousUpdateBoard = (*game_time);
     c80:	84400017 	ldw	r17,0(r16)
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
     c84:	80c00017 	ldw	r3,0(r16)
     c88:	1c87c83a 	sub	r3,r3,r18
     c8c:	a8c0022e 	bgeu	r21,r3,c98 <main+0xc4>
			updateProjectileNodes();
     c90:	00002200 	call	220 <updateProjectileNodes>
			previousUpdateBullets = (*game_time);
     c94:	84800017 	ldw	r18,0(r16)
		}
		
		moveGunnerLeft(&gunnerX);
     c98:	d9000104 	addi	r4,sp,4
     c9c:	00008ac0 	call	8ac <moveGunnerLeft>
		moveGunnerRight(&gunnerX);
     ca0:	d9000104 	addi	r4,sp,4
     ca4:	00009140 	call	914 <moveGunnerRight>
		shootGunner(&gunnerX);
     ca8:	d9000104 	addi	r4,sp,4
     cac:	0000b580 	call	b58 <shootGunner>
		//shootAliens();
 
    }
     cb0:	003fe406 	br	c44 <_gp+0xffff686c>

00000cb4 <getAlien>:
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     cb4:	280a90fa 	slli	r5,r5,3
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
     cb8:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     cbc:	298d883a 	add	r6,r5,r6
     cc0:	318b883a 	add	r5,r6,r6
     cc4:	298d883a 	add	r6,r5,r6
     cc8:	310d883a 	add	r6,r6,r4
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
     ccc:	01000034 	movhi	r4,0
     cd0:	21095d04 	addi	r4,r4,9588
     cd4:	2189883a 	add	r4,r4,r6
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
     cd8:	20800043 	ldbu	r2,1(r4)
     cdc:	20c00083 	ldbu	r3,2(r4)
     ce0:	21400003 	ldbu	r5,0(r4)
     ce4:	1004923a 	slli	r2,r2,8
     ce8:	1806943a 	slli	r3,r3,16
     cec:	1144b03a 	or	r2,r2,r5
}
     cf0:	10c4b03a 	or	r2,r2,r3
     cf4:	dec00104 	addi	sp,sp,4
     cf8:	f800283a 	ret

00000cfc <setAlien>:

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     cfc:	280a90fa 	slli	r5,r5,3
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
     d00:	deffff04 	addi	sp,sp,-4
     d04:	d9c00015 	stw	r7,0(sp)
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     d08:	298d883a 	add	r6,r5,r6
     d0c:	318b883a 	add	r5,r6,r6
     d10:	298d883a 	add	r6,r5,r6
     d14:	310d883a 	add	r6,r6,r4
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     d18:	d8800043 	ldbu	r2,1(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     d1c:	01000034 	movhi	r4,0
     d20:	21095d04 	addi	r4,r4,9588
     d24:	2189883a 	add	r4,r4,r6
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     d28:	20800045 	stb	r2,1(r4)
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     d2c:	d8800083 	ldbu	r2,2(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     d30:	21c00005 	stb	r7,0(r4)
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     d34:	20800085 	stb	r2,2(r4)
}
     d38:	dec00104 	addi	sp,sp,4
     d3c:	f800283a 	ret

00000d40 <getProjectile>:

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
     d40:	defffb04 	addi	sp,sp,-20
     d44:	dc400315 	stw	r17,12(sp)
     d48:	dc000215 	stw	r16,8(sp)
     d4c:	2823883a 	mov	r17,r5
     d50:	2021883a 	mov	r16,r4
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     d54:	01400a04 	movi	r5,40
     d58:	3009883a 	mov	r4,r6
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
     d5c:	dfc00415 	stw	ra,16(sp)
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     d60:	00010680 	call	1068 <__mulsi3>
     d64:	1449883a 	add	r4,r2,r17
     d68:	01400184 	movi	r5,6
     d6c:	00010680 	call	1068 <__mulsi3>
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     d70:	01000034 	movhi	r4,0
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     d74:	1405883a 	add	r2,r2,r16
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
     d78:	21095d04 	addi	r4,r4,9588
     d7c:	2089883a 	add	r4,r4,r2
    p.direction = sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.symbol = sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
     d80:	20c00043 	ldbu	r3,1(r4)
     d84:	21400083 	ldbu	r5,2(r4)
     d88:	21800003 	ldbu	r6,0(r4)
     d8c:	1806923a 	slli	r3,r3,8
     d90:	280a943a 	slli	r5,r5,16
     d94:	00804034 	movhi	r2,256
     d98:	1986b03a 	or	r3,r3,r6
     d9c:	1946b03a 	or	r3,r3,r5
     da0:	218000c3 	ldbu	r6,3(r4)
     da4:	21400143 	ldbu	r5,5(r4)
     da8:	10bfffc4 	addi	r2,r2,-1
     dac:	300c963a 	slli	r6,r6,24
     db0:	1884703a 	and	r2,r3,r2
     db4:	280a923a 	slli	r5,r5,8
     db8:	20c00103 	ldbu	r3,4(r4)
}
     dbc:	1184b03a 	or	r2,r2,r6
     dc0:	1946b03a 	or	r3,r3,r5
     dc4:	dfc00417 	ldw	ra,16(sp)
     dc8:	dc400317 	ldw	r17,12(sp)
     dcc:	dc000217 	ldw	r16,8(sp)
     dd0:	dec00504 	addi	sp,sp,20
     dd4:	f800283a 	ret

00000dd8 <setProjectile>:

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
     dd8:	defffb04 	addi	sp,sp,-20
     ddc:	dc800215 	stw	r18,8(sp)
     de0:	dc000015 	stw	r16,0(sp)
     de4:	2825883a 	mov	r18,r5
     de8:	2021883a 	mov	r16,r4
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
     dec:	01400a04 	movi	r5,40
     df0:	3009883a 	mov	r4,r6
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
     df4:	dfc00315 	stw	ra,12(sp)
     df8:	dc400115 	stw	r17,4(sp)
     dfc:	d9c00415 	stw	r7,16(sp)
     e00:	3823883a 	mov	r17,r7
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
     e04:	00010680 	call	1068 <__mulsi3>
     e08:	1489883a 	add	r4,r2,r18
     e0c:	01400184 	movi	r5,6
     e10:	00010680 	call	1068 <__mulsi3>
     e14:	00c00034 	movhi	r3,0
     e18:	1405883a 	add	r2,r2,r16
     e1c:	18c95d04 	addi	r3,r3,9588
     e20:	1885883a 	add	r2,r3,r2
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
     e24:	d8c00443 	ldbu	r3,17(sp)
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
     e28:	14400005 	stb	r17,0(r2)
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
     e2c:	10c00045 	stb	r3,1(r2)
    sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.direction;
     e30:	d8c00483 	ldbu	r3,18(sp)
     e34:	10c00085 	stb	r3,2(r2)
    sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.symbol;
     e38:	d8c004c3 	ldbu	r3,19(sp)
     e3c:	10c000c5 	stb	r3,3(r2)
    sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.type;
     e40:	d8c00503 	ldbu	r3,20(sp)
     e44:	10c00105 	stb	r3,4(r2)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
     e48:	d8c00543 	ldbu	r3,21(sp)
     e4c:	10c00145 	stb	r3,5(r2)
}
     e50:	dfc00317 	ldw	ra,12(sp)
     e54:	dc800217 	ldw	r18,8(sp)
     e58:	dc400117 	ldw	r17,4(sp)
     e5c:	dc000017 	ldw	r16,0(sp)
     e60:	dec00504 	addi	sp,sp,20
     e64:	f800283a 	ret

00000e68 <resetSRAM>:

void resetSRAM() {
     e68:	01400034 	movhi	r5,0
    int i;
    for (i = 0; i < 2048; i++ ) {
     e6c:	0005883a 	mov	r2,zero
     e70:	29495d04 	addi	r5,r5,9588
     e74:	00c20004 	movi	r3,2048
     e78:	1149883a 	add	r4,r2,r5
      sram[i] = 0;
     e7c:	20000005 	stb	zero,0(r4)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
}

void resetSRAM() {
    int i;
    for (i = 0; i < 2048; i++ ) {
     e80:	10800044 	addi	r2,r2,1
     e84:	10fffc1e 	bne	r2,r3,e78 <_gp+0xffff6aa0>
      sram[i] = 0;
   }
}
     e88:	f800283a 	ret

00000e8c <sram_malloc>:

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
     e8c:	20002026 	beq	r4,zero,f10 <sram_malloc+0x84>
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
     e90:	20bfffc4 	addi	r2,r4,-1
     e94:	1000010e 	bge	r2,zero,e9c <sram_malloc+0x10>
     e98:	20800184 	addi	r2,r4,6
     e9c:	1005d0fa 	srai	r2,r2,3

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
     ea0:	02000034 	movhi	r8,0
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
     ea4:	000b883a 	mov	r5,zero
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
     ea8:	10c00044 	addi	r3,r2,1

    int currBlock = 0;
     eac:	0009883a 	mov	r4,zero
    int foundBlocks = 0;
    int startFoundBlocks = 0;
     eb0:	0005883a 	mov	r2,zero
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
     eb4:	01c03884 	movi	r7,226
        if(sram[currBlock] == 0) {//curr block is free
     eb8:	42095d04 	addi	r8,r8,9588
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
     ebc:	28c00916 	blt	r5,r3,ee4 <sram_malloc+0x58>
    /*printf("Blocks Needed: %i\n", blocksNeeded);
    printf("Total Blocks: %i\n", TOTAL_BLOCKS);
    printf("Free List End: %i\n", FREE_LIST_END);
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
     ec0:	014038c4 	movi	r5,227
     ec4:	21401226 	beq	r4,r5,f10 <sram_malloc+0x84>
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
     ec8:	01000034 	movhi	r4,0
     ecc:	21095d04 	addi	r4,r4,9588
     ed0:	2089883a 	add	r4,r4,r2
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
     ed4:	100490fa 	slli	r2,r2,3
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
     ed8:	20c00005 	stb	r3,0(r4)
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
     edc:	108038c4 	addi	r2,r2,227
     ee0:	f800283a 	ret
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
     ee4:	393ff616 	blt	r7,r4,ec0 <_gp+0xffff6ae8>
        if(sram[currBlock] == 0) {//curr block is free
     ee8:	410d883a 	add	r6,r8,r4
     eec:	31800007 	ldb	r6,0(r6)
     ef0:	3000031e 	bne	r6,zero,f00 <sram_malloc+0x74>
            foundBlocks++;
     ef4:	29400044 	addi	r5,r5,1
            currBlock++;
     ef8:	21000044 	addi	r4,r4,1
     efc:	003fef06 	br	ebc <_gp+0xffff6ae4>
        } else {//curr block is allocated
            foundBlocks = 0;
            startFoundBlocks = currBlock + sram[currBlock];
     f00:	2189883a 	add	r4,r4,r6
     f04:	2005883a 	mov	r2,r4
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
            foundBlocks++;
            currBlock++;
        } else {//curr block is allocated
            foundBlocks = 0;
     f08:	000b883a 	mov	r5,zero
     f0c:	003feb06 	br	ebc <_gp+0xffff6ae4>

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
        return -1;
     f10:	00bfffc4 	movi	r2,-1
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    }
}
     f14:	f800283a 	ret

00000f18 <sram_free>:
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int freeListLoc = (loc - FREE_LIST_END) / (BLOCK_SIZE);
     f18:	20bfc744 	addi	r2,r4,-227
     f1c:	1000010e 	bge	r2,zero,f24 <sram_free+0xc>
     f20:	20bfc904 	addi	r2,r4,-220
     f24:	1005d0fa 	srai	r2,r2,3

    //printf("Free List Location: %i\n", freeListLoc);

    sram[freeListLoc] = 0;
     f28:	00c00034 	movhi	r3,0
     f2c:	18c95d04 	addi	r3,r3,9588
     f30:	1887883a 	add	r3,r3,r2
     f34:	18000005 	stb	zero,0(r3)
    return freeListLoc;

}
     f38:	f800283a 	ret

00000f3c <udivmodsi4>:
     f3c:	2900182e 	bgeu	r5,r4,fa0 <udivmodsi4+0x64>
     f40:	28001716 	blt	r5,zero,fa0 <udivmodsi4+0x64>
     f44:	00800804 	movi	r2,32
     f48:	00c00044 	movi	r3,1
     f4c:	00000206 	br	f58 <udivmodsi4+0x1c>
     f50:	10001126 	beq	r2,zero,f98 <udivmodsi4+0x5c>
     f54:	28000516 	blt	r5,zero,f6c <udivmodsi4+0x30>
     f58:	294b883a 	add	r5,r5,r5
     f5c:	10bfffc4 	addi	r2,r2,-1
     f60:	18c7883a 	add	r3,r3,r3
     f64:	293ffa36 	bltu	r5,r4,f50 <_gp+0xffff6b78>
     f68:	18000b26 	beq	r3,zero,f98 <udivmodsi4+0x5c>
     f6c:	0005883a 	mov	r2,zero
     f70:	21400236 	bltu	r4,r5,f7c <udivmodsi4+0x40>
     f74:	2149c83a 	sub	r4,r4,r5
     f78:	10c4b03a 	or	r2,r2,r3
     f7c:	1806d07a 	srli	r3,r3,1
     f80:	280ad07a 	srli	r5,r5,1
     f84:	183ffa1e 	bne	r3,zero,f70 <_gp+0xffff6b98>
     f88:	3000011e 	bne	r6,zero,f90 <udivmodsi4+0x54>
     f8c:	f800283a 	ret
     f90:	2005883a 	mov	r2,r4
     f94:	f800283a 	ret
     f98:	0005883a 	mov	r2,zero
     f9c:	003ffa06 	br	f88 <_gp+0xffff6bb0>
     fa0:	00c00044 	movi	r3,1
     fa4:	003ff106 	br	f6c <_gp+0xffff6b94>

00000fa8 <__divsi3>:
     fa8:	defffe04 	addi	sp,sp,-8
     fac:	dfc00115 	stw	ra,4(sp)
     fb0:	dc000015 	stw	r16,0(sp)
     fb4:	20000b16 	blt	r4,zero,fe4 <__divsi3+0x3c>
     fb8:	0021883a 	mov	r16,zero
     fbc:	28000c16 	blt	r5,zero,ff0 <__divsi3+0x48>
     fc0:	000d883a 	mov	r6,zero
     fc4:	0000f3c0 	call	f3c <udivmodsi4>
     fc8:	0407c83a 	sub	r3,zero,r16
     fcc:	1884f03a 	xor	r2,r3,r2
     fd0:	1405883a 	add	r2,r2,r16
     fd4:	dfc00117 	ldw	ra,4(sp)
     fd8:	dc000017 	ldw	r16,0(sp)
     fdc:	dec00204 	addi	sp,sp,8
     fe0:	f800283a 	ret
     fe4:	0109c83a 	sub	r4,zero,r4
     fe8:	04000044 	movi	r16,1
     fec:	283ff40e 	bge	r5,zero,fc0 <_gp+0xffff6be8>
     ff0:	014bc83a 	sub	r5,zero,r5
     ff4:	8400005c 	xori	r16,r16,1
     ff8:	003ff106 	br	fc0 <_gp+0xffff6be8>

00000ffc <__modsi3>:
     ffc:	defffd04 	addi	sp,sp,-12
    1000:	dfc00215 	stw	ra,8(sp)
    1004:	dc400115 	stw	r17,4(sp)
    1008:	dc000015 	stw	r16,0(sp)
    100c:	20000c16 	blt	r4,zero,1040 <__modsi3+0x44>
    1010:	0023883a 	mov	r17,zero
    1014:	0021883a 	mov	r16,zero
    1018:	28000d16 	blt	r5,zero,1050 <__modsi3+0x54>
    101c:	01800044 	movi	r6,1
    1020:	0000f3c0 	call	f3c <udivmodsi4>
    1024:	1404f03a 	xor	r2,r2,r16
    1028:	8885883a 	add	r2,r17,r2
    102c:	dfc00217 	ldw	ra,8(sp)
    1030:	dc400117 	ldw	r17,4(sp)
    1034:	dc000017 	ldw	r16,0(sp)
    1038:	dec00304 	addi	sp,sp,12
    103c:	f800283a 	ret
    1040:	0109c83a 	sub	r4,zero,r4
    1044:	04400044 	movi	r17,1
    1048:	043fffc4 	movi	r16,-1
    104c:	283ff30e 	bge	r5,zero,101c <_gp+0xffff6c44>
    1050:	014bc83a 	sub	r5,zero,r5
    1054:	003ff106 	br	101c <_gp+0xffff6c44>

00001058 <__udivsi3>:
    1058:	000d883a 	mov	r6,zero
    105c:	0000f3c1 	jmpi	f3c <udivmodsi4>

00001060 <__umodsi3>:
    1060:	01800044 	movi	r6,1
    1064:	0000f3c1 	jmpi	f3c <udivmodsi4>

00001068 <__mulsi3>:
    1068:	0005883a 	mov	r2,zero
    106c:	20000726 	beq	r4,zero,108c <__mulsi3+0x24>
    1070:	20c0004c 	andi	r3,r4,1
    1074:	2008d07a 	srli	r4,r4,1
    1078:	18000126 	beq	r3,zero,1080 <__mulsi3+0x18>
    107c:	1145883a 	add	r2,r2,r5
    1080:	294b883a 	add	r5,r5,r5
    1084:	203ffa1e 	bne	r4,zero,1070 <_gp+0xffff6c98>
    1088:	f800283a 	ret
    108c:	f800283a 	ret

00001090 <clock>:
    1090:	00800034 	movhi	r2,0
    1094:	10890004 	addi	r2,r2,9216
    1098:	11000017 	ldw	r4,0(r2)
    109c:	defffb04 	addi	sp,sp,-20
    10a0:	d80b883a 	mov	r5,sp
    10a4:	dfc00415 	stw	ra,16(sp)
    10a8:	00015600 	call	1560 <_times_r>
    10ac:	00ffffc4 	movi	r3,-1
    10b0:	10c00726 	beq	r2,r3,10d0 <clock+0x40>
    10b4:	d8c00117 	ldw	r3,4(sp)
    10b8:	d8800017 	ldw	r2,0(sp)
    10bc:	1885883a 	add	r2,r3,r2
    10c0:	d8c00217 	ldw	r3,8(sp)
    10c4:	10c5883a 	add	r2,r2,r3
    10c8:	d8c00317 	ldw	r3,12(sp)
    10cc:	10c5883a 	add	r2,r2,r3
    10d0:	dfc00417 	ldw	ra,16(sp)
    10d4:	dec00504 	addi	sp,sp,20
    10d8:	f800283a 	ret

000010dc <malloc>:
    10dc:	00800034 	movhi	r2,0
    10e0:	10890004 	addi	r2,r2,9216
    10e4:	200b883a 	mov	r5,r4
    10e8:	11000017 	ldw	r4,0(r2)
    10ec:	00011e81 	jmpi	11e8 <_malloc_r>

000010f0 <free>:
    10f0:	00800034 	movhi	r2,0
    10f4:	10890004 	addi	r2,r2,9216
    10f8:	200b883a 	mov	r5,r4
    10fc:	11000017 	ldw	r4,0(r2)
    1100:	00011041 	jmpi	1104 <_free_r>

00001104 <_free_r>:
    1104:	28003726 	beq	r5,zero,11e4 <_free_r+0xe0>
    1108:	28ffff17 	ldw	r3,-4(r5)
    110c:	28bfff04 	addi	r2,r5,-4
    1110:	1800010e 	bge	r3,zero,1118 <_free_r+0x14>
    1114:	10c5883a 	add	r2,r2,r3
    1118:	01400034 	movhi	r5,0
    111c:	29495404 	addi	r5,r5,9552
    1120:	28c00017 	ldw	r3,0(r5)
    1124:	280d883a 	mov	r6,r5
    1128:	1800031e 	bne	r3,zero,1138 <_free_r+0x34>
    112c:	10000115 	stw	zero,4(r2)
    1130:	28800015 	stw	r2,0(r5)
    1134:	f800283a 	ret
    1138:	10c00c2e 	bgeu	r2,r3,116c <_free_r+0x68>
    113c:	11400017 	ldw	r5,0(r2)
    1140:	1149883a 	add	r4,r2,r5
    1144:	20c0041e 	bne	r4,r3,1158 <_free_r+0x54>
    1148:	20c00017 	ldw	r3,0(r4)
    114c:	28c7883a 	add	r3,r5,r3
    1150:	10c00015 	stw	r3,0(r2)
    1154:	20c00117 	ldw	r3,4(r4)
    1158:	10c00115 	stw	r3,4(r2)
    115c:	30800015 	stw	r2,0(r6)
    1160:	f800283a 	ret
    1164:	11400336 	bltu	r2,r5,1174 <_free_r+0x70>
    1168:	2807883a 	mov	r3,r5
    116c:	19400117 	ldw	r5,4(r3)
    1170:	283ffc1e 	bne	r5,zero,1164 <_gp+0xffff6d8c>
    1174:	19c00017 	ldw	r7,0(r3)
    1178:	19cd883a 	add	r6,r3,r7
    117c:	30800a1e 	bne	r6,r2,11a8 <_free_r+0xa4>
    1180:	10800017 	ldw	r2,0(r2)
    1184:	3885883a 	add	r2,r7,r2
    1188:	18800015 	stw	r2,0(r3)
    118c:	1889883a 	add	r4,r3,r2
    1190:	2140141e 	bne	r4,r5,11e4 <_free_r+0xe0>
    1194:	29000017 	ldw	r4,0(r5)
    1198:	1105883a 	add	r2,r2,r4
    119c:	18800015 	stw	r2,0(r3)
    11a0:	28800117 	ldw	r2,4(r5)
    11a4:	00000e06 	br	11e0 <_free_r+0xdc>
    11a8:	1180032e 	bgeu	r2,r6,11b8 <_free_r+0xb4>
    11ac:	00800304 	movi	r2,12
    11b0:	20800015 	stw	r2,0(r4)
    11b4:	f800283a 	ret
    11b8:	11800017 	ldw	r6,0(r2)
    11bc:	1189883a 	add	r4,r2,r6
    11c0:	2140061e 	bne	r4,r5,11dc <_free_r+0xd8>
    11c4:	29000017 	ldw	r4,0(r5)
    11c8:	3109883a 	add	r4,r6,r4
    11cc:	11000015 	stw	r4,0(r2)
    11d0:	29000117 	ldw	r4,4(r5)
    11d4:	11000115 	stw	r4,4(r2)
    11d8:	00000106 	br	11e0 <_free_r+0xdc>
    11dc:	11400115 	stw	r5,4(r2)
    11e0:	18800115 	stw	r2,4(r3)
    11e4:	f800283a 	ret

000011e8 <_malloc_r>:
    11e8:	defffb04 	addi	sp,sp,-20
    11ec:	00bfff04 	movi	r2,-4
    11f0:	dc000015 	stw	r16,0(sp)
    11f4:	2c0000c4 	addi	r16,r5,3
    11f8:	80a0703a 	and	r16,r16,r2
    11fc:	dc800215 	stw	r18,8(sp)
    1200:	dfc00415 	stw	ra,16(sp)
    1204:	dcc00315 	stw	r19,12(sp)
    1208:	dc400115 	stw	r17,4(sp)
    120c:	84000204 	addi	r16,r16,8
    1210:	00800304 	movi	r2,12
    1214:	2025883a 	mov	r18,r4
    1218:	8080022e 	bgeu	r16,r2,1224 <_malloc_r+0x3c>
    121c:	1021883a 	mov	r16,r2
    1220:	00000506 	br	1238 <_malloc_r+0x50>
    1224:	8000040e 	bge	r16,zero,1238 <_malloc_r+0x50>
    1228:	00800304 	movi	r2,12
    122c:	90800015 	stw	r2,0(r18)
    1230:	0005883a 	mov	r2,zero
    1234:	00003c06 	br	1328 <_malloc_r+0x140>
    1238:	817ffb36 	bltu	r16,r5,1228 <_gp+0xffff6e50>
    123c:	01000034 	movhi	r4,0
    1240:	21095404 	addi	r4,r4,9552
    1244:	20800017 	ldw	r2,0(r4)
    1248:	1007883a 	mov	r3,r2
    124c:	18000926 	beq	r3,zero,1274 <_malloc_r+0x8c>
    1250:	19400017 	ldw	r5,0(r3)
    1254:	2c0bc83a 	sub	r5,r5,r16
    1258:	28001716 	blt	r5,zero,12b8 <_malloc_r+0xd0>
    125c:	018002c4 	movi	r6,11
    1260:	31400d2e 	bgeu	r6,r5,1298 <_malloc_r+0xb0>
    1264:	19400015 	stw	r5,0(r3)
    1268:	1945883a 	add	r2,r3,r5
    126c:	14000015 	stw	r16,0(r2)
    1270:	1000231e 	bne	r2,zero,1300 <_malloc_r+0x118>
    1274:	04400034 	movhi	r17,0
    1278:	8c495304 	addi	r17,r17,9548
    127c:	88800017 	ldw	r2,0(r17)
    1280:	1000101e 	bne	r2,zero,12c4 <_malloc_r+0xdc>
    1284:	9009883a 	mov	r4,r18
    1288:	000b883a 	mov	r5,zero
    128c:	00014f40 	call	14f4 <_sbrk_r>
    1290:	88800015 	stw	r2,0(r17)
    1294:	00000b06 	br	12c4 <_malloc_r+0xdc>
    1298:	10c0031e 	bne	r2,r3,12a8 <_malloc_r+0xc0>
    129c:	10c00117 	ldw	r3,4(r2)
    12a0:	20c00015 	stw	r3,0(r4)
    12a4:	00001606 	br	1300 <_malloc_r+0x118>
    12a8:	19000117 	ldw	r4,4(r3)
    12ac:	11000115 	stw	r4,4(r2)
    12b0:	1805883a 	mov	r2,r3
    12b4:	00001206 	br	1300 <_malloc_r+0x118>
    12b8:	1805883a 	mov	r2,r3
    12bc:	18c00117 	ldw	r3,4(r3)
    12c0:	003fe206 	br	124c <_gp+0xffff6e74>
    12c4:	9009883a 	mov	r4,r18
    12c8:	800b883a 	mov	r5,r16
    12cc:	00014f40 	call	14f4 <_sbrk_r>
    12d0:	04ffffc4 	movi	r19,-1
    12d4:	14ffd426 	beq	r2,r19,1228 <_gp+0xffff6e50>
    12d8:	144000c4 	addi	r17,r2,3
    12dc:	00ffff04 	movi	r3,-4
    12e0:	88e2703a 	and	r17,r17,r3
    12e4:	88800526 	beq	r17,r2,12fc <_malloc_r+0x114>
    12e8:	9009883a 	mov	r4,r18
    12ec:	888bc83a 	sub	r5,r17,r2
    12f0:	00014f40 	call	14f4 <_sbrk_r>
    12f4:	14ffcc26 	beq	r2,r19,1228 <_gp+0xffff6e50>
    12f8:	8805883a 	mov	r2,r17
    12fc:	14000015 	stw	r16,0(r2)
    1300:	114002c4 	addi	r5,r2,11
    1304:	00fffe04 	movi	r3,-8
    1308:	11000104 	addi	r4,r2,4
    130c:	28c6703a 	and	r3,r5,r3
    1310:	1909c83a 	sub	r4,r3,r4
    1314:	20000326 	beq	r4,zero,1324 <_malloc_r+0x13c>
    1318:	110b883a 	add	r5,r2,r4
    131c:	0109c83a 	sub	r4,zero,r4
    1320:	29000015 	stw	r4,0(r5)
    1324:	1805883a 	mov	r2,r3
    1328:	dfc00417 	ldw	ra,16(sp)
    132c:	dcc00317 	ldw	r19,12(sp)
    1330:	dc800217 	ldw	r18,8(sp)
    1334:	dc400117 	ldw	r17,4(sp)
    1338:	dc000017 	ldw	r16,0(sp)
    133c:	dec00504 	addi	sp,sp,20
    1340:	f800283a 	ret

00001344 <_printf_r>:
    1344:	defffd04 	addi	sp,sp,-12
    1348:	dfc00015 	stw	ra,0(sp)
    134c:	d9800115 	stw	r6,4(sp)
    1350:	d9c00215 	stw	r7,8(sp)
    1354:	20c00217 	ldw	r3,8(r4)
    1358:	280d883a 	mov	r6,r5
    135c:	01400034 	movhi	r5,0
    1360:	2946d904 	addi	r5,r5,7012
    1364:	19400115 	stw	r5,4(r3)
    1368:	21400217 	ldw	r5,8(r4)
    136c:	d9c00104 	addi	r7,sp,4
    1370:	00015d40 	call	15d4 <___vfprintf_internal_r>
    1374:	dfc00017 	ldw	ra,0(sp)
    1378:	dec00304 	addi	sp,sp,12
    137c:	f800283a 	ret

00001380 <printf>:
    1380:	defffc04 	addi	sp,sp,-16
    1384:	dfc00015 	stw	ra,0(sp)
    1388:	d9400115 	stw	r5,4(sp)
    138c:	d9800215 	stw	r6,8(sp)
    1390:	d9c00315 	stw	r7,12(sp)
    1394:	00800034 	movhi	r2,0
    1398:	10890004 	addi	r2,r2,9216
    139c:	10800017 	ldw	r2,0(r2)
    13a0:	200b883a 	mov	r5,r4
    13a4:	01000034 	movhi	r4,0
    13a8:	10c00217 	ldw	r3,8(r2)
    13ac:	2106d904 	addi	r4,r4,7012
    13b0:	d9800104 	addi	r6,sp,4
    13b4:	19000115 	stw	r4,4(r3)
    13b8:	11000217 	ldw	r4,8(r2)
    13bc:	0001b400 	call	1b40 <__vfprintf_internal>
    13c0:	dfc00017 	ldw	ra,0(sp)
    13c4:	dec00404 	addi	sp,sp,16
    13c8:	f800283a 	ret

000013cc <_putchar_r>:
    13cc:	21800217 	ldw	r6,8(r4)
    13d0:	0001c641 	jmpi	1c64 <_putc_r>

000013d4 <putchar>:
    13d4:	00800034 	movhi	r2,0
    13d8:	10890004 	addi	r2,r2,9216
    13dc:	200b883a 	mov	r5,r4
    13e0:	11000017 	ldw	r4,0(r2)
    13e4:	21800217 	ldw	r6,8(r4)
    13e8:	0001c641 	jmpi	1c64 <_putc_r>

000013ec <_puts_r>:
    13ec:	defffd04 	addi	sp,sp,-12
    13f0:	dc000015 	stw	r16,0(sp)
    13f4:	2021883a 	mov	r16,r4
    13f8:	2809883a 	mov	r4,r5
    13fc:	dfc00215 	stw	ra,8(sp)
    1400:	dc400115 	stw	r17,4(sp)
    1404:	2823883a 	mov	r17,r5
    1408:	00015440 	call	1544 <strlen>
    140c:	81400217 	ldw	r5,8(r16)
    1410:	00c00034 	movhi	r3,0
    1414:	18c6d904 	addi	r3,r3,7012
    1418:	28c00115 	stw	r3,4(r5)
    141c:	8009883a 	mov	r4,r16
    1420:	880d883a 	mov	r6,r17
    1424:	100f883a 	mov	r7,r2
    1428:	0001b640 	call	1b64 <__sfvwrite_small_dev>
    142c:	00ffffc4 	movi	r3,-1
    1430:	10c00926 	beq	r2,r3,1458 <_puts_r+0x6c>
    1434:	81400217 	ldw	r5,8(r16)
    1438:	01800034 	movhi	r6,0
    143c:	8009883a 	mov	r4,r16
    1440:	28800117 	ldw	r2,4(r5)
    1444:	3188b504 	addi	r6,r6,8916
    1448:	01c00044 	movi	r7,1
    144c:	103ee83a 	callr	r2
    1450:	10bfffe0 	cmpeqi	r2,r2,-1
    1454:	0085c83a 	sub	r2,zero,r2
    1458:	dfc00217 	ldw	ra,8(sp)
    145c:	dc400117 	ldw	r17,4(sp)
    1460:	dc000017 	ldw	r16,0(sp)
    1464:	dec00304 	addi	sp,sp,12
    1468:	f800283a 	ret

0000146c <puts>:
    146c:	00800034 	movhi	r2,0
    1470:	10890004 	addi	r2,r2,9216
    1474:	200b883a 	mov	r5,r4
    1478:	11000017 	ldw	r4,0(r2)
    147c:	00013ec1 	jmpi	13ec <_puts_r>

00001480 <srand>:
    1480:	00800034 	movhi	r2,0
    1484:	10895504 	addi	r2,r2,9556
    1488:	11000015 	stw	r4,0(r2)
    148c:	10000115 	stw	zero,4(r2)
    1490:	f800283a 	ret

00001494 <rand>:
    1494:	defffe04 	addi	sp,sp,-8
    1498:	dc000015 	stw	r16,0(sp)
    149c:	04000034 	movhi	r16,0
    14a0:	84095504 	addi	r16,r16,9556
    14a4:	81000017 	ldw	r4,0(r16)
    14a8:	81400117 	ldw	r5,4(r16)
    14ac:	01932574 	movhi	r6,19605
    14b0:	01d614b4 	movhi	r7,22610
    14b4:	319fcb44 	addi	r6,r6,32557
    14b8:	39fd0b44 	addi	r7,r7,-3027
    14bc:	dfc00115 	stw	ra,4(sp)
    14c0:	0001d140 	call	1d14 <__muldi3>
    14c4:	11000044 	addi	r4,r2,1
    14c8:	2085803a 	cmpltu	r2,r4,r2
    14cc:	10c7883a 	add	r3,r2,r3
    14d0:	00a00034 	movhi	r2,32768
    14d4:	10bfffc4 	addi	r2,r2,-1
    14d8:	1884703a 	and	r2,r3,r2
    14dc:	81000015 	stw	r4,0(r16)
    14e0:	80c00115 	stw	r3,4(r16)
    14e4:	dfc00117 	ldw	ra,4(sp)
    14e8:	dc000017 	ldw	r16,0(sp)
    14ec:	dec00204 	addi	sp,sp,8
    14f0:	f800283a 	ret

000014f4 <_sbrk_r>:
    14f4:	defffd04 	addi	sp,sp,-12
    14f8:	dc000015 	stw	r16,0(sp)
    14fc:	04000034 	movhi	r16,0
    1500:	dc400115 	stw	r17,4(sp)
    1504:	84095704 	addi	r16,r16,9564
    1508:	2023883a 	mov	r17,r4
    150c:	2809883a 	mov	r4,r5
    1510:	dfc00215 	stw	ra,8(sp)
    1514:	80000015 	stw	zero,0(r16)
    1518:	0001f8c0 	call	1f8c <sbrk>
    151c:	00ffffc4 	movi	r3,-1
    1520:	10c0031e 	bne	r2,r3,1530 <_sbrk_r+0x3c>
    1524:	80c00017 	ldw	r3,0(r16)
    1528:	18000126 	beq	r3,zero,1530 <_sbrk_r+0x3c>
    152c:	88c00015 	stw	r3,0(r17)
    1530:	dfc00217 	ldw	ra,8(sp)
    1534:	dc400117 	ldw	r17,4(sp)
    1538:	dc000017 	ldw	r16,0(sp)
    153c:	dec00304 	addi	sp,sp,12
    1540:	f800283a 	ret

00001544 <strlen>:
    1544:	2005883a 	mov	r2,r4
    1548:	10c00007 	ldb	r3,0(r2)
    154c:	18000226 	beq	r3,zero,1558 <strlen+0x14>
    1550:	10800044 	addi	r2,r2,1
    1554:	003ffc06 	br	1548 <_gp+0xffff7170>
    1558:	1105c83a 	sub	r2,r2,r4
    155c:	f800283a 	ret

00001560 <_times_r>:
    1560:	2809883a 	mov	r4,r5
    1564:	0001fd81 	jmpi	1fd8 <times>

00001568 <print_repeat>:
    1568:	defffb04 	addi	sp,sp,-20
    156c:	dc800315 	stw	r18,12(sp)
    1570:	dc400215 	stw	r17,8(sp)
    1574:	dc000115 	stw	r16,4(sp)
    1578:	dfc00415 	stw	ra,16(sp)
    157c:	2025883a 	mov	r18,r4
    1580:	2823883a 	mov	r17,r5
    1584:	d9800005 	stb	r6,0(sp)
    1588:	3821883a 	mov	r16,r7
    158c:	04000a0e 	bge	zero,r16,15b8 <print_repeat+0x50>
    1590:	88800117 	ldw	r2,4(r17)
    1594:	9009883a 	mov	r4,r18
    1598:	880b883a 	mov	r5,r17
    159c:	d80d883a 	mov	r6,sp
    15a0:	01c00044 	movi	r7,1
    15a4:	103ee83a 	callr	r2
    15a8:	843fffc4 	addi	r16,r16,-1
    15ac:	103ff726 	beq	r2,zero,158c <_gp+0xffff71b4>
    15b0:	00bfffc4 	movi	r2,-1
    15b4:	00000106 	br	15bc <print_repeat+0x54>
    15b8:	0005883a 	mov	r2,zero
    15bc:	dfc00417 	ldw	ra,16(sp)
    15c0:	dc800317 	ldw	r18,12(sp)
    15c4:	dc400217 	ldw	r17,8(sp)
    15c8:	dc000117 	ldw	r16,4(sp)
    15cc:	dec00504 	addi	sp,sp,20
    15d0:	f800283a 	ret

000015d4 <___vfprintf_internal_r>:
    15d4:	deffe304 	addi	sp,sp,-116
    15d8:	d8c00804 	addi	r3,sp,32
    15dc:	df001b15 	stw	fp,108(sp)
    15e0:	ddc01a15 	stw	r23,104(sp)
    15e4:	dd801915 	stw	r22,100(sp)
    15e8:	dd401815 	stw	r21,96(sp)
    15ec:	dd001715 	stw	r20,92(sp)
    15f0:	dcc01615 	stw	r19,88(sp)
    15f4:	dc801515 	stw	r18,84(sp)
    15f8:	dc401415 	stw	r17,80(sp)
    15fc:	dc001315 	stw	r16,76(sp)
    1600:	dfc01c15 	stw	ra,112(sp)
    1604:	2029883a 	mov	r20,r4
    1608:	2823883a 	mov	r17,r5
    160c:	3839883a 	mov	fp,r7
    1610:	d9800f15 	stw	r6,60(sp)
    1614:	0021883a 	mov	r16,zero
    1618:	d8000e15 	stw	zero,56(sp)
    161c:	002f883a 	mov	r23,zero
    1620:	002b883a 	mov	r21,zero
    1624:	0027883a 	mov	r19,zero
    1628:	0025883a 	mov	r18,zero
    162c:	d8000c15 	stw	zero,48(sp)
    1630:	d8000b15 	stw	zero,44(sp)
    1634:	002d883a 	mov	r22,zero
    1638:	d8c00915 	stw	r3,36(sp)
    163c:	d8c00f17 	ldw	r3,60(sp)
    1640:	19000003 	ldbu	r4,0(r3)
    1644:	20803fcc 	andi	r2,r4,255
    1648:	1080201c 	xori	r2,r2,128
    164c:	10bfe004 	addi	r2,r2,-128
    1650:	10012e26 	beq	r2,zero,1b0c <___vfprintf_internal_r+0x538>
    1654:	01400044 	movi	r5,1
    1658:	b1401426 	beq	r22,r5,16ac <___vfprintf_internal_r+0xd8>
    165c:	2d800216 	blt	r5,r22,1668 <___vfprintf_internal_r+0x94>
    1660:	b0000626 	beq	r22,zero,167c <___vfprintf_internal_r+0xa8>
    1664:	00012506 	br	1afc <___vfprintf_internal_r+0x528>
    1668:	01400084 	movi	r5,2
    166c:	b1401d26 	beq	r22,r5,16e4 <___vfprintf_internal_r+0x110>
    1670:	014000c4 	movi	r5,3
    1674:	b1402b26 	beq	r22,r5,1724 <___vfprintf_internal_r+0x150>
    1678:	00012006 	br	1afc <___vfprintf_internal_r+0x528>
    167c:	01400944 	movi	r5,37
    1680:	11410d26 	beq	r2,r5,1ab8 <___vfprintf_internal_r+0x4e4>
    1684:	88800117 	ldw	r2,4(r17)
    1688:	d9000005 	stb	r4,0(sp)
    168c:	880b883a 	mov	r5,r17
    1690:	a009883a 	mov	r4,r20
    1694:	d80d883a 	mov	r6,sp
    1698:	01c00044 	movi	r7,1
    169c:	103ee83a 	callr	r2
    16a0:	1000e81e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    16a4:	84000044 	addi	r16,r16,1
    16a8:	00011406 	br	1afc <___vfprintf_internal_r+0x528>
    16ac:	01400c04 	movi	r5,48
    16b0:	11410a26 	beq	r2,r5,1adc <___vfprintf_internal_r+0x508>
    16b4:	01400944 	movi	r5,37
    16b8:	11400a1e 	bne	r2,r5,16e4 <___vfprintf_internal_r+0x110>
    16bc:	d8800005 	stb	r2,0(sp)
    16c0:	88800117 	ldw	r2,4(r17)
    16c4:	a009883a 	mov	r4,r20
    16c8:	880b883a 	mov	r5,r17
    16cc:	d80d883a 	mov	r6,sp
    16d0:	b00f883a 	mov	r7,r22
    16d4:	103ee83a 	callr	r2
    16d8:	1000da1e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    16dc:	84000044 	addi	r16,r16,1
    16e0:	00010506 	br	1af8 <___vfprintf_internal_r+0x524>
    16e4:	25bff404 	addi	r22,r4,-48
    16e8:	b5803fcc 	andi	r22,r22,255
    16ec:	00c00244 	movi	r3,9
    16f0:	1d800936 	bltu	r3,r22,1718 <___vfprintf_internal_r+0x144>
    16f4:	00bfffc4 	movi	r2,-1
    16f8:	90800426 	beq	r18,r2,170c <___vfprintf_internal_r+0x138>
    16fc:	9009883a 	mov	r4,r18
    1700:	01400284 	movi	r5,10
    1704:	00010680 	call	1068 <__mulsi3>
    1708:	00000106 	br	1710 <___vfprintf_internal_r+0x13c>
    170c:	0005883a 	mov	r2,zero
    1710:	15a5883a 	add	r18,r2,r22
    1714:	0000f206 	br	1ae0 <___vfprintf_internal_r+0x50c>
    1718:	01400b84 	movi	r5,46
    171c:	1140f426 	beq	r2,r5,1af0 <___vfprintf_internal_r+0x51c>
    1720:	05800084 	movi	r22,2
    1724:	213ff404 	addi	r4,r4,-48
    1728:	20c03fcc 	andi	r3,r4,255
    172c:	01000244 	movi	r4,9
    1730:	20c00b36 	bltu	r4,r3,1760 <___vfprintf_internal_r+0x18c>
    1734:	00bfffc4 	movi	r2,-1
    1738:	98800626 	beq	r19,r2,1754 <___vfprintf_internal_r+0x180>
    173c:	9809883a 	mov	r4,r19
    1740:	01400284 	movi	r5,10
    1744:	d8c01115 	stw	r3,68(sp)
    1748:	00010680 	call	1068 <__mulsi3>
    174c:	d8c01117 	ldw	r3,68(sp)
    1750:	00000106 	br	1758 <___vfprintf_internal_r+0x184>
    1754:	0005883a 	mov	r2,zero
    1758:	10e7883a 	add	r19,r2,r3
    175c:	0000e706 	br	1afc <___vfprintf_internal_r+0x528>
    1760:	01401b04 	movi	r5,108
    1764:	1140e026 	beq	r2,r5,1ae8 <___vfprintf_internal_r+0x514>
    1768:	013fffc4 	movi	r4,-1
    176c:	99000226 	beq	r19,r4,1778 <___vfprintf_internal_r+0x1a4>
    1770:	d8000b15 	stw	zero,44(sp)
    1774:	00000106 	br	177c <___vfprintf_internal_r+0x1a8>
    1778:	04c00044 	movi	r19,1
    177c:	01001a44 	movi	r4,105
    1780:	11001626 	beq	r2,r4,17dc <___vfprintf_internal_r+0x208>
    1784:	20800916 	blt	r4,r2,17ac <___vfprintf_internal_r+0x1d8>
    1788:	010018c4 	movi	r4,99
    178c:	11009626 	beq	r2,r4,19e8 <___vfprintf_internal_r+0x414>
    1790:	01001904 	movi	r4,100
    1794:	11001126 	beq	r2,r4,17dc <___vfprintf_internal_r+0x208>
    1798:	01001604 	movi	r4,88
    179c:	1100d61e 	bne	r2,r4,1af8 <___vfprintf_internal_r+0x524>
    17a0:	00c00044 	movi	r3,1
    17a4:	d8c00e15 	stw	r3,56(sp)
    17a8:	00001406 	br	17fc <___vfprintf_internal_r+0x228>
    17ac:	01001cc4 	movi	r4,115
    17b0:	1100a626 	beq	r2,r4,1a4c <___vfprintf_internal_r+0x478>
    17b4:	20800416 	blt	r4,r2,17c8 <___vfprintf_internal_r+0x1f4>
    17b8:	01001bc4 	movi	r4,111
    17bc:	1100ce1e 	bne	r2,r4,1af8 <___vfprintf_internal_r+0x524>
    17c0:	05400204 	movi	r21,8
    17c4:	00000e06 	br	1800 <___vfprintf_internal_r+0x22c>
    17c8:	01001d44 	movi	r4,117
    17cc:	11000c26 	beq	r2,r4,1800 <___vfprintf_internal_r+0x22c>
    17d0:	01001e04 	movi	r4,120
    17d4:	11000926 	beq	r2,r4,17fc <___vfprintf_internal_r+0x228>
    17d8:	0000c706 	br	1af8 <___vfprintf_internal_r+0x524>
    17dc:	e0800104 	addi	r2,fp,4
    17e0:	b8000726 	beq	r23,zero,1800 <___vfprintf_internal_r+0x22c>
    17e4:	d8800d15 	stw	r2,52(sp)
    17e8:	e7000017 	ldw	fp,0(fp)
    17ec:	e000080e 	bge	fp,zero,1810 <___vfprintf_internal_r+0x23c>
    17f0:	0739c83a 	sub	fp,zero,fp
    17f4:	02000044 	movi	r8,1
    17f8:	00000606 	br	1814 <___vfprintf_internal_r+0x240>
    17fc:	05400404 	movi	r21,16
    1800:	e0c00104 	addi	r3,fp,4
    1804:	d8c00d15 	stw	r3,52(sp)
    1808:	e7000017 	ldw	fp,0(fp)
    180c:	002f883a 	mov	r23,zero
    1810:	0011883a 	mov	r8,zero
    1814:	002d883a 	mov	r22,zero
    1818:	dd87883a 	add	r3,sp,r22
    181c:	e0001a26 	beq	fp,zero,1888 <___vfprintf_internal_r+0x2b4>
    1820:	e009883a 	mov	r4,fp
    1824:	a80b883a 	mov	r5,r21
    1828:	d8c01115 	stw	r3,68(sp)
    182c:	da001215 	stw	r8,72(sp)
    1830:	00010580 	call	1058 <__udivsi3>
    1834:	a809883a 	mov	r4,r21
    1838:	100b883a 	mov	r5,r2
    183c:	d8801015 	stw	r2,64(sp)
    1840:	00010680 	call	1068 <__mulsi3>
    1844:	e085c83a 	sub	r2,fp,r2
    1848:	01000244 	movi	r4,9
    184c:	d8c01117 	ldw	r3,68(sp)
    1850:	d9801017 	ldw	r6,64(sp)
    1854:	da001217 	ldw	r8,72(sp)
    1858:	20800216 	blt	r4,r2,1864 <___vfprintf_internal_r+0x290>
    185c:	17000c04 	addi	fp,r2,48
    1860:	00000506 	br	1878 <___vfprintf_internal_r+0x2a4>
    1864:	d9400e17 	ldw	r5,56(sp)
    1868:	28000226 	beq	r5,zero,1874 <___vfprintf_internal_r+0x2a0>
    186c:	17000dc4 	addi	fp,r2,55
    1870:	00000106 	br	1878 <___vfprintf_internal_r+0x2a4>
    1874:	170015c4 	addi	fp,r2,87
    1878:	1f000005 	stb	fp,0(r3)
    187c:	b5800044 	addi	r22,r22,1
    1880:	3039883a 	mov	fp,r6
    1884:	003fe406 	br	1818 <_gp+0xffff7440>
    1888:	1ec5c83a 	sub	r2,r3,sp
    188c:	d8800a15 	stw	r2,40(sp)
    1890:	9885c83a 	sub	r2,r19,r2
    1894:	1839883a 	mov	fp,r3
    1898:	00800e0e 	bge	zero,r2,18d4 <___vfprintf_internal_r+0x300>
    189c:	182d883a 	mov	r22,r3
    18a0:	1885883a 	add	r2,r3,r2
    18a4:	01000c04 	movi	r4,48
    18a8:	d9400917 	ldw	r5,36(sp)
    18ac:	b007883a 	mov	r3,r22
    18b0:	b140052e 	bgeu	r22,r5,18c8 <___vfprintf_internal_r+0x2f4>
    18b4:	b5800044 	addi	r22,r22,1
    18b8:	19000005 	stb	r4,0(r3)
    18bc:	b039883a 	mov	fp,r22
    18c0:	b0bff91e 	bne	r22,r2,18a8 <_gp+0xffff74d0>
    18c4:	00000106 	br	18cc <___vfprintf_internal_r+0x2f8>
    18c8:	b039883a 	mov	fp,r22
    18cc:	b6edc83a 	sub	r22,r22,sp
    18d0:	dd800a15 	stw	r22,40(sp)
    18d4:	d8800a17 	ldw	r2,40(sp)
    18d8:	1207883a 	add	r3,r2,r8
    18dc:	90edc83a 	sub	r22,r18,r3
    18e0:	d8c00b17 	ldw	r3,44(sp)
    18e4:	18001726 	beq	r3,zero,1944 <___vfprintf_internal_r+0x370>
    18e8:	40000a26 	beq	r8,zero,1914 <___vfprintf_internal_r+0x340>
    18ec:	00800b44 	movi	r2,45
    18f0:	d8800805 	stb	r2,32(sp)
    18f4:	88800117 	ldw	r2,4(r17)
    18f8:	a009883a 	mov	r4,r20
    18fc:	880b883a 	mov	r5,r17
    1900:	d9800804 	addi	r6,sp,32
    1904:	01c00044 	movi	r7,1
    1908:	103ee83a 	callr	r2
    190c:	10004d1e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    1910:	84000044 	addi	r16,r16,1
    1914:	0580070e 	bge	zero,r22,1934 <___vfprintf_internal_r+0x360>
    1918:	a009883a 	mov	r4,r20
    191c:	880b883a 	mov	r5,r17
    1920:	01800c04 	movi	r6,48
    1924:	b00f883a 	mov	r7,r22
    1928:	00015680 	call	1568 <print_repeat>
    192c:	1000451e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    1930:	85a1883a 	add	r16,r16,r22
    1934:	d9000a17 	ldw	r4,40(sp)
    1938:	e007883a 	mov	r3,fp
    193c:	272dc83a 	sub	r22,r4,fp
    1940:	00002206 	br	19cc <___vfprintf_internal_r+0x3f8>
    1944:	0580090e 	bge	zero,r22,196c <___vfprintf_internal_r+0x398>
    1948:	a009883a 	mov	r4,r20
    194c:	880b883a 	mov	r5,r17
    1950:	01800804 	movi	r6,32
    1954:	b00f883a 	mov	r7,r22
    1958:	da001215 	stw	r8,72(sp)
    195c:	00015680 	call	1568 <print_repeat>
    1960:	da001217 	ldw	r8,72(sp)
    1964:	1000371e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    1968:	85a1883a 	add	r16,r16,r22
    196c:	403ff126 	beq	r8,zero,1934 <_gp+0xffff755c>
    1970:	00800b44 	movi	r2,45
    1974:	d8800805 	stb	r2,32(sp)
    1978:	88800117 	ldw	r2,4(r17)
    197c:	a009883a 	mov	r4,r20
    1980:	880b883a 	mov	r5,r17
    1984:	d9800804 	addi	r6,sp,32
    1988:	01c00044 	movi	r7,1
    198c:	103ee83a 	callr	r2
    1990:	10002c1e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    1994:	84000044 	addi	r16,r16,1
    1998:	003fe606 	br	1934 <_gp+0xffff755c>
    199c:	18ffffc4 	addi	r3,r3,-1
    19a0:	18800003 	ldbu	r2,0(r3)
    19a4:	a009883a 	mov	r4,r20
    19a8:	d8c01115 	stw	r3,68(sp)
    19ac:	d8800805 	stb	r2,32(sp)
    19b0:	88800117 	ldw	r2,4(r17)
    19b4:	880b883a 	mov	r5,r17
    19b8:	d9800804 	addi	r6,sp,32
    19bc:	01c00044 	movi	r7,1
    19c0:	103ee83a 	callr	r2
    19c4:	d8c01117 	ldw	r3,68(sp)
    19c8:	10001e1e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    19cc:	80c5c83a 	sub	r2,r16,r3
    19d0:	1d89883a 	add	r4,r3,r22
    19d4:	e085883a 	add	r2,fp,r2
    19d8:	013ff016 	blt	zero,r4,199c <_gp+0xffff75c4>
    19dc:	1021883a 	mov	r16,r2
    19e0:	df000d17 	ldw	fp,52(sp)
    19e4:	00004406 	br	1af8 <___vfprintf_internal_r+0x524>
    19e8:	01000044 	movi	r4,1
    19ec:	2480080e 	bge	r4,r18,1a10 <___vfprintf_internal_r+0x43c>
    19f0:	95bfffc4 	addi	r22,r18,-1
    19f4:	a009883a 	mov	r4,r20
    19f8:	880b883a 	mov	r5,r17
    19fc:	01800804 	movi	r6,32
    1a00:	b00f883a 	mov	r7,r22
    1a04:	00015680 	call	1568 <print_repeat>
    1a08:	10000e1e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    1a0c:	85a1883a 	add	r16,r16,r22
    1a10:	e0800017 	ldw	r2,0(fp)
    1a14:	a009883a 	mov	r4,r20
    1a18:	880b883a 	mov	r5,r17
    1a1c:	d8800005 	stb	r2,0(sp)
    1a20:	88800117 	ldw	r2,4(r17)
    1a24:	d80d883a 	mov	r6,sp
    1a28:	01c00044 	movi	r7,1
    1a2c:	e5800104 	addi	r22,fp,4
    1a30:	103ee83a 	callr	r2
    1a34:	1000031e 	bne	r2,zero,1a44 <___vfprintf_internal_r+0x470>
    1a38:	84000044 	addi	r16,r16,1
    1a3c:	b039883a 	mov	fp,r22
    1a40:	00002d06 	br	1af8 <___vfprintf_internal_r+0x524>
    1a44:	00bfffc4 	movi	r2,-1
    1a48:	00003106 	br	1b10 <___vfprintf_internal_r+0x53c>
    1a4c:	e5800017 	ldw	r22,0(fp)
    1a50:	e0c00104 	addi	r3,fp,4
    1a54:	d8c00a15 	stw	r3,40(sp)
    1a58:	b009883a 	mov	r4,r22
    1a5c:	00015440 	call	1544 <strlen>
    1a60:	9091c83a 	sub	r8,r18,r2
    1a64:	1039883a 	mov	fp,r2
    1a68:	0200090e 	bge	zero,r8,1a90 <___vfprintf_internal_r+0x4bc>
    1a6c:	400f883a 	mov	r7,r8
    1a70:	a009883a 	mov	r4,r20
    1a74:	880b883a 	mov	r5,r17
    1a78:	01800804 	movi	r6,32
    1a7c:	da001215 	stw	r8,72(sp)
    1a80:	00015680 	call	1568 <print_repeat>
    1a84:	da001217 	ldw	r8,72(sp)
    1a88:	103fee1e 	bne	r2,zero,1a44 <_gp+0xffff766c>
    1a8c:	8221883a 	add	r16,r16,r8
    1a90:	88800117 	ldw	r2,4(r17)
    1a94:	a009883a 	mov	r4,r20
    1a98:	880b883a 	mov	r5,r17
    1a9c:	b00d883a 	mov	r6,r22
    1aa0:	e00f883a 	mov	r7,fp
    1aa4:	103ee83a 	callr	r2
    1aa8:	103fe61e 	bne	r2,zero,1a44 <_gp+0xffff766c>
    1aac:	8721883a 	add	r16,r16,fp
    1ab0:	df000a17 	ldw	fp,40(sp)
    1ab4:	00001006 	br	1af8 <___vfprintf_internal_r+0x524>
    1ab8:	05c00044 	movi	r23,1
    1abc:	04ffffc4 	movi	r19,-1
    1ac0:	d8000e15 	stw	zero,56(sp)
    1ac4:	05400284 	movi	r21,10
    1ac8:	9825883a 	mov	r18,r19
    1acc:	d8000c15 	stw	zero,48(sp)
    1ad0:	d8000b15 	stw	zero,44(sp)
    1ad4:	b82d883a 	mov	r22,r23
    1ad8:	00000806 	br	1afc <___vfprintf_internal_r+0x528>
    1adc:	dd800b15 	stw	r22,44(sp)
    1ae0:	05800084 	movi	r22,2
    1ae4:	00000506 	br	1afc <___vfprintf_internal_r+0x528>
    1ae8:	00c00044 	movi	r3,1
    1aec:	d8c00c15 	stw	r3,48(sp)
    1af0:	058000c4 	movi	r22,3
    1af4:	00000106 	br	1afc <___vfprintf_internal_r+0x528>
    1af8:	002d883a 	mov	r22,zero
    1afc:	d8c00f17 	ldw	r3,60(sp)
    1b00:	18c00044 	addi	r3,r3,1
    1b04:	d8c00f15 	stw	r3,60(sp)
    1b08:	003ecc06 	br	163c <_gp+0xffff7264>
    1b0c:	8005883a 	mov	r2,r16
    1b10:	dfc01c17 	ldw	ra,112(sp)
    1b14:	df001b17 	ldw	fp,108(sp)
    1b18:	ddc01a17 	ldw	r23,104(sp)
    1b1c:	dd801917 	ldw	r22,100(sp)
    1b20:	dd401817 	ldw	r21,96(sp)
    1b24:	dd001717 	ldw	r20,92(sp)
    1b28:	dcc01617 	ldw	r19,88(sp)
    1b2c:	dc801517 	ldw	r18,84(sp)
    1b30:	dc401417 	ldw	r17,80(sp)
    1b34:	dc001317 	ldw	r16,76(sp)
    1b38:	dec01d04 	addi	sp,sp,116
    1b3c:	f800283a 	ret

00001b40 <__vfprintf_internal>:
    1b40:	2007883a 	mov	r3,r4
    1b44:	01000034 	movhi	r4,0
    1b48:	21090004 	addi	r4,r4,9216
    1b4c:	21000017 	ldw	r4,0(r4)
    1b50:	2805883a 	mov	r2,r5
    1b54:	300f883a 	mov	r7,r6
    1b58:	180b883a 	mov	r5,r3
    1b5c:	100d883a 	mov	r6,r2
    1b60:	00015d41 	jmpi	15d4 <___vfprintf_internal_r>

00001b64 <__sfvwrite_small_dev>:
    1b64:	2880000b 	ldhu	r2,0(r5)
    1b68:	defffa04 	addi	sp,sp,-24
    1b6c:	dc000015 	stw	r16,0(sp)
    1b70:	dfc00515 	stw	ra,20(sp)
    1b74:	dd000415 	stw	r20,16(sp)
    1b78:	dcc00315 	stw	r19,12(sp)
    1b7c:	dc800215 	stw	r18,8(sp)
    1b80:	dc400115 	stw	r17,4(sp)
    1b84:	1080020c 	andi	r2,r2,8
    1b88:	2821883a 	mov	r16,r5
    1b8c:	10001726 	beq	r2,zero,1bec <__sfvwrite_small_dev+0x88>
    1b90:	2880008f 	ldh	r2,2(r5)
    1b94:	10001216 	blt	r2,zero,1be0 <__sfvwrite_small_dev+0x7c>
    1b98:	2027883a 	mov	r19,r4
    1b9c:	3025883a 	mov	r18,r6
    1ba0:	3823883a 	mov	r17,r7
    1ba4:	05010004 	movi	r20,1024
    1ba8:	04400b0e 	bge	zero,r17,1bd8 <__sfvwrite_small_dev+0x74>
    1bac:	8140008f 	ldh	r5,2(r16)
    1bb0:	880f883a 	mov	r7,r17
    1bb4:	a440010e 	bge	r20,r17,1bbc <__sfvwrite_small_dev+0x58>
    1bb8:	01c10004 	movi	r7,1024
    1bbc:	9809883a 	mov	r4,r19
    1bc0:	900d883a 	mov	r6,r18
    1bc4:	0001cbc0 	call	1cbc <_write_r>
    1bc8:	0080050e 	bge	zero,r2,1be0 <__sfvwrite_small_dev+0x7c>
    1bcc:	88a3c83a 	sub	r17,r17,r2
    1bd0:	90a5883a 	add	r18,r18,r2
    1bd4:	003ff406 	br	1ba8 <_gp+0xffff77d0>
    1bd8:	0005883a 	mov	r2,zero
    1bdc:	00000406 	br	1bf0 <__sfvwrite_small_dev+0x8c>
    1be0:	8080000b 	ldhu	r2,0(r16)
    1be4:	10801014 	ori	r2,r2,64
    1be8:	8080000d 	sth	r2,0(r16)
    1bec:	00bfffc4 	movi	r2,-1
    1bf0:	dfc00517 	ldw	ra,20(sp)
    1bf4:	dd000417 	ldw	r20,16(sp)
    1bf8:	dcc00317 	ldw	r19,12(sp)
    1bfc:	dc800217 	ldw	r18,8(sp)
    1c00:	dc400117 	ldw	r17,4(sp)
    1c04:	dc000017 	ldw	r16,0(sp)
    1c08:	dec00604 	addi	sp,sp,24
    1c0c:	f800283a 	ret

00001c10 <putc>:
    1c10:	defffd04 	addi	sp,sp,-12
    1c14:	00800034 	movhi	r2,0
    1c18:	dc000115 	stw	r16,4(sp)
    1c1c:	dfc00215 	stw	ra,8(sp)
    1c20:	1086d904 	addi	r2,r2,7012
    1c24:	28800115 	stw	r2,4(r5)
    1c28:	00800034 	movhi	r2,0
    1c2c:	10890004 	addi	r2,r2,9216
    1c30:	d9000005 	stb	r4,0(sp)
    1c34:	2021883a 	mov	r16,r4
    1c38:	11000017 	ldw	r4,0(r2)
    1c3c:	d80d883a 	mov	r6,sp
    1c40:	01c00044 	movi	r7,1
    1c44:	0001b640 	call	1b64 <__sfvwrite_small_dev>
    1c48:	00ffffc4 	movi	r3,-1
    1c4c:	10c00126 	beq	r2,r3,1c54 <putc+0x44>
    1c50:	8005883a 	mov	r2,r16
    1c54:	dfc00217 	ldw	ra,8(sp)
    1c58:	dc000117 	ldw	r16,4(sp)
    1c5c:	dec00304 	addi	sp,sp,12
    1c60:	f800283a 	ret

00001c64 <_putc_r>:
    1c64:	defffd04 	addi	sp,sp,-12
    1c68:	00800034 	movhi	r2,0
    1c6c:	dc000115 	stw	r16,4(sp)
    1c70:	dfc00215 	stw	ra,8(sp)
    1c74:	1086d904 	addi	r2,r2,7012
    1c78:	30800115 	stw	r2,4(r6)
    1c7c:	00800034 	movhi	r2,0
    1c80:	10890004 	addi	r2,r2,9216
    1c84:	11000017 	ldw	r4,0(r2)
    1c88:	2821883a 	mov	r16,r5
    1c8c:	01c00044 	movi	r7,1
    1c90:	300b883a 	mov	r5,r6
    1c94:	d80d883a 	mov	r6,sp
    1c98:	dc000005 	stb	r16,0(sp)
    1c9c:	0001b640 	call	1b64 <__sfvwrite_small_dev>
    1ca0:	00ffffc4 	movi	r3,-1
    1ca4:	10c00126 	beq	r2,r3,1cac <_putc_r+0x48>
    1ca8:	8005883a 	mov	r2,r16
    1cac:	dfc00217 	ldw	ra,8(sp)
    1cb0:	dc000117 	ldw	r16,4(sp)
    1cb4:	dec00304 	addi	sp,sp,12
    1cb8:	f800283a 	ret

00001cbc <_write_r>:
    1cbc:	defffd04 	addi	sp,sp,-12
    1cc0:	dc000015 	stw	r16,0(sp)
    1cc4:	04000034 	movhi	r16,0
    1cc8:	dc400115 	stw	r17,4(sp)
    1ccc:	84095704 	addi	r16,r16,9564
    1cd0:	2023883a 	mov	r17,r4
    1cd4:	2809883a 	mov	r4,r5
    1cd8:	300b883a 	mov	r5,r6
    1cdc:	380d883a 	mov	r6,r7
    1ce0:	dfc00215 	stw	ra,8(sp)
    1ce4:	80000015 	stw	zero,0(r16)
    1ce8:	00020540 	call	2054 <write>
    1cec:	00ffffc4 	movi	r3,-1
    1cf0:	10c0031e 	bne	r2,r3,1d00 <_write_r+0x44>
    1cf4:	80c00017 	ldw	r3,0(r16)
    1cf8:	18000126 	beq	r3,zero,1d00 <_write_r+0x44>
    1cfc:	88c00015 	stw	r3,0(r17)
    1d00:	dfc00217 	ldw	ra,8(sp)
    1d04:	dc400117 	ldw	r17,4(sp)
    1d08:	dc000017 	ldw	r16,0(sp)
    1d0c:	dec00304 	addi	sp,sp,12
    1d10:	f800283a 	ret

00001d14 <__muldi3>:
    1d14:	defff604 	addi	sp,sp,-40
    1d18:	dd800615 	stw	r22,24(sp)
    1d1c:	dd400515 	stw	r21,20(sp)
    1d20:	25bfffcc 	andi	r22,r4,65535
    1d24:	357fffcc 	andi	r21,r6,65535
    1d28:	dc400115 	stw	r17,4(sp)
    1d2c:	2022d43a 	srli	r17,r4,16
    1d30:	dcc00315 	stw	r19,12(sp)
    1d34:	dc800215 	stw	r18,8(sp)
    1d38:	2027883a 	mov	r19,r4
    1d3c:	2825883a 	mov	r18,r5
    1d40:	a809883a 	mov	r4,r21
    1d44:	b00b883a 	mov	r5,r22
    1d48:	dfc00915 	stw	ra,36(sp)
    1d4c:	df000815 	stw	fp,32(sp)
    1d50:	ddc00715 	stw	r23,28(sp)
    1d54:	3839883a 	mov	fp,r7
    1d58:	302ed43a 	srli	r23,r6,16
    1d5c:	dd000415 	stw	r20,16(sp)
    1d60:	dc000015 	stw	r16,0(sp)
    1d64:	3029883a 	mov	r20,r6
    1d68:	00010680 	call	1068 <__mulsi3>
    1d6c:	a809883a 	mov	r4,r21
    1d70:	880b883a 	mov	r5,r17
    1d74:	1021883a 	mov	r16,r2
    1d78:	00010680 	call	1068 <__mulsi3>
    1d7c:	880b883a 	mov	r5,r17
    1d80:	b809883a 	mov	r4,r23
    1d84:	102b883a 	mov	r21,r2
    1d88:	00010680 	call	1068 <__mulsi3>
    1d8c:	b809883a 	mov	r4,r23
    1d90:	b00b883a 	mov	r5,r22
    1d94:	1023883a 	mov	r17,r2
    1d98:	00010680 	call	1068 <__mulsi3>
    1d9c:	8012d43a 	srli	r9,r16,16
    1da0:	a885883a 	add	r2,r21,r2
    1da4:	1251883a 	add	r8,r2,r9
    1da8:	4540022e 	bgeu	r8,r21,1db4 <__muldi3+0xa0>
    1dac:	00800074 	movhi	r2,1
    1db0:	88a3883a 	add	r17,r17,r2
    1db4:	4006d43a 	srli	r3,r8,16
    1db8:	4010943a 	slli	r8,r8,16
    1dbc:	9809883a 	mov	r4,r19
    1dc0:	e00b883a 	mov	r5,fp
    1dc4:	843fffcc 	andi	r16,r16,65535
    1dc8:	88e3883a 	add	r17,r17,r3
    1dcc:	4421883a 	add	r16,r8,r16
    1dd0:	00010680 	call	1068 <__mulsi3>
    1dd4:	a009883a 	mov	r4,r20
    1dd8:	900b883a 	mov	r5,r18
    1ddc:	1027883a 	mov	r19,r2
    1de0:	00010680 	call	1068 <__mulsi3>
    1de4:	9885883a 	add	r2,r19,r2
    1de8:	1447883a 	add	r3,r2,r17
    1dec:	8005883a 	mov	r2,r16
    1df0:	dfc00917 	ldw	ra,36(sp)
    1df4:	df000817 	ldw	fp,32(sp)
    1df8:	ddc00717 	ldw	r23,28(sp)
    1dfc:	dd800617 	ldw	r22,24(sp)
    1e00:	dd400517 	ldw	r21,20(sp)
    1e04:	dd000417 	ldw	r20,16(sp)
    1e08:	dcc00317 	ldw	r19,12(sp)
    1e0c:	dc800217 	ldw	r18,8(sp)
    1e10:	dc400117 	ldw	r17,4(sp)
    1e14:	dc000017 	ldw	r16,0(sp)
    1e18:	dec00a04 	addi	sp,sp,40
    1e1c:	f800283a 	ret

00001e20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1e20:	deffff04 	addi	sp,sp,-4
    1e24:	01000034 	movhi	r4,0
    1e28:	01400034 	movhi	r5,0
    1e2c:	dfc00015 	stw	ra,0(sp)
    1e30:	2108be04 	addi	r4,r4,8952
    1e34:	29490604 	addi	r5,r5,9240

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1e38:	2140061e 	bne	r4,r5,1e54 <alt_load+0x34>
    1e3c:	01000034 	movhi	r4,0
    1e40:	01400034 	movhi	r5,0
    1e44:	21000804 	addi	r4,r4,32
    1e48:	29400804 	addi	r5,r5,32
    1e4c:	2140141e 	bne	r4,r5,1ea0 <alt_load+0x80>
    1e50:	00000d06 	br	1e88 <alt_load+0x68>
    1e54:	00c00034 	movhi	r3,0
    1e58:	18c90604 	addi	r3,r3,9240
    1e5c:	00bfff04 	movi	r2,-4
    1e60:	1907c83a 	sub	r3,r3,r4
    1e64:	1886703a 	and	r3,r3,r2
    1e68:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1e6c:	10fff326 	beq	r2,r3,1e3c <_gp+0xffff7a64>
    1e70:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1e74:	39c00017 	ldw	r7,0(r7)
    1e78:	110d883a 	add	r6,r2,r4
    1e7c:	10800104 	addi	r2,r2,4
    1e80:	31c00015 	stw	r7,0(r6)
    1e84:	003ff906 	br	1e6c <_gp+0xffff7a94>
    1e88:	01000034 	movhi	r4,0
    1e8c:	01400034 	movhi	r5,0
    1e90:	21088504 	addi	r4,r4,8724
    1e94:	29488504 	addi	r5,r5,8724

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1e98:	2140121e 	bne	r4,r5,1ee4 <alt_load+0xc4>
    1e9c:	00000d06 	br	1ed4 <alt_load+0xb4>
    1ea0:	00c00034 	movhi	r3,0
    1ea4:	18c00804 	addi	r3,r3,32
    1ea8:	00bfff04 	movi	r2,-4
    1eac:	1907c83a 	sub	r3,r3,r4
    1eb0:	1886703a 	and	r3,r3,r2
    1eb4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1eb8:	10fff326 	beq	r2,r3,1e88 <_gp+0xffff7ab0>
    1ebc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1ec0:	39c00017 	ldw	r7,0(r7)
    1ec4:	110d883a 	add	r6,r2,r4
    1ec8:	10800104 	addi	r2,r2,4
    1ecc:	31c00015 	stw	r7,0(r6)
    1ed0:	003ff906 	br	1eb8 <_gp+0xffff7ae0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1ed4:	00021180 	call	2118 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1ed8:	dfc00017 	ldw	ra,0(sp)
    1edc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1ee0:	000211c1 	jmpi	211c <alt_icache_flush_all>
    1ee4:	00c00034 	movhi	r3,0
    1ee8:	18c8be04 	addi	r3,r3,8952
    1eec:	00bfff04 	movi	r2,-4
    1ef0:	1907c83a 	sub	r3,r3,r4
    1ef4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1ef8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1efc:	10fff526 	beq	r2,r3,1ed4 <_gp+0xffff7afc>
    1f00:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1f04:	39c00017 	ldw	r7,0(r7)
    1f08:	110d883a 	add	r6,r2,r4
    1f0c:	10800104 	addi	r2,r2,4
    1f10:	31c00015 	stw	r7,0(r6)
    1f14:	003ff906 	br	1efc <_gp+0xffff7b24>

00001f18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1f18:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1f1c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1f20:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1f24:	00020c00 	call	20c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1f28:	00020e00 	call	20e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1f2c:	d1206417 	ldw	r4,-32368(gp)
    1f30:	d1606317 	ldw	r5,-32372(gp)
    1f34:	d1a06217 	ldw	r6,-32376(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1f38:	dfc00017 	ldw	ra,0(sp)
    1f3c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1f40:	0000bd41 	jmpi	bd4 <main>

00001f44 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1f44:	defffd04 	addi	sp,sp,-12
    1f48:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1f4c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1f50:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1f54:	01000034 	movhi	r4,0
    1f58:	21090204 	addi	r4,r4,9224
    1f5c:	d80b883a 	mov	r5,sp
    1f60:	01800044 	movi	r6,1
    1f64:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1f68:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1f6c:	00020e40 	call	20e4 <altera_avalon_jtag_uart_write>
    1f70:	00ffffc4 	movi	r3,-1
    1f74:	10c00126 	beq	r2,r3,1f7c <alt_putchar+0x38>
        return -1;
    }
    return c;
    1f78:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1f7c:	dfc00217 	ldw	ra,8(sp)
    1f80:	dc000117 	ldw	r16,4(sp)
    1f84:	dec00304 	addi	sp,sp,12
    1f88:	f800283a 	ret

00001f8c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1f8c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1f90:	00bfff84 	movi	r2,-2
    1f94:	2884703a 	and	r2,r5,r2
    1f98:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1f9c:	d0a00b17 	ldw	r2,-32724(gp)
    1fa0:	00ffff04 	movi	r3,-4
    1fa4:	108000c4 	addi	r2,r2,3
    1fa8:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1fac:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1fb0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1fb4:	1109883a 	add	r4,r2,r4
    1fb8:	18d00004 	addi	r3,r3,16384
    1fbc:	1900032e 	bgeu	r3,r4,1fcc <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1fc0:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    1fc4:	00bfffc4 	movi	r2,-1
    1fc8:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    1fcc:	d1200b15 	stw	r4,-32724(gp)
    1fd0:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    1fd4:	f800283a 	ret

00001fd8 <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1fd8:	00c00034 	movhi	r3,0
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1fdc:	00800034 	movhi	r2,0
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1fe0:	18c95c04 	addi	r3,r3,9584
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1fe4:	10895b04 	addi	r2,r2,9580
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1fe8:	18c00017 	ldw	r3,0(r3)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1fec:	10800017 	ldw	r2,0(r2)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
    1ff0:	1800131e 	bne	r3,zero,2040 <times+0x68>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1ff4:	00800034 	movhi	r2,0
    1ff8:	10890304 	addi	r2,r2,9228
    1ffc:	10800017 	ldw	r2,0(r2)
    2000:	10000926 	beq	r2,zero,2028 <times+0x50>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
    2004:	deffff04 	addi	sp,sp,-4
    2008:	dfc00015 	stw	ra,0(sp)
    200c:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
    2010:	00c01604 	movi	r3,88
    2014:	10c00015 	stw	r3,0(r2)
    return 0;
    2018:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
    201c:	dfc00017 	ldw	ra,0(sp)
    2020:	dec00104 	addi	sp,sp,4
    2024:	f800283a 	ret
    2028:	00800034 	movhi	r2,0
    202c:	10895704 	addi	r2,r2,9564

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
    2030:	00c01604 	movi	r3,88
    2034:	10c00015 	stw	r3,0(r2)
    return 0;
    2038:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
    203c:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
    2040:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
    2044:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
    2048:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
    204c:	20000315 	stw	zero,12(r4)

  return ticks;
    2050:	f800283a 	ret

00002054 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2054:	00800044 	movi	r2,1
    2058:	20800226 	beq	r4,r2,2064 <write+0x10>
    205c:	00800084 	movi	r2,2
    2060:	2080041e 	bne	r4,r2,2074 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2064:	01000034 	movhi	r4,0
    2068:	21090204 	addi	r4,r4,9224
    206c:	000f883a 	mov	r7,zero
    2070:	00020e41 	jmpi	20e4 <altera_avalon_jtag_uart_write>
    2074:	00800034 	movhi	r2,0
    2078:	10890304 	addi	r2,r2,9228
    207c:	10800017 	ldw	r2,0(r2)
    2080:	10000926 	beq	r2,zero,20a8 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2084:	deffff04 	addi	sp,sp,-4
    2088:	dfc00015 	stw	ra,0(sp)
    208c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2090:	00c01444 	movi	r3,81
    2094:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2098:	00bfffc4 	movi	r2,-1
    209c:	dfc00017 	ldw	ra,0(sp)
    20a0:	dec00104 	addi	sp,sp,4
    20a4:	f800283a 	ret
    20a8:	00800034 	movhi	r2,0
    20ac:	10895704 	addi	r2,r2,9564
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    20b0:	00c01444 	movi	r3,81
    20b4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    20b8:	00bfffc4 	movi	r2,-1
    20bc:	f800283a 	ret

000020c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    20c0:	deffff04 	addi	sp,sp,-4
    20c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    20c8:	000220c0 	call	220c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    20cc:	00800044 	movi	r2,1
    20d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    20d4:	dfc00017 	ldw	ra,0(sp)
    20d8:	dec00104 	addi	sp,sp,4
    20dc:	f800283a 	ret

000020e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    20e0:	f800283a 	ret

000020e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    20e4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    20e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    20ec:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    20f0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    20f4:	2980072e 	bgeu	r5,r6,2114 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    20f8:	38c00037 	ldwio	r3,0(r7)
    20fc:	18ffffec 	andhi	r3,r3,65535
    2100:	183ffc26 	beq	r3,zero,20f4 <_gp+0xffff7d1c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2104:	28c00007 	ldb	r3,0(r5)
    2108:	20c00035 	stwio	r3,0(r4)
    210c:	29400044 	addi	r5,r5,1
    2110:	003ff806 	br	20f4 <_gp+0xffff7d1c>

  return count;
}
    2114:	f800283a 	ret

00002118 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2118:	f800283a 	ret

0000211c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    211c:	f800283a 	ret

00002120 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2120:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2124:	00bfff84 	movi	r2,-2
    2128:	1884703a 	and	r2,r3,r2
    212c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2130:	21400117 	ldw	r5,4(r4)
    2134:	20800017 	ldw	r2,0(r4)
    2138:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    213c:	21400117 	ldw	r5,4(r4)
    2140:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2144:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2148:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    214c:	1801703a 	wrctl	status,r3
    2150:	f800283a 	ret

00002154 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2154:	d0a06517 	ldw	r2,-32364(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2158:	defffb04 	addi	sp,sp,-20
    215c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2160:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2164:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2168:	dc800215 	stw	r18,8(sp)
    216c:	dc400115 	stw	r17,4(sp)
    2170:	dfc00415 	stw	ra,16(sp)
    2174:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2178:	d0a06515 	stw	r2,-32364(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    217c:	d4600e04 	addi	r17,gp,-32712
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    2180:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2184:	84401a26 	beq	r16,r17,21f0 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2188:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    218c:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2190:	10000326 	beq	r2,zero,21a0 <alt_tick+0x4c>
    2194:	d0a06517 	ldw	r2,-32364(gp)
    2198:	1000011e 	bne	r2,zero,21a0 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
    219c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    21a0:	d0e06517 	ldw	r3,-32364(gp)
    21a4:	80800217 	ldw	r2,8(r16)
    21a8:	18800f36 	bltu	r3,r2,21e8 <alt_tick+0x94>
    21ac:	80800403 	ldbu	r2,16(r16)
    21b0:	10000d1e 	bne	r2,zero,21e8 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
    21b4:	80800317 	ldw	r2,12(r16)
    21b8:	81000517 	ldw	r4,20(r16)
    21bc:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    21c0:	1000031e 	bne	r2,zero,21d0 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
    21c4:	8009883a 	mov	r4,r16
    21c8:	00021200 	call	2120 <alt_alarm_stop>
    21cc:	00000606 	br	21e8 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
    21d0:	80c00217 	ldw	r3,8(r16)
    21d4:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    21d8:	d0e06517 	ldw	r3,-32364(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    21dc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    21e0:	10c0012e 	bgeu	r2,r3,21e8 <alt_tick+0x94>
        {
          alarm->rollover = 1;
    21e4:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    21e8:	9821883a 	mov	r16,r19
    21ec:	003fe506 	br	2184 <_gp+0xffff7dac>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    21f0:	dfc00417 	ldw	ra,16(sp)
    21f4:	dcc00317 	ldw	r19,12(sp)
    21f8:	dc800217 	ldw	r18,8(sp)
    21fc:	dc400117 	ldw	r17,4(sp)
    2200:	dc000017 	ldw	r16,0(sp)
    2204:	dec00504 	addi	sp,sp,20
    2208:	f800283a 	ret

0000220c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    220c:	000170fa 	wrctl	ienable,zero
    2210:	f800283a 	ret
