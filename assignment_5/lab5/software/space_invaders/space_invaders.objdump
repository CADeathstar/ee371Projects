
space_invaders.elf:     file format elf32-littlenios2
space_invaders.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000150

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002f38 memsz 0x00002f38 flags r-x
    LOAD off    0x00003f58 vaddr 0x00002f58 paddr 0x0000409c align 2**12
         filesz 0x00001144 memsz 0x00001144 flags rw-
    LOAD off    0x000051e0 vaddr 0x000051e0 paddr 0x000051e0 align 2**12
         filesz 0x00000000 memsz 0x00000948 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000130  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002c2c  00000150  00000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001dc  00002d7c  00002d7c  00003d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001144  00002f58  0000409c  00003f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000948  000051e0  000051e0  000051e0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00005b28  00005b28  0000509c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f8  00000000  00000000  000050c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a5eb  00000000  00000000  000057b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d25  00000000  00000000  0000fda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003bb7  00000000  00000000  00013ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c30  00000000  00000000  00017680  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d59  00000000  00000000  000182b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004644  00000000  00000000  0001a009  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001e650  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000740  00000000  00000000  0001e660  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00020aa2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00020aa5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00020aa8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00020aa9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00020aaa  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00020ab3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00020abc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00020ac5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00020acc  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00020b05  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007e02f  00000000  00000000  00024178  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000150 l    d  .text	00000000 .text
00002d7c l    d  .rodata	00000000 .rodata
00002f58 l    d  .rwdata	00000000 .rwdata
000051e0 l    d  .bss	00000000 .bss
00005b28 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../space_invaders_bsp//obj/HAL/src/crt0.o
00000188 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 data_structures_constants.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 gamelogic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000008b8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
00002f58 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
000051f4 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001430 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00002234 l     F .text	00000050 altera_avalon_jtag_uart_timeout
00002284 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000894 g     F .text	00000024 sram_free
0000129c g     F .text	00000018 putchar
00001f80 g     F .text	0000002c alt_main
000012b4 g     F .text	00000080 _puts_r
00005a28 g     O .bss	00000100 alt_irq
0000409c g       *ABS*	00000000 __flash_rwdata_start
00001ad8 g     F .text	00000054 _gettimeofday_r
00001248 g     F .text	0000004c printf
000051f0 g     O .bss	00000004 startTimer
00000a0c g     F .text	00000450 .hidden __divsf3
00001ff4 g     F .text	00000038 alt_putstr
00000f6c g     F .text	000000e0 .hidden __gtdf2
00003038 g     O .rwdata	00001038 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00002118 g     F .text	0000007c times
000051e0 g     O .bss	00000004 address
00000020 g       *ABS*	00000000 __flash_exceptions_start
000051fc g     O .bss	00000004 errno
00000758 g     F .text	00000048 getAlien
00005214 g     O .bss	00000004 alt_argv
0000c070 g       *ABS*	00000000 _gp
00001294 g     F .text	00000008 _putchar_r
00000250 g     F .text	00000034 getAlienApperence
00002738 g     F .text	00000028 memcpy
00001428 g     F .text	00000008 _times_r
00001334 g     F .text	00000014 puts
000001b4 g     F .text	0000009c initRandomAliens
0000120c g     F .text	0000003c _printf_r
000009d4 g     F .text	00000008 .hidden __udivsi3
00005208 g     O .bss	00000008 alt_timezone
00000614 g     F .text	00000084 updateGameTime
00000698 g     F .text	00000044 updateToggleValues
0000104c g     F .text	00000110 .hidden __extendsfdf2
00004070 g     O .rwdata	00000004 gunner
000051e4 g     O .bss	00000004 readWrite
00002760 g     F .text	0000061c .hidden __umoddi3
00004084 g     O .rwdata	00000004 _global_impure_ptr
00005b28 g       *ABS*	00000000 __bss_end
000026c8 g     F .text	00000068 alt_iic_isr_register
00002060 g     F .text	000000b8 alt_tick
000051e8 g     O .bss	00000004 enable
000026b0 g     F .text	00000018 alt_ic_irq_enabled
0000202c g     F .text	00000034 alt_alarm_stop
00005224 g     O .bss	00000004 alt_irq_active
0000018c g     F .text	00000028 newAlien
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000ec g     F .exceptions	00000064 alt_irq_handler
00002624 g     F .text	00000004 alt_dcache_flush_all
0000409c g       *ABS*	00000000 __ram_rwdata_end
00002194 g     F .text	0000006c write
00001b80 g     F .text	00000058 _putc_r
00002f58 g       *ABS*	00000000 __ram_rodata_end
000009dc g     F .text	00000008 .hidden __umodsi3
000004b8 g     F .text	00000080 printGunnerSlice
00000488 g     F .text	00000030 printVoid
00004078 g     O .rwdata	00000004 alien1
00005b28 g       *ABS*	00000000 end
000007a0 g     F .text	00000044 setAlien
0000236c g     F .text	00000080 altera_avalon_jtag_uart_init
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000115c g     F .text	00000064 .hidden __clzsi2
0000241c g     F .text	00000174 altera_avalon_jtag_uart_write
0000149c g     F .text	0000056c ___vfprintf_internal_r
00000150 g     F .text	0000003c _start
00005220 g     O .bss	00000004 _alt_tick_rate
0000135c g     F .text	00000060 rand
0000521c g     O .bss	00000004 _alt_nticks
00002220 g     F .text	00000014 alt_sys_init
00000404 g     F .text	00000084 printAliens
000023ec g     F .text	00000030 altera_avalon_jtag_uart_close
000009e4 g     F .text	00000028 .hidden __mulsi3
00002f58 g       *ABS*	00000000 __ram_rwdata_start
00002d7c g       *ABS*	00000000 __ram_rodata_start
00005228 g     O .bss	00000800 sram
00005b28 g       *ABS*	00000000 __alt_stack_base
0000034c g     F .text	000000b8 printSlice
00001a2c g     F .text	000000ac __sfvwrite_small_dev
00001d3c g     F .text	0000014c gettimeofday
000051e0 g       *ABS*	00000000 __bss_start
000051ec g     O .bss	00000004 data
000006dc g     F .text	0000007c main
00005210 g     O .bss	00000004 alt_envp
00001348 g     F .text	00000014 srand
000013d8 g     F .text	00000050 time
00004094 g     O .rwdata	00000004 alt_errno
00000808 g     F .text	0000008c sram_malloc
00001b2c g     F .text	00000054 putc
00000924 g     F .text	00000054 .hidden __divsi3
00002d7c g       *ABS*	00000000 __flash_rodata_start
000005ec g     F .text	00000028 initializeGame
00002200 g     F .text	00000020 alt_irq_init
00002e53 g     O .rodata	00000100 .hidden __clz_tab
000007e4 g     F .text	00000024 resetSRAM
00001bd8 g     F .text	00000058 _write_r
00004088 g     O .rwdata	00000004 _impure_ptr
00005218 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
0000407c g     O .rwdata	00000004 alien0
00005200 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000262c g     F .text	00000004 alt_ic_isr_register
0000409c g       *ABS*	00000000 _edata
00005b28 g       *ABS*	00000000 _end
00000538 g     F .text	0000004c printGunner
00000150 g       *ABS*	00000000 __ram_exceptions_end
00002670 g     F .text	00000040 alt_ic_irq_disable
00002730 g     F .text	00000008 altera_nios2_qsys_irq_init
00000e5c g     F .text	00000110 .hidden __floatunsisf
00000978 g     F .text	0000005c .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000000c g       .entry	00000000 _exit
00002590 g     F .text	00000094 alt_alarm_start
00001c30 g     F .text	0000010c .hidden __muldi3
000013bc g     F .text	0000001c strlen
00000284 g     F .text	000000c8 printAlienSlice
00000f6c g     F .text	000000e0 .hidden __gedf2
00001fac g     F .text	00000048 alt_putchar
000011c0 g     F .text	0000004c clock
00002628 g     F .text	00000004 alt_icache_flush_all
00004098 g     O .rwdata	00000004 alt_priority_mask
00002630 g     F .text	00000040 alt_ic_irq_enable
00001a08 g     F .text	00000024 __vfprintf_internal
0000408c g     O .rwdata	00000008 alt_alarm_list
00004080 g     O .rwdata	00000004 empty_space
00001e88 g     F .text	000000f8 alt_load
00004074 g     O .rwdata	00000004 alien2
00000584 g     F .text	00000068 updateDisplay



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08405414 	ori	at,at,336
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  fc:	04000034 	movhi	r16,0
 100:	84168a04 	addi	r16,r16,23080

  active = alt_irq_pending ();

  do
  {
    i = 0;
 104:	0005883a 	mov	r2,zero
    mask = 1;
 108:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 10c:	190a703a 	and	r5,r3,r4
 110:	28000c26 	beq	r5,zero,144 <alt_irq_handler+0x58>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 114:	100490fa 	slli	r2,r2,3
 118:	8087883a 	add	r3,r16,r2
 11c:	1805883a 	mov	r2,r3
 120:	11000117 	ldw	r4,4(r2)
 124:	18c00017 	ldw	r3,0(r3)
 128:	183ee83a 	callr	r3
 12c:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 130:	203ff41e 	bne	r4,zero,104 <__alt_data_end+0xffff0104>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 134:	dfc00117 	ldw	ra,4(sp)
 138:	dc000017 	ldw	r16,0(sp)
 13c:	dec00204 	addi	sp,sp,8
 140:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	10800044 	addi	r2,r2,1

    } while (1);
 14c:	003fef06 	br	10c <__alt_data_end+0xffff010c>

Disassembly of section .text:

00000150 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     150:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     154:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     158:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     15c:	d6b01c14 	ori	gp,gp,49264
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     160:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     164:	10947814 	ori	r2,r2,20960

    movhi r3, %hi(__bss_end)
     168:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     16c:	18d6ca14 	ori	r3,r3,23336

    beq r2, r3, 1f
     170:	10c00326 	beq	r2,r3,180 <_start+0x30>

0:
    stw zero, (r2)
     174:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     178:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     17c:	10fffd36 	bltu	r2,r3,174 <__alt_data_end+0xffff0174>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     180:	0001e880 	call	1e88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     184:	0001f800 	call	1f80 <alt_main>

00000188 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     188:	003fff06 	br	188 <__alt_data_end+0xffff0188>

0000018c <newAlien>:
struct Alien newAlien(char alive, char type, char id) {
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
     18c:	29403fcc 	andi	r5,r5,255
     190:	31803fcc 	andi	r6,r6,255
     194:	280a923a 	slli	r5,r5,8
     198:	3004943a 	slli	r2,r6,16
     19c:	21003fcc 	andi	r4,r4,255
     1a0:	214ab03a 	or	r5,r4,r5
};
     1a4:	2884b03a 	or	r2,r5,r2
#include "data_structures_constants.h"
#include "sram.h"
#include "display.h"


struct Alien newAlien(char alive, char type, char id) {
     1a8:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
};
     1ac:	dec00104 	addi	sp,sp,4
     1b0:	f800283a 	ret

000001b4 <initRandomAliens>:

void initRandomAliens(int pSramAliens) {
     1b4:	defff804 	addi	sp,sp,-32
     1b8:	dd400615 	stw	r21,24(sp)
     1bc:	dd000515 	stw	r20,20(sp)
     1c0:	dcc00415 	stw	r19,16(sp)
     1c4:	dc800315 	stw	r18,12(sp)
     1c8:	dc400215 	stw	r17,8(sp)
     1cc:	dfc00715 	stw	ra,28(sp)
     1d0:	dc000115 	stw	r16,4(sp)
     1d4:	2025883a 	mov	r18,r4
    int x, y;
    for(x = 0; x < 3; x++) {
     1d8:	0023883a 	mov	r17,zero
     1dc:	04c00044 	movi	r19,1
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     1e0:	050000c4 	movi	r20,3
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     1e4:	05400204 	movi	r21,8
    a.type = type;
    a.rowId = id;
    return a;
};

void initRandomAliens(int pSramAliens) {
     1e8:	0021883a 	mov	r16,zero
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     1ec:	000135c0 	call	135c <rand>
     1f0:	1009883a 	mov	r4,r2
     1f4:	014000c4 	movi	r5,3
     1f8:	dcc00005 	stb	r19,0(sp)
     1fc:	00009780 	call	978 <__modsi3>
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     200:	d8800045 	stb	r2,1(sp)
     204:	dc000085 	stb	r16,2(sp)
     208:	d9c00017 	ldw	r7,0(sp)
     20c:	800d883a 	mov	r6,r16
     210:	9009883a 	mov	r4,r18
     214:	880b883a 	mov	r5,r17
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     218:	84000044 	addi	r16,r16,1
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     21c:	00007a00 	call	7a0 <setAlien>
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     220:	857ff21e 	bne	r16,r21,1ec <__alt_data_end+0xffff01ec>
    return a;
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
     224:	8c400044 	addi	r17,r17,1
     228:	8d3fef1e 	bne	r17,r20,1e8 <__alt_data_end+0xffff01e8>
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
        }
    }
}
     22c:	dfc00717 	ldw	ra,28(sp)
     230:	dd400617 	ldw	r21,24(sp)
     234:	dd000517 	ldw	r20,20(sp)
     238:	dcc00417 	ldw	r19,16(sp)
     23c:	dc800317 	ldw	r18,12(sp)
     240:	dc400217 	ldw	r17,8(sp)
     244:	dc000117 	ldw	r16,4(sp)
     248:	dec00804 	addi	sp,sp,32
     24c:	f800283a 	ret

00000250 <getAlienApperence>:

const char* getAlienApperence(int type) {
    if(type == 0) {
     250:	2000031e 	bne	r4,zero,260 <getAlienApperence+0x10>
        return alien0;
     254:	00800034 	movhi	r2,0
     258:	10901f04 	addi	r2,r2,16508
     25c:	00000706 	br	27c <getAlienApperence+0x2c>
    } else if(type == 1) {
     260:	00800044 	movi	r2,1
     264:	2080031e 	bne	r4,r2,274 <getAlienApperence+0x24>
        return alien1;
     268:	00800034 	movhi	r2,0
     26c:	10901e04 	addi	r2,r2,16504
     270:	00000206 	br	27c <getAlienApperence+0x2c>
    } else {
        return alien2;
     274:	00800034 	movhi	r2,0
     278:	10901d04 	addi	r2,r2,16500
     27c:	10800017 	ldw	r2,0(r2)
    }
}
     280:	f800283a 	ret

00000284 <printAlienSlice>:

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
     284:	defff904 	addi	sp,sp,-28
     288:	dc000115 	stw	r16,4(sp)
     28c:	dfc00615 	stw	ra,24(sp)
     290:	dd000515 	stw	r20,20(sp)
     294:	dcc00415 	stw	r19,16(sp)
     298:	dc800315 	stw	r18,12(sp)
     29c:	dc400215 	stw	r17,8(sp)
     2a0:	3821883a 	mov	r16,r7
    struct Alien alien = getAlien(pSramAliens, x, y);
     2a4:	00007580 	call	758 <getAlien>
     2a8:	1006d23a 	srli	r3,r2,8
     2ac:	d8800005 	stb	r2,0(sp)
     2b0:	d8c00045 	stb	r3,1(sp)
     2b4:	1006d43a 	srli	r3,r2,16
    if(alien.alive == 1) {
     2b8:	10803fcc 	andi	r2,r2,255
     2bc:	1080201c 	xori	r2,r2,128
        return alien2;
    }
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
     2c0:	d8c00085 	stb	r3,2(sp)
    if(alien.alive == 1) {
     2c4:	10bfe004 	addi	r2,r2,-128
     2c8:	00c00044 	movi	r3,1
     2cc:	10c0171e 	bne	r2,r3,32c <printAlienSlice+0xa8>
        char* alienApperence = getAlienApperence(alien.type);
     2d0:	d9000047 	ldb	r4,1(sp)
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     2d4:	05000c04 	movi	r20,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     2d8:	04800144 	movi	r18,5
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     2dc:	00002500 	call	250 <getAlienApperence>
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     2e0:	d9000717 	ldw	r4,28(sp)
     2e4:	014003c4 	movi	r5,15
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     2e8:	1027883a 	mov	r19,r2
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     2ec:	00009e40 	call	9e4 <__mulsi3>
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     2f0:	8009883a 	mov	r4,r16
     2f4:	01400144 	movi	r5,5

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     2f8:	1023883a 	mov	r17,r2
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     2fc:	00009e40 	call	9e4 <__mulsi3>
     300:	88a3883a 	add	r17,r17,r2
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     304:	0021883a 	mov	r16,zero
     308:	8447883a 	add	r3,r16,r17
     30c:	98c7883a 	add	r3,r19,r3
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     310:	19000007 	ldb	r4,0(r3)
     314:	2500021e 	bne	r4,r20,320 <printAlienSlice+0x9c>
                putchar(alien.rowId + 48);
     318:	d9000087 	ldb	r4,2(sp)
     31c:	21000c04 	addi	r4,r4,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     320:	84000044 	addi	r16,r16,1
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
                putchar(alien.rowId + 48);
            } else {
                putchar(alienApperence[index]);
     324:	000129c0 	call	129c <putchar>
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     328:	84bff71e 	bne	r16,r18,308 <__alt_data_end+0xffff0308>
            } else {
                putchar(alienApperence[index]);
            }
        }
    }
}
     32c:	dfc00617 	ldw	ra,24(sp)
     330:	dd000517 	ldw	r20,20(sp)
     334:	dcc00417 	ldw	r19,16(sp)
     338:	dc800317 	ldw	r18,12(sp)
     33c:	dc400217 	ldw	r17,8(sp)
     340:	dc000117 	ldw	r16,4(sp)
     344:	dec00704 	addi	sp,sp,28
     348:	f800283a 	ret

0000034c <printSlice>:

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     34c:	defff604 	addi	sp,sp,-40
     350:	dc400215 	stw	r17,8(sp)
     354:	dc400a17 	ldw	r17,40(sp)
     358:	dd800715 	stw	r22,28(sp)
     35c:	dc000115 	stw	r16,4(sp)
     360:	008003c4 	movi	r2,15
     364:	040001c4 	movi	r16,7
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        //printAlienSlice(pSramAliens, x, y, slice, step);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     368:	05a00034 	movhi	r22,32768
            }
        }
    }
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     36c:	ddc00815 	stw	r23,32(sp)
     370:	dd400615 	stw	r21,24(sp)
     374:	dd000515 	stw	r20,20(sp)
     378:	dcc00415 	stw	r19,16(sp)
     37c:	dc800315 	stw	r18,12(sp)
     380:	8461c83a 	sub	r16,r16,r17
     384:	dfc00915 	stw	ra,36(sp)
     388:	2029883a 	mov	r20,r4
     38c:	2827883a 	mov	r19,r5
     390:	3025883a 	mov	r18,r6
     394:	382b883a 	mov	r21,r7
     398:	1463c83a 	sub	r17,r2,r17
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        //printAlienSlice(pSramAliens, x, y, slice, step);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     39c:	b58001c4 	addi	r22,r22,7
     3a0:	05fffe04 	movi	r23,-8
     3a4:	858c703a 	and	r6,r16,r22
     3a8:	3000030e 	bge	r6,zero,3b8 <printSlice+0x6c>
     3ac:	31bfffc4 	addi	r6,r6,-1
     3b0:	35ccb03a 	or	r6,r6,r23
     3b4:	31800044 	addi	r6,r6,1
     3b8:	dd400015 	stw	r21,0(sp)
     3bc:	a009883a 	mov	r4,r20
     3c0:	980b883a 	mov	r5,r19
     3c4:	900f883a 	mov	r7,r18
     3c8:	84000044 	addi	r16,r16,1
     3cc:	00002840 	call	284 <printAlienSlice>
    }
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
     3d0:	847ff41e 	bne	r16,r17,3a4 <__alt_data_end+0xffff03a4>
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        //printAlienSlice(pSramAliens, x, y, slice, step);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
    }
    printf("\n");
     3d4:	01000284 	movi	r4,10
}
     3d8:	dfc00917 	ldw	ra,36(sp)
     3dc:	ddc00817 	ldw	r23,32(sp)
     3e0:	dd800717 	ldw	r22,28(sp)
     3e4:	dd400617 	ldw	r21,24(sp)
     3e8:	dd000517 	ldw	r20,20(sp)
     3ec:	dcc00417 	ldw	r19,16(sp)
     3f0:	dc800317 	ldw	r18,12(sp)
     3f4:	dc400217 	ldw	r17,8(sp)
     3f8:	dc000117 	ldw	r16,4(sp)
     3fc:	dec00a04 	addi	sp,sp,40
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        //printAlienSlice(pSramAliens, x, y, slice, step);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
    }
    printf("\n");
     400:	000129c1 	jmpi	129c <putchar>

00000404 <printAliens>:
}

void printAliens(int pSramAliens, int step, int shift) {
     404:	defff804 	addi	sp,sp,-32
     408:	dd400615 	stw	r21,24(sp)
     40c:	dd000515 	stw	r20,20(sp)
     410:	dcc00415 	stw	r19,16(sp)
     414:	dc800315 	stw	r18,12(sp)
     418:	dc400215 	stw	r17,8(sp)
     41c:	dfc00715 	stw	ra,28(sp)
     420:	dc000115 	stw	r16,4(sp)
     424:	2025883a 	mov	r18,r4
     428:	2827883a 	mov	r19,r5
     42c:	3029883a 	mov	r20,r6
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     430:	0023883a 	mov	r17,zero
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     434:	054000c4 	movi	r21,3
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
    }
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
     438:	0021883a 	mov	r16,zero
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
     43c:	800d883a 	mov	r6,r16
     440:	dd000015 	stw	r20,0(sp)
     444:	9009883a 	mov	r4,r18
     448:	880b883a 	mov	r5,r17
     44c:	980f883a 	mov	r7,r19
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     450:	84000044 	addi	r16,r16,1
            printSlice(pSramAliens, x, slice, step, shift);
     454:	000034c0 	call	34c <printSlice>
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     458:	857ff81e 	bne	r16,r21,43c <__alt_data_end+0xffff043c>
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     45c:	8c400044 	addi	r17,r17,1
     460:	8c3ff51e 	bne	r17,r16,438 <__alt_data_end+0xffff0438>
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}
     464:	dfc00717 	ldw	ra,28(sp)
     468:	dd400617 	ldw	r21,24(sp)
     46c:	dd000517 	ldw	r20,20(sp)
     470:	dcc00417 	ldw	r19,16(sp)
     474:	dc800317 	ldw	r18,12(sp)
     478:	dc400217 	ldw	r17,8(sp)
     47c:	dc000117 	ldw	r16,4(sp)
     480:	dec00804 	addi	sp,sp,32
     484:	f800283a 	ret

00000488 <printVoid>:

void printVoid() {
     488:	defffe04 	addi	sp,sp,-8
     48c:	dc000015 	stw	r16,0(sp)
     490:	dfc00115 	stw	ra,4(sp)
     494:	04000144 	movi	r16,5
    int i;
    for(i = 0; i < VOID_HEIGHT; i++) {
        printf("\n");
     498:	01000284 	movi	r4,10
     49c:	843fffc4 	addi	r16,r16,-1
     4a0:	000129c0 	call	129c <putchar>
    }
}

void printVoid() {
    int i;
    for(i = 0; i < VOID_HEIGHT; i++) {
     4a4:	803ffc1e 	bne	r16,zero,498 <__alt_data_end+0xffff0498>
        printf("\n");
    }
}
     4a8:	dfc00117 	ldw	ra,4(sp)
     4ac:	dc000017 	ldw	r16,0(sp)
     4b0:	dec00204 	addi	sp,sp,8
     4b4:	f800283a 	ret

000004b8 <printGunnerSlice>:

printGunnerSlice(int gunnerX, int slice) {
     4b8:	defffc04 	addi	sp,sp,-16
     4bc:	dc800215 	stw	r18,8(sp)
     4c0:	dc400115 	stw	r17,4(sp)
     4c4:	dc000015 	stw	r16,0(sp)
     4c8:	dfc00315 	stw	ra,12(sp)
     4cc:	2025883a 	mov	r18,r4
     4d0:	2823883a 	mov	r17,r5
//    if(gunnerX >= SCREEN_WIDTH) {
//        gunnerX = gunnerX % SCREEN_WIDTH;
//    }
    int y;
    for(y = 0; y < gunnerX; y++) {
     4d4:	0021883a 	mov	r16,zero
     4d8:	8480040e 	bge	r16,r18,4ec <printGunnerSlice+0x34>
        printf(" ");
     4dc:	01000804 	movi	r4,32
     4e0:	000129c0 	call	129c <putchar>
printGunnerSlice(int gunnerX, int slice) {
//    if(gunnerX >= SCREEN_WIDTH) {
//        gunnerX = gunnerX % SCREEN_WIDTH;
//    }
    int y;
    for(y = 0; y < gunnerX; y++) {
     4e4:	84000044 	addi	r16,r16,1
     4e8:	003ffb06 	br	4d8 <__alt_data_end+0xffff04d8>
        printf(" ");
    }
    for(y = 0; y < GUNNER_WIDTH; y++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + y]);
     4ec:	8809883a 	mov	r4,r17
     4f0:	014001c4 	movi	r5,7
     4f4:	00009e40 	call	9e4 <__mulsi3>
     4f8:	04800034 	movhi	r18,0
     4fc:	1021883a 	mov	r16,r2
     500:	144001c4 	addi	r17,r2,7
     504:	94901c04 	addi	r18,r18,16496
     508:	90800017 	ldw	r2,0(r18)
     50c:	1405883a 	add	r2,r2,r16
     510:	11000007 	ldb	r4,0(r2)
     514:	84000044 	addi	r16,r16,1
     518:	000129c0 	call	129c <putchar>
//    }
    int y;
    for(y = 0; y < gunnerX; y++) {
        printf(" ");
    }
    for(y = 0; y < GUNNER_WIDTH; y++) {
     51c:	847ffa1e 	bne	r16,r17,508 <__alt_data_end+0xffff0508>
        putchar(gunner[(slice * GUNNER_WIDTH) + y]);
    }
}
     520:	dfc00317 	ldw	ra,12(sp)
     524:	dc800217 	ldw	r18,8(sp)
     528:	dc400117 	ldw	r17,4(sp)
     52c:	dc000017 	ldw	r16,0(sp)
     530:	dec00404 	addi	sp,sp,16
     534:	f800283a 	ret

00000538 <printGunner>:

void printGunner(int gunnerX) {
     538:	defffd04 	addi	sp,sp,-12
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     53c:	000b883a 	mov	r5,zero
    for(y = 0; y < GUNNER_WIDTH; y++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + y]);
    }
}

void printGunner(int gunnerX) {
     540:	dfc00215 	stw	ra,8(sp)
     544:	dc400115 	stw	r17,4(sp)
     548:	dc000015 	stw	r16,0(sp)
     54c:	2023883a 	mov	r17,r4
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        printf("\n");
     550:	04000284 	movi	r16,10
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     554:	00004b80 	call	4b8 <printGunnerSlice>
        printf("\n");
     558:	8009883a 	mov	r4,r16
     55c:	000129c0 	call	129c <putchar>
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     560:	8809883a 	mov	r4,r17
     564:	01400044 	movi	r5,1
     568:	00004b80 	call	4b8 <printGunnerSlice>
        printf("\n");
     56c:	8009883a 	mov	r4,r16
    }
}
     570:	dfc00217 	ldw	ra,8(sp)
     574:	dc400117 	ldw	r17,4(sp)
     578:	dc000017 	ldw	r16,0(sp)
     57c:	dec00304 	addi	sp,sp,12

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        printf("\n");
     580:	000129c1 	jmpi	129c <putchar>

00000584 <updateDisplay>:
    }
}

void updateDisplay(int pSramAliens, int gunnerX, int step, int shift) {
     584:	defffb04 	addi	sp,sp,-20
     588:	dcc00315 	stw	r19,12(sp)
     58c:	2027883a 	mov	r19,r4
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     590:	01000034 	movhi	r4,0
     594:	210b8304 	addi	r4,r4,11788
        printGunnerSlice(gunnerX, x);
        printf("\n");
    }
}

void updateDisplay(int pSramAliens, int gunnerX, int step, int shift) {
     598:	dfc00415 	stw	ra,16(sp)
     59c:	dc800215 	stw	r18,8(sp)
     5a0:	dc400115 	stw	r17,4(sp)
     5a4:	3025883a 	mov	r18,r6
     5a8:	3823883a 	mov	r17,r7
     5ac:	dc000015 	stw	r16,0(sp)
     5b0:	2821883a 	mov	r16,r5
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     5b4:	00013340 	call	1334 <puts>
    //system("cls");
    printAliens(pSramAliens, step, shift);
     5b8:	9809883a 	mov	r4,r19
     5bc:	900b883a 	mov	r5,r18
     5c0:	880d883a 	mov	r6,r17
     5c4:	00004040 	call	404 <printAliens>
    printVoid();
     5c8:	00004880 	call	488 <printVoid>
    printGunner(gunnerX);
     5cc:	8009883a 	mov	r4,r16
}
     5d0:	dfc00417 	ldw	ra,16(sp)
     5d4:	dcc00317 	ldw	r19,12(sp)
     5d8:	dc800217 	ldw	r18,8(sp)
     5dc:	dc400117 	ldw	r17,4(sp)
     5e0:	dc000017 	ldw	r16,0(sp)
     5e4:	dec00504 	addi	sp,sp,20
void updateDisplay(int pSramAliens, int gunnerX, int step, int shift) {
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    //system("cls");
    printAliens(pSramAliens, step, shift);
    printVoid();
    printGunner(gunnerX);
     5e8:	00005381 	jmpi	538 <printGunner>

000005ec <initializeGame>:

#include "gamelogic.h"
#include "data_structures_constants.h"
#include "sram.h"

void initializeGame(clock_t startTimer) {
     5ec:	deffff04 	addi	sp,sp,-4
     5f0:	dfc00015 	stw	ra,0(sp)
    resetSRAM();
     5f4:	00007e40 	call	7e4 <resetSRAM>
    srand(time(NULL)); //Seed random number generator
     5f8:	0009883a 	mov	r4,zero
     5fc:	00013d80 	call	13d8 <time>
     600:	1009883a 	mov	r4,r2
     604:	00013480 	call	1348 <srand>
    startTimer = clock();
}
     608:	dfc00017 	ldw	ra,0(sp)
     60c:	dec00104 	addi	sp,sp,4
#include "sram.h"

void initializeGame(clock_t startTimer) {
    resetSRAM();
    srand(time(NULL)); //Seed random number generator
    startTimer = clock();
     610:	00011c01 	jmpi	11c0 <clock>

00000614 <updateGameTime>:
}

void updateGameTime(int* gameTime, clock_t* startTimer) {
     614:	defffd04 	addi	sp,sp,-12
     618:	dfc00215 	stw	ra,8(sp)
     61c:	dc400115 	stw	r17,4(sp)
     620:	dc000015 	stw	r16,0(sp)
     624:	2023883a 	mov	r17,r4
     628:	2821883a 	mov	r16,r5
    float seconds = ((float)(clock() - (*startTimer)))/CLOCKS_PER_SEC;
     62c:	00011c00 	call	11c0 <clock>
     630:	81000017 	ldw	r4,0(r16)
     634:	1109c83a 	sub	r4,r2,r4
     638:	0000e5c0 	call	e5c <__floatunsisf>
     63c:	01511eb4 	movhi	r5,17530
     640:	1009883a 	mov	r4,r2
     644:	0000a0c0 	call	a0c <__divsf3>
    if(seconds > 0.1) {
     648:	1009883a 	mov	r4,r2
     64c:	000104c0 	call	104c <__extendsfdf2>
     650:	01a666b4 	movhi	r6,39322
     654:	01cfeeb4 	movhi	r7,16314
     658:	1009883a 	mov	r4,r2
     65c:	180b883a 	mov	r5,r3
     660:	31a66684 	addi	r6,r6,-26214
     664:	39e66644 	addi	r7,r7,-26215
     668:	0000f6c0 	call	f6c <__gedf2>
     66c:	0080050e 	bge	zero,r2,684 <updateGameTime+0x70>
        (*gameTime)++;
     670:	88800017 	ldw	r2,0(r17)
     674:	10800044 	addi	r2,r2,1
     678:	88800015 	stw	r2,0(r17)
        *startTimer = clock();
     67c:	00011c00 	call	11c0 <clock>
     680:	80800015 	stw	r2,0(r16)
    }
}
     684:	dfc00217 	ldw	ra,8(sp)
     688:	dc400117 	ldw	r17,4(sp)
     68c:	dc000017 	ldw	r16,0(sp)
     690:	dec00304 	addi	sp,sp,12
     694:	f800283a 	ret

00000698 <updateToggleValues>:

void updateToggleValues(int gameTime, int* updateToggle, int* gunnerToggle) {
     698:	defffd04 	addi	sp,sp,-12
     69c:	dc400115 	stw	r17,4(sp)
     6a0:	2823883a 	mov	r17,r5
    if(gameTime % 41 == 0) {
     6a4:	01400a44 	movi	r5,41
        (*gameTime)++;
        *startTimer = clock();
    }
}

void updateToggleValues(int gameTime, int* updateToggle, int* gunnerToggle) {
     6a8:	dc000015 	stw	r16,0(sp)
     6ac:	dfc00215 	stw	ra,8(sp)
     6b0:	3021883a 	mov	r16,r6
    if(gameTime % 41 == 0) {
     6b4:	00009780 	call	978 <__modsi3>
     6b8:	1000031e 	bne	r2,zero,6c8 <updateToggleValues+0x30>
        *updateToggle = 1;
     6bc:	00800044 	movi	r2,1
     6c0:	88800015 	stw	r2,0(r17)
    }

    if(gameTime % 41 == 0) {
        *gunnerToggle = 1;
     6c4:	80800015 	stw	r2,0(r16)
    }
}
     6c8:	dfc00217 	ldw	ra,8(sp)
     6cc:	dc400117 	ldw	r17,4(sp)
     6d0:	dc000017 	ldw	r16,0(sp)
     6d4:	dec00304 	addi	sp,sp,12
     6d8:	f800283a 	ret

000006dc <main>:


clock_t startTimer;

int main()
{
     6dc:	defffe04 	addi	sp,sp,-8
    //FOR NIOS
	//fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
	alt_putstr("Game Start!\n");
     6e0:	01000034 	movhi	r4,0


clock_t startTimer;

int main()
{
     6e4:	dc000015 	stw	r16,0(sp)
    //FOR NIOS
	//fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
	alt_putstr("Game Start!\n");
     6e8:	210b8a04 	addi	r4,r4,11816
	//system("clear");
	printf("\x1B[2J");
     6ec:	04000034 	movhi	r16,0


clock_t startTimer;

int main()
{
     6f0:	dfc00115 	stw	ra,4(sp)
    //FOR NIOS
	//fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
	alt_putstr("Game Start!\n");
	//system("clear");
	printf("\x1B[2J");
     6f4:	840b8e04 	addi	r16,r16,11832

int main()
{
    //FOR NIOS
	//fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
	alt_putstr("Game Start!\n");
     6f8:	0001ff40 	call	1ff4 <alt_putstr>
	//system("clear");
	printf("\x1B[2J");
     6fc:	8009883a 	mov	r4,r16
     700:	00012480 	call	1248 <printf>
	printf("\x1B[2J");
     704:	8009883a 	mov	r4,r16
     708:	00012480 	call	1248 <printf>
	alt_putstr("\033[2J");
     70c:	8009883a 	mov	r4,r16
     710:	0001ff40 	call	1ff4 <alt_putstr>
	printf("%c[2J", 27);
     714:	040006c4 	movi	r16,27
     718:	01000034 	movhi	r4,0
     71c:	800b883a 	mov	r5,r16
     720:	210b9004 	addi	r4,r4,11840
     724:	00012480 	call	1248 <printf>
	printf("\e[1;1H\e[2J");
     728:	01000034 	movhi	r4,0
     72c:	210b9204 	addi	r4,r4,11848
     730:	00012480 	call	1248 <printf>
	alt_putchar('\033c');
     734:	0106d8c4 	movi	r4,7011
     738:	0001fac0 	call	1fac <alt_putchar>
	alt_putchar('\033');
     73c:	8009883a 	mov	r4,r16
     740:	0001fac0 	call	1fac <alt_putchar>
            updateToggle = 0;
        }
    }*/

    return 0;
}
     744:	0005883a 	mov	r2,zero
     748:	dfc00117 	ldw	ra,4(sp)
     74c:	dc000017 	ldw	r16,0(sp)
     750:	dec00204 	addi	sp,sp,8
     754:	f800283a 	ret

00000758 <getAlien>:
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     758:	280a90fa 	slli	r5,r5,3
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
     75c:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
     760:	298d883a 	add	r6,r5,r6
     764:	318b883a 	add	r5,r6,r6
     768:	298d883a 	add	r6,r5,r6
     76c:	310d883a 	add	r6,r6,r4
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
     770:	01000034 	movhi	r4,0
     774:	21148a04 	addi	r4,r4,21032
     778:	2189883a 	add	r4,r4,r6
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
     77c:	20800043 	ldbu	r2,1(r4)
     780:	20c00083 	ldbu	r3,2(r4)
     784:	21400003 	ldbu	r5,0(r4)
     788:	1004923a 	slli	r2,r2,8
     78c:	1806943a 	slli	r3,r3,16
     790:	1144b03a 	or	r2,r2,r5
}
     794:	10c4b03a 	or	r2,r2,r3
     798:	dec00104 	addi	sp,sp,4
     79c:	f800283a 	ret

000007a0 <setAlien>:

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     7a0:	280a90fa 	slli	r5,r5,3
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
     7a4:	deffff04 	addi	sp,sp,-4
     7a8:	d9c00015 	stw	r7,0(sp)
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     7ac:	298d883a 	add	r6,r5,r6
     7b0:	318b883a 	add	r5,r6,r6
     7b4:	298d883a 	add	r6,r5,r6
     7b8:	310d883a 	add	r6,r6,r4
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     7bc:	d8800043 	ldbu	r2,1(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     7c0:	01000034 	movhi	r4,0
     7c4:	21148a04 	addi	r4,r4,21032
     7c8:	2189883a 	add	r4,r4,r6
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
     7cc:	20800045 	stb	r2,1(r4)
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     7d0:	d8800083 	ldbu	r2,2(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
     7d4:	21c00005 	stb	r7,0(r4)
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
     7d8:	20800085 	stb	r2,2(r4)
}
     7dc:	dec00104 	addi	sp,sp,4
     7e0:	f800283a 	ret

000007e4 <resetSRAM>:

void resetSRAM() {
     7e4:	01400034 	movhi	r5,0
    int i;
    for (i = 0; i < 2048; i++ ) {
     7e8:	0005883a 	mov	r2,zero
     7ec:	29548a04 	addi	r5,r5,21032
     7f0:	00c20004 	movi	r3,2048
     7f4:	1149883a 	add	r4,r2,r5
      sram[i] = 0;
     7f8:	20000005 	stb	zero,0(r4)
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

void resetSRAM() {
    int i;
    for (i = 0; i < 2048; i++ ) {
     7fc:	10800044 	addi	r2,r2,1
     800:	10fffc1e 	bne	r2,r3,7f4 <__alt_data_end+0xffff07f4>
      sram[i] = 0;
   }
}
     804:	f800283a 	ret

00000808 <sram_malloc>:

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
     808:	20002026 	beq	r4,zero,88c <sram_malloc+0x84>
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
     80c:	20bfffc4 	addi	r2,r4,-1
     810:	1000010e 	bge	r2,zero,818 <sram_malloc+0x10>
     814:	20800184 	addi	r2,r4,6
     818:	1005d0fa 	srai	r2,r2,3

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
     81c:	02000034 	movhi	r8,0
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
     820:	000b883a 	mov	r5,zero
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
     824:	10c00044 	addi	r3,r2,1

    int currBlock = 0;
     828:	0009883a 	mov	r4,zero
    int foundBlocks = 0;
    int startFoundBlocks = 0;
     82c:	0005883a 	mov	r2,zero
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
     830:	01c03884 	movi	r7,226
        if(sram[currBlock] == 0) {//curr block is free
     834:	42148a04 	addi	r8,r8,21032
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
     838:	28c00916 	blt	r5,r3,860 <sram_malloc+0x58>
    /*printf("Blocks Needed: %i\n", blocksNeeded);
    printf("Total Blocks: %i\n", TOTAL_BLOCKS);
    printf("Free List End: %i\n", FREE_LIST_END);
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
     83c:	014038c4 	movi	r5,227
     840:	21401226 	beq	r4,r5,88c <sram_malloc+0x84>
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
     844:	01000034 	movhi	r4,0
     848:	21148a04 	addi	r4,r4,21032
     84c:	2089883a 	add	r4,r4,r2
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
     850:	100490fa 	slli	r2,r2,3
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
     854:	20c00005 	stb	r3,0(r4)
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
     858:	108038c4 	addi	r2,r2,227
     85c:	f800283a 	ret
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
     860:	393ff616 	blt	r7,r4,83c <__alt_data_end+0xffff083c>
        if(sram[currBlock] == 0) {//curr block is free
     864:	410d883a 	add	r6,r8,r4
     868:	31800007 	ldb	r6,0(r6)
     86c:	3000031e 	bne	r6,zero,87c <sram_malloc+0x74>
            foundBlocks++;
     870:	29400044 	addi	r5,r5,1
            currBlock++;
     874:	21000044 	addi	r4,r4,1
     878:	003fef06 	br	838 <__alt_data_end+0xffff0838>
        } else {//curr block is allocated
            foundBlocks = 0;
            startFoundBlocks = currBlock + sram[currBlock];
     87c:	2189883a 	add	r4,r4,r6
     880:	2005883a 	mov	r2,r4
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
            foundBlocks++;
            currBlock++;
        } else {//curr block is allocated
            foundBlocks = 0;
     884:	000b883a 	mov	r5,zero
     888:	003feb06 	br	838 <__alt_data_end+0xffff0838>

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
        return -1;
     88c:	00bfffc4 	movi	r2,-1
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    }
}
     890:	f800283a 	ret

00000894 <sram_free>:
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int freeListLoc = (loc - FREE_LIST_END) / (BLOCK_SIZE);
     894:	20bfc744 	addi	r2,r4,-227
     898:	1000010e 	bge	r2,zero,8a0 <sram_free+0xc>
     89c:	20bfc904 	addi	r2,r4,-220
     8a0:	1005d0fa 	srai	r2,r2,3

    //printf("Free List Location: %i\n", freeListLoc);

    sram[freeListLoc] = 0;
     8a4:	00c00034 	movhi	r3,0
     8a8:	18d48a04 	addi	r3,r3,21032
     8ac:	1887883a 	add	r3,r3,r2
     8b0:	18000005 	stb	zero,0(r3)
    return freeListLoc;

}
     8b4:	f800283a 	ret

000008b8 <udivmodsi4>:
     8b8:	2900182e 	bgeu	r5,r4,91c <udivmodsi4+0x64>
     8bc:	28001716 	blt	r5,zero,91c <udivmodsi4+0x64>
     8c0:	00800804 	movi	r2,32
     8c4:	00c00044 	movi	r3,1
     8c8:	00000206 	br	8d4 <udivmodsi4+0x1c>
     8cc:	10001126 	beq	r2,zero,914 <udivmodsi4+0x5c>
     8d0:	28000516 	blt	r5,zero,8e8 <udivmodsi4+0x30>
     8d4:	294b883a 	add	r5,r5,r5
     8d8:	10bfffc4 	addi	r2,r2,-1
     8dc:	18c7883a 	add	r3,r3,r3
     8e0:	293ffa36 	bltu	r5,r4,8cc <__alt_data_end+0xffff08cc>
     8e4:	18000b26 	beq	r3,zero,914 <udivmodsi4+0x5c>
     8e8:	0005883a 	mov	r2,zero
     8ec:	21400236 	bltu	r4,r5,8f8 <udivmodsi4+0x40>
     8f0:	2149c83a 	sub	r4,r4,r5
     8f4:	10c4b03a 	or	r2,r2,r3
     8f8:	1806d07a 	srli	r3,r3,1
     8fc:	280ad07a 	srli	r5,r5,1
     900:	183ffa1e 	bne	r3,zero,8ec <__alt_data_end+0xffff08ec>
     904:	3000011e 	bne	r6,zero,90c <udivmodsi4+0x54>
     908:	f800283a 	ret
     90c:	2005883a 	mov	r2,r4
     910:	f800283a 	ret
     914:	0005883a 	mov	r2,zero
     918:	003ffa06 	br	904 <__alt_data_end+0xffff0904>
     91c:	00c00044 	movi	r3,1
     920:	003ff106 	br	8e8 <__alt_data_end+0xffff08e8>

00000924 <__divsi3>:
     924:	defffe04 	addi	sp,sp,-8
     928:	dfc00115 	stw	ra,4(sp)
     92c:	dc000015 	stw	r16,0(sp)
     930:	20000b16 	blt	r4,zero,960 <__divsi3+0x3c>
     934:	0021883a 	mov	r16,zero
     938:	28000c16 	blt	r5,zero,96c <__divsi3+0x48>
     93c:	000d883a 	mov	r6,zero
     940:	00008b80 	call	8b8 <udivmodsi4>
     944:	0407c83a 	sub	r3,zero,r16
     948:	1884f03a 	xor	r2,r3,r2
     94c:	1405883a 	add	r2,r2,r16
     950:	dfc00117 	ldw	ra,4(sp)
     954:	dc000017 	ldw	r16,0(sp)
     958:	dec00204 	addi	sp,sp,8
     95c:	f800283a 	ret
     960:	0109c83a 	sub	r4,zero,r4
     964:	04000044 	movi	r16,1
     968:	283ff40e 	bge	r5,zero,93c <__alt_data_end+0xffff093c>
     96c:	014bc83a 	sub	r5,zero,r5
     970:	8400005c 	xori	r16,r16,1
     974:	003ff106 	br	93c <__alt_data_end+0xffff093c>

00000978 <__modsi3>:
     978:	defffd04 	addi	sp,sp,-12
     97c:	dfc00215 	stw	ra,8(sp)
     980:	dc400115 	stw	r17,4(sp)
     984:	dc000015 	stw	r16,0(sp)
     988:	20000c16 	blt	r4,zero,9bc <__modsi3+0x44>
     98c:	0023883a 	mov	r17,zero
     990:	0021883a 	mov	r16,zero
     994:	28000d16 	blt	r5,zero,9cc <__modsi3+0x54>
     998:	01800044 	movi	r6,1
     99c:	00008b80 	call	8b8 <udivmodsi4>
     9a0:	1404f03a 	xor	r2,r2,r16
     9a4:	8885883a 	add	r2,r17,r2
     9a8:	dfc00217 	ldw	ra,8(sp)
     9ac:	dc400117 	ldw	r17,4(sp)
     9b0:	dc000017 	ldw	r16,0(sp)
     9b4:	dec00304 	addi	sp,sp,12
     9b8:	f800283a 	ret
     9bc:	0109c83a 	sub	r4,zero,r4
     9c0:	04400044 	movi	r17,1
     9c4:	043fffc4 	movi	r16,-1
     9c8:	283ff30e 	bge	r5,zero,998 <__alt_data_end+0xffff0998>
     9cc:	014bc83a 	sub	r5,zero,r5
     9d0:	003ff106 	br	998 <__alt_data_end+0xffff0998>

000009d4 <__udivsi3>:
     9d4:	000d883a 	mov	r6,zero
     9d8:	00008b81 	jmpi	8b8 <udivmodsi4>

000009dc <__umodsi3>:
     9dc:	01800044 	movi	r6,1
     9e0:	00008b81 	jmpi	8b8 <udivmodsi4>

000009e4 <__mulsi3>:
     9e4:	0005883a 	mov	r2,zero
     9e8:	20000726 	beq	r4,zero,a08 <__mulsi3+0x24>
     9ec:	20c0004c 	andi	r3,r4,1
     9f0:	2008d07a 	srli	r4,r4,1
     9f4:	18000126 	beq	r3,zero,9fc <__mulsi3+0x18>
     9f8:	1145883a 	add	r2,r2,r5
     9fc:	294b883a 	add	r5,r5,r5
     a00:	203ffa1e 	bne	r4,zero,9ec <__alt_data_end+0xffff09ec>
     a04:	f800283a 	ret
     a08:	f800283a 	ret

00000a0c <__divsf3>:
     a0c:	defff504 	addi	sp,sp,-44
     a10:	dd000515 	stw	r20,20(sp)
     a14:	2028d5fa 	srli	r20,r4,23
     a18:	dd400615 	stw	r21,24(sp)
     a1c:	202ad7fa 	srli	r21,r4,31
     a20:	00c02034 	movhi	r3,128
     a24:	dcc00415 	stw	r19,16(sp)
     a28:	dc800315 	stw	r18,12(sp)
     a2c:	18ffffc4 	addi	r3,r3,-1
     a30:	dfc00a15 	stw	ra,40(sp)
     a34:	df000915 	stw	fp,36(sp)
     a38:	ddc00815 	stw	r23,32(sp)
     a3c:	dd800715 	stw	r22,28(sp)
     a40:	dc400215 	stw	r17,8(sp)
     a44:	dc000115 	stw	r16,4(sp)
     a48:	a5003fcc 	andi	r20,r20,255
     a4c:	1924703a 	and	r18,r3,r4
     a50:	acc03fcc 	andi	r19,r21,255
     a54:	a0004d26 	beq	r20,zero,b8c <__divsf3+0x180>
     a58:	00803fc4 	movi	r2,255
     a5c:	a0802e26 	beq	r20,r2,b18 <__divsf3+0x10c>
     a60:	91002034 	orhi	r4,r18,128
     a64:	202490fa 	slli	r18,r4,3
     a68:	a53fe044 	addi	r20,r20,-127
     a6c:	0021883a 	mov	r16,zero
     a70:	002f883a 	mov	r23,zero
     a74:	2804d5fa 	srli	r2,r5,23
     a78:	282cd7fa 	srli	r22,r5,31
     a7c:	00c02034 	movhi	r3,128
     a80:	18ffffc4 	addi	r3,r3,-1
     a84:	10803fcc 	andi	r2,r2,255
     a88:	1962703a 	and	r17,r3,r5
     a8c:	b7003fcc 	andi	fp,r22,255
     a90:	10004526 	beq	r2,zero,ba8 <__divsf3+0x19c>
     a94:	00c03fc4 	movi	r3,255
     a98:	10c04026 	beq	r2,r3,b9c <__divsf3+0x190>
     a9c:	88c02034 	orhi	r3,r17,128
     aa0:	182290fa 	slli	r17,r3,3
     aa4:	10bfe044 	addi	r2,r2,-127
     aa8:	0009883a 	mov	r4,zero
     aac:	2420b03a 	or	r16,r4,r16
     ab0:	802090ba 	slli	r16,r16,2
     ab4:	01c00034 	movhi	r7,0
     ab8:	39c2b604 	addi	r7,r7,2776
     abc:	81e1883a 	add	r16,r16,r7
     ac0:	80c00017 	ldw	r3,0(r16)
     ac4:	ad8af03a 	xor	r5,r21,r22
     ac8:	280d883a 	mov	r6,r5
     acc:	a085c83a 	sub	r2,r20,r2
     ad0:	29403fcc 	andi	r5,r5,255
     ad4:	1800683a 	jmp	r3
     ad8:	00000ce4 	muli	zero,zero,51
     adc:	00000c8c 	andi	zero,zero,50
     ae0:	00000cb0 	cmpltui	zero,zero,50
     ae4:	00000c78 	rdprs	zero,zero,49
     ae8:	00000cb0 	cmpltui	zero,zero,50
     aec:	00000b28 	cmpgeui	zero,zero,44
     af0:	00000cb0 	cmpltui	zero,zero,50
     af4:	00000c78 	rdprs	zero,zero,49
     af8:	00000c8c 	andi	zero,zero,50
     afc:	00000c8c 	andi	zero,zero,50
     b00:	00000b28 	cmpgeui	zero,zero,44
     b04:	00000c78 	rdprs	zero,zero,49
     b08:	00000d7c 	xorhi	zero,zero,53
     b0c:	00000d7c 	xorhi	zero,zero,53
     b10:	00000d7c 	xorhi	zero,zero,53
     b14:	00000cbc 	xorhi	zero,zero,50
     b18:	9000531e 	bne	r18,zero,c68 <__divsf3+0x25c>
     b1c:	04000204 	movi	r16,8
     b20:	05c00084 	movi	r23,2
     b24:	003fd306 	br	a74 <__alt_data_end+0xffff0a74>
     b28:	00c02034 	movhi	r3,128
     b2c:	000d883a 	mov	r6,zero
     b30:	18ffffc4 	addi	r3,r3,-1
     b34:	013fffc4 	movi	r4,-1
     b38:	21003fcc 	andi	r4,r4,255
     b3c:	200895fa 	slli	r4,r4,23
     b40:	30803fcc 	andi	r2,r6,255
     b44:	01802034 	movhi	r6,128
     b48:	31bfffc4 	addi	r6,r6,-1
     b4c:	100497fa 	slli	r2,r2,31
     b50:	1986703a 	and	r3,r3,r6
     b54:	1906b03a 	or	r3,r3,r4
     b58:	1884b03a 	or	r2,r3,r2
     b5c:	dfc00a17 	ldw	ra,40(sp)
     b60:	df000917 	ldw	fp,36(sp)
     b64:	ddc00817 	ldw	r23,32(sp)
     b68:	dd800717 	ldw	r22,28(sp)
     b6c:	dd400617 	ldw	r21,24(sp)
     b70:	dd000517 	ldw	r20,20(sp)
     b74:	dcc00417 	ldw	r19,16(sp)
     b78:	dc800317 	ldw	r18,12(sp)
     b7c:	dc400217 	ldw	r17,8(sp)
     b80:	dc000117 	ldw	r16,4(sp)
     b84:	dec00b04 	addi	sp,sp,44
     b88:	f800283a 	ret
     b8c:	90002b1e 	bne	r18,zero,c3c <__divsf3+0x230>
     b90:	04000104 	movi	r16,4
     b94:	05c00044 	movi	r23,1
     b98:	003fb606 	br	a74 <__alt_data_end+0xffff0a74>
     b9c:	8800251e 	bne	r17,zero,c34 <__divsf3+0x228>
     ba0:	01000084 	movi	r4,2
     ba4:	00000206 	br	bb0 <__divsf3+0x1a4>
     ba8:	88001a1e 	bne	r17,zero,c14 <__divsf3+0x208>
     bac:	01000044 	movi	r4,1
     bb0:	2420b03a 	or	r16,r4,r16
     bb4:	802090ba 	slli	r16,r16,2
     bb8:	00c00034 	movhi	r3,0
     bbc:	18c2f504 	addi	r3,r3,3028
     bc0:	80e1883a 	add	r16,r16,r3
     bc4:	80c00017 	ldw	r3,0(r16)
     bc8:	ad8af03a 	xor	r5,r21,r22
     bcc:	a085c83a 	sub	r2,r20,r2
     bd0:	1800683a 	jmp	r3
     bd4:	00000c8c 	andi	zero,zero,50
     bd8:	00000c8c 	andi	zero,zero,50
     bdc:	00000ddc 	xori	zero,zero,55
     be0:	00000c74 	movhi	zero,49
     be4:	00000ddc 	xori	zero,zero,55
     be8:	00000b28 	cmpgeui	zero,zero,44
     bec:	00000ddc 	xori	zero,zero,55
     bf0:	00000c74 	movhi	zero,49
     bf4:	00000c8c 	andi	zero,zero,50
     bf8:	00000c8c 	andi	zero,zero,50
     bfc:	00000b28 	cmpgeui	zero,zero,44
     c00:	00000c74 	movhi	zero,49
     c04:	00000d7c 	xorhi	zero,zero,53
     c08:	00000d7c 	xorhi	zero,zero,53
     c0c:	00000d7c 	xorhi	zero,zero,53
     c10:	00000da8 	cmpgeui	zero,zero,54
     c14:	8809883a 	mov	r4,r17
     c18:	000115c0 	call	115c <__clzsi2>
     c1c:	10fffec4 	addi	r3,r2,-5
     c20:	88e2983a 	sll	r17,r17,r3
     c24:	00ffe284 	movi	r3,-118
     c28:	1885c83a 	sub	r2,r3,r2
     c2c:	0009883a 	mov	r4,zero
     c30:	003f9e06 	br	aac <__alt_data_end+0xffff0aac>
     c34:	010000c4 	movi	r4,3
     c38:	003f9c06 	br	aac <__alt_data_end+0xffff0aac>
     c3c:	9009883a 	mov	r4,r18
     c40:	d9400015 	stw	r5,0(sp)
     c44:	000115c0 	call	115c <__clzsi2>
     c48:	10fffec4 	addi	r3,r2,-5
     c4c:	053fe284 	movi	r20,-118
     c50:	90e4983a 	sll	r18,r18,r3
     c54:	a0a9c83a 	sub	r20,r20,r2
     c58:	0021883a 	mov	r16,zero
     c5c:	002f883a 	mov	r23,zero
     c60:	d9400017 	ldw	r5,0(sp)
     c64:	003f8306 	br	a74 <__alt_data_end+0xffff0a74>
     c68:	04000304 	movi	r16,12
     c6c:	05c000c4 	movi	r23,3
     c70:	003f8006 	br	a74 <__alt_data_end+0xffff0a74>
     c74:	0023883a 	mov	r17,zero
     c78:	e027883a 	mov	r19,fp
     c7c:	202f883a 	mov	r23,r4
     c80:	00c00084 	movi	r3,2
     c84:	980b883a 	mov	r5,r19
     c88:	b8c0501e 	bne	r23,r3,dcc <__divsf3+0x3c0>
     c8c:	2980004c 	andi	r6,r5,1
     c90:	013fffc4 	movi	r4,-1
     c94:	0007883a 	mov	r3,zero
     c98:	003fa706 	br	b38 <__alt_data_end+0xffff0b38>
     c9c:	013fe084 	movi	r4,-126
     ca0:	2089c83a 	sub	r4,r4,r2
     ca4:	00c006c4 	movi	r3,27
     ca8:	1900500e 	bge	r3,r4,dec <__divsf3+0x3e0>
     cac:	9980004c 	andi	r6,r19,1
     cb0:	0009883a 	mov	r4,zero
     cb4:	0007883a 	mov	r3,zero
     cb8:	003f9f06 	br	b38 <__alt_data_end+0xffff0b38>
     cbc:	9080102c 	andhi	r2,r18,64
     cc0:	10000226 	beq	r2,zero,ccc <__divsf3+0x2c0>
     cc4:	8880102c 	andhi	r2,r17,64
     cc8:	10003a26 	beq	r2,zero,db4 <__divsf3+0x3a8>
     ccc:	00802034 	movhi	r2,128
     cd0:	90c01034 	orhi	r3,r18,64
     cd4:	10bfffc4 	addi	r2,r2,-1
     cd8:	a80d883a 	mov	r6,r21
     cdc:	1886703a 	and	r3,r3,r2
     ce0:	003f9406 	br	b34 <__alt_data_end+0xffff0b34>
     ce4:	9006917a 	slli	r3,r18,5
     ce8:	8822917a 	slli	r17,r17,5
     cec:	1c402936 	bltu	r3,r17,d94 <__divsf3+0x388>
     cf0:	1c47c83a 	sub	r3,r3,r17
     cf4:	2827883a 	mov	r19,r5
     cf8:	01800684 	movi	r6,26
     cfc:	01000044 	movi	r4,1
     d00:	180f883a 	mov	r7,r3
     d04:	2109883a 	add	r4,r4,r4
     d08:	18c7883a 	add	r3,r3,r3
     d0c:	38000116 	blt	r7,zero,d14 <__divsf3+0x308>
     d10:	1c400236 	bltu	r3,r17,d1c <__divsf3+0x310>
     d14:	1c47c83a 	sub	r3,r3,r17
     d18:	21000054 	ori	r4,r4,1
     d1c:	31bfffc4 	addi	r6,r6,-1
     d20:	303ff71e 	bne	r6,zero,d00 <__alt_data_end+0xffff0d00>
     d24:	1806c03a 	cmpne	r3,r3,zero
     d28:	1922b03a 	or	r17,r3,r4
     d2c:	11001fc4 	addi	r4,r2,127
     d30:	013fda0e 	bge	zero,r4,c9c <__alt_data_end+0xffff0c9c>
     d34:	88c001cc 	andi	r3,r17,7
     d38:	18000426 	beq	r3,zero,d4c <__divsf3+0x340>
     d3c:	894003cc 	andi	r5,r17,15
     d40:	00c00104 	movi	r3,4
     d44:	28c00126 	beq	r5,r3,d4c <__divsf3+0x340>
     d48:	88e3883a 	add	r17,r17,r3
     d4c:	88c2002c 	andhi	r3,r17,2048
     d50:	18000426 	beq	r3,zero,d64 <__divsf3+0x358>
     d54:	11002004 	addi	r4,r2,128
     d58:	00be0034 	movhi	r2,63488
     d5c:	10bfffc4 	addi	r2,r2,-1
     d60:	88a2703a 	and	r17,r17,r2
     d64:	00803f84 	movi	r2,254
     d68:	1100060e 	bge	r2,r4,d84 <__divsf3+0x378>
     d6c:	9980004c 	andi	r6,r19,1
     d70:	013fffc4 	movi	r4,-1
     d74:	0007883a 	mov	r3,zero
     d78:	003f6f06 	br	b38 <__alt_data_end+0xffff0b38>
     d7c:	9023883a 	mov	r17,r18
     d80:	003fbf06 	br	c80 <__alt_data_end+0xffff0c80>
     d84:	880691ba 	slli	r3,r17,6
     d88:	9980004c 	andi	r6,r19,1
     d8c:	1806d27a 	srli	r3,r3,9
     d90:	003f6906 	br	b38 <__alt_data_end+0xffff0b38>
     d94:	10bfffc4 	addi	r2,r2,-1
     d98:	2827883a 	mov	r19,r5
     d9c:	018006c4 	movi	r6,27
     da0:	0009883a 	mov	r4,zero
     da4:	003fd606 	br	d00 <__alt_data_end+0xffff0d00>
     da8:	9080102c 	andhi	r2,r18,64
     dac:	0023883a 	mov	r17,zero
     db0:	103fc626 	beq	r2,zero,ccc <__alt_data_end+0xffff0ccc>
     db4:	00802034 	movhi	r2,128
     db8:	88c01034 	orhi	r3,r17,64
     dbc:	10bfffc4 	addi	r2,r2,-1
     dc0:	b00d883a 	mov	r6,r22
     dc4:	1886703a 	and	r3,r3,r2
     dc8:	003f5a06 	br	b34 <__alt_data_end+0xffff0b34>
     dcc:	00c000c4 	movi	r3,3
     dd0:	b8c01c26 	beq	r23,r3,e44 <__divsf3+0x438>
     dd4:	00c00044 	movi	r3,1
     dd8:	b8ffd41e 	bne	r23,r3,d2c <__alt_data_end+0xffff0d2c>
     ddc:	2980004c 	andi	r6,r5,1
     de0:	0009883a 	mov	r4,zero
     de4:	0007883a 	mov	r3,zero
     de8:	003f5306 	br	b38 <__alt_data_end+0xffff0b38>
     dec:	10802784 	addi	r2,r2,158
     df0:	8884983a 	sll	r2,r17,r2
     df4:	8908d83a 	srl	r4,r17,r4
     df8:	1022c03a 	cmpne	r17,r2,zero
     dfc:	8908b03a 	or	r4,r17,r4
     e00:	208001cc 	andi	r2,r4,7
     e04:	10000426 	beq	r2,zero,e18 <__divsf3+0x40c>
     e08:	20c003cc 	andi	r3,r4,15
     e0c:	00800104 	movi	r2,4
     e10:	18800126 	beq	r3,r2,e18 <__divsf3+0x40c>
     e14:	2089883a 	add	r4,r4,r2
     e18:	2081002c 	andhi	r2,r4,1024
     e1c:	10000426 	beq	r2,zero,e30 <__divsf3+0x424>
     e20:	9980004c 	andi	r6,r19,1
     e24:	01000044 	movi	r4,1
     e28:	0007883a 	mov	r3,zero
     e2c:	003f4206 	br	b38 <__alt_data_end+0xffff0b38>
     e30:	200691ba 	slli	r3,r4,6
     e34:	9980004c 	andi	r6,r19,1
     e38:	0009883a 	mov	r4,zero
     e3c:	1806d27a 	srli	r3,r3,9
     e40:	003f3d06 	br	b38 <__alt_data_end+0xffff0b38>
     e44:	00802034 	movhi	r2,128
     e48:	88c01034 	orhi	r3,r17,64
     e4c:	10bfffc4 	addi	r2,r2,-1
     e50:	9980004c 	andi	r6,r19,1
     e54:	1886703a 	and	r3,r3,r2
     e58:	003f3606 	br	b34 <__alt_data_end+0xffff0b34>

00000e5c <__floatunsisf>:
     e5c:	defffe04 	addi	sp,sp,-8
     e60:	dc000015 	stw	r16,0(sp)
     e64:	dfc00115 	stw	ra,4(sp)
     e68:	2021883a 	mov	r16,r4
     e6c:	20002626 	beq	r4,zero,f08 <__floatunsisf+0xac>
     e70:	000115c0 	call	115c <__clzsi2>
     e74:	00c02784 	movi	r3,158
     e78:	1887c83a 	sub	r3,r3,r2
     e7c:	01002584 	movi	r4,150
     e80:	20c00816 	blt	r4,r3,ea4 <__floatunsisf+0x48>
     e84:	01000204 	movi	r4,8
     e88:	2080340e 	bge	r4,r2,f5c <__floatunsisf+0x100>
     e8c:	10bffe04 	addi	r2,r2,-8
     e90:	8088983a 	sll	r4,r16,r2
     e94:	00802034 	movhi	r2,128
     e98:	10bfffc4 	addi	r2,r2,-1
     e9c:	2088703a 	and	r4,r4,r2
     ea0:	00001b06 	br	f10 <__floatunsisf+0xb4>
     ea4:	01002644 	movi	r4,153
     ea8:	20c02316 	blt	r4,r3,f38 <__floatunsisf+0xdc>
     eac:	01000144 	movi	r4,5
     eb0:	2080020e 	bge	r4,r2,ebc <__floatunsisf+0x60>
     eb4:	113ffec4 	addi	r4,r2,-5
     eb8:	8120983a 	sll	r16,r16,r4
     ebc:	017f0034 	movhi	r5,64512
     ec0:	297fffc4 	addi	r5,r5,-1
     ec4:	810001cc 	andi	r4,r16,7
     ec8:	814a703a 	and	r5,r16,r5
     ecc:	20000426 	beq	r4,zero,ee0 <__floatunsisf+0x84>
     ed0:	840003cc 	andi	r16,r16,15
     ed4:	01000104 	movi	r4,4
     ed8:	81000126 	beq	r16,r4,ee0 <__floatunsisf+0x84>
     edc:	290b883a 	add	r5,r5,r4
     ee0:	2901002c 	andhi	r4,r5,1024
     ee4:	20000526 	beq	r4,zero,efc <__floatunsisf+0xa0>
     ee8:	00c027c4 	movi	r3,159
     eec:	1887c83a 	sub	r3,r3,r2
     ef0:	00bf0034 	movhi	r2,64512
     ef4:	10bfffc4 	addi	r2,r2,-1
     ef8:	288a703a 	and	r5,r5,r2
     efc:	280891ba 	slli	r4,r5,6
     f00:	2008d27a 	srli	r4,r4,9
     f04:	00000206 	br	f10 <__floatunsisf+0xb4>
     f08:	0007883a 	mov	r3,zero
     f0c:	0009883a 	mov	r4,zero
     f10:	18c03fcc 	andi	r3,r3,255
     f14:	180695fa 	slli	r3,r3,23
     f18:	00802034 	movhi	r2,128
     f1c:	10bfffc4 	addi	r2,r2,-1
     f20:	2084703a 	and	r2,r4,r2
     f24:	10c4b03a 	or	r2,r2,r3
     f28:	dfc00117 	ldw	ra,4(sp)
     f2c:	dc000017 	ldw	r16,0(sp)
     f30:	dec00204 	addi	sp,sp,8
     f34:	f800283a 	ret
     f38:	01400144 	movi	r5,5
     f3c:	110006c4 	addi	r4,r2,27
     f40:	8108983a 	sll	r4,r16,r4
     f44:	288dc83a 	sub	r6,r5,r2
     f48:	81a0d83a 	srl	r16,r16,r6
     f4c:	2008c03a 	cmpne	r4,r4,zero
     f50:	2420b03a 	or	r16,r4,r16
     f54:	28bfd90e 	bge	r5,r2,ebc <__alt_data_end+0xffff0ebc>
     f58:	003fd606 	br	eb4 <__alt_data_end+0xffff0eb4>
     f5c:	01402034 	movhi	r5,128
     f60:	297fffc4 	addi	r5,r5,-1
     f64:	8148703a 	and	r4,r16,r5
     f68:	003fe906 	br	f10 <__alt_data_end+0xffff0f10>

00000f6c <__gedf2>:
     f6c:	2804d53a 	srli	r2,r5,20
     f70:	3806d53a 	srli	r3,r7,20
     f74:	02000434 	movhi	r8,16
     f78:	423fffc4 	addi	r8,r8,-1
     f7c:	0241ffc4 	movi	r9,2047
     f80:	1081ffcc 	andi	r2,r2,2047
     f84:	2a14703a 	and	r10,r5,r8
     f88:	1a46703a 	and	r3,r3,r9
     f8c:	3a10703a 	and	r8,r7,r8
     f90:	280ad7fa 	srli	r5,r5,31
     f94:	380ed7fa 	srli	r7,r7,31
     f98:	12400b26 	beq	r2,r9,fc8 <__gedf2+0x5c>
     f9c:	1a401626 	beq	r3,r9,ff8 <__gedf2+0x8c>
     fa0:	10000c1e 	bne	r2,zero,fd4 <__gedf2+0x68>
     fa4:	5112b03a 	or	r9,r10,r4
     fa8:	4813003a 	cmpeq	r9,r9,zero
     fac:	4817883a 	mov	r11,r9
     fb0:	18000c1e 	bne	r3,zero,fe4 <__gedf2+0x78>
     fb4:	4198b03a 	or	r12,r8,r6
     fb8:	60000a1e 	bne	r12,zero,fe4 <__gedf2+0x78>
     fbc:	48001326 	beq	r9,zero,100c <__gedf2+0xa0>
     fc0:	0005883a 	mov	r2,zero
     fc4:	f800283a 	ret
     fc8:	5112b03a 	or	r9,r10,r4
     fcc:	4800191e 	bne	r9,zero,1034 <__gedf2+0xc8>
     fd0:	18800926 	beq	r3,r2,ff8 <__gedf2+0x8c>
     fd4:	18000b1e 	bne	r3,zero,1004 <__gedf2+0x98>
     fd8:	4192b03a 	or	r9,r8,r6
     fdc:	0017883a 	mov	r11,zero
     fe0:	48000a26 	beq	r9,zero,100c <__gedf2+0xa0>
     fe4:	39c03fcc 	andi	r7,r7,255
     fe8:	58000726 	beq	r11,zero,1008 <__gedf2+0x9c>
     fec:	3800081e 	bne	r7,zero,1010 <__gedf2+0xa4>
     ff0:	00bfffc4 	movi	r2,-1
     ff4:	f800283a 	ret
     ff8:	4192b03a 	or	r9,r8,r6
     ffc:	48000d1e 	bne	r9,zero,1034 <__gedf2+0xc8>
    1000:	103fe826 	beq	r2,zero,fa4 <__alt_data_end+0xffff0fa4>
    1004:	39c03fcc 	andi	r7,r7,255
    1008:	29c00326 	beq	r5,r7,1018 <__gedf2+0xac>
    100c:	283ff81e 	bne	r5,zero,ff0 <__alt_data_end+0xffff0ff0>
    1010:	00800044 	movi	r2,1
    1014:	f800283a 	ret
    1018:	18bffc16 	blt	r3,r2,100c <__alt_data_end+0xffff100c>
    101c:	10c00316 	blt	r2,r3,102c <__gedf2+0xc0>
    1020:	42bffa36 	bltu	r8,r10,100c <__alt_data_end+0xffff100c>
    1024:	52000526 	beq	r10,r8,103c <__gedf2+0xd0>
    1028:	523fe52e 	bgeu	r10,r8,fc0 <__alt_data_end+0xffff0fc0>
    102c:	283ff026 	beq	r5,zero,ff0 <__alt_data_end+0xffff0ff0>
    1030:	003ff706 	br	1010 <__alt_data_end+0xffff1010>
    1034:	00bfff84 	movi	r2,-2
    1038:	f800283a 	ret
    103c:	313ff336 	bltu	r6,r4,100c <__alt_data_end+0xffff100c>
    1040:	21bfdf2e 	bgeu	r4,r6,fc0 <__alt_data_end+0xffff0fc0>
    1044:	283fea26 	beq	r5,zero,ff0 <__alt_data_end+0xffff0ff0>
    1048:	003ff106 	br	1010 <__alt_data_end+0xffff1010>

0000104c <__extendsfdf2>:
    104c:	200ad5fa 	srli	r5,r4,23
    1050:	defffd04 	addi	sp,sp,-12
    1054:	dc400115 	stw	r17,4(sp)
    1058:	29403fcc 	andi	r5,r5,255
    105c:	29800044 	addi	r6,r5,1
    1060:	04402034 	movhi	r17,128
    1064:	dc000015 	stw	r16,0(sp)
    1068:	8c7fffc4 	addi	r17,r17,-1
    106c:	dfc00215 	stw	ra,8(sp)
    1070:	31803fcc 	andi	r6,r6,255
    1074:	00800044 	movi	r2,1
    1078:	8922703a 	and	r17,r17,r4
    107c:	2020d7fa 	srli	r16,r4,31
    1080:	1180110e 	bge	r2,r6,10c8 <__extendsfdf2+0x7c>
    1084:	880ed0fa 	srli	r7,r17,3
    1088:	8822977a 	slli	r17,r17,29
    108c:	2940e004 	addi	r5,r5,896
    1090:	2941ffcc 	andi	r5,r5,2047
    1094:	280c953a 	slli	r6,r5,20
    1098:	01400434 	movhi	r5,16
    109c:	800697fa 	slli	r3,r16,31
    10a0:	297fffc4 	addi	r5,r5,-1
    10a4:	394a703a 	and	r5,r7,r5
    10a8:	298ab03a 	or	r5,r5,r6
    10ac:	8805883a 	mov	r2,r17
    10b0:	28c6b03a 	or	r3,r5,r3
    10b4:	dfc00217 	ldw	ra,8(sp)
    10b8:	dc400117 	ldw	r17,4(sp)
    10bc:	dc000017 	ldw	r16,0(sp)
    10c0:	dec00304 	addi	sp,sp,12
    10c4:	f800283a 	ret
    10c8:	2800111e 	bne	r5,zero,1110 <__extendsfdf2+0xc4>
    10cc:	88001c26 	beq	r17,zero,1140 <__extendsfdf2+0xf4>
    10d0:	8809883a 	mov	r4,r17
    10d4:	000115c0 	call	115c <__clzsi2>
    10d8:	00c00284 	movi	r3,10
    10dc:	18801b16 	blt	r3,r2,114c <__extendsfdf2+0x100>
    10e0:	01c002c4 	movi	r7,11
    10e4:	388fc83a 	sub	r7,r7,r2
    10e8:	10c00544 	addi	r3,r2,21
    10ec:	89ced83a 	srl	r7,r17,r7
    10f0:	88e2983a 	sll	r17,r17,r3
    10f4:	0180e244 	movi	r6,905
    10f8:	308bc83a 	sub	r5,r6,r2
    10fc:	01800434 	movhi	r6,16
    1100:	31bfffc4 	addi	r6,r6,-1
    1104:	398e703a 	and	r7,r7,r6
    1108:	2941ffcc 	andi	r5,r5,2047
    110c:	003fe006 	br	1090 <__alt_data_end+0xffff1090>
    1110:	88000826 	beq	r17,zero,1134 <__extendsfdf2+0xe8>
    1114:	880ed0fa 	srli	r7,r17,3
    1118:	00800434 	movhi	r2,16
    111c:	10bfffc4 	addi	r2,r2,-1
    1120:	39c00234 	orhi	r7,r7,8
    1124:	8822977a 	slli	r17,r17,29
    1128:	388e703a 	and	r7,r7,r2
    112c:	0141ffc4 	movi	r5,2047
    1130:	003fd706 	br	1090 <__alt_data_end+0xffff1090>
    1134:	0141ffc4 	movi	r5,2047
    1138:	000f883a 	mov	r7,zero
    113c:	003fd406 	br	1090 <__alt_data_end+0xffff1090>
    1140:	000b883a 	mov	r5,zero
    1144:	000f883a 	mov	r7,zero
    1148:	003fd106 	br	1090 <__alt_data_end+0xffff1090>
    114c:	11fffd44 	addi	r7,r2,-11
    1150:	89ce983a 	sll	r7,r17,r7
    1154:	0023883a 	mov	r17,zero
    1158:	003fe606 	br	10f4 <__alt_data_end+0xffff10f4>

0000115c <__clzsi2>:
    115c:	00bfffd4 	movui	r2,65535
    1160:	11000b36 	bltu	r2,r4,1190 <__clzsi2+0x34>
    1164:	00803fc4 	movi	r2,255
    1168:	1100122e 	bgeu	r2,r4,11b4 <__clzsi2+0x58>
    116c:	00c00204 	movi	r3,8
    1170:	01400604 	movi	r5,24
    1174:	20c8d83a 	srl	r4,r4,r3
    1178:	00800034 	movhi	r2,0
    117c:	108b94c4 	addi	r2,r2,11859
    1180:	1109883a 	add	r4,r2,r4
    1184:	20800003 	ldbu	r2,0(r4)
    1188:	2885c83a 	sub	r2,r5,r2
    118c:	f800283a 	ret
    1190:	00804034 	movhi	r2,256
    1194:	10bfffc4 	addi	r2,r2,-1
    1198:	11000336 	bltu	r2,r4,11a8 <__clzsi2+0x4c>
    119c:	00c00404 	movi	r3,16
    11a0:	180b883a 	mov	r5,r3
    11a4:	003ff306 	br	1174 <__alt_data_end+0xffff1174>
    11a8:	00c00604 	movi	r3,24
    11ac:	01400204 	movi	r5,8
    11b0:	003ff006 	br	1174 <__alt_data_end+0xffff1174>
    11b4:	0007883a 	mov	r3,zero
    11b8:	01400804 	movi	r5,32
    11bc:	003fed06 	br	1174 <__alt_data_end+0xffff1174>

000011c0 <clock>:
    11c0:	00800034 	movhi	r2,0
    11c4:	10902204 	addi	r2,r2,16520
    11c8:	11000017 	ldw	r4,0(r2)
    11cc:	defffb04 	addi	sp,sp,-20
    11d0:	d80b883a 	mov	r5,sp
    11d4:	dfc00415 	stw	ra,16(sp)
    11d8:	00014280 	call	1428 <_times_r>
    11dc:	00ffffc4 	movi	r3,-1
    11e0:	10c00726 	beq	r2,r3,1200 <clock+0x40>
    11e4:	d8c00117 	ldw	r3,4(sp)
    11e8:	d8800017 	ldw	r2,0(sp)
    11ec:	1885883a 	add	r2,r3,r2
    11f0:	d8c00217 	ldw	r3,8(sp)
    11f4:	10c5883a 	add	r2,r2,r3
    11f8:	d8c00317 	ldw	r3,12(sp)
    11fc:	10c5883a 	add	r2,r2,r3
    1200:	dfc00417 	ldw	ra,16(sp)
    1204:	dec00504 	addi	sp,sp,20
    1208:	f800283a 	ret

0000120c <_printf_r>:
    120c:	defffd04 	addi	sp,sp,-12
    1210:	dfc00015 	stw	ra,0(sp)
    1214:	d9800115 	stw	r6,4(sp)
    1218:	d9c00215 	stw	r7,8(sp)
    121c:	20c00217 	ldw	r3,8(r4)
    1220:	280d883a 	mov	r6,r5
    1224:	01400034 	movhi	r5,0
    1228:	29468b04 	addi	r5,r5,6700
    122c:	19400115 	stw	r5,4(r3)
    1230:	21400217 	ldw	r5,8(r4)
    1234:	d9c00104 	addi	r7,sp,4
    1238:	000149c0 	call	149c <___vfprintf_internal_r>
    123c:	dfc00017 	ldw	ra,0(sp)
    1240:	dec00304 	addi	sp,sp,12
    1244:	f800283a 	ret

00001248 <printf>:
    1248:	defffc04 	addi	sp,sp,-16
    124c:	dfc00015 	stw	ra,0(sp)
    1250:	d9400115 	stw	r5,4(sp)
    1254:	d9800215 	stw	r6,8(sp)
    1258:	d9c00315 	stw	r7,12(sp)
    125c:	00800034 	movhi	r2,0
    1260:	10902204 	addi	r2,r2,16520
    1264:	10800017 	ldw	r2,0(r2)
    1268:	200b883a 	mov	r5,r4
    126c:	01000034 	movhi	r4,0
    1270:	10c00217 	ldw	r3,8(r2)
    1274:	21068b04 	addi	r4,r4,6700
    1278:	d9800104 	addi	r6,sp,4
    127c:	19000115 	stw	r4,4(r3)
    1280:	11000217 	ldw	r4,8(r2)
    1284:	0001a080 	call	1a08 <__vfprintf_internal>
    1288:	dfc00017 	ldw	ra,0(sp)
    128c:	dec00404 	addi	sp,sp,16
    1290:	f800283a 	ret

00001294 <_putchar_r>:
    1294:	21800217 	ldw	r6,8(r4)
    1298:	0001b801 	jmpi	1b80 <_putc_r>

0000129c <putchar>:
    129c:	00800034 	movhi	r2,0
    12a0:	10902204 	addi	r2,r2,16520
    12a4:	200b883a 	mov	r5,r4
    12a8:	11000017 	ldw	r4,0(r2)
    12ac:	21800217 	ldw	r6,8(r4)
    12b0:	0001b801 	jmpi	1b80 <_putc_r>

000012b4 <_puts_r>:
    12b4:	defffd04 	addi	sp,sp,-12
    12b8:	dc000015 	stw	r16,0(sp)
    12bc:	2021883a 	mov	r16,r4
    12c0:	2809883a 	mov	r4,r5
    12c4:	dfc00215 	stw	ra,8(sp)
    12c8:	dc400115 	stw	r17,4(sp)
    12cc:	2823883a 	mov	r17,r5
    12d0:	00013bc0 	call	13bc <strlen>
    12d4:	81400217 	ldw	r5,8(r16)
    12d8:	00c00034 	movhi	r3,0
    12dc:	18c68b04 	addi	r3,r3,6700
    12e0:	28c00115 	stw	r3,4(r5)
    12e4:	8009883a 	mov	r4,r16
    12e8:	880d883a 	mov	r6,r17
    12ec:	100f883a 	mov	r7,r2
    12f0:	0001a2c0 	call	1a2c <__sfvwrite_small_dev>
    12f4:	00ffffc4 	movi	r3,-1
    12f8:	10c00926 	beq	r2,r3,1320 <_puts_r+0x6c>
    12fc:	81400217 	ldw	r5,8(r16)
    1300:	01800034 	movhi	r6,0
    1304:	8009883a 	mov	r4,r16
    1308:	28800117 	ldw	r2,4(r5)
    130c:	318bd504 	addi	r6,r6,12116
    1310:	01c00044 	movi	r7,1
    1314:	103ee83a 	callr	r2
    1318:	10bfffe0 	cmpeqi	r2,r2,-1
    131c:	0085c83a 	sub	r2,zero,r2
    1320:	dfc00217 	ldw	ra,8(sp)
    1324:	dc400117 	ldw	r17,4(sp)
    1328:	dc000017 	ldw	r16,0(sp)
    132c:	dec00304 	addi	sp,sp,12
    1330:	f800283a 	ret

00001334 <puts>:
    1334:	00800034 	movhi	r2,0
    1338:	10902204 	addi	r2,r2,16520
    133c:	200b883a 	mov	r5,r4
    1340:	11000017 	ldw	r4,0(r2)
    1344:	00012b41 	jmpi	12b4 <_puts_r>

00001348 <srand>:
    1348:	00800034 	movhi	r2,0
    134c:	10947d04 	addi	r2,r2,20980
    1350:	11000015 	stw	r4,0(r2)
    1354:	10000115 	stw	zero,4(r2)
    1358:	f800283a 	ret

0000135c <rand>:
    135c:	defffe04 	addi	sp,sp,-8
    1360:	dc000015 	stw	r16,0(sp)
    1364:	04000034 	movhi	r16,0
    1368:	84147d04 	addi	r16,r16,20980
    136c:	81000017 	ldw	r4,0(r16)
    1370:	81400117 	ldw	r5,4(r16)
    1374:	01932574 	movhi	r6,19605
    1378:	01d614b4 	movhi	r7,22610
    137c:	319fcb44 	addi	r6,r6,32557
    1380:	39fd0b44 	addi	r7,r7,-3027
    1384:	dfc00115 	stw	ra,4(sp)
    1388:	0001c300 	call	1c30 <__muldi3>
    138c:	11000044 	addi	r4,r2,1
    1390:	2085803a 	cmpltu	r2,r4,r2
    1394:	10c7883a 	add	r3,r2,r3
    1398:	00a00034 	movhi	r2,32768
    139c:	10bfffc4 	addi	r2,r2,-1
    13a0:	1884703a 	and	r2,r3,r2
    13a4:	81000015 	stw	r4,0(r16)
    13a8:	80c00115 	stw	r3,4(r16)
    13ac:	dfc00117 	ldw	ra,4(sp)
    13b0:	dc000017 	ldw	r16,0(sp)
    13b4:	dec00204 	addi	sp,sp,8
    13b8:	f800283a 	ret

000013bc <strlen>:
    13bc:	2005883a 	mov	r2,r4
    13c0:	10c00007 	ldb	r3,0(r2)
    13c4:	18000226 	beq	r3,zero,13d0 <strlen+0x14>
    13c8:	10800044 	addi	r2,r2,1
    13cc:	003ffc06 	br	13c0 <__alt_data_end+0xffff13c0>
    13d0:	1105c83a 	sub	r2,r2,r4
    13d4:	f800283a 	ret

000013d8 <time>:
    13d8:	00800034 	movhi	r2,0
    13dc:	defffc04 	addi	sp,sp,-16
    13e0:	10902204 	addi	r2,r2,16520
    13e4:	dc000215 	stw	r16,8(sp)
    13e8:	2021883a 	mov	r16,r4
    13ec:	11000017 	ldw	r4,0(r2)
    13f0:	d80b883a 	mov	r5,sp
    13f4:	000d883a 	mov	r6,zero
    13f8:	dfc00315 	stw	ra,12(sp)
    13fc:	0001ad80 	call	1ad8 <_gettimeofday_r>
    1400:	10000416 	blt	r2,zero,1414 <time+0x3c>
    1404:	d8800017 	ldw	r2,0(sp)
    1408:	80000326 	beq	r16,zero,1418 <time+0x40>
    140c:	80800015 	stw	r2,0(r16)
    1410:	00000106 	br	1418 <time+0x40>
    1414:	00bfffc4 	movi	r2,-1
    1418:	dfc00317 	ldw	ra,12(sp)
    141c:	dc000217 	ldw	r16,8(sp)
    1420:	dec00404 	addi	sp,sp,16
    1424:	f800283a 	ret

00001428 <_times_r>:
    1428:	2809883a 	mov	r4,r5
    142c:	00021181 	jmpi	2118 <times>

00001430 <print_repeat>:
    1430:	defffb04 	addi	sp,sp,-20
    1434:	dc800315 	stw	r18,12(sp)
    1438:	dc400215 	stw	r17,8(sp)
    143c:	dc000115 	stw	r16,4(sp)
    1440:	dfc00415 	stw	ra,16(sp)
    1444:	2025883a 	mov	r18,r4
    1448:	2823883a 	mov	r17,r5
    144c:	d9800005 	stb	r6,0(sp)
    1450:	3821883a 	mov	r16,r7
    1454:	04000a0e 	bge	zero,r16,1480 <print_repeat+0x50>
    1458:	88800117 	ldw	r2,4(r17)
    145c:	9009883a 	mov	r4,r18
    1460:	880b883a 	mov	r5,r17
    1464:	d80d883a 	mov	r6,sp
    1468:	01c00044 	movi	r7,1
    146c:	103ee83a 	callr	r2
    1470:	843fffc4 	addi	r16,r16,-1
    1474:	103ff726 	beq	r2,zero,1454 <__alt_data_end+0xffff1454>
    1478:	00bfffc4 	movi	r2,-1
    147c:	00000106 	br	1484 <print_repeat+0x54>
    1480:	0005883a 	mov	r2,zero
    1484:	dfc00417 	ldw	ra,16(sp)
    1488:	dc800317 	ldw	r18,12(sp)
    148c:	dc400217 	ldw	r17,8(sp)
    1490:	dc000117 	ldw	r16,4(sp)
    1494:	dec00504 	addi	sp,sp,20
    1498:	f800283a 	ret

0000149c <___vfprintf_internal_r>:
    149c:	deffe304 	addi	sp,sp,-116
    14a0:	d8c00804 	addi	r3,sp,32
    14a4:	df001b15 	stw	fp,108(sp)
    14a8:	ddc01a15 	stw	r23,104(sp)
    14ac:	dd801915 	stw	r22,100(sp)
    14b0:	dd401815 	stw	r21,96(sp)
    14b4:	dd001715 	stw	r20,92(sp)
    14b8:	dcc01615 	stw	r19,88(sp)
    14bc:	dc801515 	stw	r18,84(sp)
    14c0:	dc401415 	stw	r17,80(sp)
    14c4:	dc001315 	stw	r16,76(sp)
    14c8:	dfc01c15 	stw	ra,112(sp)
    14cc:	2029883a 	mov	r20,r4
    14d0:	2823883a 	mov	r17,r5
    14d4:	3839883a 	mov	fp,r7
    14d8:	d9800f15 	stw	r6,60(sp)
    14dc:	0021883a 	mov	r16,zero
    14e0:	d8000e15 	stw	zero,56(sp)
    14e4:	002f883a 	mov	r23,zero
    14e8:	002b883a 	mov	r21,zero
    14ec:	0027883a 	mov	r19,zero
    14f0:	0025883a 	mov	r18,zero
    14f4:	d8000c15 	stw	zero,48(sp)
    14f8:	d8000b15 	stw	zero,44(sp)
    14fc:	002d883a 	mov	r22,zero
    1500:	d8c00915 	stw	r3,36(sp)
    1504:	d8c00f17 	ldw	r3,60(sp)
    1508:	19000003 	ldbu	r4,0(r3)
    150c:	20803fcc 	andi	r2,r4,255
    1510:	1080201c 	xori	r2,r2,128
    1514:	10bfe004 	addi	r2,r2,-128
    1518:	10012e26 	beq	r2,zero,19d4 <___vfprintf_internal_r+0x538>
    151c:	01400044 	movi	r5,1
    1520:	b1401426 	beq	r22,r5,1574 <___vfprintf_internal_r+0xd8>
    1524:	2d800216 	blt	r5,r22,1530 <___vfprintf_internal_r+0x94>
    1528:	b0000626 	beq	r22,zero,1544 <___vfprintf_internal_r+0xa8>
    152c:	00012506 	br	19c4 <___vfprintf_internal_r+0x528>
    1530:	01400084 	movi	r5,2
    1534:	b1401d26 	beq	r22,r5,15ac <___vfprintf_internal_r+0x110>
    1538:	014000c4 	movi	r5,3
    153c:	b1402b26 	beq	r22,r5,15ec <___vfprintf_internal_r+0x150>
    1540:	00012006 	br	19c4 <___vfprintf_internal_r+0x528>
    1544:	01400944 	movi	r5,37
    1548:	11410d26 	beq	r2,r5,1980 <___vfprintf_internal_r+0x4e4>
    154c:	88800117 	ldw	r2,4(r17)
    1550:	d9000005 	stb	r4,0(sp)
    1554:	880b883a 	mov	r5,r17
    1558:	a009883a 	mov	r4,r20
    155c:	d80d883a 	mov	r6,sp
    1560:	01c00044 	movi	r7,1
    1564:	103ee83a 	callr	r2
    1568:	1000e81e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    156c:	84000044 	addi	r16,r16,1
    1570:	00011406 	br	19c4 <___vfprintf_internal_r+0x528>
    1574:	01400c04 	movi	r5,48
    1578:	11410a26 	beq	r2,r5,19a4 <___vfprintf_internal_r+0x508>
    157c:	01400944 	movi	r5,37
    1580:	11400a1e 	bne	r2,r5,15ac <___vfprintf_internal_r+0x110>
    1584:	d8800005 	stb	r2,0(sp)
    1588:	88800117 	ldw	r2,4(r17)
    158c:	a009883a 	mov	r4,r20
    1590:	880b883a 	mov	r5,r17
    1594:	d80d883a 	mov	r6,sp
    1598:	b00f883a 	mov	r7,r22
    159c:	103ee83a 	callr	r2
    15a0:	1000da1e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    15a4:	84000044 	addi	r16,r16,1
    15a8:	00010506 	br	19c0 <___vfprintf_internal_r+0x524>
    15ac:	25bff404 	addi	r22,r4,-48
    15b0:	b5803fcc 	andi	r22,r22,255
    15b4:	00c00244 	movi	r3,9
    15b8:	1d800936 	bltu	r3,r22,15e0 <___vfprintf_internal_r+0x144>
    15bc:	00bfffc4 	movi	r2,-1
    15c0:	90800426 	beq	r18,r2,15d4 <___vfprintf_internal_r+0x138>
    15c4:	9009883a 	mov	r4,r18
    15c8:	01400284 	movi	r5,10
    15cc:	00009e40 	call	9e4 <__mulsi3>
    15d0:	00000106 	br	15d8 <___vfprintf_internal_r+0x13c>
    15d4:	0005883a 	mov	r2,zero
    15d8:	15a5883a 	add	r18,r2,r22
    15dc:	0000f206 	br	19a8 <___vfprintf_internal_r+0x50c>
    15e0:	01400b84 	movi	r5,46
    15e4:	1140f426 	beq	r2,r5,19b8 <___vfprintf_internal_r+0x51c>
    15e8:	05800084 	movi	r22,2
    15ec:	213ff404 	addi	r4,r4,-48
    15f0:	20c03fcc 	andi	r3,r4,255
    15f4:	01000244 	movi	r4,9
    15f8:	20c00b36 	bltu	r4,r3,1628 <___vfprintf_internal_r+0x18c>
    15fc:	00bfffc4 	movi	r2,-1
    1600:	98800626 	beq	r19,r2,161c <___vfprintf_internal_r+0x180>
    1604:	9809883a 	mov	r4,r19
    1608:	01400284 	movi	r5,10
    160c:	d8c01115 	stw	r3,68(sp)
    1610:	00009e40 	call	9e4 <__mulsi3>
    1614:	d8c01117 	ldw	r3,68(sp)
    1618:	00000106 	br	1620 <___vfprintf_internal_r+0x184>
    161c:	0005883a 	mov	r2,zero
    1620:	10e7883a 	add	r19,r2,r3
    1624:	0000e706 	br	19c4 <___vfprintf_internal_r+0x528>
    1628:	01401b04 	movi	r5,108
    162c:	1140e026 	beq	r2,r5,19b0 <___vfprintf_internal_r+0x514>
    1630:	013fffc4 	movi	r4,-1
    1634:	99000226 	beq	r19,r4,1640 <___vfprintf_internal_r+0x1a4>
    1638:	d8000b15 	stw	zero,44(sp)
    163c:	00000106 	br	1644 <___vfprintf_internal_r+0x1a8>
    1640:	04c00044 	movi	r19,1
    1644:	01001a44 	movi	r4,105
    1648:	11001626 	beq	r2,r4,16a4 <___vfprintf_internal_r+0x208>
    164c:	20800916 	blt	r4,r2,1674 <___vfprintf_internal_r+0x1d8>
    1650:	010018c4 	movi	r4,99
    1654:	11009626 	beq	r2,r4,18b0 <___vfprintf_internal_r+0x414>
    1658:	01001904 	movi	r4,100
    165c:	11001126 	beq	r2,r4,16a4 <___vfprintf_internal_r+0x208>
    1660:	01001604 	movi	r4,88
    1664:	1100d61e 	bne	r2,r4,19c0 <___vfprintf_internal_r+0x524>
    1668:	00c00044 	movi	r3,1
    166c:	d8c00e15 	stw	r3,56(sp)
    1670:	00001406 	br	16c4 <___vfprintf_internal_r+0x228>
    1674:	01001cc4 	movi	r4,115
    1678:	1100a626 	beq	r2,r4,1914 <___vfprintf_internal_r+0x478>
    167c:	20800416 	blt	r4,r2,1690 <___vfprintf_internal_r+0x1f4>
    1680:	01001bc4 	movi	r4,111
    1684:	1100ce1e 	bne	r2,r4,19c0 <___vfprintf_internal_r+0x524>
    1688:	05400204 	movi	r21,8
    168c:	00000e06 	br	16c8 <___vfprintf_internal_r+0x22c>
    1690:	01001d44 	movi	r4,117
    1694:	11000c26 	beq	r2,r4,16c8 <___vfprintf_internal_r+0x22c>
    1698:	01001e04 	movi	r4,120
    169c:	11000926 	beq	r2,r4,16c4 <___vfprintf_internal_r+0x228>
    16a0:	0000c706 	br	19c0 <___vfprintf_internal_r+0x524>
    16a4:	e0800104 	addi	r2,fp,4
    16a8:	b8000726 	beq	r23,zero,16c8 <___vfprintf_internal_r+0x22c>
    16ac:	d8800d15 	stw	r2,52(sp)
    16b0:	e7000017 	ldw	fp,0(fp)
    16b4:	e000080e 	bge	fp,zero,16d8 <___vfprintf_internal_r+0x23c>
    16b8:	0739c83a 	sub	fp,zero,fp
    16bc:	02000044 	movi	r8,1
    16c0:	00000606 	br	16dc <___vfprintf_internal_r+0x240>
    16c4:	05400404 	movi	r21,16
    16c8:	e0c00104 	addi	r3,fp,4
    16cc:	d8c00d15 	stw	r3,52(sp)
    16d0:	e7000017 	ldw	fp,0(fp)
    16d4:	002f883a 	mov	r23,zero
    16d8:	0011883a 	mov	r8,zero
    16dc:	002d883a 	mov	r22,zero
    16e0:	dd87883a 	add	r3,sp,r22
    16e4:	e0001a26 	beq	fp,zero,1750 <___vfprintf_internal_r+0x2b4>
    16e8:	e009883a 	mov	r4,fp
    16ec:	a80b883a 	mov	r5,r21
    16f0:	d8c01115 	stw	r3,68(sp)
    16f4:	da001215 	stw	r8,72(sp)
    16f8:	00009d40 	call	9d4 <__udivsi3>
    16fc:	a809883a 	mov	r4,r21
    1700:	100b883a 	mov	r5,r2
    1704:	d8801015 	stw	r2,64(sp)
    1708:	00009e40 	call	9e4 <__mulsi3>
    170c:	e085c83a 	sub	r2,fp,r2
    1710:	01000244 	movi	r4,9
    1714:	d8c01117 	ldw	r3,68(sp)
    1718:	d9801017 	ldw	r6,64(sp)
    171c:	da001217 	ldw	r8,72(sp)
    1720:	20800216 	blt	r4,r2,172c <___vfprintf_internal_r+0x290>
    1724:	17000c04 	addi	fp,r2,48
    1728:	00000506 	br	1740 <___vfprintf_internal_r+0x2a4>
    172c:	d9400e17 	ldw	r5,56(sp)
    1730:	28000226 	beq	r5,zero,173c <___vfprintf_internal_r+0x2a0>
    1734:	17000dc4 	addi	fp,r2,55
    1738:	00000106 	br	1740 <___vfprintf_internal_r+0x2a4>
    173c:	170015c4 	addi	fp,r2,87
    1740:	1f000005 	stb	fp,0(r3)
    1744:	b5800044 	addi	r22,r22,1
    1748:	3039883a 	mov	fp,r6
    174c:	003fe406 	br	16e0 <__alt_data_end+0xffff16e0>
    1750:	1ec5c83a 	sub	r2,r3,sp
    1754:	d8800a15 	stw	r2,40(sp)
    1758:	9885c83a 	sub	r2,r19,r2
    175c:	1839883a 	mov	fp,r3
    1760:	00800e0e 	bge	zero,r2,179c <___vfprintf_internal_r+0x300>
    1764:	182d883a 	mov	r22,r3
    1768:	1885883a 	add	r2,r3,r2
    176c:	01000c04 	movi	r4,48
    1770:	d9400917 	ldw	r5,36(sp)
    1774:	b007883a 	mov	r3,r22
    1778:	b140052e 	bgeu	r22,r5,1790 <___vfprintf_internal_r+0x2f4>
    177c:	b5800044 	addi	r22,r22,1
    1780:	19000005 	stb	r4,0(r3)
    1784:	b039883a 	mov	fp,r22
    1788:	b0bff91e 	bne	r22,r2,1770 <__alt_data_end+0xffff1770>
    178c:	00000106 	br	1794 <___vfprintf_internal_r+0x2f8>
    1790:	b039883a 	mov	fp,r22
    1794:	b6edc83a 	sub	r22,r22,sp
    1798:	dd800a15 	stw	r22,40(sp)
    179c:	d8800a17 	ldw	r2,40(sp)
    17a0:	1207883a 	add	r3,r2,r8
    17a4:	90edc83a 	sub	r22,r18,r3
    17a8:	d8c00b17 	ldw	r3,44(sp)
    17ac:	18001726 	beq	r3,zero,180c <___vfprintf_internal_r+0x370>
    17b0:	40000a26 	beq	r8,zero,17dc <___vfprintf_internal_r+0x340>
    17b4:	00800b44 	movi	r2,45
    17b8:	d8800805 	stb	r2,32(sp)
    17bc:	88800117 	ldw	r2,4(r17)
    17c0:	a009883a 	mov	r4,r20
    17c4:	880b883a 	mov	r5,r17
    17c8:	d9800804 	addi	r6,sp,32
    17cc:	01c00044 	movi	r7,1
    17d0:	103ee83a 	callr	r2
    17d4:	10004d1e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    17d8:	84000044 	addi	r16,r16,1
    17dc:	0580070e 	bge	zero,r22,17fc <___vfprintf_internal_r+0x360>
    17e0:	a009883a 	mov	r4,r20
    17e4:	880b883a 	mov	r5,r17
    17e8:	01800c04 	movi	r6,48
    17ec:	b00f883a 	mov	r7,r22
    17f0:	00014300 	call	1430 <print_repeat>
    17f4:	1000451e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    17f8:	85a1883a 	add	r16,r16,r22
    17fc:	d9000a17 	ldw	r4,40(sp)
    1800:	e007883a 	mov	r3,fp
    1804:	272dc83a 	sub	r22,r4,fp
    1808:	00002206 	br	1894 <___vfprintf_internal_r+0x3f8>
    180c:	0580090e 	bge	zero,r22,1834 <___vfprintf_internal_r+0x398>
    1810:	a009883a 	mov	r4,r20
    1814:	880b883a 	mov	r5,r17
    1818:	01800804 	movi	r6,32
    181c:	b00f883a 	mov	r7,r22
    1820:	da001215 	stw	r8,72(sp)
    1824:	00014300 	call	1430 <print_repeat>
    1828:	da001217 	ldw	r8,72(sp)
    182c:	1000371e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    1830:	85a1883a 	add	r16,r16,r22
    1834:	403ff126 	beq	r8,zero,17fc <__alt_data_end+0xffff17fc>
    1838:	00800b44 	movi	r2,45
    183c:	d8800805 	stb	r2,32(sp)
    1840:	88800117 	ldw	r2,4(r17)
    1844:	a009883a 	mov	r4,r20
    1848:	880b883a 	mov	r5,r17
    184c:	d9800804 	addi	r6,sp,32
    1850:	01c00044 	movi	r7,1
    1854:	103ee83a 	callr	r2
    1858:	10002c1e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    185c:	84000044 	addi	r16,r16,1
    1860:	003fe606 	br	17fc <__alt_data_end+0xffff17fc>
    1864:	18ffffc4 	addi	r3,r3,-1
    1868:	18800003 	ldbu	r2,0(r3)
    186c:	a009883a 	mov	r4,r20
    1870:	d8c01115 	stw	r3,68(sp)
    1874:	d8800805 	stb	r2,32(sp)
    1878:	88800117 	ldw	r2,4(r17)
    187c:	880b883a 	mov	r5,r17
    1880:	d9800804 	addi	r6,sp,32
    1884:	01c00044 	movi	r7,1
    1888:	103ee83a 	callr	r2
    188c:	d8c01117 	ldw	r3,68(sp)
    1890:	10001e1e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    1894:	80c5c83a 	sub	r2,r16,r3
    1898:	1d89883a 	add	r4,r3,r22
    189c:	e085883a 	add	r2,fp,r2
    18a0:	013ff016 	blt	zero,r4,1864 <__alt_data_end+0xffff1864>
    18a4:	1021883a 	mov	r16,r2
    18a8:	df000d17 	ldw	fp,52(sp)
    18ac:	00004406 	br	19c0 <___vfprintf_internal_r+0x524>
    18b0:	01000044 	movi	r4,1
    18b4:	2480080e 	bge	r4,r18,18d8 <___vfprintf_internal_r+0x43c>
    18b8:	95bfffc4 	addi	r22,r18,-1
    18bc:	a009883a 	mov	r4,r20
    18c0:	880b883a 	mov	r5,r17
    18c4:	01800804 	movi	r6,32
    18c8:	b00f883a 	mov	r7,r22
    18cc:	00014300 	call	1430 <print_repeat>
    18d0:	10000e1e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    18d4:	85a1883a 	add	r16,r16,r22
    18d8:	e0800017 	ldw	r2,0(fp)
    18dc:	a009883a 	mov	r4,r20
    18e0:	880b883a 	mov	r5,r17
    18e4:	d8800005 	stb	r2,0(sp)
    18e8:	88800117 	ldw	r2,4(r17)
    18ec:	d80d883a 	mov	r6,sp
    18f0:	01c00044 	movi	r7,1
    18f4:	e5800104 	addi	r22,fp,4
    18f8:	103ee83a 	callr	r2
    18fc:	1000031e 	bne	r2,zero,190c <___vfprintf_internal_r+0x470>
    1900:	84000044 	addi	r16,r16,1
    1904:	b039883a 	mov	fp,r22
    1908:	00002d06 	br	19c0 <___vfprintf_internal_r+0x524>
    190c:	00bfffc4 	movi	r2,-1
    1910:	00003106 	br	19d8 <___vfprintf_internal_r+0x53c>
    1914:	e5800017 	ldw	r22,0(fp)
    1918:	e0c00104 	addi	r3,fp,4
    191c:	d8c00a15 	stw	r3,40(sp)
    1920:	b009883a 	mov	r4,r22
    1924:	00013bc0 	call	13bc <strlen>
    1928:	9091c83a 	sub	r8,r18,r2
    192c:	1039883a 	mov	fp,r2
    1930:	0200090e 	bge	zero,r8,1958 <___vfprintf_internal_r+0x4bc>
    1934:	400f883a 	mov	r7,r8
    1938:	a009883a 	mov	r4,r20
    193c:	880b883a 	mov	r5,r17
    1940:	01800804 	movi	r6,32
    1944:	da001215 	stw	r8,72(sp)
    1948:	00014300 	call	1430 <print_repeat>
    194c:	da001217 	ldw	r8,72(sp)
    1950:	103fee1e 	bne	r2,zero,190c <__alt_data_end+0xffff190c>
    1954:	8221883a 	add	r16,r16,r8
    1958:	88800117 	ldw	r2,4(r17)
    195c:	a009883a 	mov	r4,r20
    1960:	880b883a 	mov	r5,r17
    1964:	b00d883a 	mov	r6,r22
    1968:	e00f883a 	mov	r7,fp
    196c:	103ee83a 	callr	r2
    1970:	103fe61e 	bne	r2,zero,190c <__alt_data_end+0xffff190c>
    1974:	8721883a 	add	r16,r16,fp
    1978:	df000a17 	ldw	fp,40(sp)
    197c:	00001006 	br	19c0 <___vfprintf_internal_r+0x524>
    1980:	05c00044 	movi	r23,1
    1984:	04ffffc4 	movi	r19,-1
    1988:	d8000e15 	stw	zero,56(sp)
    198c:	05400284 	movi	r21,10
    1990:	9825883a 	mov	r18,r19
    1994:	d8000c15 	stw	zero,48(sp)
    1998:	d8000b15 	stw	zero,44(sp)
    199c:	b82d883a 	mov	r22,r23
    19a0:	00000806 	br	19c4 <___vfprintf_internal_r+0x528>
    19a4:	dd800b15 	stw	r22,44(sp)
    19a8:	05800084 	movi	r22,2
    19ac:	00000506 	br	19c4 <___vfprintf_internal_r+0x528>
    19b0:	00c00044 	movi	r3,1
    19b4:	d8c00c15 	stw	r3,48(sp)
    19b8:	058000c4 	movi	r22,3
    19bc:	00000106 	br	19c4 <___vfprintf_internal_r+0x528>
    19c0:	002d883a 	mov	r22,zero
    19c4:	d8c00f17 	ldw	r3,60(sp)
    19c8:	18c00044 	addi	r3,r3,1
    19cc:	d8c00f15 	stw	r3,60(sp)
    19d0:	003ecc06 	br	1504 <__alt_data_end+0xffff1504>
    19d4:	8005883a 	mov	r2,r16
    19d8:	dfc01c17 	ldw	ra,112(sp)
    19dc:	df001b17 	ldw	fp,108(sp)
    19e0:	ddc01a17 	ldw	r23,104(sp)
    19e4:	dd801917 	ldw	r22,100(sp)
    19e8:	dd401817 	ldw	r21,96(sp)
    19ec:	dd001717 	ldw	r20,92(sp)
    19f0:	dcc01617 	ldw	r19,88(sp)
    19f4:	dc801517 	ldw	r18,84(sp)
    19f8:	dc401417 	ldw	r17,80(sp)
    19fc:	dc001317 	ldw	r16,76(sp)
    1a00:	dec01d04 	addi	sp,sp,116
    1a04:	f800283a 	ret

00001a08 <__vfprintf_internal>:
    1a08:	2007883a 	mov	r3,r4
    1a0c:	01000034 	movhi	r4,0
    1a10:	21102204 	addi	r4,r4,16520
    1a14:	21000017 	ldw	r4,0(r4)
    1a18:	2805883a 	mov	r2,r5
    1a1c:	300f883a 	mov	r7,r6
    1a20:	180b883a 	mov	r5,r3
    1a24:	100d883a 	mov	r6,r2
    1a28:	000149c1 	jmpi	149c <___vfprintf_internal_r>

00001a2c <__sfvwrite_small_dev>:
    1a2c:	2880000b 	ldhu	r2,0(r5)
    1a30:	defffa04 	addi	sp,sp,-24
    1a34:	dc000015 	stw	r16,0(sp)
    1a38:	dfc00515 	stw	ra,20(sp)
    1a3c:	dd000415 	stw	r20,16(sp)
    1a40:	dcc00315 	stw	r19,12(sp)
    1a44:	dc800215 	stw	r18,8(sp)
    1a48:	dc400115 	stw	r17,4(sp)
    1a4c:	1080020c 	andi	r2,r2,8
    1a50:	2821883a 	mov	r16,r5
    1a54:	10001726 	beq	r2,zero,1ab4 <__sfvwrite_small_dev+0x88>
    1a58:	2880008f 	ldh	r2,2(r5)
    1a5c:	10001216 	blt	r2,zero,1aa8 <__sfvwrite_small_dev+0x7c>
    1a60:	2027883a 	mov	r19,r4
    1a64:	3025883a 	mov	r18,r6
    1a68:	3823883a 	mov	r17,r7
    1a6c:	05010004 	movi	r20,1024
    1a70:	04400b0e 	bge	zero,r17,1aa0 <__sfvwrite_small_dev+0x74>
    1a74:	8140008f 	ldh	r5,2(r16)
    1a78:	880f883a 	mov	r7,r17
    1a7c:	a440010e 	bge	r20,r17,1a84 <__sfvwrite_small_dev+0x58>
    1a80:	01c10004 	movi	r7,1024
    1a84:	9809883a 	mov	r4,r19
    1a88:	900d883a 	mov	r6,r18
    1a8c:	0001bd80 	call	1bd8 <_write_r>
    1a90:	0080050e 	bge	zero,r2,1aa8 <__sfvwrite_small_dev+0x7c>
    1a94:	88a3c83a 	sub	r17,r17,r2
    1a98:	90a5883a 	add	r18,r18,r2
    1a9c:	003ff406 	br	1a70 <__alt_data_end+0xffff1a70>
    1aa0:	0005883a 	mov	r2,zero
    1aa4:	00000406 	br	1ab8 <__sfvwrite_small_dev+0x8c>
    1aa8:	8080000b 	ldhu	r2,0(r16)
    1aac:	10801014 	ori	r2,r2,64
    1ab0:	8080000d 	sth	r2,0(r16)
    1ab4:	00bfffc4 	movi	r2,-1
    1ab8:	dfc00517 	ldw	ra,20(sp)
    1abc:	dd000417 	ldw	r20,16(sp)
    1ac0:	dcc00317 	ldw	r19,12(sp)
    1ac4:	dc800217 	ldw	r18,8(sp)
    1ac8:	dc400117 	ldw	r17,4(sp)
    1acc:	dc000017 	ldw	r16,0(sp)
    1ad0:	dec00604 	addi	sp,sp,24
    1ad4:	f800283a 	ret

00001ad8 <_gettimeofday_r>:
    1ad8:	defffd04 	addi	sp,sp,-12
    1adc:	dc000015 	stw	r16,0(sp)
    1ae0:	04000034 	movhi	r16,0
    1ae4:	dc400115 	stw	r17,4(sp)
    1ae8:	84147f04 	addi	r16,r16,20988
    1aec:	2023883a 	mov	r17,r4
    1af0:	2809883a 	mov	r4,r5
    1af4:	300b883a 	mov	r5,r6
    1af8:	dfc00215 	stw	ra,8(sp)
    1afc:	80000015 	stw	zero,0(r16)
    1b00:	0001d3c0 	call	1d3c <gettimeofday>
    1b04:	00ffffc4 	movi	r3,-1
    1b08:	10c0031e 	bne	r2,r3,1b18 <_gettimeofday_r+0x40>
    1b0c:	80c00017 	ldw	r3,0(r16)
    1b10:	18000126 	beq	r3,zero,1b18 <_gettimeofday_r+0x40>
    1b14:	88c00015 	stw	r3,0(r17)
    1b18:	dfc00217 	ldw	ra,8(sp)
    1b1c:	dc400117 	ldw	r17,4(sp)
    1b20:	dc000017 	ldw	r16,0(sp)
    1b24:	dec00304 	addi	sp,sp,12
    1b28:	f800283a 	ret

00001b2c <putc>:
    1b2c:	defffd04 	addi	sp,sp,-12
    1b30:	00800034 	movhi	r2,0
    1b34:	dc000115 	stw	r16,4(sp)
    1b38:	dfc00215 	stw	ra,8(sp)
    1b3c:	10868b04 	addi	r2,r2,6700
    1b40:	28800115 	stw	r2,4(r5)
    1b44:	00800034 	movhi	r2,0
    1b48:	10902204 	addi	r2,r2,16520
    1b4c:	d9000005 	stb	r4,0(sp)
    1b50:	2021883a 	mov	r16,r4
    1b54:	11000017 	ldw	r4,0(r2)
    1b58:	d80d883a 	mov	r6,sp
    1b5c:	01c00044 	movi	r7,1
    1b60:	0001a2c0 	call	1a2c <__sfvwrite_small_dev>
    1b64:	00ffffc4 	movi	r3,-1
    1b68:	10c00126 	beq	r2,r3,1b70 <putc+0x44>
    1b6c:	8005883a 	mov	r2,r16
    1b70:	dfc00217 	ldw	ra,8(sp)
    1b74:	dc000117 	ldw	r16,4(sp)
    1b78:	dec00304 	addi	sp,sp,12
    1b7c:	f800283a 	ret

00001b80 <_putc_r>:
    1b80:	defffd04 	addi	sp,sp,-12
    1b84:	00800034 	movhi	r2,0
    1b88:	dc000115 	stw	r16,4(sp)
    1b8c:	dfc00215 	stw	ra,8(sp)
    1b90:	10868b04 	addi	r2,r2,6700
    1b94:	30800115 	stw	r2,4(r6)
    1b98:	00800034 	movhi	r2,0
    1b9c:	10902204 	addi	r2,r2,16520
    1ba0:	11000017 	ldw	r4,0(r2)
    1ba4:	2821883a 	mov	r16,r5
    1ba8:	01c00044 	movi	r7,1
    1bac:	300b883a 	mov	r5,r6
    1bb0:	d80d883a 	mov	r6,sp
    1bb4:	dc000005 	stb	r16,0(sp)
    1bb8:	0001a2c0 	call	1a2c <__sfvwrite_small_dev>
    1bbc:	00ffffc4 	movi	r3,-1
    1bc0:	10c00126 	beq	r2,r3,1bc8 <_putc_r+0x48>
    1bc4:	8005883a 	mov	r2,r16
    1bc8:	dfc00217 	ldw	ra,8(sp)
    1bcc:	dc000117 	ldw	r16,4(sp)
    1bd0:	dec00304 	addi	sp,sp,12
    1bd4:	f800283a 	ret

00001bd8 <_write_r>:
    1bd8:	defffd04 	addi	sp,sp,-12
    1bdc:	dc000015 	stw	r16,0(sp)
    1be0:	04000034 	movhi	r16,0
    1be4:	dc400115 	stw	r17,4(sp)
    1be8:	84147f04 	addi	r16,r16,20988
    1bec:	2023883a 	mov	r17,r4
    1bf0:	2809883a 	mov	r4,r5
    1bf4:	300b883a 	mov	r5,r6
    1bf8:	380d883a 	mov	r6,r7
    1bfc:	dfc00215 	stw	ra,8(sp)
    1c00:	80000015 	stw	zero,0(r16)
    1c04:	00021940 	call	2194 <write>
    1c08:	00ffffc4 	movi	r3,-1
    1c0c:	10c0031e 	bne	r2,r3,1c1c <_write_r+0x44>
    1c10:	80c00017 	ldw	r3,0(r16)
    1c14:	18000126 	beq	r3,zero,1c1c <_write_r+0x44>
    1c18:	88c00015 	stw	r3,0(r17)
    1c1c:	dfc00217 	ldw	ra,8(sp)
    1c20:	dc400117 	ldw	r17,4(sp)
    1c24:	dc000017 	ldw	r16,0(sp)
    1c28:	dec00304 	addi	sp,sp,12
    1c2c:	f800283a 	ret

00001c30 <__muldi3>:
    1c30:	defff604 	addi	sp,sp,-40
    1c34:	dd800615 	stw	r22,24(sp)
    1c38:	dd400515 	stw	r21,20(sp)
    1c3c:	25bfffcc 	andi	r22,r4,65535
    1c40:	357fffcc 	andi	r21,r6,65535
    1c44:	dc400115 	stw	r17,4(sp)
    1c48:	2022d43a 	srli	r17,r4,16
    1c4c:	dcc00315 	stw	r19,12(sp)
    1c50:	dc800215 	stw	r18,8(sp)
    1c54:	2027883a 	mov	r19,r4
    1c58:	2825883a 	mov	r18,r5
    1c5c:	a809883a 	mov	r4,r21
    1c60:	b00b883a 	mov	r5,r22
    1c64:	dfc00915 	stw	ra,36(sp)
    1c68:	df000815 	stw	fp,32(sp)
    1c6c:	ddc00715 	stw	r23,28(sp)
    1c70:	3839883a 	mov	fp,r7
    1c74:	302ed43a 	srli	r23,r6,16
    1c78:	dd000415 	stw	r20,16(sp)
    1c7c:	dc000015 	stw	r16,0(sp)
    1c80:	3029883a 	mov	r20,r6
    1c84:	00009e40 	call	9e4 <__mulsi3>
    1c88:	a809883a 	mov	r4,r21
    1c8c:	880b883a 	mov	r5,r17
    1c90:	1021883a 	mov	r16,r2
    1c94:	00009e40 	call	9e4 <__mulsi3>
    1c98:	880b883a 	mov	r5,r17
    1c9c:	b809883a 	mov	r4,r23
    1ca0:	102b883a 	mov	r21,r2
    1ca4:	00009e40 	call	9e4 <__mulsi3>
    1ca8:	b809883a 	mov	r4,r23
    1cac:	b00b883a 	mov	r5,r22
    1cb0:	1023883a 	mov	r17,r2
    1cb4:	00009e40 	call	9e4 <__mulsi3>
    1cb8:	8012d43a 	srli	r9,r16,16
    1cbc:	a885883a 	add	r2,r21,r2
    1cc0:	1251883a 	add	r8,r2,r9
    1cc4:	4540022e 	bgeu	r8,r21,1cd0 <__muldi3+0xa0>
    1cc8:	00800074 	movhi	r2,1
    1ccc:	88a3883a 	add	r17,r17,r2
    1cd0:	4006d43a 	srli	r3,r8,16
    1cd4:	4010943a 	slli	r8,r8,16
    1cd8:	9809883a 	mov	r4,r19
    1cdc:	e00b883a 	mov	r5,fp
    1ce0:	843fffcc 	andi	r16,r16,65535
    1ce4:	88e3883a 	add	r17,r17,r3
    1ce8:	4421883a 	add	r16,r8,r16
    1cec:	00009e40 	call	9e4 <__mulsi3>
    1cf0:	a009883a 	mov	r4,r20
    1cf4:	900b883a 	mov	r5,r18
    1cf8:	1027883a 	mov	r19,r2
    1cfc:	00009e40 	call	9e4 <__mulsi3>
    1d00:	9885883a 	add	r2,r19,r2
    1d04:	1447883a 	add	r3,r2,r17
    1d08:	8005883a 	mov	r2,r16
    1d0c:	dfc00917 	ldw	ra,36(sp)
    1d10:	df000817 	ldw	fp,32(sp)
    1d14:	ddc00717 	ldw	r23,28(sp)
    1d18:	dd800617 	ldw	r22,24(sp)
    1d1c:	dd400517 	ldw	r21,20(sp)
    1d20:	dd000417 	ldw	r20,16(sp)
    1d24:	dcc00317 	ldw	r19,12(sp)
    1d28:	dc800217 	ldw	r18,8(sp)
    1d2c:	dc400117 	ldw	r17,4(sp)
    1d30:	dc000017 	ldw	r16,0(sp)
    1d34:	dec00a04 	addi	sp,sp,40
    1d38:	f800283a 	ret

00001d3c <gettimeofday>:
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1d3c:	00800034 	movhi	r2,0
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    1d40:	defffb04 	addi	sp,sp,-20
    1d44:	10948704 	addi	r2,r2,21020
    1d48:	dcc00315 	stw	r19,12(sp)
    1d4c:	14c00017 	ldw	r19,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1d50:	00800034 	movhi	r2,0
    1d54:	10948804 	addi	r2,r2,21024
    1d58:	dc800215 	stw	r18,8(sp)
    1d5c:	14800017 	ldw	r18,0(r2)
    1d60:	dfc00415 	stw	ra,16(sp)
    1d64:	dc400115 	stw	r17,4(sp)
    1d68:	dc000015 	stw	r16,0(sp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    1d6c:	90003c26 	beq	r18,zero,1e60 <gettimeofday+0x124>
    1d70:	2021883a 	mov	r16,r4
    1d74:	2823883a 	mov	r17,r5
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    1d78:	9809883a 	mov	r4,r19
    1d7c:	900b883a 	mov	r5,r18
    1d80:	00009d40 	call	9d4 <__udivsi3>
    1d84:	d0e46417 	ldw	r3,-28272(gp)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    1d88:	010003f4 	movhi	r4,15
    1d8c:	21109004 	addi	r4,r4,16960
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    1d90:	10c5883a 	add	r2,r2,r3
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    1d94:	900b883a 	mov	r5,r18
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    1d98:	80800015 	stw	r2,0(r16)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    1d9c:	00009d40 	call	9d4 <__udivsi3>
    1da0:	1009883a 	mov	r4,r2
    1da4:	000b883a 	mov	r5,zero
    1da8:	980d883a 	mov	r6,r19
    1dac:	000f883a 	mov	r7,zero
    1db0:	0001c300 	call	1c30 <__muldi3>
    1db4:	018003f4 	movhi	r6,15
    1db8:	1009883a 	mov	r4,r2
    1dbc:	180b883a 	mov	r5,r3
    1dc0:	31909004 	addi	r6,r6,16960
    1dc4:	000f883a 	mov	r7,zero
    1dc8:	00027600 	call	2760 <__umoddi3>
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    1dcc:	d0e46404 	addi	r3,gp,-28272
    1dd0:	18c00117 	ldw	r3,4(r3)
          break;
      }
      else
      {
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
    1dd4:	010003f4 	movhi	r4,15
    1dd8:	21109004 	addi	r4,r4,16960
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    1ddc:	1885883a 	add	r2,r3,r2
    1de0:	80800115 	stw	r2,4(r16)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    1de4:	80800117 	ldw	r2,4(r16)
    1de8:	1000040e 	bge	r2,zero,1dfc <gettimeofday+0xc0>
      if (ptimeval->tv_sec <= 0)
    1dec:	80c00017 	ldw	r3,0(r16)
    1df0:	00c00716 	blt	zero,r3,1e10 <gettimeofday+0xd4>
      {
          ptimeval->tv_sec = 0;
    1df4:	80000015 	stw	zero,0(r16)
          ptimeval->tv_usec = 0;
    1df8:	80000115 	stw	zero,4(r16)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    1dfc:	010003f4 	movhi	r4,15
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    1e00:	017ffc74 	movhi	r5,65521
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    1e04:	21108fc4 	addi	r4,r4,16959
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    1e08:	296f7004 	addi	r5,r5,-16960
    1e0c:	00000506 	br	1e24 <gettimeofday+0xe8>
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
    1e10:	18ffffc4 	addi	r3,r3,-1
          ptimeval->tv_usec += ALT_US;
    1e14:	1105883a 	add	r2,r2,r4
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
    1e18:	80c00015 	stw	r3,0(r16)
          ptimeval->tv_usec += ALT_US;
    1e1c:	80800115 	stw	r2,4(r16)
    1e20:	003ff006 	br	1de4 <__alt_data_end+0xffff1de4>
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    1e24:	80800117 	ldw	r2,4(r16)
    1e28:	2080060e 	bge	r4,r2,1e44 <gettimeofday+0x108>
      ptimeval->tv_sec++;
    1e2c:	80c00017 	ldw	r3,0(r16)
      ptimeval->tv_usec -= ALT_US;
    1e30:	1145883a 	add	r2,r2,r5
    1e34:	80800115 	stw	r2,4(r16)
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
      ptimeval->tv_sec++;
    1e38:	18c00044 	addi	r3,r3,1
    1e3c:	80c00015 	stw	r3,0(r16)
    1e40:	003ff806 	br	1e24 <__alt_data_end+0xffff1e24>
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    1e44:	88000826 	beq	r17,zero,1e68 <gettimeofday+0x12c>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    1e48:	d0a46617 	ldw	r2,-28264(gp)
    1e4c:	88800015 	stw	r2,0(r17)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    1e50:	d0a46604 	addi	r2,gp,-28264
    1e54:	10800117 	ldw	r2,4(r2)
    1e58:	88800115 	stw	r2,4(r17)
    1e5c:	00000206 	br	1e68 <gettimeofday+0x12c>
    }

    return 0;
  }

  return -ENOTSUP;
    1e60:	00bfde84 	movi	r2,-134
    1e64:	00000106 	br	1e6c <gettimeofday+0x130>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    }

    return 0;
    1e68:	0005883a 	mov	r2,zero
  }

  return -ENOTSUP;
}
    1e6c:	dfc00417 	ldw	ra,16(sp)
    1e70:	dcc00317 	ldw	r19,12(sp)
    1e74:	dc800217 	ldw	r18,8(sp)
    1e78:	dc400117 	ldw	r17,4(sp)
    1e7c:	dc000017 	ldw	r16,0(sp)
    1e80:	dec00504 	addi	sp,sp,20
    1e84:	f800283a 	ret

00001e88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1e88:	deffff04 	addi	sp,sp,-4
    1e8c:	01000034 	movhi	r4,0
    1e90:	01400034 	movhi	r5,0
    1e94:	dfc00015 	stw	ra,0(sp)
    1e98:	210bd604 	addi	r4,r4,12120
    1e9c:	29502704 	addi	r5,r5,16540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1ea0:	2140061e 	bne	r4,r5,1ebc <alt_load+0x34>
    1ea4:	01000034 	movhi	r4,0
    1ea8:	01400034 	movhi	r5,0
    1eac:	21000804 	addi	r4,r4,32
    1eb0:	29400804 	addi	r5,r5,32
    1eb4:	2140141e 	bne	r4,r5,1f08 <alt_load+0x80>
    1eb8:	00000d06 	br	1ef0 <alt_load+0x68>
    1ebc:	00c00034 	movhi	r3,0
    1ec0:	18d02704 	addi	r3,r3,16540
    1ec4:	00bfff04 	movi	r2,-4
    1ec8:	1907c83a 	sub	r3,r3,r4
    1ecc:	1886703a 	and	r3,r3,r2
    1ed0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1ed4:	10fff326 	beq	r2,r3,1ea4 <__alt_data_end+0xffff1ea4>
    1ed8:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1edc:	39c00017 	ldw	r7,0(r7)
    1ee0:	110d883a 	add	r6,r2,r4
    1ee4:	10800104 	addi	r2,r2,4
    1ee8:	31c00015 	stw	r7,0(r6)
    1eec:	003ff906 	br	1ed4 <__alt_data_end+0xffff1ed4>
    1ef0:	01000034 	movhi	r4,0
    1ef4:	01400034 	movhi	r5,0
    1ef8:	210b5f04 	addi	r4,r4,11644
    1efc:	294b5f04 	addi	r5,r5,11644

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1f00:	2140121e 	bne	r4,r5,1f4c <alt_load+0xc4>
    1f04:	00000d06 	br	1f3c <alt_load+0xb4>
    1f08:	00c00034 	movhi	r3,0
    1f0c:	18c05404 	addi	r3,r3,336
    1f10:	00bfff04 	movi	r2,-4
    1f14:	1907c83a 	sub	r3,r3,r4
    1f18:	1886703a 	and	r3,r3,r2
    1f1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1f20:	10fff326 	beq	r2,r3,1ef0 <__alt_data_end+0xffff1ef0>
    1f24:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1f28:	39c00017 	ldw	r7,0(r7)
    1f2c:	110d883a 	add	r6,r2,r4
    1f30:	10800104 	addi	r2,r2,4
    1f34:	31c00015 	stw	r7,0(r6)
    1f38:	003ff906 	br	1f20 <__alt_data_end+0xffff1f20>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1f3c:	00026240 	call	2624 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1f40:	dfc00017 	ldw	ra,0(sp)
    1f44:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1f48:	00026281 	jmpi	2628 <alt_icache_flush_all>
    1f4c:	00c00034 	movhi	r3,0
    1f50:	18cbd604 	addi	r3,r3,12120
    1f54:	00bfff04 	movi	r2,-4
    1f58:	1907c83a 	sub	r3,r3,r4
    1f5c:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1f60:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1f64:	10fff526 	beq	r2,r3,1f3c <__alt_data_end+0xffff1f3c>
    1f68:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1f6c:	39c00017 	ldw	r7,0(r7)
    1f70:	110d883a 	add	r6,r2,r4
    1f74:	10800104 	addi	r2,r2,4
    1f78:	31c00015 	stw	r7,0(r6)
    1f7c:	003ff906 	br	1f64 <__alt_data_end+0xffff1f64>

00001f80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1f80:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1f84:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1f88:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1f8c:	00022000 	call	2200 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1f90:	00022200 	call	2220 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1f94:	d1246a17 	ldw	r4,-28248(gp)
    1f98:	d1646917 	ldw	r5,-28252(gp)
    1f9c:	d1a46817 	ldw	r6,-28256(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1fa0:	dfc00017 	ldw	ra,0(sp)
    1fa4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1fa8:	00006dc1 	jmpi	6dc <main>

00001fac <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1fac:	defffd04 	addi	sp,sp,-12
    1fb0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1fb4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1fb8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1fbc:	01000034 	movhi	r4,0
    1fc0:	210c0e04 	addi	r4,r4,12344
    1fc4:	d80b883a 	mov	r5,sp
    1fc8:	01800044 	movi	r6,1
    1fcc:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1fd0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1fd4:	000241c0 	call	241c <altera_avalon_jtag_uart_write>
    1fd8:	00ffffc4 	movi	r3,-1
    1fdc:	10c00126 	beq	r2,r3,1fe4 <alt_putchar+0x38>
        return -1;
    }
    return c;
    1fe0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1fe4:	dfc00217 	ldw	ra,8(sp)
    1fe8:	dc000117 	ldw	r16,4(sp)
    1fec:	dec00304 	addi	sp,sp,12
    1ff0:	f800283a 	ret

00001ff4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1ff4:	defffe04 	addi	sp,sp,-8
    1ff8:	dc000015 	stw	r16,0(sp)
    1ffc:	dfc00115 	stw	ra,4(sp)
    2000:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2004:	00013bc0 	call	13bc <strlen>
    2008:	01000034 	movhi	r4,0
    200c:	210c0e04 	addi	r4,r4,12344
    2010:	800b883a 	mov	r5,r16
    2014:	100d883a 	mov	r6,r2
    2018:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    201c:	dfc00117 	ldw	ra,4(sp)
    2020:	dc000017 	ldw	r16,0(sp)
    2024:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2028:	000241c1 	jmpi	241c <altera_avalon_jtag_uart_write>

0000202c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    202c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2030:	00bfff84 	movi	r2,-2
    2034:	1884703a 	and	r2,r3,r2
    2038:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    203c:	21400117 	ldw	r5,4(r4)
    2040:	20800017 	ldw	r2,0(r4)
    2044:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    2048:	21400117 	ldw	r5,4(r4)
    204c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2050:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2054:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2058:	1801703a 	wrctl	status,r3
    205c:	f800283a 	ret

00002060 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2060:	d0a46b17 	ldw	r2,-28244(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2064:	defffb04 	addi	sp,sp,-20
    2068:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    206c:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2070:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2074:	dc800215 	stw	r18,8(sp)
    2078:	dc400115 	stw	r17,4(sp)
    207c:	dfc00415 	stw	ra,16(sp)
    2080:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2084:	d0a46b15 	stw	r2,-28244(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2088:	d4600704 	addi	r17,gp,-32740
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    208c:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2090:	84401a26 	beq	r16,r17,20fc <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2094:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    2098:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    209c:	10000326 	beq	r2,zero,20ac <alt_tick+0x4c>
    20a0:	d0a46b17 	ldw	r2,-28244(gp)
    20a4:	1000011e 	bne	r2,zero,20ac <alt_tick+0x4c>
    {
      alarm->rollover = 0;
    20a8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    20ac:	d0e46b17 	ldw	r3,-28244(gp)
    20b0:	80800217 	ldw	r2,8(r16)
    20b4:	18800f36 	bltu	r3,r2,20f4 <alt_tick+0x94>
    20b8:	80800403 	ldbu	r2,16(r16)
    20bc:	10000d1e 	bne	r2,zero,20f4 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
    20c0:	80800317 	ldw	r2,12(r16)
    20c4:	81000517 	ldw	r4,20(r16)
    20c8:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    20cc:	1000031e 	bne	r2,zero,20dc <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
    20d0:	8009883a 	mov	r4,r16
    20d4:	000202c0 	call	202c <alt_alarm_stop>
    20d8:	00000606 	br	20f4 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
    20dc:	80c00217 	ldw	r3,8(r16)
    20e0:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    20e4:	d0e46b17 	ldw	r3,-28244(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    20e8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    20ec:	10c0012e 	bgeu	r2,r3,20f4 <alt_tick+0x94>
        {
          alarm->rollover = 1;
    20f0:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    20f4:	9821883a 	mov	r16,r19
    20f8:	003fe506 	br	2090 <__alt_data_end+0xffff2090>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    20fc:	dfc00417 	ldw	ra,16(sp)
    2100:	dcc00317 	ldw	r19,12(sp)
    2104:	dc800217 	ldw	r18,8(sp)
    2108:	dc400117 	ldw	r17,4(sp)
    210c:	dc000017 	ldw	r16,0(sp)
    2110:	dec00504 	addi	sp,sp,20
    2114:	f800283a 	ret

00002118 <times>:
    2118:	00c00034 	movhi	r3,0
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    211c:	00800034 	movhi	r2,0
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2120:	18d48804 	addi	r3,r3,21024
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2124:	10948704 	addi	r2,r2,21020
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2128:	18c00017 	ldw	r3,0(r3)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    212c:	10800017 	ldw	r2,0(r2)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
    2130:	1800131e 	bne	r3,zero,2180 <times+0x68>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2134:	00800034 	movhi	r2,0
    2138:	10902504 	addi	r2,r2,16532
    213c:	10800017 	ldw	r2,0(r2)
    2140:	10000926 	beq	r2,zero,2168 <times+0x50>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
    2144:	deffff04 	addi	sp,sp,-4
    2148:	dfc00015 	stw	ra,0(sp)
    214c:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
    2150:	00c01604 	movi	r3,88
    2154:	10c00015 	stw	r3,0(r2)
    return 0;
    2158:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
    215c:	dfc00017 	ldw	ra,0(sp)
    2160:	dec00104 	addi	sp,sp,4
    2164:	f800283a 	ret
    2168:	00800034 	movhi	r2,0
    216c:	10947f04 	addi	r2,r2,20988

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
    2170:	00c01604 	movi	r3,88
    2174:	10c00015 	stw	r3,0(r2)
    return 0;
    2178:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
    217c:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
    2180:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
    2184:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
    2188:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
    218c:	20000315 	stw	zero,12(r4)

  return ticks;
    2190:	f800283a 	ret

00002194 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2194:	00800044 	movi	r2,1
    2198:	20800226 	beq	r4,r2,21a4 <write+0x10>
    219c:	00800084 	movi	r2,2
    21a0:	2080041e 	bne	r4,r2,21b4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    21a4:	01000034 	movhi	r4,0
    21a8:	210c0e04 	addi	r4,r4,12344
    21ac:	000f883a 	mov	r7,zero
    21b0:	000241c1 	jmpi	241c <altera_avalon_jtag_uart_write>
    21b4:	00800034 	movhi	r2,0
    21b8:	10902504 	addi	r2,r2,16532
    21bc:	10800017 	ldw	r2,0(r2)
    21c0:	10000926 	beq	r2,zero,21e8 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    21c4:	deffff04 	addi	sp,sp,-4
    21c8:	dfc00015 	stw	ra,0(sp)
    21cc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    21d0:	00c01444 	movi	r3,81
    21d4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    21d8:	00bfffc4 	movi	r2,-1
    21dc:	dfc00017 	ldw	ra,0(sp)
    21e0:	dec00104 	addi	sp,sp,4
    21e4:	f800283a 	ret
    21e8:	00800034 	movhi	r2,0
    21ec:	10947f04 	addi	r2,r2,20988
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    21f0:	00c01444 	movi	r3,81
    21f4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    21f8:	00bfffc4 	movi	r2,-1
    21fc:	f800283a 	ret

00002200 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2200:	deffff04 	addi	sp,sp,-4
    2204:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2208:	00027300 	call	2730 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    220c:	00800044 	movi	r2,1
    2210:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2214:	dfc00017 	ldw	ra,0(sp)
    2218:	dec00104 	addi	sp,sp,4
    221c:	f800283a 	ret

00002220 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    2220:	01000034 	movhi	r4,0
    2224:	210c0e04 	addi	r4,r4,12344
    2228:	000b883a 	mov	r5,zero
    222c:	01800144 	movi	r6,5
    2230:	000236c1 	jmpi	236c <altera_avalon_jtag_uart_init>

00002234 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    2234:	20800017 	ldw	r2,0(r4)
    2238:	10800104 	addi	r2,r2,4
    223c:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    2240:	18c1000c 	andi	r3,r3,1024
    2244:	18000526 	beq	r3,zero,225c <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    2248:	20c00817 	ldw	r3,32(r4)
    224c:	18c10014 	ori	r3,r3,1024
    2250:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    2254:	20000915 	stw	zero,36(r4)
    2258:	00000606 	br	2274 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    225c:	20800917 	ldw	r2,36(r4)
    2260:	00e00034 	movhi	r3,32768
    2264:	18ffff04 	addi	r3,r3,-4
    2268:	18800236 	bltu	r3,r2,2274 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
    226c:	10800044 	addi	r2,r2,1
    2270:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    2274:	00800034 	movhi	r2,0
    2278:	10948804 	addi	r2,r2,21024
    227c:	10800017 	ldw	r2,0(r2)
    2280:	f800283a 	ret

00002284 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    2284:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2288:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    228c:	023fff44 	movi	r8,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2290:	39800104 	addi	r6,r7,4
    2294:	30800037 	ldwio	r2,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    2298:	10c0c00c 	andi	r3,r2,768
    229c:	18003226 	beq	r3,zero,2368 <altera_avalon_jtag_uart_irq+0xe4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    22a0:	10c0400c 	andi	r3,r2,256
    22a4:	18001826 	beq	r3,zero,2308 <altera_avalon_jtag_uart_irq+0x84>
    22a8:	00c00074 	movhi	r3,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    22ac:	21400a17 	ldw	r5,40(r4)
        if (next == sp->rx_out)
    22b0:	22800b17 	ldw	r10,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    22b4:	29400044 	addi	r5,r5,1
    22b8:	2941ffcc 	andi	r5,r5,2047
        if (next == sp->rx_out)
    22bc:	2a800b26 	beq	r5,r10,22ec <altera_avalon_jtag_uart_irq+0x68>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    22c0:	38c00037 	ldwio	r3,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    22c4:	1960000c 	andi	r5,r3,32768
    22c8:	28000826 	beq	r5,zero,22ec <altera_avalon_jtag_uart_irq+0x68>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    22cc:	21400a17 	ldw	r5,40(r4)
    22d0:	214b883a 	add	r5,r4,r5
    22d4:	28c00e05 	stb	r3,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    22d8:	21400a17 	ldw	r5,40(r4)
    22dc:	29400044 	addi	r5,r5,1
    22e0:	2941ffcc 	andi	r5,r5,2047
    22e4:	21400a15 	stw	r5,40(r4)
    22e8:	003ff006 	br	22ac <__alt_data_end+0xffff22ac>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    22ec:	18ffffec 	andhi	r3,r3,65535
    22f0:	18000526 	beq	r3,zero,2308 <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    22f4:	20c00817 	ldw	r3,32(r4)
    22f8:	1a46703a 	and	r3,r3,r9
    22fc:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    2300:	30c00035 	stwio	r3,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2304:	30c00037 	ldwio	r3,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    2308:	10c0800c 	andi	r3,r2,512
    230c:	183fe126 	beq	r3,zero,2294 <__alt_data_end+0xffff2294>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    2310:	1004d43a 	srli	r2,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    2314:	103fdf26 	beq	r2,zero,2294 <__alt_data_end+0xffff2294>
    2318:	21400d17 	ldw	r5,52(r4)
    231c:	20c00c17 	ldw	r3,48(r4)
    2320:	28c00a26 	beq	r5,r3,234c <altera_avalon_jtag_uart_irq+0xc8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    2324:	20c00d17 	ldw	r3,52(r4)
    2328:	20c7883a 	add	r3,r4,r3
    232c:	18c20e07 	ldb	r3,2104(r3)
    2330:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2334:	20c00d17 	ldw	r3,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2338:	10bfffc4 	addi	r2,r2,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    233c:	18c00044 	addi	r3,r3,1
    2340:	18c1ffcc 	andi	r3,r3,2047
    2344:	20c00d15 	stw	r3,52(r4)
    2348:	003ff206 	br	2314 <__alt_data_end+0xffff2314>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    234c:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2350:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2354:	1204703a 	and	r2,r2,r8
    2358:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    235c:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2360:	30800037 	ldwio	r2,0(r6)
    2364:	003fcb06 	br	2294 <__alt_data_end+0xffff2294>
    2368:	f800283a 	ret

0000236c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    236c:	defffd04 	addi	sp,sp,-12
    2370:	dc000115 	stw	r16,4(sp)
    2374:	2021883a 	mov	r16,r4
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    2378:	80c00017 	ldw	r3,0(r16)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    237c:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    2380:	dfc00215 	stw	ra,8(sp)
    2384:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2388:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    238c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    2390:	300b883a 	mov	r5,r6
    2394:	01800034 	movhi	r6,0
    2398:	3188a104 	addi	r6,r6,8836
    239c:	800f883a 	mov	r7,r16
    23a0:	d8000015 	stw	zero,0(sp)
    23a4:	000262c0 	call	262c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    23a8:	00800034 	movhi	r2,0
    23ac:	10948804 	addi	r2,r2,21024
    23b0:	11400017 	ldw	r5,0(r2)
    23b4:	01800034 	movhi	r6,0
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    23b8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    23bc:	81000204 	addi	r4,r16,8
    23c0:	31888d04 	addi	r6,r6,8756
    23c4:	800f883a 	mov	r7,r16
    23c8:	00025900 	call	2590 <alt_alarm_start>
    23cc:	1000030e 	bge	r2,zero,23dc <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    23d0:	00a00034 	movhi	r2,32768
    23d4:	10bfffc4 	addi	r2,r2,-1
    23d8:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    23dc:	dfc00217 	ldw	ra,8(sp)
    23e0:	dc000117 	ldw	r16,4(sp)
    23e4:	dec00304 	addi	sp,sp,12
    23e8:	f800283a 	ret

000023ec <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    23ec:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
    23f0:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    23f4:	20800d17 	ldw	r2,52(r4)
    23f8:	11800626 	beq	r2,r6,2414 <altera_avalon_jtag_uart_close+0x28>
    23fc:	20c00917 	ldw	r3,36(r4)
    2400:	20800117 	ldw	r2,4(r4)
    2404:	1880032e 	bgeu	r3,r2,2414 <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
    2408:	283ffa26 	beq	r5,zero,23f4 <__alt_data_end+0xffff23f4>
      return -EWOULDBLOCK; 
    240c:	00bffd44 	movi	r2,-11
    2410:	f800283a 	ret
    }
  }

  return 0;
    2414:	0005883a 	mov	r2,zero
}
    2418:	f800283a 	ret

0000241c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    241c:	defff304 	addi	sp,sp,-52
    2420:	df000b15 	stw	fp,44(sp)
    2424:	ddc00a15 	stw	r23,40(sp)
    2428:	dd800915 	stw	r22,36(sp)
    242c:	dd400815 	stw	r21,32(sp)
    2430:	dd000715 	stw	r20,28(sp)
    2434:	dc800515 	stw	r18,20(sp)
    2438:	dc000315 	stw	r16,12(sp)
    243c:	382f883a 	mov	r23,r7
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    2440:	38d0000c 	andi	r3,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2444:	dfc00c15 	stw	ra,48(sp)
    2448:	dcc00615 	stw	r19,24(sp)
    244c:	dc400415 	stw	r17,16(sp)
    2450:	2025883a 	mov	r18,r4
    2454:	282b883a 	mov	r21,r5
    2458:	3029883a 	mov	r20,r6
    245c:	2821883a 	mov	r16,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2460:	002d883a 	mov	r22,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2464:	073fff84 	movi	fp,-2
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2468:	01c1ffc4 	movi	r7,2047
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    246c:	02020004 	movi	r8,2048
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2470:	05001e0e 	bge	zero,r20,24ec <altera_avalon_jtag_uart_write+0xd0>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2474:	94c00c17 	ldw	r19,48(r18)
      out = sp->tx_out;
    2478:	95800d17 	ldw	r22,52(r18)

      if (in < out)
    247c:	9d80032e 	bgeu	r19,r22,248c <altera_avalon_jtag_uart_write+0x70>
    2480:	b47fffc4 	addi	r17,r22,-1
        n = out - 1 - in;
    2484:	8ce3c83a 	sub	r17,r17,r19
    2488:	00000406 	br	249c <altera_avalon_jtag_uart_write+0x80>
      else if (out > 0)
    248c:	b0000226 	beq	r22,zero,2498 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2490:	44e3c83a 	sub	r17,r8,r19
    2494:	00000106 	br	249c <altera_avalon_jtag_uart_write+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2498:	3ce3c83a 	sub	r17,r7,r19

      if (n == 0)
    249c:	88001326 	beq	r17,zero,24ec <altera_avalon_jtag_uart_write+0xd0>
    24a0:	a440012e 	bgeu	r20,r17,24a8 <altera_avalon_jtag_uart_write+0x8c>
    24a4:	a023883a 	mov	r17,r20
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    24a8:	99020e04 	addi	r4,r19,2104
    24ac:	800b883a 	mov	r5,r16
    24b0:	880d883a 	mov	r6,r17
    24b4:	9109883a 	add	r4,r18,r4
      ptr   += n;
    24b8:	8461883a 	add	r16,r16,r17
      count -= n;
    24bc:	a469c83a 	sub	r20,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    24c0:	8ce3883a 	add	r17,r17,r19
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    24c4:	d8c00015 	stw	r3,0(sp)
    24c8:	d9c00115 	stw	r7,4(sp)
    24cc:	da000215 	stw	r8,8(sp)
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    24d0:	8c41ffcc 	andi	r17,r17,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    24d4:	00027380 	call	2738 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    24d8:	da000217 	ldw	r8,8(sp)
    24dc:	94400c15 	stw	r17,48(r18)
    24e0:	d9c00117 	ldw	r7,4(sp)
    24e4:	d8c00017 	ldw	r3,0(sp)
    24e8:	003fe106 	br	2470 <__alt_data_end+0xffff2470>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    24ec:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    24f0:	2704703a 	and	r2,r4,fp
    24f4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    24f8:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    24fc:	91400017 	ldw	r5,0(r18)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2500:	10800094 	ori	r2,r2,2
    2504:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2508:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    250c:	2001703a 	wrctl	status,r4
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2510:	0500080e 	bge	zero,r20,2534 <altera_avalon_jtag_uart_write+0x118>
    {
      if (flags & O_NONBLOCK)
    2514:	1800101e 	bne	r3,zero,2558 <altera_avalon_jtag_uart_write+0x13c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2518:	91000d17 	ldw	r4,52(r18)
    251c:	90800917 	ldw	r2,36(r18)
    2520:	b100021e 	bne	r22,r4,252c <altera_avalon_jtag_uart_write+0x110>
    2524:	91000117 	ldw	r4,4(r18)
    2528:	113ffb36 	bltu	r2,r4,2518 <__alt_data_end+0xffff2518>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    252c:	103fd026 	beq	r2,zero,2470 <__alt_data_end+0xffff2470>
    2530:	00000606 	br	254c <altera_avalon_jtag_uart_write+0x130>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    2534:	85400226 	beq	r16,r21,2540 <altera_avalon_jtag_uart_write+0x124>
    return ptr - start;
    2538:	8545c83a 	sub	r2,r16,r21
    253c:	00000806 	br	2560 <altera_avalon_jtag_uart_write+0x144>
  else if (flags & O_NONBLOCK)
    2540:	bdd0000c 	andi	r23,r23,16384
    2544:	b800051e 	bne	r23,zero,255c <altera_avalon_jtag_uart_write+0x140>
    2548:	00000106 	br	2550 <altera_avalon_jtag_uart_write+0x134>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    254c:	857ffa1e 	bne	r16,r21,2538 <__alt_data_end+0xffff2538>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    2550:	00bffec4 	movi	r2,-5
    2554:	00000206 	br	2560 <altera_avalon_jtag_uart_write+0x144>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    2558:	857ff71e 	bne	r16,r21,2538 <__alt_data_end+0xffff2538>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    255c:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    2560:	dfc00c17 	ldw	ra,48(sp)
    2564:	df000b17 	ldw	fp,44(sp)
    2568:	ddc00a17 	ldw	r23,40(sp)
    256c:	dd800917 	ldw	r22,36(sp)
    2570:	dd400817 	ldw	r21,32(sp)
    2574:	dd000717 	ldw	r20,28(sp)
    2578:	dcc00617 	ldw	r19,24(sp)
    257c:	dc800517 	ldw	r18,20(sp)
    2580:	dc400417 	ldw	r17,16(sp)
    2584:	dc000317 	ldw	r16,12(sp)
    2588:	dec00d04 	addi	sp,sp,52
    258c:	f800283a 	ret

00002590 <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2590:	00800034 	movhi	r2,0
    2594:	10948804 	addi	r2,r2,21024
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    2598:	10800017 	ldw	r2,0(r2)
    259c:	10001d26 	beq	r2,zero,2614 <alt_alarm_start+0x84>
  {
    if (alarm)
    25a0:	20001e26 	beq	r4,zero,261c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
    25a4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    25a8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25ac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25b0:	00bfff84 	movi	r2,-2
    25b4:	1884703a 	and	r2,r3,r2
    25b8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    25bc:	00800034 	movhi	r2,0
    25c0:	10948704 	addi	r2,r2,21020
    25c4:	10800017 	ldw	r2,0(r2)
    25c8:	11800044 	addi	r6,r2,1
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    25cc:	314b883a 	add	r5,r6,r5
    25d0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    25d4:	2880032e 	bgeu	r5,r2,25e4 <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
    25d8:	00800044 	movi	r2,1
    25dc:	20800405 	stb	r2,16(r4)
    25e0:	00000106 	br	25e8 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
    25e4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    25e8:	00800034 	movhi	r2,0
    25ec:	10902304 	addi	r2,r2,16524
  entry->next     = list->next;
    25f0:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    25f4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    25f8:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
    25fc:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
    2600:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    2604:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2608:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    260c:	0005883a 	mov	r2,zero
    2610:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    2614:	00bfde84 	movi	r2,-134
    2618:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    261c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    2620:	f800283a 	ret

00002624 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2624:	f800283a 	ret

00002628 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2628:	f800283a 	ret

0000262c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    262c:	00026c81 	jmpi	26c8 <alt_iic_isr_register>

00002630 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2630:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2634:	00bfff84 	movi	r2,-2
    2638:	3084703a 	and	r2,r6,r2
    263c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2640:	00800034 	movhi	r2,0
    2644:	10948904 	addi	r2,r2,21028
    2648:	01000044 	movi	r4,1
    264c:	10c00017 	ldw	r3,0(r2)
    2650:	214a983a 	sll	r5,r4,r5
    2654:	28cab03a 	or	r5,r5,r3
    2658:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    265c:	10800017 	ldw	r2,0(r2)
    2660:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2664:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    2668:	0005883a 	mov	r2,zero
    266c:	f800283a 	ret

00002670 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2670:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2674:	00bfff84 	movi	r2,-2
    2678:	3084703a 	and	r2,r6,r2
    267c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2680:	00800034 	movhi	r2,0
    2684:	10948904 	addi	r2,r2,21028
    2688:	013fff84 	movi	r4,-2
    268c:	10c00017 	ldw	r3,0(r2)
    2690:	214a183a 	rol	r5,r4,r5
    2694:	28ca703a 	and	r5,r5,r3
    2698:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    269c:	10800017 	ldw	r2,0(r2)
    26a0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26a4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    26a8:	0005883a 	mov	r2,zero
    26ac:	f800283a 	ret

000026b0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    26b0:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    26b4:	00c00044 	movi	r3,1
    26b8:	194a983a 	sll	r5,r3,r5
    26bc:	1144703a 	and	r2,r2,r5
}
    26c0:	1004c03a 	cmpne	r2,r2,zero
    26c4:	f800283a 	ret

000026c8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    26c8:	00c007c4 	movi	r3,31
    26cc:	19401616 	blt	r3,r5,2728 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    26d0:	defffe04 	addi	sp,sp,-8
    26d4:	dfc00115 	stw	ra,4(sp)
    26d8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26dc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26e0:	00ffff84 	movi	r3,-2
    26e4:	80c6703a 	and	r3,r16,r3
    26e8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    26ec:	280490fa 	slli	r2,r5,3
    26f0:	00c00034 	movhi	r3,0
    26f4:	18d68a04 	addi	r3,r3,23080
    26f8:	1891883a 	add	r8,r3,r2
    26fc:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
    2700:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2704:	30000226 	beq	r6,zero,2710 <alt_iic_isr_register+0x48>
    2708:	00026300 	call	2630 <alt_ic_irq_enable>
    270c:	00000106 	br	2714 <alt_iic_isr_register+0x4c>
    2710:	00026700 	call	2670 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2714:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    2718:	dfc00117 	ldw	ra,4(sp)
    271c:	dc000017 	ldw	r16,0(sp)
    2720:	dec00204 	addi	sp,sp,8
    2724:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    2728:	00bffa84 	movi	r2,-22
    272c:	f800283a 	ret

00002730 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2730:	000170fa 	wrctl	ienable,zero
    2734:	f800283a 	ret

00002738 <memcpy>:
    2738:	2005883a 	mov	r2,r4
    273c:	0007883a 	mov	r3,zero
    2740:	19800626 	beq	r3,r6,275c <memcpy+0x24>
    2744:	28c9883a 	add	r4,r5,r3
    2748:	21c00003 	ldbu	r7,0(r4)
    274c:	10c9883a 	add	r4,r2,r3
    2750:	18c00044 	addi	r3,r3,1
    2754:	21c00005 	stb	r7,0(r4)
    2758:	003ff906 	br	2740 <__alt_data_end+0xffff2740>
    275c:	f800283a 	ret

00002760 <__umoddi3>:
    2760:	defff404 	addi	sp,sp,-48
    2764:	dd800815 	stw	r22,32(sp)
    2768:	dc400315 	stw	r17,12(sp)
    276c:	dc000215 	stw	r16,8(sp)
    2770:	dfc00b15 	stw	ra,44(sp)
    2774:	df000a15 	stw	fp,40(sp)
    2778:	ddc00915 	stw	r23,36(sp)
    277c:	dd400715 	stw	r21,28(sp)
    2780:	dd000615 	stw	r20,24(sp)
    2784:	dcc00515 	stw	r19,20(sp)
    2788:	dc800415 	stw	r18,16(sp)
    278c:	2021883a 	mov	r16,r4
    2790:	2823883a 	mov	r17,r5
    2794:	282d883a 	mov	r22,r5
    2798:	38003c1e 	bne	r7,zero,288c <__umoddi3+0x12c>
    279c:	3027883a 	mov	r19,r6
    27a0:	2029883a 	mov	r20,r4
    27a4:	2980522e 	bgeu	r5,r6,28f0 <__umoddi3+0x190>
    27a8:	00bfffd4 	movui	r2,65535
    27ac:	1180a436 	bltu	r2,r6,2a40 <__umoddi3+0x2e0>
    27b0:	00803fc4 	movi	r2,255
    27b4:	11815e2e 	bgeu	r2,r6,2d30 <__umoddi3+0x5d0>
    27b8:	01400204 	movi	r5,8
    27bc:	2805883a 	mov	r2,r5
    27c0:	314ad83a 	srl	r5,r6,r5
    27c4:	00c00034 	movhi	r3,0
    27c8:	18cb94c4 	addi	r3,r3,11859
    27cc:	194b883a 	add	r5,r3,r5
    27d0:	29000003 	ldbu	r4,0(r5)
    27d4:	2089883a 	add	r4,r4,r2
    27d8:	00800804 	movi	r2,32
    27dc:	1105c83a 	sub	r2,r2,r4
    27e0:	10010c26 	beq	r2,zero,2c14 <__umoddi3+0x4b4>
    27e4:	88a2983a 	sll	r17,r17,r2
    27e8:	8108d83a 	srl	r4,r16,r4
    27ec:	30a6983a 	sll	r19,r6,r2
    27f0:	80a8983a 	sll	r20,r16,r2
    27f4:	1025883a 	mov	r18,r2
    27f8:	892cb03a 	or	r22,r17,r4
    27fc:	9822d43a 	srli	r17,r19,16
    2800:	b009883a 	mov	r4,r22
    2804:	9d7fffcc 	andi	r21,r19,65535
    2808:	880b883a 	mov	r5,r17
    280c:	00009dc0 	call	9dc <__umodsi3>
    2810:	b009883a 	mov	r4,r22
    2814:	880b883a 	mov	r5,r17
    2818:	102f883a 	mov	r23,r2
    281c:	00009d40 	call	9d4 <__udivsi3>
    2820:	1009883a 	mov	r4,r2
    2824:	a80b883a 	mov	r5,r21
    2828:	00009e40 	call	9e4 <__mulsi3>
    282c:	b82e943a 	slli	r23,r23,16
    2830:	a008d43a 	srli	r4,r20,16
    2834:	b906b03a 	or	r3,r23,r4
    2838:	1880042e 	bgeu	r3,r2,284c <__umoddi3+0xec>
    283c:	1cc7883a 	add	r3,r3,r19
    2840:	1cc00236 	bltu	r3,r19,284c <__umoddi3+0xec>
    2844:	1880012e 	bgeu	r3,r2,284c <__umoddi3+0xec>
    2848:	1cc7883a 	add	r3,r3,r19
    284c:	18a1c83a 	sub	r16,r3,r2
    2850:	8009883a 	mov	r4,r16
    2854:	880b883a 	mov	r5,r17
    2858:	00009dc0 	call	9dc <__umodsi3>
    285c:	8009883a 	mov	r4,r16
    2860:	880b883a 	mov	r5,r17
    2864:	102d883a 	mov	r22,r2
    2868:	00009d40 	call	9d4 <__udivsi3>
    286c:	1009883a 	mov	r4,r2
    2870:	a80b883a 	mov	r5,r21
    2874:	b02c943a 	slli	r22,r22,16
    2878:	00009e40 	call	9e4 <__mulsi3>
    287c:	a13fffcc 	andi	r4,r20,65535
    2880:	b106b03a 	or	r3,r22,r4
    2884:	1880572e 	bgeu	r3,r2,29e4 <__umoddi3+0x284>
    2888:	00005206 	br	29d4 <__umoddi3+0x274>
    288c:	29c05936 	bltu	r5,r7,29f4 <__umoddi3+0x294>
    2890:	00bfffd4 	movui	r2,65535
    2894:	11c0652e 	bgeu	r2,r7,2a2c <__umoddi3+0x2cc>
    2898:	00804034 	movhi	r2,256
    289c:	10bfffc4 	addi	r2,r2,-1
    28a0:	11c1172e 	bgeu	r2,r7,2d00 <__umoddi3+0x5a0>
    28a4:	01400604 	movi	r5,24
    28a8:	282b883a 	mov	r21,r5
    28ac:	394ad83a 	srl	r5,r7,r5
    28b0:	00c00034 	movhi	r3,0
    28b4:	18cb94c4 	addi	r3,r3,11859
    28b8:	194b883a 	add	r5,r3,r5
    28bc:	28800003 	ldbu	r2,0(r5)
    28c0:	00c00804 	movi	r3,32
    28c4:	156b883a 	add	r21,r2,r21
    28c8:	1d69c83a 	sub	r20,r3,r21
    28cc:	a000671e 	bne	r20,zero,2a6c <__umoddi3+0x30c>
    28d0:	3c400136 	bltu	r7,r17,28d8 <__umoddi3+0x178>
    28d4:	81812336 	bltu	r16,r6,2d64 <__umoddi3+0x604>
    28d8:	8185c83a 	sub	r2,r16,r6
    28dc:	89e3c83a 	sub	r17,r17,r7
    28e0:	8087803a 	cmpltu	r3,r16,r2
    28e4:	88edc83a 	sub	r22,r17,r3
    28e8:	b007883a 	mov	r3,r22
    28ec:	00004306 	br	29fc <__umoddi3+0x29c>
    28f0:	3000041e 	bne	r6,zero,2904 <__umoddi3+0x1a4>
    28f4:	01000044 	movi	r4,1
    28f8:	000b883a 	mov	r5,zero
    28fc:	00009d40 	call	9d4 <__udivsi3>
    2900:	1027883a 	mov	r19,r2
    2904:	00bfffd4 	movui	r2,65535
    2908:	14c0532e 	bgeu	r2,r19,2a58 <__umoddi3+0x2f8>
    290c:	00804034 	movhi	r2,256
    2910:	10bfffc4 	addi	r2,r2,-1
    2914:	14c1032e 	bgeu	r2,r19,2d24 <__umoddi3+0x5c4>
    2918:	00800604 	movi	r2,24
    291c:	1007883a 	mov	r3,r2
    2920:	9884d83a 	srl	r2,r19,r2
    2924:	01000034 	movhi	r4,0
    2928:	210b94c4 	addi	r4,r4,11859
    292c:	2085883a 	add	r2,r4,r2
    2930:	11000003 	ldbu	r4,0(r2)
    2934:	00800804 	movi	r2,32
    2938:	20c7883a 	add	r3,r4,r3
    293c:	10c5c83a 	sub	r2,r2,r3
    2940:	1000b61e 	bne	r2,zero,2c1c <__umoddi3+0x4bc>
    2944:	982ad43a 	srli	r21,r19,16
    2948:	8ce3c83a 	sub	r17,r17,r19
    294c:	9dbfffcc 	andi	r22,r19,65535
    2950:	0025883a 	mov	r18,zero
    2954:	8809883a 	mov	r4,r17
    2958:	a80b883a 	mov	r5,r21
    295c:	00009dc0 	call	9dc <__umodsi3>
    2960:	8809883a 	mov	r4,r17
    2964:	a80b883a 	mov	r5,r21
    2968:	102f883a 	mov	r23,r2
    296c:	00009d40 	call	9d4 <__udivsi3>
    2970:	1009883a 	mov	r4,r2
    2974:	b00b883a 	mov	r5,r22
    2978:	00009e40 	call	9e4 <__mulsi3>
    297c:	b82e943a 	slli	r23,r23,16
    2980:	a008d43a 	srli	r4,r20,16
    2984:	b906b03a 	or	r3,r23,r4
    2988:	1880032e 	bgeu	r3,r2,2998 <__umoddi3+0x238>
    298c:	1cc7883a 	add	r3,r3,r19
    2990:	1cc00136 	bltu	r3,r19,2998 <__umoddi3+0x238>
    2994:	1880f136 	bltu	r3,r2,2d5c <__umoddi3+0x5fc>
    2998:	18a1c83a 	sub	r16,r3,r2
    299c:	8009883a 	mov	r4,r16
    29a0:	a80b883a 	mov	r5,r21
    29a4:	00009dc0 	call	9dc <__umodsi3>
    29a8:	8009883a 	mov	r4,r16
    29ac:	a80b883a 	mov	r5,r21
    29b0:	1023883a 	mov	r17,r2
    29b4:	00009d40 	call	9d4 <__udivsi3>
    29b8:	1009883a 	mov	r4,r2
    29bc:	b00b883a 	mov	r5,r22
    29c0:	8822943a 	slli	r17,r17,16
    29c4:	00009e40 	call	9e4 <__mulsi3>
    29c8:	a13fffcc 	andi	r4,r20,65535
    29cc:	8906b03a 	or	r3,r17,r4
    29d0:	1880042e 	bgeu	r3,r2,29e4 <__umoddi3+0x284>
    29d4:	1cc7883a 	add	r3,r3,r19
    29d8:	1cc00236 	bltu	r3,r19,29e4 <__umoddi3+0x284>
    29dc:	1880012e 	bgeu	r3,r2,29e4 <__umoddi3+0x284>
    29e0:	1cc7883a 	add	r3,r3,r19
    29e4:	1887c83a 	sub	r3,r3,r2
    29e8:	1c84d83a 	srl	r2,r3,r18
    29ec:	0007883a 	mov	r3,zero
    29f0:	00000206 	br	29fc <__umoddi3+0x29c>
    29f4:	2005883a 	mov	r2,r4
    29f8:	2807883a 	mov	r3,r5
    29fc:	dfc00b17 	ldw	ra,44(sp)
    2a00:	df000a17 	ldw	fp,40(sp)
    2a04:	ddc00917 	ldw	r23,36(sp)
    2a08:	dd800817 	ldw	r22,32(sp)
    2a0c:	dd400717 	ldw	r21,28(sp)
    2a10:	dd000617 	ldw	r20,24(sp)
    2a14:	dcc00517 	ldw	r19,20(sp)
    2a18:	dc800417 	ldw	r18,16(sp)
    2a1c:	dc400317 	ldw	r17,12(sp)
    2a20:	dc000217 	ldw	r16,8(sp)
    2a24:	dec00c04 	addi	sp,sp,48
    2a28:	f800283a 	ret
    2a2c:	00803fc4 	movi	r2,255
    2a30:	11c0b02e 	bgeu	r2,r7,2cf4 <__umoddi3+0x594>
    2a34:	01400204 	movi	r5,8
    2a38:	282b883a 	mov	r21,r5
    2a3c:	003f9b06 	br	28ac <__alt_data_end+0xffff28ac>
    2a40:	00804034 	movhi	r2,256
    2a44:	10bfffc4 	addi	r2,r2,-1
    2a48:	1180b02e 	bgeu	r2,r6,2d0c <__umoddi3+0x5ac>
    2a4c:	01400604 	movi	r5,24
    2a50:	2805883a 	mov	r2,r5
    2a54:	003f5a06 	br	27c0 <__alt_data_end+0xffff27c0>
    2a58:	00803fc4 	movi	r2,255
    2a5c:	14c0ae2e 	bgeu	r2,r19,2d18 <__umoddi3+0x5b8>
    2a60:	00800204 	movi	r2,8
    2a64:	1007883a 	mov	r3,r2
    2a68:	003fad06 	br	2920 <__alt_data_end+0xffff2920>
    2a6c:	3d0a983a 	sll	r5,r7,r20
    2a70:	356cd83a 	srl	r22,r6,r21
    2a74:	8d78d83a 	srl	fp,r17,r21
    2a78:	8d10983a 	sll	r8,r17,r20
    2a7c:	2dacb03a 	or	r22,r5,r22
    2a80:	b02ed43a 	srli	r23,r22,16
    2a84:	8564d83a 	srl	r18,r16,r21
    2a88:	e009883a 	mov	r4,fp
    2a8c:	b80b883a 	mov	r5,r23
    2a90:	44a4b03a 	or	r18,r8,r18
    2a94:	3526983a 	sll	r19,r6,r20
    2a98:	00009dc0 	call	9dc <__umodsi3>
    2a9c:	e009883a 	mov	r4,fp
    2aa0:	b80b883a 	mov	r5,r23
    2aa4:	b47fffcc 	andi	r17,r22,65535
    2aa8:	d8800015 	stw	r2,0(sp)
    2aac:	00009d40 	call	9d4 <__udivsi3>
    2ab0:	1009883a 	mov	r4,r2
    2ab4:	880b883a 	mov	r5,r17
    2ab8:	1039883a 	mov	fp,r2
    2abc:	00009e40 	call	9e4 <__mulsi3>
    2ac0:	d9800017 	ldw	r6,0(sp)
    2ac4:	9008d43a 	srli	r4,r18,16
    2ac8:	8520983a 	sll	r16,r16,r20
    2acc:	300c943a 	slli	r6,r6,16
    2ad0:	3106b03a 	or	r3,r6,r4
    2ad4:	1880042e 	bgeu	r3,r2,2ae8 <__umoddi3+0x388>
    2ad8:	1d87883a 	add	r3,r3,r22
    2adc:	e13fffc4 	addi	r4,fp,-1
    2ae0:	1d809a2e 	bgeu	r3,r22,2d4c <__umoddi3+0x5ec>
    2ae4:	2039883a 	mov	fp,r4
    2ae8:	1887c83a 	sub	r3,r3,r2
    2aec:	1809883a 	mov	r4,r3
    2af0:	b80b883a 	mov	r5,r23
    2af4:	d8c00115 	stw	r3,4(sp)
    2af8:	00009dc0 	call	9dc <__umodsi3>
    2afc:	d8c00117 	ldw	r3,4(sp)
    2b00:	b80b883a 	mov	r5,r23
    2b04:	d8800015 	stw	r2,0(sp)
    2b08:	1809883a 	mov	r4,r3
    2b0c:	00009d40 	call	9d4 <__udivsi3>
    2b10:	880b883a 	mov	r5,r17
    2b14:	1009883a 	mov	r4,r2
    2b18:	102f883a 	mov	r23,r2
    2b1c:	00009e40 	call	9e4 <__mulsi3>
    2b20:	d9800017 	ldw	r6,0(sp)
    2b24:	947fffcc 	andi	r17,r18,65535
    2b28:	300c943a 	slli	r6,r6,16
    2b2c:	3464b03a 	or	r18,r6,r17
    2b30:	9080042e 	bgeu	r18,r2,2b44 <__umoddi3+0x3e4>
    2b34:	95a5883a 	add	r18,r18,r22
    2b38:	b8ffffc4 	addi	r3,r23,-1
    2b3c:	95807f2e 	bgeu	r18,r22,2d3c <__umoddi3+0x5dc>
    2b40:	182f883a 	mov	r23,r3
    2b44:	e038943a 	slli	fp,fp,16
    2b48:	980cd43a 	srli	r6,r19,16
    2b4c:	98ffffcc 	andi	r3,r19,65535
    2b50:	bf38b03a 	or	fp,r23,fp
    2b54:	e02ed43a 	srli	r23,fp,16
    2b58:	e73fffcc 	andi	fp,fp,65535
    2b5c:	180b883a 	mov	r5,r3
    2b60:	e009883a 	mov	r4,fp
    2b64:	d9800015 	stw	r6,0(sp)
    2b68:	d8c00115 	stw	r3,4(sp)
    2b6c:	90a5c83a 	sub	r18,r18,r2
    2b70:	00009e40 	call	9e4 <__mulsi3>
    2b74:	d8c00117 	ldw	r3,4(sp)
    2b78:	b809883a 	mov	r4,r23
    2b7c:	1023883a 	mov	r17,r2
    2b80:	180b883a 	mov	r5,r3
    2b84:	00009e40 	call	9e4 <__mulsi3>
    2b88:	d9800017 	ldw	r6,0(sp)
    2b8c:	b809883a 	mov	r4,r23
    2b90:	d8800115 	stw	r2,4(sp)
    2b94:	300b883a 	mov	r5,r6
    2b98:	302f883a 	mov	r23,r6
    2b9c:	00009e40 	call	9e4 <__mulsi3>
    2ba0:	e009883a 	mov	r4,fp
    2ba4:	b80b883a 	mov	r5,r23
    2ba8:	d8800015 	stw	r2,0(sp)
    2bac:	00009e40 	call	9e4 <__mulsi3>
    2bb0:	d8c00117 	ldw	r3,4(sp)
    2bb4:	880cd43a 	srli	r6,r17,16
    2bb8:	d9c00017 	ldw	r7,0(sp)
    2bbc:	1885883a 	add	r2,r3,r2
    2bc0:	118d883a 	add	r6,r2,r6
    2bc4:	30c0022e 	bgeu	r6,r3,2bd0 <__umoddi3+0x470>
    2bc8:	00800074 	movhi	r2,1
    2bcc:	388f883a 	add	r7,r7,r2
    2bd0:	3006d43a 	srli	r3,r6,16
    2bd4:	300c943a 	slli	r6,r6,16
    2bd8:	8c7fffcc 	andi	r17,r17,65535
    2bdc:	38c7883a 	add	r3,r7,r3
    2be0:	3463883a 	add	r17,r6,r17
    2be4:	90c03d36 	bltu	r18,r3,2cdc <__umoddi3+0x57c>
    2be8:	90c06026 	beq	r18,r3,2d6c <__umoddi3+0x60c>
    2bec:	90c9c83a 	sub	r4,r18,r3
    2bf0:	880f883a 	mov	r7,r17
    2bf4:	81cfc83a 	sub	r7,r16,r7
    2bf8:	81c7803a 	cmpltu	r3,r16,r7
    2bfc:	20c7c83a 	sub	r3,r4,r3
    2c00:	1d44983a 	sll	r2,r3,r21
    2c04:	3d0ed83a 	srl	r7,r7,r20
    2c08:	1d06d83a 	srl	r3,r3,r20
    2c0c:	11c4b03a 	or	r2,r2,r7
    2c10:	003f7a06 	br	29fc <__alt_data_end+0xffff29fc>
    2c14:	0025883a 	mov	r18,zero
    2c18:	003ef806 	br	27fc <__alt_data_end+0xffff27fc>
    2c1c:	98a6983a 	sll	r19,r19,r2
    2c20:	88e8d83a 	srl	r20,r17,r3
    2c24:	80c6d83a 	srl	r3,r16,r3
    2c28:	982ad43a 	srli	r21,r19,16
    2c2c:	88a2983a 	sll	r17,r17,r2
    2c30:	a009883a 	mov	r4,r20
    2c34:	a80b883a 	mov	r5,r21
    2c38:	88eeb03a 	or	r23,r17,r3
    2c3c:	1025883a 	mov	r18,r2
    2c40:	00009dc0 	call	9dc <__umodsi3>
    2c44:	a009883a 	mov	r4,r20
    2c48:	a80b883a 	mov	r5,r21
    2c4c:	1023883a 	mov	r17,r2
    2c50:	9dbfffcc 	andi	r22,r19,65535
    2c54:	00009d40 	call	9d4 <__udivsi3>
    2c58:	1009883a 	mov	r4,r2
    2c5c:	b00b883a 	mov	r5,r22
    2c60:	00009e40 	call	9e4 <__mulsi3>
    2c64:	8822943a 	slli	r17,r17,16
    2c68:	b808d43a 	srli	r4,r23,16
    2c6c:	84a8983a 	sll	r20,r16,r18
    2c70:	8906b03a 	or	r3,r17,r4
    2c74:	1880042e 	bgeu	r3,r2,2c88 <__umoddi3+0x528>
    2c78:	1cc7883a 	add	r3,r3,r19
    2c7c:	1cc00236 	bltu	r3,r19,2c88 <__umoddi3+0x528>
    2c80:	1880012e 	bgeu	r3,r2,2c88 <__umoddi3+0x528>
    2c84:	1cc7883a 	add	r3,r3,r19
    2c88:	18a1c83a 	sub	r16,r3,r2
    2c8c:	8009883a 	mov	r4,r16
    2c90:	a80b883a 	mov	r5,r21
    2c94:	00009dc0 	call	9dc <__umodsi3>
    2c98:	8009883a 	mov	r4,r16
    2c9c:	a80b883a 	mov	r5,r21
    2ca0:	1039883a 	mov	fp,r2
    2ca4:	00009d40 	call	9d4 <__udivsi3>
    2ca8:	1009883a 	mov	r4,r2
    2cac:	b00b883a 	mov	r5,r22
    2cb0:	00009e40 	call	9e4 <__mulsi3>
    2cb4:	e006943a 	slli	r3,fp,16
    2cb8:	b93fffcc 	andi	r4,r23,65535
    2cbc:	1906b03a 	or	r3,r3,r4
    2cc0:	1880042e 	bgeu	r3,r2,2cd4 <__umoddi3+0x574>
    2cc4:	1cc7883a 	add	r3,r3,r19
    2cc8:	1cc00236 	bltu	r3,r19,2cd4 <__umoddi3+0x574>
    2ccc:	1880012e 	bgeu	r3,r2,2cd4 <__umoddi3+0x574>
    2cd0:	1cc7883a 	add	r3,r3,r19
    2cd4:	18a3c83a 	sub	r17,r3,r2
    2cd8:	003f1e06 	br	2954 <__alt_data_end+0xffff2954>
    2cdc:	8ccfc83a 	sub	r7,r17,r19
    2ce0:	1d89c83a 	sub	r4,r3,r22
    2ce4:	89e3803a 	cmpltu	r17,r17,r7
    2ce8:	2463c83a 	sub	r17,r4,r17
    2cec:	9449c83a 	sub	r4,r18,r17
    2cf0:	003fc006 	br	2bf4 <__alt_data_end+0xffff2bf4>
    2cf4:	000b883a 	mov	r5,zero
    2cf8:	002b883a 	mov	r21,zero
    2cfc:	003eeb06 	br	28ac <__alt_data_end+0xffff28ac>
    2d00:	01400404 	movi	r5,16
    2d04:	282b883a 	mov	r21,r5
    2d08:	003ee806 	br	28ac <__alt_data_end+0xffff28ac>
    2d0c:	01400404 	movi	r5,16
    2d10:	2805883a 	mov	r2,r5
    2d14:	003eaa06 	br	27c0 <__alt_data_end+0xffff27c0>
    2d18:	0005883a 	mov	r2,zero
    2d1c:	0007883a 	mov	r3,zero
    2d20:	003eff06 	br	2920 <__alt_data_end+0xffff2920>
    2d24:	00800404 	movi	r2,16
    2d28:	1007883a 	mov	r3,r2
    2d2c:	003efc06 	br	2920 <__alt_data_end+0xffff2920>
    2d30:	000b883a 	mov	r5,zero
    2d34:	0005883a 	mov	r2,zero
    2d38:	003ea106 	br	27c0 <__alt_data_end+0xffff27c0>
    2d3c:	90bf802e 	bgeu	r18,r2,2b40 <__alt_data_end+0xffff2b40>
    2d40:	bdffff84 	addi	r23,r23,-2
    2d44:	95a5883a 	add	r18,r18,r22
    2d48:	003f7e06 	br	2b44 <__alt_data_end+0xffff2b44>
    2d4c:	18bf652e 	bgeu	r3,r2,2ae4 <__alt_data_end+0xffff2ae4>
    2d50:	e73fff84 	addi	fp,fp,-2
    2d54:	1d87883a 	add	r3,r3,r22
    2d58:	003f6306 	br	2ae8 <__alt_data_end+0xffff2ae8>
    2d5c:	1cc7883a 	add	r3,r3,r19
    2d60:	003f0d06 	br	2998 <__alt_data_end+0xffff2998>
    2d64:	8005883a 	mov	r2,r16
    2d68:	003edf06 	br	28e8 <__alt_data_end+0xffff28e8>
    2d6c:	847fdb36 	bltu	r16,r17,2cdc <__alt_data_end+0xffff2cdc>
    2d70:	880f883a 	mov	r7,r17
    2d74:	0009883a 	mov	r4,zero
    2d78:	003f9e06 	br	2bf4 <__alt_data_end+0xffff2bf4>
