
transmit_test.elf:     file format elf32-littlenios2
transmit_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000007b4 memsz 0x000007b4 flags r-x
    LOAD off    0x000017d4 vaddr 0x000007d4 paddr 0x000007d8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000017dc vaddr 0x000007dc paddr 0x000007dc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000017d8  2**0
                  CONTENTS
  2 .text         00000770  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00000790  00000790  00001790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000007d4  000007d8  000017d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000007dc  000007dc  000017dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000007e8  000007e8  000017d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000250  00000000  00000000  00001800  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001611  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ca5  00000000  00000000  00003061  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000dc8  00000000  00000000  00003d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000394  00000000  00000000  00004ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000008f5  00000000  00000000  00004e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000912  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000606c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  000060b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007144  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00007147  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000714a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000714b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00007155  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000715e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00007167  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0000716e  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  000071a7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009c22b  00000000  00000000  0000a81a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000790 l    d  .rodata	00000000 .rodata
000007d4 l    d  .rwdata	00000000 .rwdata
000007dc l    d  .bss	00000000 .bss
000007e8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../transmit_test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000063c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000314 g     F .text	0000002c alt_main
000007d8 g       *ABS*	00000000 __flash_rwdata_start
0000005c g     F .text	00000008 setParity
000004f4 g     F .text	00000038 alt_putstr
000007d4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000007e0 g     O .bss	00000004 alt_argv
000087d4 g       *ABS*	00000000 _gp
0000052c g     F .text	00000004 usleep
000001f4 g     F .text	00000028 memcpy
00000758 g     F .text	00000008 .hidden __udivsi3
000007e8 g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000610 g     F .text	00000004 alt_dcache_flush_all
000007d8 g       *ABS*	00000000 __ram_rwdata_end
000007d4 g       *ABS*	00000000 __ram_rodata_end
00000760 g     F .text	00000008 .hidden __umodsi3
000007e8 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000554 g     F .text	00000034 altera_avalon_jtag_uart_write
00000340 g     F .text	0000016c alt_printf
00000020 g     F .text	0000003c _start
00000550 g     F .text	00000004 alt_sys_init
00000768 g     F .text	00000028 .hidden __mulsi3
000007d4 g       *ABS*	00000000 __ram_rwdata_start
00000790 g       *ABS*	00000000 __ram_rodata_start
00000588 g     F .text	00000088 alt_busy_sleep
0000008c g     F .text	00000070 getBits
000007e8 g       *ABS*	00000000 __alt_stack_base
00000064 g     F .text	00000020 getParity
000007dc g       *ABS*	00000000 __bss_start
000000fc g     F .text	000000f8 main
000007dc g     O .bss	00000004 alt_envp
00000084 g     F .text	00000008 getCharacter
000006a8 g     F .text	00000054 .hidden __divsi3
00000790 g       *ABS*	00000000 __flash_rodata_start
00000530 g     F .text	00000020 alt_irq_init
000007e4 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000007d8 g       *ABS*	00000000 _edata
000007e8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000618 g     F .text	00000008 altera_nios2_qsys_irq_init
000006fc g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000620 g     F .text	0000001c strlen
000004ac g     F .text	00000048 alt_putchar
00000614 g     F .text	00000004 alt_icache_flush_all
0000021c g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a1f514 	ori	gp,gp,34772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1081f714 	ori	r2,r2,2012

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c1fa14 	ori	r3,r3,2024

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7870>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	000021c0 	call	21c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00003140 	call	314 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7884>

0000005c <setParity>:
	//out ^= 1 << (parity & 1);
	if (parity & 1) {
		out ^= 1 >> 7;
	}
	return out;
}
  5c:	2105883a 	add	r2,r4,r4
  60:	f800283a 	ret

00000064 <getParity>:

unsigned int getParity(unsigned int c) {
	int parity = c;
	parity ^= parity >> 4;
  64:	2005d13a 	srai	r2,r4,4
  68:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 2;
  6c:	2005d0ba 	srai	r2,r4,2
  70:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 1;
  74:	2005d07a 	srai	r2,r4,1
  78:	1104f03a 	xor	r2,r2,r4
	return parity & 1;
}
  7c:	1080004c 	andi	r2,r2,1
  80:	f800283a 	ret

00000084 <getCharacter>:

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}
  84:	2004d07a 	srli	r2,r4,1
  88:	f800283a 	ret

0000008c <getBits>:
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
  8c:	2004d13a 	srli	r2,r4,4

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}

unsigned int getBits(unsigned int c) {
  90:	defffa04 	addi	sp,sp,-24
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
  94:	200ad1fa 	srli	r5,r4,7
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  98:	1080004c 	andi	r2,r2,1
  9c:	d8800015 	stw	r2,0(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
  a0:	2004d0fa 	srli	r2,r4,3
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
  a4:	200cd1ba 	srli	r6,r4,6
			(c >> 5) & 0b00000001,
  a8:	200ed17a 	srli	r7,r4,5
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  ac:	1080004c 	andi	r2,r2,1
  b0:	d8800115 	stw	r2,4(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
  b4:	2004d0ba 	srli	r2,r4,2
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  b8:	2940004c 	andi	r5,r5,1
  bc:	3180004c 	andi	r6,r6,1
  c0:	1080004c 	andi	r2,r2,1
  c4:	d8800215 	stw	r2,8(sp)
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
  c8:	2004d07a 	srli	r2,r4,1
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  cc:	2100004c 	andi	r4,r4,1
  d0:	d9000415 	stw	r4,16(sp)
  d4:	1080004c 	andi	r2,r2,1
  d8:	01000034 	movhi	r4,0
  dc:	d8800315 	stw	r2,12(sp)
  e0:	2101ea04 	addi	r4,r4,1960
  e4:	39c0004c 	andi	r7,r7,1

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}

unsigned int getBits(unsigned int c) {
  e8:	dfc00515 	stw	ra,20(sp)
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  ec:	00003400 	call	340 <alt_printf>
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
			(c >> 0) & 0b00000001);
}
  f0:	dfc00517 	ldw	ra,20(sp)
  f4:	dec00604 	addi	sp,sp,24
  f8:	f800283a 	ret

000000fc <main>:
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
	alt_putstr("Hello from Nios II!\n");
  fc:	01000034 	movhi	r4,0
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
 100:	defff504 	addi	sp,sp,-44
	alt_putstr("Hello from Nios II!\n");
 104:	2101e404 	addi	r4,r4,1936
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
 108:	dfc00a15 	stw	ra,40(sp)
 10c:	dd000915 	stw	r20,36(sp)
 110:	dcc00815 	stw	r19,32(sp)
 114:	dc800715 	stw	r18,28(sp)
 118:	dc400615 	stw	r17,24(sp)
 11c:	dc000515 	stw	r16,20(sp)
	alt_putstr("Hello from Nios II!\n");
 120:	00004f40 	call	4f4 <alt_putstr>
	//alt_putchar(*parallel_in);
	//alt_putstr("\n");
	//int c = alt_getchar();
	//alt_putstr("\n");
	int i = 0;
	char hello[20] = "Hello, world! abc123";
 124:	01400034 	movhi	r5,0
 128:	d809883a 	mov	r4,sp
 12c:	2941ef04 	addi	r5,r5,1980
 130:	01800504 	movi	r6,20
 134:	00001f40 	call	1f4 <memcpy>
	//alt_putstr("Input the char you would like to send.\n");
	//alt_putchar(*parallel_in);
	//alt_putstr("\n");
	//int c = alt_getchar();
	//alt_putstr("\n");
	int i = 0;
 138:	0021883a 	mov	r16,zero
	char hello[20] = "Hello, world! abc123";

	while (i < 20) {

		*transmit_enable = 0x0;
 13c:	04543004 	movi	r17,20672
		*load = 0x0;
 140:	04943804 	movi	r18,20704
		//*parallel_out = c;
		*parallel_out = (hello[i]);
 144:	05143c04 	movi	r20,20720
		//getBits(*parallel_out);
		//alt_putchar(getCharacter(*parallel_out));
		//alt_putstr("\ngetCharacter(*parallel_out)\n");
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
		*transmit_enable = 0x1;
 148:	04c00044 	movi	r19,1
	int i = 0;
	char hello[20] = "Hello, world! abc123";

	while (i < 20) {

		*transmit_enable = 0x0;
 14c:	88000005 	stb	zero,0(r17)
		*load = 0x0;
 150:	90000005 	stb	zero,0(r18)
 154:	dc05883a 	add	r2,sp,r16
		//*parallel_out = c;
		*parallel_out = (hello[i]);
 158:	10800003 	ldbu	r2,0(r2)
		*parallel_out = setParity(*parallel_out);
		//getBits(*parallel_out);
		//alt_putchar(getCharacter(*parallel_out));
		//alt_putstr("\ngetCharacter(*parallel_out)\n");
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
 15c:	0100fa04 	movi	r4,1000
	while (i < 20) {

		*transmit_enable = 0x0;
		*load = 0x0;
		//*parallel_out = c;
		*parallel_out = (hello[i]);
 160:	a0800005 	stb	r2,0(r20)
		//getBits(*parallel_out);
		//alt_putstr("\n*parallel_out\n");
		//alt_putchar((*parallel_out >> 1));
		//alt_putchar(*parallel_out);
		*parallel_out = setParity(*parallel_out);
 164:	a0800003 	ldbu	r2,0(r20)
 168:	10803fcc 	andi	r2,r2,255
	parity ^= parity >> 4;
	parity ^= parity >> 2;
	parity ^= parity >> 1;

	//alt_putchar(c);
	int out = ((c  << 1));
 16c:	1085883a 	add	r2,r2,r2
		*parallel_out = (hello[i]);
		//getBits(*parallel_out);
		//alt_putstr("\n*parallel_out\n");
		//alt_putchar((*parallel_out >> 1));
		//alt_putchar(*parallel_out);
		*parallel_out = setParity(*parallel_out);
 170:	a0800005 	stb	r2,0(r20)
		//getBits(*parallel_out);
		//alt_putchar(getCharacter(*parallel_out));
		//alt_putstr("\ngetCharacter(*parallel_out)\n");
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
 174:	000052c0 	call	52c <usleep>
		*transmit_enable = 0x1;
 178:	8cc00005 	stb	r19,0(r17)
		*load = 0x1;
 17c:	94c00005 	stb	r19,0(r18)
		usleep(50);
 180:	01000c84 	movi	r4,50
 184:	000052c0 	call	52c <usleep>
		*load = 0x0;
		while (!*char_received) {
 188:	00d44404 	movi	r3,20752
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
		*transmit_enable = 0x1;
		*load = 0x1;
		usleep(50);
		*load = 0x0;
 18c:	90000005 	stb	zero,0(r18)
		while (!*char_received) {
 190:	18800003 	ldbu	r2,0(r3)
 194:	10803fcc 	andi	r2,r2,255
 198:	103ffd26 	beq	r2,zero,190 <_gp+0xffff79bc>
		}
		while (!*char_sent) {
 19c:	00d43404 	movi	r3,20688
 1a0:	18800003 	ldbu	r2,0(r3)
 1a4:	10803fcc 	andi	r2,r2,255
 1a8:	103ffd26 	beq	r2,zero,1a0 <_gp+0xffff79cc>
		}
		*transmit_enable = 0x0;
 1ac:	88000005 	stb	zero,0(r17)
			alt_putstr("bad parity\n");
		} else {
			alt_putstr("good parity\n");
		}*/
		//getBits(*parallel_in);
		alt_putchar(getCharacter(*parallel_in));
 1b0:	00944804 	movi	r2,20768
 1b4:	11000003 	ldbu	r4,0(r2)
		//alt_putstr("\n");
		i++;
 1b8:	84000044 	addi	r16,r16,1
			alt_putstr("bad parity\n");
		} else {
			alt_putstr("good parity\n");
		}*/
		//getBits(*parallel_in);
		alt_putchar(getCharacter(*parallel_in));
 1bc:	21003fcc 	andi	r4,r4,255
 1c0:	2008d07a 	srli	r4,r4,1
 1c4:	00004ac0 	call	4ac <alt_putchar>
	//int c = alt_getchar();
	//alt_putstr("\n");
	int i = 0;
	char hello[20] = "Hello, world! abc123";

	while (i < 20) {
 1c8:	00800504 	movi	r2,20
 1cc:	80bfdf1e 	bne	r16,r2,14c <_gp+0xffff7978>
		//alt_putstr("\n");
		i++;
	}

	return 0;
}
 1d0:	0005883a 	mov	r2,zero
 1d4:	dfc00a17 	ldw	ra,40(sp)
 1d8:	dd000917 	ldw	r20,36(sp)
 1dc:	dcc00817 	ldw	r19,32(sp)
 1e0:	dc800717 	ldw	r18,28(sp)
 1e4:	dc400617 	ldw	r17,24(sp)
 1e8:	dc000517 	ldw	r16,20(sp)
 1ec:	dec00b04 	addi	sp,sp,44
 1f0:	f800283a 	ret

000001f4 <memcpy>:
 1f4:	2005883a 	mov	r2,r4
 1f8:	0007883a 	mov	r3,zero
 1fc:	19800626 	beq	r3,r6,218 <memcpy+0x24>
 200:	28c9883a 	add	r4,r5,r3
 204:	21c00003 	ldbu	r7,0(r4)
 208:	10c9883a 	add	r4,r2,r3
 20c:	18c00044 	addi	r3,r3,1
 210:	21c00005 	stb	r7,0(r4)
 214:	003ff906 	br	1fc <_gp+0xffff7a28>
 218:	f800283a 	ret

0000021c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 21c:	deffff04 	addi	sp,sp,-4
 220:	01000034 	movhi	r4,0
 224:	01400034 	movhi	r5,0
 228:	dfc00015 	stw	ra,0(sp)
 22c:	2101f504 	addi	r4,r4,2004
 230:	2941f604 	addi	r5,r5,2008

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 234:	2140061e 	bne	r4,r5,250 <alt_load+0x34>
 238:	01000034 	movhi	r4,0
 23c:	01400034 	movhi	r5,0
 240:	21000804 	addi	r4,r4,32
 244:	29400804 	addi	r5,r5,32
 248:	2140141e 	bne	r4,r5,29c <alt_load+0x80>
 24c:	00000d06 	br	284 <alt_load+0x68>
 250:	00c00034 	movhi	r3,0
 254:	18c1f604 	addi	r3,r3,2008
 258:	00bfff04 	movi	r2,-4
 25c:	1907c83a 	sub	r3,r3,r4
 260:	1886703a 	and	r3,r3,r2
 264:	0005883a 	mov	r2,zero
  {
    while( to != end )
 268:	10fff326 	beq	r2,r3,238 <_gp+0xffff7a64>
 26c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 270:	39c00017 	ldw	r7,0(r7)
 274:	110d883a 	add	r6,r2,r4
 278:	10800104 	addi	r2,r2,4
 27c:	31c00015 	stw	r7,0(r6)
 280:	003ff906 	br	268 <_gp+0xffff7a94>
 284:	01000034 	movhi	r4,0
 288:	01400034 	movhi	r5,0
 28c:	2101e404 	addi	r4,r4,1936
 290:	2941e404 	addi	r5,r5,1936

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 294:	2140121e 	bne	r4,r5,2e0 <alt_load+0xc4>
 298:	00000d06 	br	2d0 <alt_load+0xb4>
 29c:	00c00034 	movhi	r3,0
 2a0:	18c00804 	addi	r3,r3,32
 2a4:	00bfff04 	movi	r2,-4
 2a8:	1907c83a 	sub	r3,r3,r4
 2ac:	1886703a 	and	r3,r3,r2
 2b0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2b4:	10fff326 	beq	r2,r3,284 <_gp+0xffff7ab0>
 2b8:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 2bc:	39c00017 	ldw	r7,0(r7)
 2c0:	110d883a 	add	r6,r2,r4
 2c4:	10800104 	addi	r2,r2,4
 2c8:	31c00015 	stw	r7,0(r6)
 2cc:	003ff906 	br	2b4 <_gp+0xffff7ae0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2d0:	00006100 	call	610 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 2d4:	dfc00017 	ldw	ra,0(sp)
 2d8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2dc:	00006141 	jmpi	614 <alt_icache_flush_all>
 2e0:	00c00034 	movhi	r3,0
 2e4:	18c1f504 	addi	r3,r3,2004
 2e8:	00bfff04 	movi	r2,-4
 2ec:	1907c83a 	sub	r3,r3,r4
 2f0:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2f8:	10fff526 	beq	r2,r3,2d0 <_gp+0xffff7afc>
 2fc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 300:	39c00017 	ldw	r7,0(r7)
 304:	110d883a 	add	r6,r2,r4
 308:	10800104 	addi	r2,r2,4
 30c:	31c00015 	stw	r7,0(r6)
 310:	003ff906 	br	2f8 <_gp+0xffff7b24>

00000314 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 314:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 318:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 31c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 320:	00005300 	call	530 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 324:	00005500 	call	550 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 328:	d1200417 	ldw	r4,-32752(gp)
 32c:	d1600317 	ldw	r5,-32756(gp)
 330:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 334:	dfc00017 	ldw	ra,0(sp)
 338:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 33c:	00000fc1 	jmpi	fc <main>

00000340 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 340:	defff204 	addi	sp,sp,-56
 344:	dfc00a15 	stw	ra,40(sp)
 348:	df000915 	stw	fp,36(sp)
 34c:	ddc00815 	stw	r23,32(sp)
 350:	dd800715 	stw	r22,28(sp)
 354:	dd400615 	stw	r21,24(sp)
 358:	dd000515 	stw	r20,20(sp)
 35c:	dcc00415 	stw	r19,16(sp)
 360:	dc800315 	stw	r18,12(sp)
 364:	dc400215 	stw	r17,8(sp)
 368:	dc000115 	stw	r16,4(sp)
 36c:	d9400b15 	stw	r5,44(sp)
 370:	d9800c15 	stw	r6,48(sp)
 374:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 378:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 37c:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
 380:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 384:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 388:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 38c:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 390:	11000007 	ldb	r4,0(r2)
 394:	20003926 	beq	r4,zero,47c <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 398:	24000226 	beq	r4,r16,3a4 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 39c:	14400044 	addi	r17,r2,1
 3a0:	00001106 	br	3e8 <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 3a4:	14400084 	addi	r17,r2,2
 3a8:	10800047 	ldb	r2,1(r2)
 3ac:	10003326 	beq	r2,zero,47c <alt_printf+0x13c>
            {
                if (c == '%')
 3b0:	1400021e 	bne	r2,r16,3bc <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 3b4:	8009883a 	mov	r4,r16
 3b8:	00000b06 	br	3e8 <alt_printf+0xa8>
                } 
                else if (c == 'c')
 3bc:	1480051e 	bne	r2,r18,3d4 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 3c0:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 3c4:	ad800104 	addi	r22,r21,4
 3c8:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 3cc:	00004ac0 	call	4ac <alt_putchar>
 3d0:	00002806 	br	474 <alt_printf+0x134>
                }
                else if (c == 'x')
 3d4:	14c01f1e 	bne	r2,r19,454 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 3d8:	adc00017 	ldw	r23,0(r21)
 3dc:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 3e0:	b800031e 	bne	r23,zero,3f0 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
 3e4:	01000c04 	movi	r4,48
 3e8:	00004ac0 	call	4ac <alt_putchar>
                        continue;
 3ec:	00002106 	br	474 <alt_printf+0x134>
 3f0:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 3f4:	00c003c4 	movi	r3,15
 3f8:	1d84983a 	sll	r2,r3,r22
 3fc:	15c4703a 	and	r2,r2,r23
 400:	1000021e 	bne	r2,zero,40c <alt_printf+0xcc>
                        digit_shift -= 4;
 404:	b5bfff04 	addi	r22,r22,-4
 408:	003ffb06 	br	3f8 <_gp+0xffff7c24>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 40c:	070003c4 	movi	fp,15
                        if (digit <= 9)
 410:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 414:	b0001716 	blt	r22,zero,474 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 418:	e584983a 	sll	r2,fp,r22
 41c:	15c4703a 	and	r2,r2,r23
 420:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
 424:	18800236 	bltu	r3,r2,430 <alt_printf+0xf0>
                            c = '0' + digit;
 428:	11000c04 	addi	r4,r2,48
 42c:	00000106 	br	434 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
 430:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
 434:	21003fcc 	andi	r4,r4,255
 438:	2100201c 	xori	r4,r4,128
 43c:	213fe004 	addi	r4,r4,-128
 440:	d8c00015 	stw	r3,0(sp)
 444:	00004ac0 	call	4ac <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 448:	b5bfff04 	addi	r22,r22,-4
 44c:	d8c00017 	ldw	r3,0(sp)
 450:	003ff006 	br	414 <_gp+0xffff7c40>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 454:	1500071e 	bne	r2,r20,474 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 458:	ad800017 	ldw	r22,0(r21)
 45c:	ad400104 	addi	r21,r21,4

                    while(*s)
 460:	b1000007 	ldb	r4,0(r22)
 464:	20000326 	beq	r4,zero,474 <alt_printf+0x134>
                      alt_putchar(*s++);
 468:	b5800044 	addi	r22,r22,1
 46c:	00004ac0 	call	4ac <alt_putchar>
 470:	003ffb06 	br	460 <_gp+0xffff7c8c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 474:	8805883a 	mov	r2,r17
 478:	003fc506 	br	390 <_gp+0xffff7bbc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 47c:	dfc00a17 	ldw	ra,40(sp)
 480:	df000917 	ldw	fp,36(sp)
 484:	ddc00817 	ldw	r23,32(sp)
 488:	dd800717 	ldw	r22,28(sp)
 48c:	dd400617 	ldw	r21,24(sp)
 490:	dd000517 	ldw	r20,20(sp)
 494:	dcc00417 	ldw	r19,16(sp)
 498:	dc800317 	ldw	r18,12(sp)
 49c:	dc400217 	ldw	r17,8(sp)
 4a0:	dc000117 	ldw	r16,4(sp)
 4a4:	dec00e04 	addi	sp,sp,56
 4a8:	f800283a 	ret

000004ac <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4ac:	defffd04 	addi	sp,sp,-12
 4b0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 4b4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4b8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 4bc:	01000034 	movhi	r4,0
 4c0:	2101f504 	addi	r4,r4,2004
 4c4:	d80b883a 	mov	r5,sp
 4c8:	01800044 	movi	r6,1
 4cc:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4d0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 4d4:	00005540 	call	554 <altera_avalon_jtag_uart_write>
 4d8:	00ffffc4 	movi	r3,-1
 4dc:	10c00126 	beq	r2,r3,4e4 <alt_putchar+0x38>
        return -1;
    }
    return c;
 4e0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 4e4:	dfc00217 	ldw	ra,8(sp)
 4e8:	dc000117 	ldw	r16,4(sp)
 4ec:	dec00304 	addi	sp,sp,12
 4f0:	f800283a 	ret

000004f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4f4:	defffe04 	addi	sp,sp,-8
 4f8:	dc000015 	stw	r16,0(sp)
 4fc:	dfc00115 	stw	ra,4(sp)
 500:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 504:	00006200 	call	620 <strlen>
 508:	01000034 	movhi	r4,0
 50c:	2101f504 	addi	r4,r4,2004
 510:	800b883a 	mov	r5,r16
 514:	100d883a 	mov	r6,r2
 518:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 51c:	dfc00117 	ldw	ra,4(sp)
 520:	dc000017 	ldw	r16,0(sp)
 524:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 528:	00005541 	jmpi	554 <altera_avalon_jtag_uart_write>

0000052c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 52c:	00005881 	jmpi	588 <alt_busy_sleep>

00000530 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 530:	deffff04 	addi	sp,sp,-4
 534:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 538:	00006180 	call	618 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 53c:	00800044 	movi	r2,1
 540:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 544:	dfc00017 	ldw	ra,0(sp)
 548:	dec00104 	addi	sp,sp,4
 54c:	f800283a 	ret

00000550 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 550:	f800283a 	ret

00000554 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 554:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 558:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 55c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 560:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 564:	2980072e 	bgeu	r5,r6,584 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 568:	38c00037 	ldwio	r3,0(r7)
 56c:	18ffffec 	andhi	r3,r3,65535
 570:	183ffc26 	beq	r3,zero,564 <_gp+0xffff7d90>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 574:	28c00007 	ldb	r3,0(r5)
 578:	20c00035 	stwio	r3,0(r4)
 57c:	29400044 	addi	r5,r5,1
 580:	003ff806 	br	564 <_gp+0xffff7d90>

  return count;
}
 584:	f800283a 	ret

00000588 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 588:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 58c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 590:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 594:	dc000015 	stw	r16,0(sp)
 598:	dfc00115 	stw	ra,4(sp)
 59c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5a0:	00007580 	call	758 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5a4:	10001026 	beq	r2,zero,5e8 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5a8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5ac:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5b0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5b4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5b8:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5bc:	297fffc4 	addi	r5,r5,-1
 5c0:	283ffe1e 	bne	r5,zero,5bc <_gp+0xffff7de8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5c4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5c8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5cc:	18bffb16 	blt	r3,r2,5bc <_gp+0xffff7de8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5d0:	8009883a 	mov	r4,r16
 5d4:	01400144 	movi	r5,5
 5d8:	00007680 	call	768 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5dc:	10bfffc4 	addi	r2,r2,-1
 5e0:	103ffe1e 	bne	r2,zero,5dc <_gp+0xffff7e08>
 5e4:	00000506 	br	5fc <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5e8:	8009883a 	mov	r4,r16
 5ec:	01400144 	movi	r5,5
 5f0:	00007680 	call	768 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5f4:	10bfffc4 	addi	r2,r2,-1
 5f8:	00bffe16 	blt	zero,r2,5f4 <_gp+0xffff7e20>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 5fc:	0005883a 	mov	r2,zero
 600:	dfc00117 	ldw	ra,4(sp)
 604:	dc000017 	ldw	r16,0(sp)
 608:	dec00204 	addi	sp,sp,8
 60c:	f800283a 	ret

00000610 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 610:	f800283a 	ret

00000614 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 614:	f800283a 	ret

00000618 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 618:	000170fa 	wrctl	ienable,zero
 61c:	f800283a 	ret

00000620 <strlen>:
 620:	2005883a 	mov	r2,r4
 624:	10c00007 	ldb	r3,0(r2)
 628:	18000226 	beq	r3,zero,634 <strlen+0x14>
 62c:	10800044 	addi	r2,r2,1
 630:	003ffc06 	br	624 <_gp+0xffff7e50>
 634:	1105c83a 	sub	r2,r2,r4
 638:	f800283a 	ret

0000063c <udivmodsi4>:
 63c:	2900182e 	bgeu	r5,r4,6a0 <udivmodsi4+0x64>
 640:	28001716 	blt	r5,zero,6a0 <udivmodsi4+0x64>
 644:	00800804 	movi	r2,32
 648:	00c00044 	movi	r3,1
 64c:	00000206 	br	658 <udivmodsi4+0x1c>
 650:	10001126 	beq	r2,zero,698 <udivmodsi4+0x5c>
 654:	28000516 	blt	r5,zero,66c <udivmodsi4+0x30>
 658:	294b883a 	add	r5,r5,r5
 65c:	10bfffc4 	addi	r2,r2,-1
 660:	18c7883a 	add	r3,r3,r3
 664:	293ffa36 	bltu	r5,r4,650 <_gp+0xffff7e7c>
 668:	18000b26 	beq	r3,zero,698 <udivmodsi4+0x5c>
 66c:	0005883a 	mov	r2,zero
 670:	21400236 	bltu	r4,r5,67c <udivmodsi4+0x40>
 674:	2149c83a 	sub	r4,r4,r5
 678:	10c4b03a 	or	r2,r2,r3
 67c:	1806d07a 	srli	r3,r3,1
 680:	280ad07a 	srli	r5,r5,1
 684:	183ffa1e 	bne	r3,zero,670 <_gp+0xffff7e9c>
 688:	3000011e 	bne	r6,zero,690 <udivmodsi4+0x54>
 68c:	f800283a 	ret
 690:	2005883a 	mov	r2,r4
 694:	f800283a 	ret
 698:	0005883a 	mov	r2,zero
 69c:	003ffa06 	br	688 <_gp+0xffff7eb4>
 6a0:	00c00044 	movi	r3,1
 6a4:	003ff106 	br	66c <_gp+0xffff7e98>

000006a8 <__divsi3>:
 6a8:	defffe04 	addi	sp,sp,-8
 6ac:	dfc00115 	stw	ra,4(sp)
 6b0:	dc000015 	stw	r16,0(sp)
 6b4:	20000b16 	blt	r4,zero,6e4 <__divsi3+0x3c>
 6b8:	0021883a 	mov	r16,zero
 6bc:	28000c16 	blt	r5,zero,6f0 <__divsi3+0x48>
 6c0:	000d883a 	mov	r6,zero
 6c4:	000063c0 	call	63c <udivmodsi4>
 6c8:	0407c83a 	sub	r3,zero,r16
 6cc:	1884f03a 	xor	r2,r3,r2
 6d0:	1405883a 	add	r2,r2,r16
 6d4:	dfc00117 	ldw	ra,4(sp)
 6d8:	dc000017 	ldw	r16,0(sp)
 6dc:	dec00204 	addi	sp,sp,8
 6e0:	f800283a 	ret
 6e4:	0109c83a 	sub	r4,zero,r4
 6e8:	04000044 	movi	r16,1
 6ec:	283ff40e 	bge	r5,zero,6c0 <_gp+0xffff7eec>
 6f0:	014bc83a 	sub	r5,zero,r5
 6f4:	8400005c 	xori	r16,r16,1
 6f8:	003ff106 	br	6c0 <_gp+0xffff7eec>

000006fc <__modsi3>:
 6fc:	defffd04 	addi	sp,sp,-12
 700:	dfc00215 	stw	ra,8(sp)
 704:	dc400115 	stw	r17,4(sp)
 708:	dc000015 	stw	r16,0(sp)
 70c:	20000c16 	blt	r4,zero,740 <__modsi3+0x44>
 710:	0023883a 	mov	r17,zero
 714:	0021883a 	mov	r16,zero
 718:	28000d16 	blt	r5,zero,750 <__modsi3+0x54>
 71c:	01800044 	movi	r6,1
 720:	000063c0 	call	63c <udivmodsi4>
 724:	1404f03a 	xor	r2,r2,r16
 728:	8885883a 	add	r2,r17,r2
 72c:	dfc00217 	ldw	ra,8(sp)
 730:	dc400117 	ldw	r17,4(sp)
 734:	dc000017 	ldw	r16,0(sp)
 738:	dec00304 	addi	sp,sp,12
 73c:	f800283a 	ret
 740:	0109c83a 	sub	r4,zero,r4
 744:	04400044 	movi	r17,1
 748:	043fffc4 	movi	r16,-1
 74c:	283ff30e 	bge	r5,zero,71c <_gp+0xffff7f48>
 750:	014bc83a 	sub	r5,zero,r5
 754:	003ff106 	br	71c <_gp+0xffff7f48>

00000758 <__udivsi3>:
 758:	000d883a 	mov	r6,zero
 75c:	000063c1 	jmpi	63c <udivmodsi4>

00000760 <__umodsi3>:
 760:	01800044 	movi	r6,1
 764:	000063c1 	jmpi	63c <udivmodsi4>

00000768 <__mulsi3>:
 768:	0005883a 	mov	r2,zero
 76c:	20000726 	beq	r4,zero,78c <__mulsi3+0x24>
 770:	20c0004c 	andi	r3,r4,1
 774:	2008d07a 	srli	r4,r4,1
 778:	18000126 	beq	r3,zero,780 <__mulsi3+0x18>
 77c:	1145883a 	add	r2,r2,r5
 780:	294b883a 	add	r5,r5,r5
 784:	203ffa1e 	bne	r4,zero,770 <_gp+0xffff7f9c>
 788:	f800283a 	ret
 78c:	f800283a 	ret
