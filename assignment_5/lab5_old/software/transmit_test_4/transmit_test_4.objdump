
transmit_test_4.elf:     file format elf32-littlenios2
transmit_test_4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000007a4 memsz 0x000007a4 flags r-x
    LOAD off    0x000017c4 vaddr 0x000007c4 paddr 0x000007c8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000017cc vaddr 0x000007cc paddr 0x000007cc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000017c8  2**0
                  CONTENTS
  2 .text         0000075c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0000077c  0000077c  0000177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000007c4  000007c8  000017c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000007cc  000007cc  000017cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000007d8  000007d8  000017c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000250  00000000  00000000  000017f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001634  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ca9  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000dd8  00000000  00000000  00003d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000394  00000000  00000000  00004af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000008f3  00000000  00000000  00004e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a64  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000061e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  00006228  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000072be  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000072c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000072c5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000072c6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000072cf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  000072e1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  000072e8  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00007321  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009f5cb  00000000  00000000  0000a994  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000077c l    d  .rodata	00000000 .rodata
000007c4 l    d  .rwdata	00000000 .rwdata
000007cc l    d  .bss	00000000 .bss
000007d8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../transmit_test_4_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000628 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
0000031c g     F .text	0000002c alt_main
000007c8 g       *ABS*	00000000 __flash_rwdata_start
0000005c g     F .text	00000008 setParity
000004fc g     F .text	00000038 alt_putstr
000007c4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000007d0 g     O .bss	00000004 alt_argv
000087c4 g       *ABS*	00000000 _gp
00000534 g     F .text	00000004 usleep
000001e0 g     F .text	00000028 memcpy
00000744 g     F .text	00000008 .hidden __udivsi3
000007d8 g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000618 g     F .text	00000004 alt_dcache_flush_all
000007c8 g       *ABS*	00000000 __ram_rwdata_end
000007c4 g       *ABS*	00000000 __ram_rodata_end
0000074c g     F .text	00000008 .hidden __umodsi3
000007d8 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
0000055c g     F .text	00000034 altera_avalon_jtag_uart_write
00000348 g     F .text	0000016c alt_printf
00000020 g     F .text	0000003c _start
00000558 g     F .text	00000004 alt_sys_init
00000754 g     F .text	00000028 .hidden __mulsi3
000007c4 g       *ABS*	00000000 __ram_rwdata_start
0000077c g       *ABS*	00000000 __ram_rodata_start
00000590 g     F .text	00000088 alt_busy_sleep
0000008c g     F .text	00000070 getBits
000007d8 g       *ABS*	00000000 __alt_stack_base
00000064 g     F .text	00000020 getParity
000007cc g       *ABS*	00000000 __bss_start
000000fc g     F .text	000000e4 main
000007cc g     O .bss	00000004 alt_envp
00000084 g     F .text	00000008 getCharacter
00000694 g     F .text	00000054 .hidden __divsi3
0000077c g       *ABS*	00000000 __flash_rodata_start
00000538 g     F .text	00000020 alt_irq_init
000007d4 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000007c8 g       *ABS*	00000000 _edata
000007d8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000620 g     F .text	00000008 altera_nios2_qsys_irq_init
000006e8 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000208 g     F .text	0000001c strlen
000004b4 g     F .text	00000048 alt_putchar
0000061c g     F .text	00000004 alt_icache_flush_all
00000224 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a1f114 	ori	gp,gp,34756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1081f314 	ori	r2,r2,1996

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c1f614 	ori	r3,r3,2008

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7880>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00002240 	call	224 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000031c0 	call	31c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7894>

0000005c <setParity>:
	//out ^= 1 << (parity & 1);
	if (parity & 1) {
		out ^= 1 >> 7;
	}
	return out;
}
  5c:	2105883a 	add	r2,r4,r4
  60:	f800283a 	ret

00000064 <getParity>:

unsigned int getParity(unsigned int c) {
	int parity = c;
	parity ^= parity >> 4;
  64:	2005d13a 	srai	r2,r4,4
  68:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 2;
  6c:	2005d0ba 	srai	r2,r4,2
  70:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 1;
  74:	2005d07a 	srai	r2,r4,1
  78:	1104f03a 	xor	r2,r2,r4
	return parity & 1;
}
  7c:	1080004c 	andi	r2,r2,1
  80:	f800283a 	ret

00000084 <getCharacter>:

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}
  84:	2004d07a 	srli	r2,r4,1
  88:	f800283a 	ret

0000008c <getBits>:
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
  8c:	2004d13a 	srli	r2,r4,4

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}

unsigned int getBits(unsigned int c) {
  90:	defffa04 	addi	sp,sp,-24
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
  94:	200ad1fa 	srli	r5,r4,7
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  98:	1080004c 	andi	r2,r2,1
  9c:	d8800015 	stw	r2,0(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
  a0:	2004d0fa 	srli	r2,r4,3
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
  a4:	200cd1ba 	srli	r6,r4,6
			(c >> 5) & 0b00000001,
  a8:	200ed17a 	srli	r7,r4,5
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  ac:	1080004c 	andi	r2,r2,1
  b0:	d8800115 	stw	r2,4(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
  b4:	2004d0ba 	srli	r2,r4,2
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  b8:	2940004c 	andi	r5,r5,1
  bc:	3180004c 	andi	r6,r6,1
  c0:	1080004c 	andi	r2,r2,1
  c4:	d8800215 	stw	r2,8(sp)
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
  c8:	2004d07a 	srli	r2,r4,1
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  cc:	2100004c 	andi	r4,r4,1
  d0:	d9000415 	stw	r4,16(sp)
  d4:	1080004c 	andi	r2,r2,1
  d8:	01000034 	movhi	r4,0
  dc:	d8800315 	stw	r2,12(sp)
  e0:	2101e504 	addi	r4,r4,1940
  e4:	39c0004c 	andi	r7,r7,1

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}

unsigned int getBits(unsigned int c) {
  e8:	dfc00515 	stw	ra,20(sp)
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  ec:	00003480 	call	348 <alt_printf>
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
			(c >> 0) & 0b00000001);
}
  f0:	dfc00517 	ldw	ra,20(sp)
  f4:	dec00604 	addi	sp,sp,24
  f8:	f800283a 	ret

000000fc <main>:
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
	alt_putstr("Hello from Nios II!!\n");
  fc:	01000034 	movhi	r4,0
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
 100:	defff304 	addi	sp,sp,-52
	alt_putstr("Hello from Nios II!!\n");
 104:	2101df04 	addi	r4,r4,1916
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
 108:	dfc00c15 	stw	ra,48(sp)
 10c:	dd000b15 	stw	r20,44(sp)
 110:	dcc00a15 	stw	r19,40(sp)
 114:	dc800915 	stw	r18,36(sp)
 118:	dc400815 	stw	r17,32(sp)
 11c:	dc000715 	stw	r16,28(sp)
	alt_putstr("Hello from Nios II!!\n");
 120:	00004fc0 	call	4fc <alt_putstr>

	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 124:	01400034 	movhi	r5,0
 128:	d809883a 	mov	r4,sp
 12c:	2941ea04 	addi	r5,r5,1960
 130:	01800684 	movi	r6,26
 134:	00001e00 	call	1e0 <memcpy>
	int j;
	for (j = 0; j < strlen(msg); j++) {
 138:	0021883a 	mov	r16,zero
		*transmit_enable = 0x0;
 13c:	04943004 	movi	r18,20672
		*load = 0x0;
 140:	04543804 	movi	r17,20704
		*data_bus_output = setParity(msg[j]);
 144:	05143c04 	movi	r20,20720
		usleep(1000);
		*load = 0x1;
 148:	04c00044 	movi	r19,1
{ 
	alt_putstr("Hello from Nios II!!\n");

	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int j;
	for (j = 0; j < strlen(msg); j++) {
 14c:	d809883a 	mov	r4,sp
 150:	00002080 	call	208 <strlen>
 154:	8080192e 	bgeu	r16,r2,1bc <main+0xc0>
		*transmit_enable = 0x0;
 158:	90000005 	stb	zero,0(r18)
		*load = 0x0;
 15c:	88000005 	stb	zero,0(r17)
 160:	dc05883a 	add	r2,sp,r16
		*data_bus_output = setParity(msg[j]);
 164:	10800007 	ldb	r2,0(r2)
		usleep(1000);
 168:	0100fa04 	movi	r4,1000
	parity ^= parity >> 4;
	parity ^= parity >> 2;
	parity ^= parity >> 1;

	//alt_putchar(c);
	int out = ((c  << 1));
 16c:	1085883a 	add	r2,r2,r2
	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int j;
	for (j = 0; j < strlen(msg); j++) {
		*transmit_enable = 0x0;
		*load = 0x0;
		*data_bus_output = setParity(msg[j]);
 170:	a0800005 	stb	r2,0(r20)
		usleep(1000);
 174:	00005340 	call	534 <usleep>
		*load = 0x1;
 178:	8cc00005 	stb	r19,0(r17)
		*transmit_enable = 0x1;
 17c:	94c00005 	stb	r19,0(r18)
		usleep(50);
 180:	01000c84 	movi	r4,50
 184:	00005340 	call	534 <usleep>
		*load = 0x0;
		while(!*character_sent);
 188:	00d43404 	movi	r3,20688
		*data_bus_output = setParity(msg[j]);
		usleep(1000);
		*load = 0x1;
		*transmit_enable = 0x1;
		usleep(50);
		*load = 0x0;
 18c:	88000005 	stb	zero,0(r17)
		while(!*character_sent);
 190:	18800003 	ldbu	r2,0(r3)
 194:	10803fcc 	andi	r2,r2,255
 198:	1080201c 	xori	r2,r2,128
 19c:	10bfe004 	addi	r2,r2,-128
 1a0:	103ffb26 	beq	r2,zero,190 <_gp+0xffff79cc>
		*transmit_enable = 0x0;
 1a4:	00943004 	movi	r2,20672
 1a8:	10000005 	stb	zero,0(r2)
		usleep(25000);
 1ac:	01186a04 	movi	r4,25000
 1b0:	00005340 	call	534 <usleep>
{ 
	alt_putstr("Hello from Nios II!!\n");

	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int j;
	for (j = 0; j < strlen(msg); j++) {
 1b4:	84000044 	addi	r16,r16,1
 1b8:	003fe406 	br	14c <_gp+0xffff7988>
		while(!*character_sent);
		*transmit_enable = 0x0;
		usleep(25000);
	}
	return 0;
}
 1bc:	0005883a 	mov	r2,zero
 1c0:	dfc00c17 	ldw	ra,48(sp)
 1c4:	dd000b17 	ldw	r20,44(sp)
 1c8:	dcc00a17 	ldw	r19,40(sp)
 1cc:	dc800917 	ldw	r18,36(sp)
 1d0:	dc400817 	ldw	r17,32(sp)
 1d4:	dc000717 	ldw	r16,28(sp)
 1d8:	dec00d04 	addi	sp,sp,52
 1dc:	f800283a 	ret

000001e0 <memcpy>:
 1e0:	2005883a 	mov	r2,r4
 1e4:	0007883a 	mov	r3,zero
 1e8:	19800626 	beq	r3,r6,204 <memcpy+0x24>
 1ec:	28c9883a 	add	r4,r5,r3
 1f0:	21c00003 	ldbu	r7,0(r4)
 1f4:	10c9883a 	add	r4,r2,r3
 1f8:	18c00044 	addi	r3,r3,1
 1fc:	21c00005 	stb	r7,0(r4)
 200:	003ff906 	br	1e8 <_gp+0xffff7a24>
 204:	f800283a 	ret

00000208 <strlen>:
 208:	2005883a 	mov	r2,r4
 20c:	10c00007 	ldb	r3,0(r2)
 210:	18000226 	beq	r3,zero,21c <strlen+0x14>
 214:	10800044 	addi	r2,r2,1
 218:	003ffc06 	br	20c <_gp+0xffff7a48>
 21c:	1105c83a 	sub	r2,r2,r4
 220:	f800283a 	ret

00000224 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 224:	deffff04 	addi	sp,sp,-4
 228:	01000034 	movhi	r4,0
 22c:	01400034 	movhi	r5,0
 230:	dfc00015 	stw	ra,0(sp)
 234:	2101f104 	addi	r4,r4,1988
 238:	2941f204 	addi	r5,r5,1992

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 23c:	2140061e 	bne	r4,r5,258 <alt_load+0x34>
 240:	01000034 	movhi	r4,0
 244:	01400034 	movhi	r5,0
 248:	21000804 	addi	r4,r4,32
 24c:	29400804 	addi	r5,r5,32
 250:	2140141e 	bne	r4,r5,2a4 <alt_load+0x80>
 254:	00000d06 	br	28c <alt_load+0x68>
 258:	00c00034 	movhi	r3,0
 25c:	18c1f204 	addi	r3,r3,1992
 260:	00bfff04 	movi	r2,-4
 264:	1907c83a 	sub	r3,r3,r4
 268:	1886703a 	and	r3,r3,r2
 26c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 270:	10fff326 	beq	r2,r3,240 <_gp+0xffff7a7c>
 274:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 278:	39c00017 	ldw	r7,0(r7)
 27c:	110d883a 	add	r6,r2,r4
 280:	10800104 	addi	r2,r2,4
 284:	31c00015 	stw	r7,0(r6)
 288:	003ff906 	br	270 <_gp+0xffff7aac>
 28c:	01000034 	movhi	r4,0
 290:	01400034 	movhi	r5,0
 294:	2101df04 	addi	r4,r4,1916
 298:	2941df04 	addi	r5,r5,1916

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 29c:	2140121e 	bne	r4,r5,2e8 <alt_load+0xc4>
 2a0:	00000d06 	br	2d8 <alt_load+0xb4>
 2a4:	00c00034 	movhi	r3,0
 2a8:	18c00804 	addi	r3,r3,32
 2ac:	00bfff04 	movi	r2,-4
 2b0:	1907c83a 	sub	r3,r3,r4
 2b4:	1886703a 	and	r3,r3,r2
 2b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2bc:	10fff326 	beq	r2,r3,28c <_gp+0xffff7ac8>
 2c0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 2c4:	39c00017 	ldw	r7,0(r7)
 2c8:	110d883a 	add	r6,r2,r4
 2cc:	10800104 	addi	r2,r2,4
 2d0:	31c00015 	stw	r7,0(r6)
 2d4:	003ff906 	br	2bc <_gp+0xffff7af8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2d8:	00006180 	call	618 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 2dc:	dfc00017 	ldw	ra,0(sp)
 2e0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2e4:	000061c1 	jmpi	61c <alt_icache_flush_all>
 2e8:	00c00034 	movhi	r3,0
 2ec:	18c1f104 	addi	r3,r3,1988
 2f0:	00bfff04 	movi	r2,-4
 2f4:	1907c83a 	sub	r3,r3,r4
 2f8:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 300:	10fff526 	beq	r2,r3,2d8 <_gp+0xffff7b14>
 304:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 308:	39c00017 	ldw	r7,0(r7)
 30c:	110d883a 	add	r6,r2,r4
 310:	10800104 	addi	r2,r2,4
 314:	31c00015 	stw	r7,0(r6)
 318:	003ff906 	br	300 <_gp+0xffff7b3c>

0000031c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 31c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 320:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 324:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 328:	00005380 	call	538 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 32c:	00005580 	call	558 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 330:	d1200417 	ldw	r4,-32752(gp)
 334:	d1600317 	ldw	r5,-32756(gp)
 338:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 33c:	dfc00017 	ldw	ra,0(sp)
 340:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 344:	00000fc1 	jmpi	fc <main>

00000348 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 348:	defff204 	addi	sp,sp,-56
 34c:	dfc00a15 	stw	ra,40(sp)
 350:	df000915 	stw	fp,36(sp)
 354:	ddc00815 	stw	r23,32(sp)
 358:	dd800715 	stw	r22,28(sp)
 35c:	dd400615 	stw	r21,24(sp)
 360:	dd000515 	stw	r20,20(sp)
 364:	dcc00415 	stw	r19,16(sp)
 368:	dc800315 	stw	r18,12(sp)
 36c:	dc400215 	stw	r17,8(sp)
 370:	dc000115 	stw	r16,4(sp)
 374:	d9400b15 	stw	r5,44(sp)
 378:	d9800c15 	stw	r6,48(sp)
 37c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 380:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 384:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
 388:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 38c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 390:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 394:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 398:	11000007 	ldb	r4,0(r2)
 39c:	20003926 	beq	r4,zero,484 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 3a0:	24000226 	beq	r4,r16,3ac <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 3a4:	14400044 	addi	r17,r2,1
 3a8:	00001106 	br	3f0 <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 3ac:	14400084 	addi	r17,r2,2
 3b0:	10800047 	ldb	r2,1(r2)
 3b4:	10003326 	beq	r2,zero,484 <alt_printf+0x13c>
            {
                if (c == '%')
 3b8:	1400021e 	bne	r2,r16,3c4 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 3bc:	8009883a 	mov	r4,r16
 3c0:	00000b06 	br	3f0 <alt_printf+0xa8>
                } 
                else if (c == 'c')
 3c4:	1480051e 	bne	r2,r18,3dc <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 3c8:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 3cc:	ad800104 	addi	r22,r21,4
 3d0:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 3d4:	00004b40 	call	4b4 <alt_putchar>
 3d8:	00002806 	br	47c <alt_printf+0x134>
                }
                else if (c == 'x')
 3dc:	14c01f1e 	bne	r2,r19,45c <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 3e0:	adc00017 	ldw	r23,0(r21)
 3e4:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 3e8:	b800031e 	bne	r23,zero,3f8 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
 3ec:	01000c04 	movi	r4,48
 3f0:	00004b40 	call	4b4 <alt_putchar>
                        continue;
 3f4:	00002106 	br	47c <alt_printf+0x134>
 3f8:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 3fc:	00c003c4 	movi	r3,15
 400:	1d84983a 	sll	r2,r3,r22
 404:	15c4703a 	and	r2,r2,r23
 408:	1000021e 	bne	r2,zero,414 <alt_printf+0xcc>
                        digit_shift -= 4;
 40c:	b5bfff04 	addi	r22,r22,-4
 410:	003ffb06 	br	400 <_gp+0xffff7c3c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 414:	070003c4 	movi	fp,15
                        if (digit <= 9)
 418:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 41c:	b0001716 	blt	r22,zero,47c <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 420:	e584983a 	sll	r2,fp,r22
 424:	15c4703a 	and	r2,r2,r23
 428:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
 42c:	18800236 	bltu	r3,r2,438 <alt_printf+0xf0>
                            c = '0' + digit;
 430:	11000c04 	addi	r4,r2,48
 434:	00000106 	br	43c <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
 438:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
 43c:	21003fcc 	andi	r4,r4,255
 440:	2100201c 	xori	r4,r4,128
 444:	213fe004 	addi	r4,r4,-128
 448:	d8c00015 	stw	r3,0(sp)
 44c:	00004b40 	call	4b4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 450:	b5bfff04 	addi	r22,r22,-4
 454:	d8c00017 	ldw	r3,0(sp)
 458:	003ff006 	br	41c <_gp+0xffff7c58>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 45c:	1500071e 	bne	r2,r20,47c <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 460:	ad800017 	ldw	r22,0(r21)
 464:	ad400104 	addi	r21,r21,4

                    while(*s)
 468:	b1000007 	ldb	r4,0(r22)
 46c:	20000326 	beq	r4,zero,47c <alt_printf+0x134>
                      alt_putchar(*s++);
 470:	b5800044 	addi	r22,r22,1
 474:	00004b40 	call	4b4 <alt_putchar>
 478:	003ffb06 	br	468 <_gp+0xffff7ca4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 47c:	8805883a 	mov	r2,r17
 480:	003fc506 	br	398 <_gp+0xffff7bd4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 484:	dfc00a17 	ldw	ra,40(sp)
 488:	df000917 	ldw	fp,36(sp)
 48c:	ddc00817 	ldw	r23,32(sp)
 490:	dd800717 	ldw	r22,28(sp)
 494:	dd400617 	ldw	r21,24(sp)
 498:	dd000517 	ldw	r20,20(sp)
 49c:	dcc00417 	ldw	r19,16(sp)
 4a0:	dc800317 	ldw	r18,12(sp)
 4a4:	dc400217 	ldw	r17,8(sp)
 4a8:	dc000117 	ldw	r16,4(sp)
 4ac:	dec00e04 	addi	sp,sp,56
 4b0:	f800283a 	ret

000004b4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4b4:	defffd04 	addi	sp,sp,-12
 4b8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 4bc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4c0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 4c4:	01000034 	movhi	r4,0
 4c8:	2101f104 	addi	r4,r4,1988
 4cc:	d80b883a 	mov	r5,sp
 4d0:	01800044 	movi	r6,1
 4d4:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4d8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 4dc:	000055c0 	call	55c <altera_avalon_jtag_uart_write>
 4e0:	00ffffc4 	movi	r3,-1
 4e4:	10c00126 	beq	r2,r3,4ec <alt_putchar+0x38>
        return -1;
    }
    return c;
 4e8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 4ec:	dfc00217 	ldw	ra,8(sp)
 4f0:	dc000117 	ldw	r16,4(sp)
 4f4:	dec00304 	addi	sp,sp,12
 4f8:	f800283a 	ret

000004fc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4fc:	defffe04 	addi	sp,sp,-8
 500:	dc000015 	stw	r16,0(sp)
 504:	dfc00115 	stw	ra,4(sp)
 508:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 50c:	00002080 	call	208 <strlen>
 510:	01000034 	movhi	r4,0
 514:	2101f104 	addi	r4,r4,1988
 518:	800b883a 	mov	r5,r16
 51c:	100d883a 	mov	r6,r2
 520:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 524:	dfc00117 	ldw	ra,4(sp)
 528:	dc000017 	ldw	r16,0(sp)
 52c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 530:	000055c1 	jmpi	55c <altera_avalon_jtag_uart_write>

00000534 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 534:	00005901 	jmpi	590 <alt_busy_sleep>

00000538 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 538:	deffff04 	addi	sp,sp,-4
 53c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 540:	00006200 	call	620 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 544:	00800044 	movi	r2,1
 548:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 54c:	dfc00017 	ldw	ra,0(sp)
 550:	dec00104 	addi	sp,sp,4
 554:	f800283a 	ret

00000558 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 558:	f800283a 	ret

0000055c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 55c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 560:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 564:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 568:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 56c:	2980072e 	bgeu	r5,r6,58c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 570:	38c00037 	ldwio	r3,0(r7)
 574:	18ffffec 	andhi	r3,r3,65535
 578:	183ffc26 	beq	r3,zero,56c <_gp+0xffff7da8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 57c:	28c00007 	ldb	r3,0(r5)
 580:	20c00035 	stwio	r3,0(r4)
 584:	29400044 	addi	r5,r5,1
 588:	003ff806 	br	56c <_gp+0xffff7da8>

  return count;
}
 58c:	f800283a 	ret

00000590 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 590:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 594:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 598:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 59c:	dc000015 	stw	r16,0(sp)
 5a0:	dfc00115 	stw	ra,4(sp)
 5a4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5a8:	00007440 	call	744 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5ac:	10001026 	beq	r2,zero,5f0 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5b0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5b4:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 5b8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5bc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5c0:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5c4:	297fffc4 	addi	r5,r5,-1
 5c8:	283ffe1e 	bne	r5,zero,5c4 <_gp+0xffff7e00>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5cc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5d0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5d4:	18bffb16 	blt	r3,r2,5c4 <_gp+0xffff7e00>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5d8:	8009883a 	mov	r4,r16
 5dc:	01400144 	movi	r5,5
 5e0:	00007540 	call	754 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5e4:	10bfffc4 	addi	r2,r2,-1
 5e8:	103ffe1e 	bne	r2,zero,5e4 <_gp+0xffff7e20>
 5ec:	00000506 	br	604 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5f0:	8009883a 	mov	r4,r16
 5f4:	01400144 	movi	r5,5
 5f8:	00007540 	call	754 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5fc:	10bfffc4 	addi	r2,r2,-1
 600:	00bffe16 	blt	zero,r2,5fc <_gp+0xffff7e38>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 604:	0005883a 	mov	r2,zero
 608:	dfc00117 	ldw	ra,4(sp)
 60c:	dc000017 	ldw	r16,0(sp)
 610:	dec00204 	addi	sp,sp,8
 614:	f800283a 	ret

00000618 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 618:	f800283a 	ret

0000061c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 61c:	f800283a 	ret

00000620 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 620:	000170fa 	wrctl	ienable,zero
 624:	f800283a 	ret

00000628 <udivmodsi4>:
 628:	2900182e 	bgeu	r5,r4,68c <udivmodsi4+0x64>
 62c:	28001716 	blt	r5,zero,68c <udivmodsi4+0x64>
 630:	00800804 	movi	r2,32
 634:	00c00044 	movi	r3,1
 638:	00000206 	br	644 <udivmodsi4+0x1c>
 63c:	10001126 	beq	r2,zero,684 <udivmodsi4+0x5c>
 640:	28000516 	blt	r5,zero,658 <udivmodsi4+0x30>
 644:	294b883a 	add	r5,r5,r5
 648:	10bfffc4 	addi	r2,r2,-1
 64c:	18c7883a 	add	r3,r3,r3
 650:	293ffa36 	bltu	r5,r4,63c <_gp+0xffff7e78>
 654:	18000b26 	beq	r3,zero,684 <udivmodsi4+0x5c>
 658:	0005883a 	mov	r2,zero
 65c:	21400236 	bltu	r4,r5,668 <udivmodsi4+0x40>
 660:	2149c83a 	sub	r4,r4,r5
 664:	10c4b03a 	or	r2,r2,r3
 668:	1806d07a 	srli	r3,r3,1
 66c:	280ad07a 	srli	r5,r5,1
 670:	183ffa1e 	bne	r3,zero,65c <_gp+0xffff7e98>
 674:	3000011e 	bne	r6,zero,67c <udivmodsi4+0x54>
 678:	f800283a 	ret
 67c:	2005883a 	mov	r2,r4
 680:	f800283a 	ret
 684:	0005883a 	mov	r2,zero
 688:	003ffa06 	br	674 <_gp+0xffff7eb0>
 68c:	00c00044 	movi	r3,1
 690:	003ff106 	br	658 <_gp+0xffff7e94>

00000694 <__divsi3>:
 694:	defffe04 	addi	sp,sp,-8
 698:	dfc00115 	stw	ra,4(sp)
 69c:	dc000015 	stw	r16,0(sp)
 6a0:	20000b16 	blt	r4,zero,6d0 <__divsi3+0x3c>
 6a4:	0021883a 	mov	r16,zero
 6a8:	28000c16 	blt	r5,zero,6dc <__divsi3+0x48>
 6ac:	000d883a 	mov	r6,zero
 6b0:	00006280 	call	628 <udivmodsi4>
 6b4:	0407c83a 	sub	r3,zero,r16
 6b8:	1884f03a 	xor	r2,r3,r2
 6bc:	1405883a 	add	r2,r2,r16
 6c0:	dfc00117 	ldw	ra,4(sp)
 6c4:	dc000017 	ldw	r16,0(sp)
 6c8:	dec00204 	addi	sp,sp,8
 6cc:	f800283a 	ret
 6d0:	0109c83a 	sub	r4,zero,r4
 6d4:	04000044 	movi	r16,1
 6d8:	283ff40e 	bge	r5,zero,6ac <_gp+0xffff7ee8>
 6dc:	014bc83a 	sub	r5,zero,r5
 6e0:	8400005c 	xori	r16,r16,1
 6e4:	003ff106 	br	6ac <_gp+0xffff7ee8>

000006e8 <__modsi3>:
 6e8:	defffd04 	addi	sp,sp,-12
 6ec:	dfc00215 	stw	ra,8(sp)
 6f0:	dc400115 	stw	r17,4(sp)
 6f4:	dc000015 	stw	r16,0(sp)
 6f8:	20000c16 	blt	r4,zero,72c <__modsi3+0x44>
 6fc:	0023883a 	mov	r17,zero
 700:	0021883a 	mov	r16,zero
 704:	28000d16 	blt	r5,zero,73c <__modsi3+0x54>
 708:	01800044 	movi	r6,1
 70c:	00006280 	call	628 <udivmodsi4>
 710:	1404f03a 	xor	r2,r2,r16
 714:	8885883a 	add	r2,r17,r2
 718:	dfc00217 	ldw	ra,8(sp)
 71c:	dc400117 	ldw	r17,4(sp)
 720:	dc000017 	ldw	r16,0(sp)
 724:	dec00304 	addi	sp,sp,12
 728:	f800283a 	ret
 72c:	0109c83a 	sub	r4,zero,r4
 730:	04400044 	movi	r17,1
 734:	043fffc4 	movi	r16,-1
 738:	283ff30e 	bge	r5,zero,708 <_gp+0xffff7f44>
 73c:	014bc83a 	sub	r5,zero,r5
 740:	003ff106 	br	708 <_gp+0xffff7f44>

00000744 <__udivsi3>:
 744:	000d883a 	mov	r6,zero
 748:	00006281 	jmpi	628 <udivmodsi4>

0000074c <__umodsi3>:
 74c:	01800044 	movi	r6,1
 750:	00006281 	jmpi	628 <udivmodsi4>

00000754 <__mulsi3>:
 754:	0005883a 	mov	r2,zero
 758:	20000726 	beq	r4,zero,778 <__mulsi3+0x24>
 75c:	20c0004c 	andi	r3,r4,1
 760:	2008d07a 	srli	r4,r4,1
 764:	18000126 	beq	r3,zero,76c <__mulsi3+0x18>
 768:	1145883a 	add	r2,r2,r5
 76c:	294b883a 	add	r5,r5,r5
 770:	203ffa1e 	bne	r4,zero,75c <_gp+0xffff7f98>
 774:	f800283a 	ret
 778:	f800283a 	ret
