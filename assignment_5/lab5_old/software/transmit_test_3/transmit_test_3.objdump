
transmit_test_3.elf:     file format elf32-littlenios2
transmit_test_3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000054c memsz 0x0000054c flags r-x
    LOAD off    0x0000156c vaddr 0x0000056c paddr 0x00000570 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001574 vaddr 0x00000574 paddr 0x00000574 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001570  2**0
                  CONTENTS
  2 .text         00000518  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00000538  00000538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0000056c  00000570  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000574  00000574  00001574  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000580  00000580  00001570  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000210  00000000  00000000  00001598  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000012cc  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ad6  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c55  00000000  00000000  0000354a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002e4  00000000  00000000  000041a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000867  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007f0  00000000  00000000  00004ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000054dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  00005520  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000064fa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000064fd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006500  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006501  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00006502  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000650b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000651d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  0000655d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009f5cb  00000000  00000000  00009bd0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000538 l    d  .rodata	00000000 .rodata
0000056c l    d  .rwdata	00000000 .rwdata
00000574 l    d  .bss	00000000 .bss
00000580 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../transmit_test_3_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000003e4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
0000028c g     F .text	0000002c alt_main
00000570 g       *ABS*	00000000 __flash_rwdata_start
0000005c g     F .text	00000008 setParity
000002b8 g     F .text	00000038 alt_putstr
0000056c g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000578 g     O .bss	00000004 alt_argv
0000856c g       *ABS*	00000000 _gp
000002f0 g     F .text	00000004 usleep
00000150 g     F .text	00000028 memcpy
00000500 g     F .text	00000008 .hidden __udivsi3
00000580 g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000003d4 g     F .text	00000004 alt_dcache_flush_all
00000570 g       *ABS*	00000000 __ram_rwdata_end
0000056c g       *ABS*	00000000 __ram_rodata_end
00000508 g     F .text	00000008 .hidden __umodsi3
00000580 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000318 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000314 g     F .text	00000004 alt_sys_init
00000510 g     F .text	00000028 .hidden __mulsi3
0000056c g       *ABS*	00000000 __ram_rwdata_start
00000538 g       *ABS*	00000000 __ram_rodata_start
0000034c g     F .text	00000088 alt_busy_sleep
00000580 g       *ABS*	00000000 __alt_stack_base
00000574 g       *ABS*	00000000 __bss_start
0000006c g     F .text	000000e4 main
00000574 g     O .bss	00000004 alt_envp
00000064 g     F .text	00000008 getCharacter
00000450 g     F .text	00000054 .hidden __divsi3
00000538 g       *ABS*	00000000 __flash_rodata_start
000002f4 g     F .text	00000020 alt_irq_init
0000057c g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000570 g       *ABS*	00000000 _edata
00000580 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000003dc g     F .text	00000008 altera_nios2_qsys_irq_init
000004a4 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000178 g     F .text	0000001c strlen
000003d8 g     F .text	00000004 alt_icache_flush_all
00000194 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a15b14 	ori	gp,gp,34156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10815d14 	ori	r2,r2,1396

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c16014 	ori	r3,r3,1408

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7ad8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00001940 	call	194 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000028c0 	call	28c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7aec>

0000005c <setParity>:
	//out ^= 1 << (parity & 1);
	if (parity & 1) {
		out ^= 1 >> 7;
	}
	return out;
}
  5c:	2105883a 	add	r2,r4,r4
  60:	f800283a 	ret

00000064 <getCharacter>:

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}
  64:	2004d07a 	srli	r2,r4,1
  68:	f800283a 	ret

0000006c <main>:
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
	alt_putstr("Hello from Nios II!\n");
  6c:	01000034 	movhi	r4,0
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
  70:	defff304 	addi	sp,sp,-52
	alt_putstr("Hello from Nios II!\n");
  74:	21014e04 	addi	r4,r4,1336
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
  78:	dfc00c15 	stw	ra,48(sp)
  7c:	dd000b15 	stw	r20,44(sp)
  80:	dcc00a15 	stw	r19,40(sp)
  84:	dc800915 	stw	r18,36(sp)
  88:	dc400815 	stw	r17,32(sp)
  8c:	dc000715 	stw	r16,28(sp)
	alt_putstr("Hello from Nios II!\n");
  90:	00002b80 	call	2b8 <alt_putstr>

	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  94:	01400034 	movhi	r5,0
  98:	d809883a 	mov	r4,sp
  9c:	29415404 	addi	r5,r5,1360
  a0:	01800684 	movi	r6,26
  a4:	00001500 	call	150 <memcpy>
	int j;
	for (j = 0; j < strlen(msg); j++) {
  a8:	0021883a 	mov	r16,zero
		*transmit_enable = 0x0;
  ac:	04943004 	movi	r18,20672
		*load = 0x0;
  b0:	04543804 	movi	r17,20704
		*data_bus_output = setParity(msg[j]);
  b4:	05143c04 	movi	r20,20720
		usleep(1000);
		*load = 0x1;
  b8:	04c00044 	movi	r19,1
{ 
	alt_putstr("Hello from Nios II!\n");

	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int j;
	for (j = 0; j < strlen(msg); j++) {
  bc:	d809883a 	mov	r4,sp
  c0:	00001780 	call	178 <strlen>
  c4:	8080192e 	bgeu	r16,r2,12c <main+0xc0>
		*transmit_enable = 0x0;
  c8:	90000005 	stb	zero,0(r18)
		*load = 0x0;
  cc:	88000005 	stb	zero,0(r17)
  d0:	dc05883a 	add	r2,sp,r16
		*data_bus_output = setParity(msg[j]);
  d4:	10800007 	ldb	r2,0(r2)
		usleep(1000);
  d8:	0100fa04 	movi	r4,1000
	parity ^= parity >> 4;
	parity ^= parity >> 2;
	parity ^= parity >> 1;

	//alt_putchar(c);
	int out = ((c  << 1));
  dc:	1085883a 	add	r2,r2,r2
	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int j;
	for (j = 0; j < strlen(msg); j++) {
		*transmit_enable = 0x0;
		*load = 0x0;
		*data_bus_output = setParity(msg[j]);
  e0:	a0800005 	stb	r2,0(r20)
		usleep(1000);
  e4:	00002f00 	call	2f0 <usleep>
		*load = 0x1;
  e8:	8cc00005 	stb	r19,0(r17)
		*transmit_enable = 0x1;
  ec:	94c00005 	stb	r19,0(r18)
		usleep(50);
  f0:	01000c84 	movi	r4,50
  f4:	00002f00 	call	2f0 <usleep>
		*load = 0x0;
		while(!*character_sent);
  f8:	00d43404 	movi	r3,20688
		*data_bus_output = setParity(msg[j]);
		usleep(1000);
		*load = 0x1;
		*transmit_enable = 0x1;
		usleep(50);
		*load = 0x0;
  fc:	88000005 	stb	zero,0(r17)
		while(!*character_sent);
 100:	18800003 	ldbu	r2,0(r3)
 104:	10803fcc 	andi	r2,r2,255
 108:	1080201c 	xori	r2,r2,128
 10c:	10bfe004 	addi	r2,r2,-128
 110:	103ffb26 	beq	r2,zero,100 <_gp+0xffff7b94>
		*transmit_enable = 0x0;
 114:	00943004 	movi	r2,20672
 118:	10000005 	stb	zero,0(r2)
		usleep(25000);
 11c:	01186a04 	movi	r4,25000
 120:	00002f00 	call	2f0 <usleep>
{ 
	alt_putstr("Hello from Nios II!\n");

	char msg[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	int j;
	for (j = 0; j < strlen(msg); j++) {
 124:	84000044 	addi	r16,r16,1
 128:	003fe406 	br	bc <_gp+0xffff7b50>
		while(!*character_sent);
		*transmit_enable = 0x0;
		usleep(25000);
	}
	return 0;
}
 12c:	0005883a 	mov	r2,zero
 130:	dfc00c17 	ldw	ra,48(sp)
 134:	dd000b17 	ldw	r20,44(sp)
 138:	dcc00a17 	ldw	r19,40(sp)
 13c:	dc800917 	ldw	r18,36(sp)
 140:	dc400817 	ldw	r17,32(sp)
 144:	dc000717 	ldw	r16,28(sp)
 148:	dec00d04 	addi	sp,sp,52
 14c:	f800283a 	ret

00000150 <memcpy>:
 150:	2005883a 	mov	r2,r4
 154:	0007883a 	mov	r3,zero
 158:	19800626 	beq	r3,r6,174 <memcpy+0x24>
 15c:	28c9883a 	add	r4,r5,r3
 160:	21c00003 	ldbu	r7,0(r4)
 164:	10c9883a 	add	r4,r2,r3
 168:	18c00044 	addi	r3,r3,1
 16c:	21c00005 	stb	r7,0(r4)
 170:	003ff906 	br	158 <_gp+0xffff7bec>
 174:	f800283a 	ret

00000178 <strlen>:
 178:	2005883a 	mov	r2,r4
 17c:	10c00007 	ldb	r3,0(r2)
 180:	18000226 	beq	r3,zero,18c <strlen+0x14>
 184:	10800044 	addi	r2,r2,1
 188:	003ffc06 	br	17c <_gp+0xffff7c10>
 18c:	1105c83a 	sub	r2,r2,r4
 190:	f800283a 	ret

00000194 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 194:	deffff04 	addi	sp,sp,-4
 198:	01000034 	movhi	r4,0
 19c:	01400034 	movhi	r5,0
 1a0:	dfc00015 	stw	ra,0(sp)
 1a4:	21015b04 	addi	r4,r4,1388
 1a8:	29415c04 	addi	r5,r5,1392

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1ac:	2140061e 	bne	r4,r5,1c8 <alt_load+0x34>
 1b0:	01000034 	movhi	r4,0
 1b4:	01400034 	movhi	r5,0
 1b8:	21000804 	addi	r4,r4,32
 1bc:	29400804 	addi	r5,r5,32
 1c0:	2140141e 	bne	r4,r5,214 <alt_load+0x80>
 1c4:	00000d06 	br	1fc <alt_load+0x68>
 1c8:	00c00034 	movhi	r3,0
 1cc:	18c15c04 	addi	r3,r3,1392
 1d0:	00bfff04 	movi	r2,-4
 1d4:	1907c83a 	sub	r3,r3,r4
 1d8:	1886703a 	and	r3,r3,r2
 1dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1e0:	10fff326 	beq	r2,r3,1b0 <_gp+0xffff7c44>
 1e4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 1e8:	39c00017 	ldw	r7,0(r7)
 1ec:	110d883a 	add	r6,r2,r4
 1f0:	10800104 	addi	r2,r2,4
 1f4:	31c00015 	stw	r7,0(r6)
 1f8:	003ff906 	br	1e0 <_gp+0xffff7c74>
 1fc:	01000034 	movhi	r4,0
 200:	01400034 	movhi	r5,0
 204:	21014e04 	addi	r4,r4,1336
 208:	29414e04 	addi	r5,r5,1336

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20c:	2140121e 	bne	r4,r5,258 <alt_load+0xc4>
 210:	00000d06 	br	248 <alt_load+0xb4>
 214:	00c00034 	movhi	r3,0
 218:	18c00804 	addi	r3,r3,32
 21c:	00bfff04 	movi	r2,-4
 220:	1907c83a 	sub	r3,r3,r4
 224:	1886703a 	and	r3,r3,r2
 228:	0005883a 	mov	r2,zero
  {
    while( to != end )
 22c:	10fff326 	beq	r2,r3,1fc <_gp+0xffff7c90>
 230:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 234:	39c00017 	ldw	r7,0(r7)
 238:	110d883a 	add	r6,r2,r4
 23c:	10800104 	addi	r2,r2,4
 240:	31c00015 	stw	r7,0(r6)
 244:	003ff906 	br	22c <_gp+0xffff7cc0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 248:	00003d40 	call	3d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 24c:	dfc00017 	ldw	ra,0(sp)
 250:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 254:	00003d81 	jmpi	3d8 <alt_icache_flush_all>
 258:	00c00034 	movhi	r3,0
 25c:	18c15b04 	addi	r3,r3,1388
 260:	00bfff04 	movi	r2,-4
 264:	1907c83a 	sub	r3,r3,r4
 268:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 26c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 270:	10fff526 	beq	r2,r3,248 <_gp+0xffff7cdc>
 274:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 278:	39c00017 	ldw	r7,0(r7)
 27c:	110d883a 	add	r6,r2,r4
 280:	10800104 	addi	r2,r2,4
 284:	31c00015 	stw	r7,0(r6)
 288:	003ff906 	br	270 <_gp+0xffff7d04>

0000028c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 28c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 290:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 294:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 298:	00002f40 	call	2f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 29c:	00003140 	call	314 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2a0:	d1200417 	ldw	r4,-32752(gp)
 2a4:	d1600317 	ldw	r5,-32756(gp)
 2a8:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2ac:	dfc00017 	ldw	ra,0(sp)
 2b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2b4:	000006c1 	jmpi	6c <main>

000002b8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 2b8:	defffe04 	addi	sp,sp,-8
 2bc:	dc000015 	stw	r16,0(sp)
 2c0:	dfc00115 	stw	ra,4(sp)
 2c4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 2c8:	00001780 	call	178 <strlen>
 2cc:	01000034 	movhi	r4,0
 2d0:	21015b04 	addi	r4,r4,1388
 2d4:	800b883a 	mov	r5,r16
 2d8:	100d883a 	mov	r6,r2
 2dc:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 2e0:	dfc00117 	ldw	ra,4(sp)
 2e4:	dc000017 	ldw	r16,0(sp)
 2e8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 2ec:	00003181 	jmpi	318 <altera_avalon_jtag_uart_write>

000002f0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 2f0:	000034c1 	jmpi	34c <alt_busy_sleep>

000002f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2f4:	deffff04 	addi	sp,sp,-4
 2f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2fc:	00003dc0 	call	3dc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 300:	00800044 	movi	r2,1
 304:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 308:	dfc00017 	ldw	ra,0(sp)
 30c:	dec00104 	addi	sp,sp,4
 310:	f800283a 	ret

00000314 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 314:	f800283a 	ret

00000318 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 318:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 31c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 320:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 324:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 328:	2980072e 	bgeu	r5,r6,348 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 32c:	38c00037 	ldwio	r3,0(r7)
 330:	18ffffec 	andhi	r3,r3,65535
 334:	183ffc26 	beq	r3,zero,328 <_gp+0xffff7dbc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 338:	28c00007 	ldb	r3,0(r5)
 33c:	20c00035 	stwio	r3,0(r4)
 340:	29400044 	addi	r5,r5,1
 344:	003ff806 	br	328 <_gp+0xffff7dbc>

  return count;
}
 348:	f800283a 	ret

0000034c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 34c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 350:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 354:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 358:	dc000015 	stw	r16,0(sp)
 35c:	dfc00115 	stw	ra,4(sp)
 360:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 364:	00005000 	call	500 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 368:	10001026 	beq	r2,zero,3ac <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 36c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 370:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 374:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 378:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 37c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 380:	297fffc4 	addi	r5,r5,-1
 384:	283ffe1e 	bne	r5,zero,380 <_gp+0xffff7e14>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 388:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 38c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 390:	18bffb16 	blt	r3,r2,380 <_gp+0xffff7e14>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 394:	8009883a 	mov	r4,r16
 398:	01400144 	movi	r5,5
 39c:	00005100 	call	510 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 3a0:	10bfffc4 	addi	r2,r2,-1
 3a4:	103ffe1e 	bne	r2,zero,3a0 <_gp+0xffff7e34>
 3a8:	00000506 	br	3c0 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 3ac:	8009883a 	mov	r4,r16
 3b0:	01400144 	movi	r5,5
 3b4:	00005100 	call	510 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 3b8:	10bfffc4 	addi	r2,r2,-1
 3bc:	00bffe16 	blt	zero,r2,3b8 <_gp+0xffff7e4c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 3c0:	0005883a 	mov	r2,zero
 3c4:	dfc00117 	ldw	ra,4(sp)
 3c8:	dc000017 	ldw	r16,0(sp)
 3cc:	dec00204 	addi	sp,sp,8
 3d0:	f800283a 	ret

000003d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 3d4:	f800283a 	ret

000003d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 3d8:	f800283a 	ret

000003dc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 3dc:	000170fa 	wrctl	ienable,zero
 3e0:	f800283a 	ret

000003e4 <udivmodsi4>:
 3e4:	2900182e 	bgeu	r5,r4,448 <udivmodsi4+0x64>
 3e8:	28001716 	blt	r5,zero,448 <udivmodsi4+0x64>
 3ec:	00800804 	movi	r2,32
 3f0:	00c00044 	movi	r3,1
 3f4:	00000206 	br	400 <udivmodsi4+0x1c>
 3f8:	10001126 	beq	r2,zero,440 <udivmodsi4+0x5c>
 3fc:	28000516 	blt	r5,zero,414 <udivmodsi4+0x30>
 400:	294b883a 	add	r5,r5,r5
 404:	10bfffc4 	addi	r2,r2,-1
 408:	18c7883a 	add	r3,r3,r3
 40c:	293ffa36 	bltu	r5,r4,3f8 <_gp+0xffff7e8c>
 410:	18000b26 	beq	r3,zero,440 <udivmodsi4+0x5c>
 414:	0005883a 	mov	r2,zero
 418:	21400236 	bltu	r4,r5,424 <udivmodsi4+0x40>
 41c:	2149c83a 	sub	r4,r4,r5
 420:	10c4b03a 	or	r2,r2,r3
 424:	1806d07a 	srli	r3,r3,1
 428:	280ad07a 	srli	r5,r5,1
 42c:	183ffa1e 	bne	r3,zero,418 <_gp+0xffff7eac>
 430:	3000011e 	bne	r6,zero,438 <udivmodsi4+0x54>
 434:	f800283a 	ret
 438:	2005883a 	mov	r2,r4
 43c:	f800283a 	ret
 440:	0005883a 	mov	r2,zero
 444:	003ffa06 	br	430 <_gp+0xffff7ec4>
 448:	00c00044 	movi	r3,1
 44c:	003ff106 	br	414 <_gp+0xffff7ea8>

00000450 <__divsi3>:
 450:	defffe04 	addi	sp,sp,-8
 454:	dfc00115 	stw	ra,4(sp)
 458:	dc000015 	stw	r16,0(sp)
 45c:	20000b16 	blt	r4,zero,48c <__divsi3+0x3c>
 460:	0021883a 	mov	r16,zero
 464:	28000c16 	blt	r5,zero,498 <__divsi3+0x48>
 468:	000d883a 	mov	r6,zero
 46c:	00003e40 	call	3e4 <udivmodsi4>
 470:	0407c83a 	sub	r3,zero,r16
 474:	1884f03a 	xor	r2,r3,r2
 478:	1405883a 	add	r2,r2,r16
 47c:	dfc00117 	ldw	ra,4(sp)
 480:	dc000017 	ldw	r16,0(sp)
 484:	dec00204 	addi	sp,sp,8
 488:	f800283a 	ret
 48c:	0109c83a 	sub	r4,zero,r4
 490:	04000044 	movi	r16,1
 494:	283ff40e 	bge	r5,zero,468 <_gp+0xffff7efc>
 498:	014bc83a 	sub	r5,zero,r5
 49c:	8400005c 	xori	r16,r16,1
 4a0:	003ff106 	br	468 <_gp+0xffff7efc>

000004a4 <__modsi3>:
 4a4:	defffd04 	addi	sp,sp,-12
 4a8:	dfc00215 	stw	ra,8(sp)
 4ac:	dc400115 	stw	r17,4(sp)
 4b0:	dc000015 	stw	r16,0(sp)
 4b4:	20000c16 	blt	r4,zero,4e8 <__modsi3+0x44>
 4b8:	0023883a 	mov	r17,zero
 4bc:	0021883a 	mov	r16,zero
 4c0:	28000d16 	blt	r5,zero,4f8 <__modsi3+0x54>
 4c4:	01800044 	movi	r6,1
 4c8:	00003e40 	call	3e4 <udivmodsi4>
 4cc:	1404f03a 	xor	r2,r2,r16
 4d0:	8885883a 	add	r2,r17,r2
 4d4:	dfc00217 	ldw	ra,8(sp)
 4d8:	dc400117 	ldw	r17,4(sp)
 4dc:	dc000017 	ldw	r16,0(sp)
 4e0:	dec00304 	addi	sp,sp,12
 4e4:	f800283a 	ret
 4e8:	0109c83a 	sub	r4,zero,r4
 4ec:	04400044 	movi	r17,1
 4f0:	043fffc4 	movi	r16,-1
 4f4:	283ff30e 	bge	r5,zero,4c4 <_gp+0xffff7f58>
 4f8:	014bc83a 	sub	r5,zero,r5
 4fc:	003ff106 	br	4c4 <_gp+0xffff7f58>

00000500 <__udivsi3>:
 500:	000d883a 	mov	r6,zero
 504:	00003e41 	jmpi	3e4 <udivmodsi4>

00000508 <__umodsi3>:
 508:	01800044 	movi	r6,1
 50c:	00003e41 	jmpi	3e4 <udivmodsi4>

00000510 <__mulsi3>:
 510:	0005883a 	mov	r2,zero
 514:	20000726 	beq	r4,zero,534 <__mulsi3+0x24>
 518:	20c0004c 	andi	r3,r4,1
 51c:	2008d07a 	srli	r4,r4,1
 520:	18000126 	beq	r3,zero,528 <__mulsi3+0x18>
 524:	1145883a 	add	r2,r2,r5
 528:	294b883a 	add	r5,r5,r5
 52c:	203ffa1e 	bne	r4,zero,518 <_gp+0xffff7fac>
 530:	f800283a 	ret
 534:	f800283a 	ret
