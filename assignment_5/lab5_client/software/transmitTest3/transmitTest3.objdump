
transmitTest3.elf:     file format elf32-littlenios2
transmitTest3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000007c4 memsz 0x000007c4 flags r-x
    LOAD off    0x000017e4 vaddr 0x000007e4 paddr 0x000007e8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000017ec vaddr 0x000007ec paddr 0x000007ec align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000017e8  2**0
                  CONTENTS
  2 .text         00000780  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  000007a0  000007a0  000017a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000007e4  000007e8  000017e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000007ec  000007ec  000017ec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000007f8  000007f8  000017e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000250  00000000  00000000  00001810  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000015f6  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ca5  00000000  00000000  00003056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000dca  00000000  00000000  00003cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000394  00000000  00000000  00004ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000008c6  00000000  00000000  00004e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000912  00000000  00000000  00005722  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00006034  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  00006078  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000710f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007112  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007113  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000711d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007126  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000712f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  00007136  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  0000715b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009f5cb  00000000  00000000  0000a7ce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000007a0 l    d  .rodata	00000000 .rodata
000007e4 l    d  .rwdata	00000000 .rwdata
000007ec l    d  .bss	00000000 .bss
000007f8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../transmitTest3_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000064c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000324 g     F .text	0000002c alt_main
000007e8 g       *ABS*	00000000 __flash_rwdata_start
0000005c g     F .text	00000008 setParity
00000504 g     F .text	00000038 alt_putstr
000007e4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000007f0 g     O .bss	00000004 alt_argv
000087e4 g       *ABS*	00000000 _gp
0000053c g     F .text	00000004 usleep
00000204 g     F .text	00000028 memcpy
00000768 g     F .text	00000008 .hidden __udivsi3
000007f8 g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000620 g     F .text	00000004 alt_dcache_flush_all
000007e8 g       *ABS*	00000000 __ram_rwdata_end
000007e4 g       *ABS*	00000000 __ram_rodata_end
00000770 g     F .text	00000008 .hidden __umodsi3
000007f8 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000564 g     F .text	00000034 altera_avalon_jtag_uart_write
00000350 g     F .text	0000016c alt_printf
00000020 g     F .text	0000003c _start
00000560 g     F .text	00000004 alt_sys_init
00000778 g     F .text	00000028 .hidden __mulsi3
000007e4 g       *ABS*	00000000 __ram_rwdata_start
000007a0 g       *ABS*	00000000 __ram_rodata_start
00000598 g     F .text	00000088 alt_busy_sleep
0000008c g     F .text	00000070 getBits
000007f8 g       *ABS*	00000000 __alt_stack_base
00000064 g     F .text	00000020 getParity
000007ec g       *ABS*	00000000 __bss_start
000000fc g     F .text	00000108 main
000007ec g     O .bss	00000004 alt_envp
00000084 g     F .text	00000008 getCharacter
000006b8 g     F .text	00000054 .hidden __divsi3
000007a0 g       *ABS*	00000000 __flash_rodata_start
00000540 g     F .text	00000020 alt_irq_init
000007f4 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000007e8 g       *ABS*	00000000 _edata
000007f8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000628 g     F .text	00000008 altera_nios2_qsys_irq_init
0000070c g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000630 g     F .text	0000001c strlen
000004bc g     F .text	00000048 alt_putchar
00000624 g     F .text	00000004 alt_icache_flush_all
0000022c g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
   0:	00400034 	movhi	at,0
   4:	08400814 	ori	at,at,32
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
  20:	06c00034 	movhi	sp,0
  24:	ded00014 	ori	sp,sp,16384
  28:	06800034 	movhi	gp,0
  2c:	d6a1f914 	ori	gp,gp,34788
  30:	00800034 	movhi	r2,0
  34:	1081fb14 	ori	r2,r2,2028
  38:	00c00034 	movhi	r3,0
  3c:	18c1fe14 	ori	r3,r3,2040
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>
  44:	10000015 	stw	zero,0(r2)
  48:	10800104 	addi	r2,r2,4
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7860>
  50:	000022c0 	call	22c <alt_load>
  54:	00003240 	call	324 <alt_main>

00000058 <alt_after_alt_main>:
  58:	003fff06 	br	58 <_gp+0xffff7874>

0000005c <setParity>:
	//out ^= 1 << (parity & 1);
	if (parity & 1) {
		out ^= 1 >> 7;
	}
	return out;
}
  5c:	2105883a 	add	r2,r4,r4
  60:	f800283a 	ret

00000064 <getParity>:

unsigned int getParity(unsigned int c) {
	int parity = c;
	parity ^= parity >> 4;
  64:	2005d13a 	srai	r2,r4,4
  68:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 2;
  6c:	2005d0ba 	srai	r2,r4,2
  70:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 1;
  74:	2005d07a 	srai	r2,r4,1
  78:	1104f03a 	xor	r2,r2,r4
	return parity & 1;
}
  7c:	1080004c 	andi	r2,r2,1
  80:	f800283a 	ret

00000084 <getCharacter>:

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}
  84:	2004d07a 	srli	r2,r4,1
  88:	f800283a 	ret

0000008c <getBits>:
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
  8c:	2004d13a 	srli	r2,r4,4

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}

unsigned int getBits(unsigned int c) {
  90:	defffa04 	addi	sp,sp,-24
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
  94:	200ad1fa 	srli	r5,r4,7
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  98:	1080004c 	andi	r2,r2,1
  9c:	d8800015 	stw	r2,0(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
  a0:	2004d0fa 	srli	r2,r4,3
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
  a4:	200cd1ba 	srli	r6,r4,6
			(c >> 5) & 0b00000001,
  a8:	200ed17a 	srli	r7,r4,5
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  ac:	1080004c 	andi	r2,r2,1
  b0:	d8800115 	stw	r2,4(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
  b4:	2004d0ba 	srli	r2,r4,2
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  b8:	2940004c 	andi	r5,r5,1
  bc:	3180004c 	andi	r6,r6,1
  c0:	1080004c 	andi	r2,r2,1
  c4:	d8800215 	stw	r2,8(sp)
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
  c8:	2004d07a 	srli	r2,r4,1
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  cc:	2100004c 	andi	r4,r4,1
  d0:	d9000415 	stw	r4,16(sp)
  d4:	1080004c 	andi	r2,r2,1
  d8:	01000034 	movhi	r4,0
  dc:	d8800315 	stw	r2,12(sp)
  e0:	2101ee04 	addi	r4,r4,1976
  e4:	39c0004c 	andi	r7,r7,1

unsigned int getCharacter(unsigned int c) {
	return ((c >> 1));
}

unsigned int getBits(unsigned int c) {
  e8:	dfc00515 	stw	ra,20(sp)
	alt_printf("Bit 4: %x \n", (c >> 4) & 0b00000001);
	alt_printf("Bit 5: %x \n", (c >> 5) & 0b00000001);
	alt_printf("Bit 6: %x \n", (c >> 6) & 0b00000001);
	alt_printf("Bit 7: %x \n", (c >> 7) & 0b00000001);
	*/
	alt_printf("%x%x%x%x%x%x%x%x\n",
  ec:	00003500 	call	350 <alt_printf>
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
			(c >> 0) & 0b00000001);
}
  f0:	dfc00517 	ldw	ra,20(sp)
  f4:	dec00604 	addi	sp,sp,24
  f8:	f800283a 	ret

000000fc <main>:
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
	alt_putstr("Hello from Nios II!\n");
  fc:	01000034 	movhi	r4,0
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
 100:	defff504 	addi	sp,sp,-44
	alt_putstr("Hello from Nios II!\n");
 104:	2101e804 	addi	r4,r4,1952
unsigned int getParity(unsigned int c);
unsigned int getCharacter(unsigned int c);
unsigned int getBits(unsigned int c);

int main()
{ 
 108:	dfc00a15 	stw	ra,40(sp)
 10c:	dd000915 	stw	r20,36(sp)
 110:	dcc00815 	stw	r19,32(sp)
 114:	dc800715 	stw	r18,28(sp)
 118:	dc400615 	stw	r17,24(sp)
 11c:	dc000515 	stw	r16,20(sp)
	alt_putstr("Hello from Nios II!\n");
 120:	00005040 	call	504 <alt_putstr>
	//alt_putchar(*parallel_in);
	//alt_putstr("\n");
	//int c = alt_getchar();
	//alt_putstr("\n");
	int i = 0;
	char hello[20] = "Hello, world! abc123";
 124:	01400034 	movhi	r5,0
 128:	d809883a 	mov	r4,sp
 12c:	2941f304 	addi	r5,r5,1996
 130:	01800504 	movi	r6,20
 134:	00002040 	call	204 <memcpy>
	//alt_putstr("Input the char you would like to send.\n");
	//alt_putchar(*parallel_in);
	//alt_putstr("\n");
	//int c = alt_getchar();
	//alt_putstr("\n");
	int i = 0;
 138:	0021883a 	mov	r16,zero
	char hello[20] = "Hello, world! abc123";

	while (i < 20) {

		*transmit_enable = 0x0;
 13c:	04543004 	movi	r17,20672
		*load = 0x0;
 140:	04943804 	movi	r18,20704
		//*parallel_out = c;
		*data_bus_output = (hello[i]);
 144:	05143c04 	movi	r20,20720
		//getBits(*parallel_out);
		//alt_putchar(getCharacter(*parallel_out));
		//alt_putstr("\ngetCharacter(*parallel_out)\n");
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
		*transmit_enable = 0x1;
 148:	04c00044 	movi	r19,1
	int i = 0;
	char hello[20] = "Hello, world! abc123";

	while (i < 20) {

		*transmit_enable = 0x0;
 14c:	88000005 	stb	zero,0(r17)
		*load = 0x0;
 150:	90000005 	stb	zero,0(r18)
 154:	dc05883a 	add	r2,sp,r16
		//*parallel_out = c;
		*data_bus_output = (hello[i]);
 158:	10800003 	ldbu	r2,0(r2)
		*data_bus_output = setParity(*data_bus_output);
		//getBits(*parallel_out);
		//alt_putchar(getCharacter(*parallel_out));
		//alt_putstr("\ngetCharacter(*parallel_out)\n");
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
 15c:	0100fa04 	movi	r4,1000
	while (i < 20) {

		*transmit_enable = 0x0;
		*load = 0x0;
		//*parallel_out = c;
		*data_bus_output = (hello[i]);
 160:	a0800005 	stb	r2,0(r20)
		//getBits(*parallel_out);
		//alt_putstr("\n*parallel_out\n");
		//alt_putchar((*parallel_out >> 1));
		//alt_putchar(*parallel_out);
		*data_bus_output = setParity(*data_bus_output);
 164:	a0800003 	ldbu	r2,0(r20)
 168:	10803fcc 	andi	r2,r2,255
	parity ^= parity >> 4;
	parity ^= parity >> 2;
	parity ^= parity >> 1;

	//alt_putchar(c);
	int out = ((c  << 1));
 16c:	1085883a 	add	r2,r2,r2
		*data_bus_output = (hello[i]);
		//getBits(*parallel_out);
		//alt_putstr("\n*parallel_out\n");
		//alt_putchar((*parallel_out >> 1));
		//alt_putchar(*parallel_out);
		*data_bus_output = setParity(*data_bus_output);
 170:	a0800005 	stb	r2,0(r20)
		//getBits(*parallel_out);
		//alt_putchar(getCharacter(*parallel_out));
		//alt_putstr("\ngetCharacter(*parallel_out)\n");
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
 174:	000053c0 	call	53c <usleep>
		*transmit_enable = 0x1;
 178:	8cc00005 	stb	r19,0(r17)
		*load = 0x1;
 17c:	94c00005 	stb	r19,0(r18)
		usleep(50);
 180:	01000c84 	movi	r4,50
 184:	000053c0 	call	53c <usleep>
		*load = 0x0;
		while (!*character_received) {
 188:	00d44404 	movi	r3,20752
		//alt_putchar(getCharacter(*parallel_out));
		usleep(1000);
		*transmit_enable = 0x1;
		*load = 0x1;
		usleep(50);
		*load = 0x0;
 18c:	90000005 	stb	zero,0(r18)
		while (!*character_received) {
 190:	18800003 	ldbu	r2,0(r3)
 194:	10803fcc 	andi	r2,r2,255
 198:	1080201c 	xori	r2,r2,128
 19c:	10bfe004 	addi	r2,r2,-128
 1a0:	103ffb26 	beq	r2,zero,190 <_gp+0xffff79ac>
		}
		while (!*character_sent) {
 1a4:	00d43404 	movi	r3,20688
 1a8:	18800003 	ldbu	r2,0(r3)
 1ac:	10803fcc 	andi	r2,r2,255
 1b0:	1080201c 	xori	r2,r2,128
 1b4:	10bfe004 	addi	r2,r2,-128
 1b8:	103ffb26 	beq	r2,zero,1a8 <_gp+0xffff79c4>
		}
		*transmit_enable = 0x0;
 1bc:	88000005 	stb	zero,0(r17)
			alt_putstr("bad parity\n");
		} else {
			alt_putstr("good parity\n");
		}*/
		//getBits(*parallel_in);
		alt_putchar(getCharacter(*data_bus_input));
 1c0:	00944804 	movi	r2,20768
 1c4:	11000003 	ldbu	r4,0(r2)
		//alt_putstr("\n");
		i++;
 1c8:	84000044 	addi	r16,r16,1
			alt_putstr("bad parity\n");
		} else {
			alt_putstr("good parity\n");
		}*/
		//getBits(*parallel_in);
		alt_putchar(getCharacter(*data_bus_input));
 1cc:	21003fcc 	andi	r4,r4,255
 1d0:	2008d07a 	srli	r4,r4,1
 1d4:	00004bc0 	call	4bc <alt_putchar>
	//int c = alt_getchar();
	//alt_putstr("\n");
	int i = 0;
	char hello[20] = "Hello, world! abc123";

	while (i < 20) {
 1d8:	00800504 	movi	r2,20
 1dc:	80bfdb1e 	bne	r16,r2,14c <_gp+0xffff7968>
		//alt_putstr("\n");
		i++;
	}

	return 0;
}
 1e0:	0005883a 	mov	r2,zero
 1e4:	dfc00a17 	ldw	ra,40(sp)
 1e8:	dd000917 	ldw	r20,36(sp)
 1ec:	dcc00817 	ldw	r19,32(sp)
 1f0:	dc800717 	ldw	r18,28(sp)
 1f4:	dc400617 	ldw	r17,24(sp)
 1f8:	dc000517 	ldw	r16,20(sp)
 1fc:	dec00b04 	addi	sp,sp,44
 200:	f800283a 	ret

00000204 <memcpy>:
 204:	2005883a 	mov	r2,r4
 208:	0007883a 	mov	r3,zero
 20c:	19800626 	beq	r3,r6,228 <memcpy+0x24>
 210:	28c9883a 	add	r4,r5,r3
 214:	21c00003 	ldbu	r7,0(r4)
 218:	10c9883a 	add	r4,r2,r3
 21c:	18c00044 	addi	r3,r3,1
 220:	21c00005 	stb	r7,0(r4)
 224:	003ff906 	br	20c <_gp+0xffff7a28>
 228:	f800283a 	ret

0000022c <alt_load>:
 22c:	deffff04 	addi	sp,sp,-4
 230:	01000034 	movhi	r4,0
 234:	01400034 	movhi	r5,0
 238:	dfc00015 	stw	ra,0(sp)
 23c:	2101f904 	addi	r4,r4,2020
 240:	2941fa04 	addi	r5,r5,2024
 244:	2140061e 	bne	r4,r5,260 <alt_load+0x34>
 248:	01000034 	movhi	r4,0
 24c:	01400034 	movhi	r5,0
 250:	21000804 	addi	r4,r4,32
 254:	29400804 	addi	r5,r5,32
 258:	2140141e 	bne	r4,r5,2ac <alt_load+0x80>
 25c:	00000d06 	br	294 <alt_load+0x68>
 260:	00c00034 	movhi	r3,0
 264:	18c1fa04 	addi	r3,r3,2024
 268:	00bfff04 	movi	r2,-4
 26c:	1907c83a 	sub	r3,r3,r4
 270:	1886703a 	and	r3,r3,r2
 274:	0005883a 	mov	r2,zero
 278:	10fff326 	beq	r2,r3,248 <_gp+0xffff7a64>
 27c:	114f883a 	add	r7,r2,r5
 280:	39c00017 	ldw	r7,0(r7)
 284:	110d883a 	add	r6,r2,r4
 288:	10800104 	addi	r2,r2,4
 28c:	31c00015 	stw	r7,0(r6)
 290:	003ff906 	br	278 <_gp+0xffff7a94>
 294:	01000034 	movhi	r4,0
 298:	01400034 	movhi	r5,0
 29c:	2101e804 	addi	r4,r4,1952
 2a0:	2941e804 	addi	r5,r5,1952
 2a4:	2140121e 	bne	r4,r5,2f0 <alt_load+0xc4>
 2a8:	00000d06 	br	2e0 <alt_load+0xb4>
 2ac:	00c00034 	movhi	r3,0
 2b0:	18c00804 	addi	r3,r3,32
 2b4:	00bfff04 	movi	r2,-4
 2b8:	1907c83a 	sub	r3,r3,r4
 2bc:	1886703a 	and	r3,r3,r2
 2c0:	0005883a 	mov	r2,zero
 2c4:	10fff326 	beq	r2,r3,294 <_gp+0xffff7ab0>
 2c8:	114f883a 	add	r7,r2,r5
 2cc:	39c00017 	ldw	r7,0(r7)
 2d0:	110d883a 	add	r6,r2,r4
 2d4:	10800104 	addi	r2,r2,4
 2d8:	31c00015 	stw	r7,0(r6)
 2dc:	003ff906 	br	2c4 <_gp+0xffff7ae0>
 2e0:	00006200 	call	620 <alt_dcache_flush_all>
 2e4:	dfc00017 	ldw	ra,0(sp)
 2e8:	dec00104 	addi	sp,sp,4
 2ec:	00006241 	jmpi	624 <alt_icache_flush_all>
 2f0:	00c00034 	movhi	r3,0
 2f4:	18c1f904 	addi	r3,r3,2020
 2f8:	00bfff04 	movi	r2,-4
 2fc:	1907c83a 	sub	r3,r3,r4
 300:	1886703a 	and	r3,r3,r2
 304:	0005883a 	mov	r2,zero
 308:	10fff526 	beq	r2,r3,2e0 <_gp+0xffff7afc>
 30c:	114f883a 	add	r7,r2,r5
 310:	39c00017 	ldw	r7,0(r7)
 314:	110d883a 	add	r6,r2,r4
 318:	10800104 	addi	r2,r2,4
 31c:	31c00015 	stw	r7,0(r6)
 320:	003ff906 	br	308 <_gp+0xffff7b24>

00000324 <alt_main>:
 324:	deffff04 	addi	sp,sp,-4
 328:	0009883a 	mov	r4,zero
 32c:	dfc00015 	stw	ra,0(sp)
 330:	00005400 	call	540 <alt_irq_init>
 334:	00005600 	call	560 <alt_sys_init>
 338:	d1200417 	ldw	r4,-32752(gp)
 33c:	d1600317 	ldw	r5,-32756(gp)
 340:	d1a00217 	ldw	r6,-32760(gp)
 344:	dfc00017 	ldw	ra,0(sp)
 348:	dec00104 	addi	sp,sp,4
 34c:	00000fc1 	jmpi	fc <main>

00000350 <alt_printf>:
 350:	defff204 	addi	sp,sp,-56
 354:	dfc00a15 	stw	ra,40(sp)
 358:	df000915 	stw	fp,36(sp)
 35c:	ddc00815 	stw	r23,32(sp)
 360:	dd800715 	stw	r22,28(sp)
 364:	dd400615 	stw	r21,24(sp)
 368:	dd000515 	stw	r20,20(sp)
 36c:	dcc00415 	stw	r19,16(sp)
 370:	dc800315 	stw	r18,12(sp)
 374:	dc400215 	stw	r17,8(sp)
 378:	dc000115 	stw	r16,4(sp)
 37c:	d9400b15 	stw	r5,44(sp)
 380:	d9800c15 	stw	r6,48(sp)
 384:	d9c00d15 	stw	r7,52(sp)
 388:	04000944 	movi	r16,37
 38c:	2005883a 	mov	r2,r4
 390:	dd400b04 	addi	r21,sp,44
 394:	048018c4 	movi	r18,99
 398:	04c01e04 	movi	r19,120
 39c:	05001cc4 	movi	r20,115
 3a0:	11000007 	ldb	r4,0(r2)
 3a4:	20003926 	beq	r4,zero,48c <alt_printf+0x13c>
 3a8:	24000226 	beq	r4,r16,3b4 <alt_printf+0x64>
 3ac:	14400044 	addi	r17,r2,1
 3b0:	00001106 	br	3f8 <alt_printf+0xa8>
 3b4:	14400084 	addi	r17,r2,2
 3b8:	10800047 	ldb	r2,1(r2)
 3bc:	10003326 	beq	r2,zero,48c <alt_printf+0x13c>
 3c0:	1400021e 	bne	r2,r16,3cc <alt_printf+0x7c>
 3c4:	8009883a 	mov	r4,r16
 3c8:	00000b06 	br	3f8 <alt_printf+0xa8>
 3cc:	1480051e 	bne	r2,r18,3e4 <alt_printf+0x94>
 3d0:	a9000017 	ldw	r4,0(r21)
 3d4:	ad800104 	addi	r22,r21,4
 3d8:	b02b883a 	mov	r21,r22
 3dc:	00004bc0 	call	4bc <alt_putchar>
 3e0:	00002806 	br	484 <alt_printf+0x134>
 3e4:	14c01f1e 	bne	r2,r19,464 <alt_printf+0x114>
 3e8:	adc00017 	ldw	r23,0(r21)
 3ec:	ad400104 	addi	r21,r21,4
 3f0:	b800031e 	bne	r23,zero,400 <alt_printf+0xb0>
 3f4:	01000c04 	movi	r4,48
 3f8:	00004bc0 	call	4bc <alt_putchar>
 3fc:	00002106 	br	484 <alt_printf+0x134>
 400:	05800704 	movi	r22,28
 404:	00c003c4 	movi	r3,15
 408:	1d84983a 	sll	r2,r3,r22
 40c:	15c4703a 	and	r2,r2,r23
 410:	1000021e 	bne	r2,zero,41c <alt_printf+0xcc>
 414:	b5bfff04 	addi	r22,r22,-4
 418:	003ffb06 	br	408 <_gp+0xffff7c24>
 41c:	070003c4 	movi	fp,15
 420:	00c00244 	movi	r3,9
 424:	b0001716 	blt	r22,zero,484 <alt_printf+0x134>
 428:	e584983a 	sll	r2,fp,r22
 42c:	15c4703a 	and	r2,r2,r23
 430:	1584d83a 	srl	r2,r2,r22
 434:	18800236 	bltu	r3,r2,440 <alt_printf+0xf0>
 438:	11000c04 	addi	r4,r2,48
 43c:	00000106 	br	444 <alt_printf+0xf4>
 440:	110015c4 	addi	r4,r2,87
 444:	21003fcc 	andi	r4,r4,255
 448:	2100201c 	xori	r4,r4,128
 44c:	213fe004 	addi	r4,r4,-128
 450:	d8c00015 	stw	r3,0(sp)
 454:	00004bc0 	call	4bc <alt_putchar>
 458:	b5bfff04 	addi	r22,r22,-4
 45c:	d8c00017 	ldw	r3,0(sp)
 460:	003ff006 	br	424 <_gp+0xffff7c40>
 464:	1500071e 	bne	r2,r20,484 <alt_printf+0x134>
 468:	ad800017 	ldw	r22,0(r21)
 46c:	ad400104 	addi	r21,r21,4
 470:	b1000007 	ldb	r4,0(r22)
 474:	20000326 	beq	r4,zero,484 <alt_printf+0x134>
 478:	b5800044 	addi	r22,r22,1
 47c:	00004bc0 	call	4bc <alt_putchar>
 480:	003ffb06 	br	470 <_gp+0xffff7c8c>
 484:	8805883a 	mov	r2,r17
 488:	003fc506 	br	3a0 <_gp+0xffff7bbc>
 48c:	dfc00a17 	ldw	ra,40(sp)
 490:	df000917 	ldw	fp,36(sp)
 494:	ddc00817 	ldw	r23,32(sp)
 498:	dd800717 	ldw	r22,28(sp)
 49c:	dd400617 	ldw	r21,24(sp)
 4a0:	dd000517 	ldw	r20,20(sp)
 4a4:	dcc00417 	ldw	r19,16(sp)
 4a8:	dc800317 	ldw	r18,12(sp)
 4ac:	dc400217 	ldw	r17,8(sp)
 4b0:	dc000117 	ldw	r16,4(sp)
 4b4:	dec00e04 	addi	sp,sp,56
 4b8:	f800283a 	ret

000004bc <alt_putchar>:
 4bc:	defffd04 	addi	sp,sp,-12
 4c0:	dc000115 	stw	r16,4(sp)
 4c4:	d9000005 	stb	r4,0(sp)
 4c8:	2021883a 	mov	r16,r4
 4cc:	01000034 	movhi	r4,0
 4d0:	2101f904 	addi	r4,r4,2020
 4d4:	d80b883a 	mov	r5,sp
 4d8:	01800044 	movi	r6,1
 4dc:	000f883a 	mov	r7,zero
 4e0:	dfc00215 	stw	ra,8(sp)
 4e4:	00005640 	call	564 <altera_avalon_jtag_uart_write>
 4e8:	00ffffc4 	movi	r3,-1
 4ec:	10c00126 	beq	r2,r3,4f4 <alt_putchar+0x38>
 4f0:	8005883a 	mov	r2,r16
 4f4:	dfc00217 	ldw	ra,8(sp)
 4f8:	dc000117 	ldw	r16,4(sp)
 4fc:	dec00304 	addi	sp,sp,12
 500:	f800283a 	ret

00000504 <alt_putstr>:
 504:	defffe04 	addi	sp,sp,-8
 508:	dc000015 	stw	r16,0(sp)
 50c:	dfc00115 	stw	ra,4(sp)
 510:	2021883a 	mov	r16,r4
 514:	00006300 	call	630 <strlen>
 518:	01000034 	movhi	r4,0
 51c:	2101f904 	addi	r4,r4,2020
 520:	800b883a 	mov	r5,r16
 524:	100d883a 	mov	r6,r2
 528:	000f883a 	mov	r7,zero
 52c:	dfc00117 	ldw	ra,4(sp)
 530:	dc000017 	ldw	r16,0(sp)
 534:	dec00204 	addi	sp,sp,8
 538:	00005641 	jmpi	564 <altera_avalon_jtag_uart_write>

0000053c <usleep>:
 53c:	00005981 	jmpi	598 <alt_busy_sleep>

00000540 <alt_irq_init>:
 540:	deffff04 	addi	sp,sp,-4
 544:	dfc00015 	stw	ra,0(sp)
 548:	00006280 	call	628 <altera_nios2_qsys_irq_init>
 54c:	00800044 	movi	r2,1
 550:	1001703a 	wrctl	status,r2
 554:	dfc00017 	ldw	ra,0(sp)
 558:	dec00104 	addi	sp,sp,4
 55c:	f800283a 	ret

00000560 <alt_sys_init>:
 560:	f800283a 	ret

00000564 <altera_avalon_jtag_uart_write>:
 564:	21000017 	ldw	r4,0(r4)
 568:	3005883a 	mov	r2,r6
 56c:	298d883a 	add	r6,r5,r6
 570:	21c00104 	addi	r7,r4,4
 574:	2980072e 	bgeu	r5,r6,594 <altera_avalon_jtag_uart_write+0x30>
 578:	38c00037 	ldwio	r3,0(r7)
 57c:	18ffffec 	andhi	r3,r3,65535
 580:	183ffc26 	beq	r3,zero,574 <_gp+0xffff7d90>
 584:	28c00007 	ldb	r3,0(r5)
 588:	20c00035 	stwio	r3,0(r4)
 58c:	29400044 	addi	r5,r5,1
 590:	003ff806 	br	574 <_gp+0xffff7d90>
 594:	f800283a 	ret

00000598 <alt_busy_sleep>:
 598:	014666b4 	movhi	r5,6554
 59c:	defffe04 	addi	sp,sp,-8
 5a0:	29666644 	addi	r5,r5,-26215
 5a4:	dc000015 	stw	r16,0(sp)
 5a8:	dfc00115 	stw	ra,4(sp)
 5ac:	2021883a 	mov	r16,r4
 5b0:	00007680 	call	768 <__udivsi3>
 5b4:	10001026 	beq	r2,zero,5f8 <alt_busy_sleep+0x60>
 5b8:	01600034 	movhi	r5,32768
 5bc:	013999b4 	movhi	r4,58982
 5c0:	0007883a 	mov	r3,zero
 5c4:	297fffc4 	addi	r5,r5,-1
 5c8:	211999c4 	addi	r4,r4,26215
 5cc:	297fffc4 	addi	r5,r5,-1
 5d0:	283ffe1e 	bne	r5,zero,5cc <_gp+0xffff7de8>
 5d4:	18c00044 	addi	r3,r3,1
 5d8:	8121883a 	add	r16,r16,r4
 5dc:	18bffb16 	blt	r3,r2,5cc <_gp+0xffff7de8>
 5e0:	8009883a 	mov	r4,r16
 5e4:	01400144 	movi	r5,5
 5e8:	00007780 	call	778 <__mulsi3>
 5ec:	10bfffc4 	addi	r2,r2,-1
 5f0:	103ffe1e 	bne	r2,zero,5ec <_gp+0xffff7e08>
 5f4:	00000506 	br	60c <alt_busy_sleep+0x74>
 5f8:	8009883a 	mov	r4,r16
 5fc:	01400144 	movi	r5,5
 600:	00007780 	call	778 <__mulsi3>
 604:	10bfffc4 	addi	r2,r2,-1
 608:	00bffe16 	blt	zero,r2,604 <_gp+0xffff7e20>
 60c:	0005883a 	mov	r2,zero
 610:	dfc00117 	ldw	ra,4(sp)
 614:	dc000017 	ldw	r16,0(sp)
 618:	dec00204 	addi	sp,sp,8
 61c:	f800283a 	ret

00000620 <alt_dcache_flush_all>:
 620:	f800283a 	ret

00000624 <alt_icache_flush_all>:
 624:	f800283a 	ret

00000628 <altera_nios2_qsys_irq_init>:
 628:	000170fa 	wrctl	ienable,zero
 62c:	f800283a 	ret

00000630 <strlen>:
 630:	2005883a 	mov	r2,r4
 634:	10c00007 	ldb	r3,0(r2)
 638:	18000226 	beq	r3,zero,644 <strlen+0x14>
 63c:	10800044 	addi	r2,r2,1
 640:	003ffc06 	br	634 <_gp+0xffff7e50>
 644:	1105c83a 	sub	r2,r2,r4
 648:	f800283a 	ret

0000064c <udivmodsi4>:
 64c:	2900182e 	bgeu	r5,r4,6b0 <udivmodsi4+0x64>
 650:	28001716 	blt	r5,zero,6b0 <udivmodsi4+0x64>
 654:	00800804 	movi	r2,32
 658:	00c00044 	movi	r3,1
 65c:	00000206 	br	668 <udivmodsi4+0x1c>
 660:	10001126 	beq	r2,zero,6a8 <udivmodsi4+0x5c>
 664:	28000516 	blt	r5,zero,67c <udivmodsi4+0x30>
 668:	294b883a 	add	r5,r5,r5
 66c:	10bfffc4 	addi	r2,r2,-1
 670:	18c7883a 	add	r3,r3,r3
 674:	293ffa36 	bltu	r5,r4,660 <_gp+0xffff7e7c>
 678:	18000b26 	beq	r3,zero,6a8 <udivmodsi4+0x5c>
 67c:	0005883a 	mov	r2,zero
 680:	21400236 	bltu	r4,r5,68c <udivmodsi4+0x40>
 684:	2149c83a 	sub	r4,r4,r5
 688:	10c4b03a 	or	r2,r2,r3
 68c:	1806d07a 	srli	r3,r3,1
 690:	280ad07a 	srli	r5,r5,1
 694:	183ffa1e 	bne	r3,zero,680 <_gp+0xffff7e9c>
 698:	3000011e 	bne	r6,zero,6a0 <udivmodsi4+0x54>
 69c:	f800283a 	ret
 6a0:	2005883a 	mov	r2,r4
 6a4:	f800283a 	ret
 6a8:	0005883a 	mov	r2,zero
 6ac:	003ffa06 	br	698 <_gp+0xffff7eb4>
 6b0:	00c00044 	movi	r3,1
 6b4:	003ff106 	br	67c <_gp+0xffff7e98>

000006b8 <__divsi3>:
 6b8:	defffe04 	addi	sp,sp,-8
 6bc:	dfc00115 	stw	ra,4(sp)
 6c0:	dc000015 	stw	r16,0(sp)
 6c4:	20000b16 	blt	r4,zero,6f4 <__divsi3+0x3c>
 6c8:	0021883a 	mov	r16,zero
 6cc:	28000c16 	blt	r5,zero,700 <__divsi3+0x48>
 6d0:	000d883a 	mov	r6,zero
 6d4:	000064c0 	call	64c <udivmodsi4>
 6d8:	0407c83a 	sub	r3,zero,r16
 6dc:	1884f03a 	xor	r2,r3,r2
 6e0:	1405883a 	add	r2,r2,r16
 6e4:	dfc00117 	ldw	ra,4(sp)
 6e8:	dc000017 	ldw	r16,0(sp)
 6ec:	dec00204 	addi	sp,sp,8
 6f0:	f800283a 	ret
 6f4:	0109c83a 	sub	r4,zero,r4
 6f8:	04000044 	movi	r16,1
 6fc:	283ff40e 	bge	r5,zero,6d0 <_gp+0xffff7eec>
 700:	014bc83a 	sub	r5,zero,r5
 704:	8400005c 	xori	r16,r16,1
 708:	003ff106 	br	6d0 <_gp+0xffff7eec>

0000070c <__modsi3>:
 70c:	defffd04 	addi	sp,sp,-12
 710:	dfc00215 	stw	ra,8(sp)
 714:	dc400115 	stw	r17,4(sp)
 718:	dc000015 	stw	r16,0(sp)
 71c:	20000c16 	blt	r4,zero,750 <__modsi3+0x44>
 720:	0023883a 	mov	r17,zero
 724:	0021883a 	mov	r16,zero
 728:	28000d16 	blt	r5,zero,760 <__modsi3+0x54>
 72c:	01800044 	movi	r6,1
 730:	000064c0 	call	64c <udivmodsi4>
 734:	1404f03a 	xor	r2,r2,r16
 738:	8885883a 	add	r2,r17,r2
 73c:	dfc00217 	ldw	ra,8(sp)
 740:	dc400117 	ldw	r17,4(sp)
 744:	dc000017 	ldw	r16,0(sp)
 748:	dec00304 	addi	sp,sp,12
 74c:	f800283a 	ret
 750:	0109c83a 	sub	r4,zero,r4
 754:	04400044 	movi	r17,1
 758:	043fffc4 	movi	r16,-1
 75c:	283ff30e 	bge	r5,zero,72c <_gp+0xffff7f48>
 760:	014bc83a 	sub	r5,zero,r5
 764:	003ff106 	br	72c <_gp+0xffff7f48>

00000768 <__udivsi3>:
 768:	000d883a 	mov	r6,zero
 76c:	000064c1 	jmpi	64c <udivmodsi4>

00000770 <__umodsi3>:
 770:	01800044 	movi	r6,1
 774:	000064c1 	jmpi	64c <udivmodsi4>

00000778 <__mulsi3>:
 778:	0005883a 	mov	r2,zero
 77c:	20000726 	beq	r4,zero,79c <__mulsi3+0x24>
 780:	20c0004c 	andi	r3,r4,1
 784:	2008d07a 	srli	r4,r4,1
 788:	18000126 	beq	r3,zero,790 <__mulsi3+0x18>
 78c:	1145883a 	add	r2,r2,r5
 790:	294b883a 	add	r5,r5,r5
 794:	203ffa1e 	bne	r4,zero,780 <_gp+0xffff7f9c>
 798:	f800283a 	ret
 79c:	f800283a 	ret
