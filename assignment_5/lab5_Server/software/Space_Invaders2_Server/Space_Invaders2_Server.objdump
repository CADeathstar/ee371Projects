
Space_Invaders2_Server.elf:     file format elf32-littlenios2
Space_Invaders2_Server.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000150

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002ab4 memsz 0x00002ab4 flags r-x
    LOAD off    0x00003ad4 vaddr 0x00002ad4 paddr 0x00002bf4 align 2**12
         filesz 0x00000120 memsz 0x00000120 flags rw-
    LOAD off    0x00003d14 vaddr 0x00002d14 paddr 0x00002d14 align 2**12
         filesz 0x00000000 memsz 0x00000950 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000130  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002874  00000150  00000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  000029c4  000029c4  000039c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000120  00002ad4  00002bf4  00003ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000950  00002d14  00002d14  00003d14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00003664  00003664  00003bf4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000668  00000000  00000000  00003c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a41d  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000039fe  00000000  00000000  0000e69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003a15  00000000  00000000  0001209b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d88  00000000  00000000  00015ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c91  00000000  00000000  00016838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002f86  00000000  00000000  000184c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001b450  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000528  00000000  00000000  0001b490  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001d995  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001d998  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001d99b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001d99c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001d99d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001d9a6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001d9af  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0001d9b8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  0001d9bf  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  0001d9e5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009f5cb  00000000  00000000  00021058  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000150 l    d  .text	00000000 .text
000029c4 l    d  .rodata	00000000 .rodata
00002ad4 l    d  .rwdata	00000000 .rwdata
00002d14 l    d  .bss	00000000 .bss
00003664 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Space_Invaders2_Server_bsp//obj/HAL/src/crt0.o
00000188 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ProjectileNode.c
00000000 l    df *ABS*	00000000 communication.c
00000000 l    df *ABS*	00000000 data_structures_constants.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 gamelogic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001654 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00002ad4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00002d48 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001cd0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002be8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00001630 g     F .text	00000024 sram_free
00001b44 g     F .text	00000018 putchar
000010f8 g     F .text	00000114 checkCollideAliens
000027a4 g     F .text	0000002c alt_main
00001b5c g     F .text	00000080 _puts_r
00002d1c g     O .bss	00000004 edge_capture_receive
00003564 g     O .bss	00000100 alt_irq
00002bf4 g       *ABS*	00000000 __flash_rwdata_start
00003664 g     O *ABS*	00000000 __alt_heap_start
00001458 g     F .text	00000098 getProjectile
00001af0 g     F .text	0000004c printf
00002bd4 g     O .rwdata	00000004 gunnerLeftToggle
000001c8 g     F .text	00000144 updateProjectileNodes
00000dbc g     F .text	00000024 moveGunnerLeftTransmited
00000758 g     F .text	00000008 setParity
000005a0 g     F .text	00000054 writeBuffer
00002bec g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002d50 g     O .bss	00000004 errno
000013cc g     F .text	00000048 getAlien
00002d5c g     O .bss	00000004 alt_argv
0000abb4 g       *ABS*	00000000 _gp
00002864 g     F .text	00000004 usleep
00002d2c g     O .bss	00000004 alienShift
00002bd0 g     O .rwdata	00000004 gunnerRightToggle
000014f0 g     F .text	00000090 setProjectile
00001b3c g     F .text	00000008 _putchar_r
000008bc g     F .text	00000034 getAlienApperence
000017ec g     F .text	00000028 memcpy
00000d54 g     F .text	00000068 moveGunnerLeft
00001bdc g     F .text	00000014 puts
00002bcc g     O .rwdata	00000004 gunnerShootToggle
00000820 g     F .text	0000009c initRandomAliens
000017c4 g     F .text	00000014 malloc
00001ab4 g     F .text	0000003c _printf_r
00001770 g     F .text	00000008 .hidden __udivsi3
00000de0 g     F .text	0000006c moveGunnerRight
00001c64 g     F .text	00000050 _sbrk_r
00000494 g     F .text	00000028 createProjectile
00002d30 g     O .bss	00000004 pSramAliens
000003a0 g     F .text	00000068 updateProjectileBuffer
00001064 g     F .text	00000094 checkGunnerWin
00000540 g     F .text	00000060 readBuffer
00002bb4 g     O .rwdata	00000004 gunner
0000030c g     F .text	00000094 initProjectileBuffer
00002bdc g     O .rwdata	00000004 _global_impure_ptr
000004bc g     F .text	00000014 gun_handler
00003664 g       *ABS*	00000000 __bss_end
00002644 g     F .text	00000068 alt_iic_isr_register
0000262c g     F .text	00000018 alt_ic_irq_enabled
00002d54 g     O .bss	00000004 alt_irq_active
000007f8 g     F .text	00000028 newAlien
00002bc8 g     O .rwdata	00000004 alienShootToggle
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000ec g     F .exceptions	00000064 alt_irq_handler
000029b4 g     F .text	00000004 alt_dcache_flush_all
00002d34 g     O .bss	00000004 pTransmit
000017a8 g     F .text	0000001c calloc
00002bf4 g       *ABS*	00000000 __ram_rwdata_end
00002868 g     F .text	0000006c write
000023ec g     F .text	00000058 _putc_r
00002ad4 g       *ABS*	00000000 __ram_rodata_end
0000120c g     F .text	0000002c checkCollideGunner
00002d28 g     O .bss	00000004 gameOver
00001778 g     F .text	00000008 .hidden __umodsi3
00000bb8 g     F .text	000000d0 printGunnerSlice
00000b0c g     F .text	000000ac printVoid
00002bbc g     O .rwdata	00000004 alien1
00003664 g     O *ABS*	00000004 end
00001414 g     F .text	00000044 setAlien
00002d18 g     O .bss	00000004 head
00002d20 g     O .bss	00000004 edge_capture_gun
00004000 g       *ABS*	00000000 __alt_stack_pointer
000028f8 g     F .text	00000034 altera_avalon_jtag_uart_write
00001d3c g     F .text	0000056c ___vfprintf_internal_r
00001874 g     F .text	000000e4 _free_r
0000066c g     F .text	0000003c character_sent_handler
00000150 g     F .text	0000003c _start
00002d38 g     O .bss	00000004 pBufferHead
00001c04 g     F .text	00000060 rand
000028f4 g     F .text	00000004 alt_sys_init
00000a88 g     F .text	00000084 printAliens
00001780 g     F .text	00000028 .hidden __mulsi3
00002ad4 g       *ABS*	00000000 __ram_rwdata_start
000029c4 g       *ABS*	00000000 __ram_rodata_start
00002d64 g     O .bss	00000800 sram
0000292c g     F .text	00000088 alt_busy_sleep
00000788 g     F .text	00000070 getBits
00000f14 g     F .text	00000058 shootGunnerTransmited
00003664 g       *ABS*	00000000 __alt_stack_base
00000760 g     F .text	00000020 getParity
000004d0 g     F .text	00000070 character_recieved_handler
00002818 g     F .text	0000004c sbrk
000009d0 g     F .text	000000b8 printSlice
00001814 g     F .text	00000060 _calloc_r
000022cc g     F .text	000000ac __sfvwrite_small_dev
00002d14 g       *ABS*	00000000 __bss_start
00002378 g     F .text	00000020 memset
00001238 g     F .text	00000194 main
00002d58 g     O .bss	00000004 alt_envp
00001bf0 g     F .text	00000014 srand
000005f4 g     F .text	00000078 transmitIfBufferNotEmpty
00004000 g       *ABS*	00000000 __alt_heap_limit
00001958 g     F .text	0000015c _malloc_r
00002bf0 g     O .rwdata	00000004 alt_errno
000015a4 g     F .text	0000008c sram_malloc
00002398 g     F .text	00000054 putc
00000780 g     F .text	00000008 getCharacter
000016c0 g     F .text	00000054 .hidden __divsi3
000006a8 g     F .text	000000b0 setup_interrupt
000029c4 g       *ABS*	00000000 __flash_rodata_start
00000d50 g     F .text	00000004 initializeGame
000028d4 g     F .text	00000020 alt_irq_init
00000e4c g     F .text	00000028 moveGunnerRightTransmited
00001580 g     F .text	00000024 resetSRAM
00002444 g     F .text	00000058 _write_r
00000e74 g     F .text	000000a0 shootGunner
00002be0 g     O .rwdata	00000004 _impure_ptr
00002d60 g     O .bss	00000004 alt_argc
00000408 g     F .text	0000006c addProjectileNode
00000020 g       .exceptions	00000000 alt_irq_entry
00002bc0 g     O .rwdata	00000004 alien0
00000474 g     F .text	00000020 listLength
00000020 g       *ABS*	00000000 __ram_exceptions_start
000025a8 g     F .text	00000004 alt_ic_isr_register
0000018c g     F .text	0000003c removeProjectileNode
00002bf4 g       *ABS*	00000000 _edata
00003664 g       *ABS*	00000000 _end
00000c88 g     F .text	0000004c printGunner
00000150 g       *ABS*	00000000 __ram_exceptions_end
000025ec g     F .text	00000040 alt_ic_irq_disable
000029bc g     F .text	00000008 altera_nios2_qsys_irq_init
00001714 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002bd8 g     O .rwdata	00000004 gunnerX
0000000c g       .entry	00000000 _exit
0000249c g     F .text	0000010c .hidden __muldi3
00001cb4 g     F .text	0000001c strlen
000008f0 g     F .text	000000e0 printAlienSlice
000027d0 g     F .text	00000048 alt_putchar
00002d40 g     O .bss	00000004 __malloc_sbrk_start
000029b8 g     F .text	00000004 alt_icache_flush_all
00002d3c g     O .bss	00000004 pBuffer
00002be4 g     O .rwdata	00000004 alt_priority_mask
00000f6c g     F .text	000000f8 shootAliens
00002d44 g     O .bss	00000004 __malloc_free_list
000025ac g     F .text	00000040 alt_ic_irq_enable
000022a8 g     F .text	00000024 __vfprintf_internal
00002d24 g     O .bss	00000004 edge_capture_sent
00002bc4 g     O .rwdata	00000004 empty_space
000026ac g     F .text	000000f8 alt_load
00002bb8 g     O .rwdata	00000004 alien2
00000cd4 g     F .text	0000007c updateDisplay
000017d8 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08405414 	ori	at,at,336
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  fc:	04000034 	movhi	r16,0
 100:	840d5904 	addi	r16,r16,13668

  active = alt_irq_pending ();

  do
  {
    i = 0;
 104:	0005883a 	mov	r2,zero
    mask = 1;
 108:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 10c:	190a703a 	and	r5,r3,r4
 110:	28000c26 	beq	r5,zero,144 <alt_irq_handler+0x58>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 114:	100490fa 	slli	r2,r2,3
 118:	8087883a 	add	r3,r16,r2
 11c:	1805883a 	mov	r2,r3
 120:	11000117 	ldw	r4,4(r2)
 124:	18c00017 	ldw	r3,0(r3)
 128:	183ee83a 	callr	r3
 12c:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 130:	203ff41e 	bne	r4,zero,104 <_gp+0xffff5550>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 134:	dfc00117 	ldw	ra,4(sp)
 138:	dc000017 	ldw	r16,0(sp)
 13c:	dec00204 	addi	sp,sp,8
 140:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	10800044 	addi	r2,r2,1

    } while (1);
 14c:	003fef06 	br	10c <_gp+0xffff5558>

Disassembly of section .text:

00000150 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     150:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     154:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
     158:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     15c:	d6aaed14 	ori	gp,gp,43956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     160:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     164:	108b4514 	ori	r2,r2,11540

    movhi r3, %hi(__bss_end)
     168:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     16c:	18cd9914 	ori	r3,r3,13924

    beq r2, r3, 1f
     170:	10c00326 	beq	r2,r3,180 <_start+0x30>

0:
    stw zero, (r2)
     174:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     178:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     17c:	10fffd36 	bltu	r2,r3,174 <_gp+0xffff55c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     180:	00026ac0 	call	26ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     184:	00027a40 	call	27a4 <alt_main>

00000188 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     188:	003fff06 	br	188 <_gp+0xffff55d4>

0000018c <removeProjectileNode>:

struct ProjectileNode *head = NULL;
struct ProjectileNode *end = NULL;

void removeProjectileNode(struct ProjectileNode* proj) {
    if(head == proj) {
     18c:	d0e05917 	ldw	r3,-32412(gp)
     190:	18800217 	ldw	r2,8(r3)
     194:	1900051e 	bne	r3,r4,1ac <removeProjectileNode+0x20>
        if(proj == end) end = NULL;
     198:	d122ac17 	ldw	r4,-30032(gp)
     19c:	1900011e 	bne	r3,r4,1a4 <removeProjectileNode+0x18>
     1a0:	d022ac15 	stw	zero,-30032(gp)
        head = proj->next;
     1a4:	d0a05915 	stw	r2,-32412(gp)
     1a8:	f800283a 	ret
    } else {
        struct ProjectileNode* current = head;
        while(current->next != proj) { }
     1ac:	113fff1e 	bne	r2,r4,1ac <_gp+0xffff55f8>
        current->next = proj->next;
     1b0:	11000217 	ldw	r4,8(r2)
     1b4:	19000215 	stw	r4,8(r3)
        if(proj == end) end = current->next;
     1b8:	d0e2ac17 	ldw	r3,-30032(gp)
     1bc:	10c0011e 	bne	r2,r3,1c4 <removeProjectileNode+0x38>
     1c0:	d122ac15 	stw	r4,-30032(gp)
     1c4:	f800283a 	ret

000001c8 <updateProjectileNodes>:
    }
	//printf("removed success x:%i y:%i", proj->bullet.xVal, proj->bullet.yVal);
    //free(proj);
}

void updateProjectileNodes() {
     1c8:	defffa04 	addi	sp,sp,-24
     1cc:	dc000015 	stw	r16,0(sp)
    //if head is null, return
    if(head == NULL) return;
     1d0:	d4205917 	ldw	r16,-32412(gp)
    }
	//printf("removed success x:%i y:%i", proj->bullet.xVal, proj->bullet.yVal);
    //free(proj);
}

void updateProjectileNodes() {
     1d4:	dfc00515 	stw	ra,20(sp)
     1d8:	dd000415 	stw	r20,16(sp)
     1dc:	dcc00315 	stw	r19,12(sp)
     1e0:	dc800215 	stw	r18,8(sp)
     1e4:	dc400115 	stw	r17,4(sp)
    //if head is null, return
    if(head == NULL) return;
     1e8:	80004026 	beq	r16,zero,2ec <updateProjectileNodes+0x124>
			//printf("Check Gunner Collison: %i", (int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            checkCollideGunner((int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
     1ec:	04c00034 	movhi	r19,0
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
     1f0:	04400044 	movi	r17,1

        if(tempCurrent->bullet.yVal < 0) {
			//printf("Check Gunner Collison: %i", (int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            checkCollideGunner((int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
     1f4:	048000c4 	movi	r18,3
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
     1f8:	9ccb4c04 	addi	r19,r19,11568
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
     1fc:	80800083 	ldbu	r2,2(r16)
     200:	81000143 	ldbu	r4,5(r16)
     204:	10c03fcc 	andi	r3,r2,255
     208:	21803fcc 	andi	r6,r4,255
     20c:	18c0201c 	xori	r3,r3,128
     210:	3180201c 	xori	r6,r6,128
     214:	18ffe004 	addi	r3,r3,-128
     218:	31bfe004 	addi	r6,r6,-128
     21c:	180b883a 	mov	r5,r3
     220:	1800010e 	bge	r3,zero,228 <updateProjectileNodes+0x60>
     224:	00c7c83a 	sub	r3,zero,r3
     228:	30c0030e 	bge	r6,r3,238 <updateProjectileNodes+0x70>
            current->bullet.timeTick++;
     22c:	21000044 	addi	r4,r4,1
     230:	81000145 	stb	r4,5(r16)
     234:	00000a06 	br	260 <updateProjectileNodes+0x98>
        } else {
            current->bullet.timeTick = 0;
            if(current->bullet.type == 1) { //Straight Line
     238:	80c00107 	ldb	r3,4(r16)
    struct ProjectileNode* current = head;
    while(current != NULL) {
        if(current->bullet.timeTick < abs(current->bullet.direction)) {
            current->bullet.timeTick++;
        } else {
            current->bullet.timeTick = 0;
     23c:	80000145 	stb	zero,5(r16)
            if(current->bullet.type == 1) { //Straight Line
     240:	1c40071e 	bne	r3,r17,260 <updateProjectileNodes+0x98>
     244:	81000043 	ldbu	r4,1(r16)
                current->bullet.yVal -= (current->bullet.direction < 0);
     248:	10803fcc 	andi	r2,r2,255
     24c:	1004d1fa 	srli	r2,r2,7
                current->bullet.yVal += (current->bullet.direction > 0);
     250:	0146803a 	cmplt	r3,zero,r5
     254:	1907883a 	add	r3,r3,r4
     258:	1885c83a 	sub	r2,r3,r2
     25c:	80800045 	stb	r2,1(r16)
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;

        if(tempCurrent->bullet.yVal < 0) {
     260:	80800047 	ldb	r2,1(r16)
            }
        }
        //printf("New Bullet Loc (%i, %i)\n", current->bullet.xVal, current->bullet.yVal);

        struct ProjectileNode* tempCurrent = current;
        current = current->next;
     264:	85000217 	ldw	r20,8(r16)

        if(tempCurrent->bullet.yVal < 0) {
     268:	1000080e 	bge	r2,zero,28c <updateProjectileNodes+0xc4>
			//printf("Check Gunner Collison: %i", (int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
            checkCollideGunner((int)tempCurrent->bullet.xVal % (ALIEN_COLS * ALIEN_WIDTH));
     26c:	81000007 	ldb	r4,0(r16)
     270:	01400a04 	movi	r5,40
     274:	00017140 	call	1714 <__modsi3>
     278:	11003fcc 	andi	r4,r2,255
     27c:	2100201c 	xori	r4,r4,128
     280:	213fe004 	addi	r4,r4,-128
     284:	000120c0 	call	120c <checkCollideGunner>
     288:	00000a06 	br	2b4 <updateProjectileNodes+0xec>
            removeProjectileNode(tempCurrent);
        } else if (tempCurrent->bullet.yVal > VOID_HEIGHT && (int)tempCurrent->bullet.direction >= 1) {
     28c:	90800b0e 	bge	r18,r2,2bc <updateProjectileNodes+0xf4>
     290:	01400a0e 	bge	zero,r5,2bc <updateProjectileNodes+0xf4>
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
     294:	81000007 	ldb	r4,0(r16)
     298:	01400144 	movi	r5,5
     29c:	00016c00 	call	16c0 <__divsi3>
            checkCollideAliens(pSramAliens, alienX);
     2a0:	11403fcc 	andi	r5,r2,255
     2a4:	99000017 	ldw	r4,0(r19)
     2a8:	2940201c 	xori	r5,r5,128
     2ac:	297fe004 	addi	r5,r5,-128
     2b0:	00010f80 	call	10f8 <checkCollideAliens>
            removeProjectileNode(tempCurrent);
     2b4:	8009883a 	mov	r4,r16
     2b8:	000018c0 	call	18c <removeProjectileNode>
void updateProjectileNodes() {
    //if head is null, return
    if(head == NULL) return;

    struct ProjectileNode* current = head;
    while(current != NULL) {
     2bc:	a0000226 	beq	r20,zero,2c8 <updateProjectileNodes+0x100>
     2c0:	a021883a 	mov	r16,r20
     2c4:	003fcd06 	br	1fc <_gp+0xffff5648>
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     2c8:	01000284 	movi	r4,10
}
     2cc:	dfc00517 	ldw	ra,20(sp)
     2d0:	dd000417 	ldw	r20,16(sp)
     2d4:	dcc00317 	ldw	r19,12(sp)
     2d8:	dc800217 	ldw	r18,8(sp)
     2dc:	dc400117 	ldw	r17,4(sp)
     2e0:	dc000017 	ldw	r16,0(sp)
     2e4:	dec00604 	addi	sp,sp,24
			int alienX = ((int) tempCurrent->bullet.xVal) / ALIEN_WIDTH;
            checkCollideAliens(pSramAliens, alienX);
            removeProjectileNode(tempCurrent);
        }
    }
    printf("\n");
     2e8:	0001b441 	jmpi	1b44 <putchar>
}
     2ec:	dfc00517 	ldw	ra,20(sp)
     2f0:	dd000417 	ldw	r20,16(sp)
     2f4:	dcc00317 	ldw	r19,12(sp)
     2f8:	dc800217 	ldw	r18,8(sp)
     2fc:	dc400117 	ldw	r17,4(sp)
     300:	dc000017 	ldw	r16,0(sp)
     304:	dec00604 	addi	sp,sp,24
     308:	f800283a 	ret

0000030c <initProjectileBuffer>:

void initProjectileBuffer(int pSramBulletBuffer) {
     30c:	defff704 	addi	sp,sp,-36
     310:	dd000715 	stw	r20,28(sp)
     314:	dcc00615 	stw	r19,24(sp)
     318:	dc800515 	stw	r18,20(sp)
     31c:	dc400415 	stw	r17,16(sp)
     320:	dfc00815 	stw	ra,32(sp)
     324:	dc000315 	stw	r16,12(sp)
     328:	2025883a 	mov	r18,r4
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     32c:	0023883a 	mov	r17,zero
        for(y = 0; y < VOID_HEIGHT; y++) {
     330:	04c000c4 	movi	r19,3
    printf("\n");
}

void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     334:	05000a04 	movi	r20,40
        }
    }
    printf("\n");
}

void initProjectileBuffer(int pSramBulletBuffer) {
     338:	0021883a 	mov	r16,zero
     33c:	d8000205 	stb	zero,8(sp)
     340:	d8000245 	stb	zero,9(sp)
     344:	d8000105 	stb	zero,4(sp)
     348:	d8000145 	stb	zero,5(sp)
     34c:	d8000185 	stb	zero,6(sp)
     350:	d80001c5 	stb	zero,7(sp)
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
     354:	d880020b 	ldhu	r2,8(sp)
     358:	d9c00117 	ldw	r7,4(sp)
     35c:	800d883a 	mov	r6,r16
     360:	d880000d 	sth	r2,0(sp)
     364:	9009883a 	mov	r4,r18
     368:	880b883a 	mov	r5,r17
}

void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
     36c:	84000044 	addi	r16,r16,1
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
     370:	00014f00 	call	14f0 <setProjectile>
}

void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
        for(y = 0; y < VOID_HEIGHT; y++) {
     374:	84fff11e 	bne	r16,r19,33c <_gp+0xffff5788>
    printf("\n");
}

void initProjectileBuffer(int pSramBulletBuffer) {
	int x, y;
    for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     378:	8c400044 	addi	r17,r17,1
     37c:	8d3fee1e 	bne	r17,r20,338 <_gp+0xffff5784>
        for(y = 0; y < VOID_HEIGHT; y++) {
			struct Projectile empty = createProjectile(0, 0, 0, 0);
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}
     380:	dfc00817 	ldw	ra,32(sp)
     384:	dd000717 	ldw	r20,28(sp)
     388:	dcc00617 	ldw	r19,24(sp)
     38c:	dc800517 	ldw	r18,20(sp)
     390:	dc400417 	ldw	r17,16(sp)
     394:	dc000317 	ldw	r16,12(sp)
     398:	dec00904 	addi	sp,sp,36
     39c:	f800283a 	ret

000003a0 <updateProjectileBuffer>:

void updateProjectileBuffer(int pSramBulletBuffer) {
    if(head == NULL) return;
     3a0:	d0a05917 	ldw	r2,-32412(gp)
     3a4:	10001726 	beq	r2,zero,404 <updateProjectileBuffer+0x64>
			setProjectile(pSramBulletBuffer, x, y, empty);
        }
    }
}

void updateProjectileBuffer(int pSramBulletBuffer) {
     3a8:	defffa04 	addi	sp,sp,-24
     3ac:	dc400415 	stw	r17,16(sp)
     3b0:	dc000315 	stw	r16,12(sp)
     3b4:	dfc00515 	stw	ra,20(sp)
     3b8:	2023883a 	mov	r17,r4
    if(head == NULL) return;
	initProjectileBuffer(pSramBulletBuffer);
     3bc:	000030c0 	call	30c <initProjectileBuffer>
    struct ProjectileNode* current = head;
     3c0:	d4205917 	ldw	r16,-32412(gp)
    while(current != NULL) {
     3c4:	80000b26 	beq	r16,zero,3f4 <updateProjectileBuffer+0x54>
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     3c8:	8080010b 	ldhu	r2,4(r16)
     3cc:	81c00017 	ldw	r7,0(r16)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     3d0:	81400007 	ldb	r5,0(r16)
     3d4:	81800047 	ldb	r6,1(r16)
     3d8:	8809883a 	mov	r4,r17
     3dc:	d880000d 	sth	r2,0(sp)
	initProjectileBuffer(pSramBulletBuffer);
    struct ProjectileNode* current = head;
    while(current != NULL) {
        //printf("Values: %i, %i - %i\n", current->bullet.xVal, current->bullet.yVal, current->bullet.type);
		
		struct Projectile p = current->bullet;
     3e0:	d9c00115 	stw	r7,4(sp)
     3e4:	d880020d 	sth	r2,8(sp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
     3e8:	00014f00 	call	14f0 <setProjectile>
        current = current->next;
     3ec:	84000217 	ldw	r16,8(r16)
     3f0:	003ff406 	br	3c4 <_gp+0xffff5810>
    }
}
     3f4:	dfc00517 	ldw	ra,20(sp)
     3f8:	dc400417 	ldw	r17,16(sp)
     3fc:	dc000317 	ldw	r16,12(sp)
     400:	dec00604 	addi	sp,sp,24
     404:	f800283a 	ret

00000408 <addProjectileNode>:

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     408:	d0a05917 	ldw	r2,-32412(gp)
		setProjectile(pSramBulletBuffer, current->bullet.xVal, current->bullet.yVal, p);
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
     40c:	defffd04 	addi	sp,sp,-12
     410:	d9000015 	stw	r4,0(sp)
     414:	dfc00215 	stw	ra,8(sp)
     418:	d9400115 	stw	r5,4(sp)
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     41c:	01000304 	movi	r4,12
        current = current->next;
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
     420:	1000081e 	bne	r2,zero,444 <addProjectileNode+0x3c>
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     424:	00017c40 	call	17c4 <malloc>
        head->bullet = proj;
     428:	d8c00017 	ldw	r3,0(sp)
    }
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     42c:	d0a05915 	stw	r2,-32412(gp)
        head->bullet = proj;
        head->next = NULL;
     430:	10000215 	stw	zero,8(r2)
}

void addProjectileNode(struct Projectile proj) {
    if(head == NULL) {
        head = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        head->bullet = proj;
     434:	10c00015 	stw	r3,0(r2)
     438:	d8c0010b 	ldhu	r3,4(sp)
     43c:	10c0010d 	sth	r3,4(r2)
     440:	00000806 	br	464 <addProjectileNode+0x5c>
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
     444:	00017c40 	call	17c4 <malloc>
        nextProj->bullet = proj;
     448:	d8c00017 	ldw	r3,0(sp)
        nextProj->next = NULL;
     44c:	10000215 	stw	zero,8(r2)
        head->bullet = proj;
        head->next = NULL;
        end = head;
    } else {
        struct ProjectileNode* nextProj = (struct ProjectileNode*)malloc(sizeof(struct ProjectileNode));
        nextProj->bullet = proj;
     450:	10c00015 	stw	r3,0(r2)
     454:	d8c0010b 	ldhu	r3,4(sp)
     458:	10c0010d 	sth	r3,4(r2)
        nextProj->next = NULL;
		
        end->next = nextProj;
     45c:	d0e2ac17 	ldw	r3,-30032(gp)
     460:	18800215 	stw	r2,8(r3)
        end = nextProj;
     464:	d0a2ac15 	stw	r2,-30032(gp)
    }
}
     468:	dfc00217 	ldw	ra,8(sp)
     46c:	dec00304 	addi	sp,sp,12
     470:	f800283a 	ret

00000474 <listLength>:

int listLength() {
	if(head == NULL) return 0;
     474:	d0e05917 	ldw	r3,-32412(gp)
     478:	0005883a 	mov	r2,zero
     47c:	18000426 	beq	r3,zero,490 <listLength+0x1c>
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
     480:	18c00217 	ldw	r3,8(r3)
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
        size++;
     484:	10800044 	addi	r2,r2,1
int listLength() {
	if(head == NULL) return 0;
	int size = 0;
	
	struct ProjectileNode* current = head;
    while(current != NULL) {
     488:	183ffd1e 	bne	r3,zero,480 <_gp+0xffff58cc>
     48c:	f800283a 	ret
        size++;
		struct Projectile p = current->bullet;
		current = current->next;
    }
	return size;
}
     490:	f800283a 	ret

00000494 <createProjectile>:
    proj.yVal = 0;
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
     494:	29403fcc 	andi	r5,r5,255
     498:	280a943a 	slli	r5,r5,16
     49c:	300c963a 	slli	r6,r6,24
     4a0:	21003fcc 	andi	r4,r4,255
     4a4:	2144b03a 	or	r2,r4,r5
     4a8:	1184b03a 	or	r2,r2,r6
     4ac:	38c03fcc 	andi	r3,r7,255
		current = current->next;
    }
	return size;
}

struct Projectile createProjectile(char x, char dir, char symb, char t) {
     4b0:	defffe04 	addi	sp,sp,-8
    proj.direction = dir;
    proj.symbol = symb;
    proj.type = t;
    proj.timeTick = 0;
    return proj;
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <gun_handler>:

void gun_handler(void* context) {
	//printf("gun!\n");

	volatile int* edge_capture_gun_ptr = (volatile int*) context; //volatile variable to avoid optimization...
	*edge_capture_gun_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE); //Store edge capture register in *context.
     4bc:	00941f04 	movi	r2,20604
     4c0:	10c00037 	ldwio	r3,0(r2)
     4c4:	20c00015 	stw	r3,0(r4)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE, 0x0); //Reset edge capture register
     4c8:	10000035 	stwio	zero,0(r2)
     4cc:	f800283a 	ret

000004d0 <character_recieved_handler>:
}

void character_recieved_handler(void* context) {
     4d0:	defffe04 	addi	sp,sp,-8
     4d4:	dc000015 	stw	r16,0(sp)
     4d8:	dfc00115 	stw	ra,4(sp)
	//alt_putchar(getCharacter(*data_bus_input));
	
	char c = getCharacter(*data_bus_input);
     4dc:	00944804 	movi	r2,20768
     4e0:	10800003 	ldbu	r2,0(r2)

	if(c == 'l') {
     4e4:	00c01b04 	movi	r3,108
	volatile int* edge_capture_gun_ptr = (volatile int*) context; //volatile variable to avoid optimization...
	*edge_capture_gun_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE); //Store edge capture register in *context.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE, 0x0); //Reset edge capture register
}

void character_recieved_handler(void* context) {
     4e8:	2021883a 	mov	r16,r4
	//alt_putchar(getCharacter(*data_bus_input));
	
	char c = getCharacter(*data_bus_input);

	if(c == 'l') {
     4ec:	10803fcc 	andi	r2,r2,255
     4f0:	1080201c 	xori	r2,r2,128
     4f4:	10bfe004 	addi	r2,r2,-128
     4f8:	10c0021e 	bne	r2,r3,504 <character_recieved_handler+0x34>
		moveGunnerLeftTransmited();
     4fc:	0000dbc0 	call	dbc <moveGunnerLeftTransmited>
     500:	00000706 	br	520 <character_recieved_handler+0x50>
	} else if (c == 'r') {
     504:	00c01c84 	movi	r3,114
     508:	10c0021e 	bne	r2,r3,514 <character_recieved_handler+0x44>
		moveGunnerRightTransmited();
     50c:	0000e4c0 	call	e4c <moveGunnerRightTransmited>
     510:	00000306 	br	520 <character_recieved_handler+0x50>
	} else if (c == 's') {
     514:	00c01cc4 	movi	r3,115
     518:	10c0011e 	bne	r2,r3,520 <character_recieved_handler+0x50>
		shootGunnerTransmited();
     51c:	0000f140 	call	f14 <shootGunnerTransmited>
	}
	
	
	volatile int* edge_capture_receive_ptr = (volatile int*) context; //volatile variable to avoid optimization...
	*edge_capture_receive_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE); //Store edge capture register in *context.
     520:	00944704 	movi	r2,20764
     524:	10c00037 	ldwio	r3,0(r2)
     528:	80c00015 	stw	r3,0(r16)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE, 0x0); //Reset edge capture register
     52c:	10000035 	stwio	zero,0(r2)
}
     530:	dfc00117 	ldw	ra,4(sp)
     534:	dc000017 	ldw	r16,0(sp)
     538:	dec00204 	addi	sp,sp,8
     53c:	f800283a 	ret

00000540 <readBuffer>:
void* edge_capture_receive;
void* edge_capture_sent;


char readBuffer() {
    if(*pTransmit == 0x60 || *pTransmit == '\0') {
     540:	00c00034 	movhi	r3,0
     544:	18cb4d04 	addi	r3,r3,11572
     548:	19000017 	ldw	r4,0(r3)
     54c:	01401804 	movi	r5,96
     550:	20800003 	ldbu	r2,0(r4)
     554:	11803fcc 	andi	r6,r2,255
     558:	3180201c 	xori	r6,r6,128
     55c:	31bfe004 	addi	r6,r6,-128
     560:	31400d26 	beq	r6,r5,598 <readBuffer+0x58>
     564:	30000d26 	beq	r6,zero,59c <readBuffer+0x5c>
        return '\0';
    } else {
        char c = *pTransmit;
        *pTransmit = 0x60;
     568:	21400005 	stb	r5,0(r4)

        if((pTransmit - pBuffer) == (TRANSMIT_BUFFER_SIZE - 1)) {
     56c:	01400034 	movhi	r5,0
     570:	19000017 	ldw	r4,0(r3)
     574:	294b4f04 	addi	r5,r5,11580
     578:	29400017 	ldw	r5,0(r5)
     57c:	21bff3c4 	addi	r6,r4,-49
     580:	3140021e 	bne	r6,r5,58c <readBuffer+0x4c>
            pTransmit = pBuffer;
     584:	19400015 	stw	r5,0(r3)
     588:	f800283a 	ret
        } else {
            pTransmit = pTransmit + sizeof(char);
     58c:	21000044 	addi	r4,r4,1
     590:	19000015 	stw	r4,0(r3)
     594:	f800283a 	ret
void* edge_capture_sent;


char readBuffer() {
    if(*pTransmit == 0x60 || *pTransmit == '\0') {
        return '\0';
     598:	0005883a 	mov	r2,zero
        } else {
            pTransmit = pTransmit + sizeof(char);
        }
        return c;
    }
}
     59c:	f800283a 	ret

000005a0 <writeBuffer>:

void writeBuffer(char c) {
    if(!(*pBufferHead == 0x60 || *pBufferHead == '\0')) return;
     5a0:	00800034 	movhi	r2,0
     5a4:	108b4e04 	addi	r2,r2,11576
     5a8:	10c00017 	ldw	r3,0(r2)
     5ac:	01801804 	movi	r6,96
     5b0:	19400007 	ldb	r5,0(r3)
     5b4:	29800126 	beq	r5,r6,5bc <writeBuffer+0x1c>
     5b8:	28000d1e 	bne	r5,zero,5f0 <writeBuffer+0x50>

    *(pBufferHead) = c;
     5bc:	19000005 	stb	r4,0(r3)
    if((pBufferHead - pBuffer) == (TRANSMIT_BUFFER_SIZE - 1)) {
     5c0:	01000034 	movhi	r4,0
     5c4:	10800017 	ldw	r2,0(r2)
     5c8:	210b4f04 	addi	r4,r4,11580
     5cc:	21000017 	ldw	r4,0(r4)
     5d0:	00c00034 	movhi	r3,0
     5d4:	117ff3c4 	addi	r5,r2,-49
     5d8:	18cb4e04 	addi	r3,r3,11576
     5dc:	2900021e 	bne	r5,r4,5e8 <writeBuffer+0x48>
        pBufferHead = pBuffer;
     5e0:	19000015 	stw	r4,0(r3)
     5e4:	f800283a 	ret
    } else {
        pBufferHead = pBufferHead + sizeof(char);
     5e8:	10800044 	addi	r2,r2,1
     5ec:	18800015 	stw	r2,0(r3)
     5f0:	f800283a 	ret

000005f4 <transmitIfBufferNotEmpty>:
    }
}

void transmitIfBufferNotEmpty() {
     5f4:	defffd04 	addi	sp,sp,-12
     5f8:	dfc00215 	stw	ra,8(sp)
     5fc:	dc400115 	stw	r17,4(sp)
     600:	dc000015 	stw	r16,0(sp)
	  char c = '\0';
	  c = readBuffer();
     604:	00005400 	call	540 <readBuffer>
	  //printf("SHOULDNT GET HERE");
	  if(c != '\0' && c != 0x60 ) {
     608:	10c03fcc 	andi	r3,r2,255
     60c:	18c0201c 	xori	r3,r3,128
     610:	18ffe004 	addi	r3,r3,-128
     614:	18001026 	beq	r3,zero,658 <transmitIfBufferNotEmpty+0x64>
     618:	01001804 	movi	r4,96
     61c:	19000e26 	beq	r3,r4,658 <transmitIfBufferNotEmpty+0x64>
		*transmit_enable = 0x0;
     620:	04543004 	movi	r17,20672
     624:	88000005 	stb	zero,0(r17)
		*load = 0x0;
     628:	04143804 	movi	r16,20704
		
		*data_bus_output = (c);
     62c:	00d43c04 	movi	r3,20720
	  char c = '\0';
	  c = readBuffer();
	  //printf("SHOULDNT GET HERE");
	  if(c != '\0' && c != 0x60 ) {
		*transmit_enable = 0x0;
		*load = 0x0;
     630:	80000005 	stb	zero,0(r16)
		
		*data_bus_output = (c);
     634:	18800005 	stb	r2,0(r3)
		//*data_bus_output = setParity(*data_bus_output);
		
		usleep(1000);
     638:	0100fa04 	movi	r4,1000
     63c:	00028640 	call	2864 <usleep>
		*transmit_enable = 0x1;
     640:	00800044 	movi	r2,1
     644:	88800005 	stb	r2,0(r17)
		*load = 0x1;
     648:	80800005 	stb	r2,0(r16)
		usleep(50);
     64c:	01000c84 	movi	r4,50
     650:	00028640 	call	2864 <usleep>
		*load = 0x0;
     654:	80000005 	stb	zero,0(r16)
	  }
}
     658:	dfc00217 	ldw	ra,8(sp)
     65c:	dc400117 	ldw	r17,4(sp)
     660:	dc000017 	ldw	r16,0(sp)
     664:	dec00304 	addi	sp,sp,12
     668:	f800283a 	ret

0000066c <character_sent_handler>:
	volatile int* edge_capture_receive_ptr = (volatile int*) context; //volatile variable to avoid optimization...
	*edge_capture_receive_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE); //Store edge capture register in *context.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE, 0x0); //Reset edge capture register
}

void character_sent_handler(void* context) {
     66c:	defffe04 	addi	sp,sp,-8
     670:	dc000015 	stw	r16,0(sp)
     674:	dfc00115 	stw	ra,4(sp)
	*transmit_enable = 0x0;
     678:	00943004 	movi	r2,20672
     67c:	10000005 	stb	zero,0(r2)
	volatile int* edge_capture_receive_ptr = (volatile int*) context; //volatile variable to avoid optimization...
	*edge_capture_receive_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE); //Store edge capture register in *context.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE, 0x0); //Reset edge capture register
}

void character_sent_handler(void* context) {
     680:	2021883a 	mov	r16,r4
	*transmit_enable = 0x0;
	transmitIfBufferNotEmpty();
     684:	00005f40 	call	5f4 <transmitIfBufferNotEmpty>

	volatile int* edge_capture_sent_ptr = (volatile int*) context; //volatile variable to avoid optimization...
	*edge_capture_sent_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_SENT_INPUT_BASE); //Store edge capture register in *context.
     688:	00943704 	movi	r2,20700
     68c:	10c00037 	ldwio	r3,0(r2)
     690:	80c00015 	stw	r3,0(r16)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_SENT_INPUT_BASE, 0x0); //Reset edge capture register
     694:	10000035 	stwio	zero,0(r2)
}
     698:	dfc00117 	ldw	ra,4(sp)
     69c:	dc000017 	ldw	r16,0(sp)
     6a0:	dec00204 	addi	sp,sp,8
     6a4:	f800283a 	ret

000006a8 <setup_interrupt>:

void setup_interrupt() {
     6a8:	defffc04 	addi	sp,sp,-16
     6ac:	dc400215 	stw	r17,8(sp)
     6b0:	dfc00315 	stw	ra,12(sp)
     6b4:	dc000115 	stw	r16,4(sp)
	void* edge_capture_gun_ptr = (void*) &edge_capture_gun; //volatile variable to avoid optimization
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(GUN_LEFT_BASE, 0x1); //Enable first  button interrupts.
     6b8:	04400044 	movi	r17,1
     6bc:	00941e04 	movi	r2,20600
     6c0:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE, 0x0); //Reset the edge capture register.
     6c4:	0021883a 	mov	r16,zero
     6c8:	00941f04 	movi	r2,20604
     6cc:	14000035 	stwio	r16,0(r2)
	alt_ic_isr_register(GUN_LEFT_IRQ_INTERRUPT_CONTROLLER_ID, GUN_LEFT_IRQ, gun_handler, edge_capture_gun_ptr, 0x0); //Sets the interrupt handler
     6d0:	01800034 	movhi	r6,0
     6d4:	d8000015 	stw	zero,0(sp)
     6d8:	0009883a 	mov	r4,zero
     6dc:	01400084 	movi	r5,2
     6e0:	31812f04 	addi	r6,r6,1212
     6e4:	d1e05b04 	addi	r7,gp,-32404
     6e8:	00025a80 	call	25a8 <alt_ic_isr_register>

	void* edge_capture_receive_ptr = (void*) &edge_capture_receive; //volatile variable to avoid optimization
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(CHARACTER_RECIEVED_INPUT_BASE, 0x1); //Enable first  button interrupts.
     6ec:	00944604 	movi	r2,20760
     6f0:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_RECIEVED_INPUT_BASE, 0x0); //Reset the edge capture register.
     6f4:	00944704 	movi	r2,20764
     6f8:	14000035 	stwio	r16,0(r2)
	alt_ic_isr_register(CHARACTER_RECIEVED_INPUT_IRQ_INTERRUPT_CONTROLLER_ID, CHARACTER_RECIEVED_INPUT_IRQ, character_recieved_handler, edge_capture_receive_ptr, 0x0); //Sets the interrupt handler
     6fc:	01800034 	movhi	r6,0
     700:	d8000015 	stw	zero,0(sp)
     704:	0009883a 	mov	r4,zero
     708:	01400384 	movi	r5,14
     70c:	31813404 	addi	r6,r6,1232
     710:	d1e05a04 	addi	r7,gp,-32408
     714:	00025a80 	call	25a8 <alt_ic_isr_register>
	
	void* edge_capture_sent_ptr = (void*) &edge_capture_sent; //volatile variable to avoid optimization
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(CHARACTER_SENT_INPUT_BASE, 0x1); //Enable first  button interrupts.
     718:	00943604 	movi	r2,20696
     71c:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CHARACTER_SENT_INPUT_BASE, 0x0); //Reset the edge capture register.
     720:	00943704 	movi	r2,20700
     724:	14000035 	stwio	r16,0(r2)
	alt_ic_isr_register(CHARACTER_SENT_INPUT_IRQ_INTERRUPT_CONTROLLER_ID, CHARACTER_SENT_INPUT_IRQ, character_sent_handler, edge_capture_sent_ptr, 0x0); //Sets the interrupt handler
     728:	01800034 	movhi	r6,0
     72c:	d8000015 	stw	zero,0(sp)
     730:	0009883a 	mov	r4,zero
     734:	014002c4 	movi	r5,11
     738:	31819b04 	addi	r6,r6,1644
     73c:	d1e05c04 	addi	r7,gp,-32400
     740:	00025a80 	call	25a8 <alt_ic_isr_register>
}
     744:	dfc00317 	ldw	ra,12(sp)
     748:	dc400217 	ldw	r17,8(sp)
     74c:	dc000117 	ldw	r16,4(sp)
     750:	dec00404 	addi	sp,sp,16
     754:	f800283a 	ret

00000758 <setParity>:
	int out = ((c  << 1));
	if (parity & 1) {
		out ^= 1 >> 7;
	}
	return out;
}
     758:	2105883a 	add	r2,r4,r4
     75c:	f800283a 	ret

00000760 <getParity>:

int getParity(unsigned int c) {
	int parity = c;
	parity ^= parity >> 4;
     760:	2005d13a 	srai	r2,r4,4
     764:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 2;
     768:	2005d0ba 	srai	r2,r4,2
     76c:	1108f03a 	xor	r4,r2,r4
	parity ^= parity >> 1;
     770:	2005d07a 	srai	r2,r4,1
     774:	1104f03a 	xor	r2,r2,r4
	return parity & 1;
}
     778:	1080004c 	andi	r2,r2,1
     77c:	f800283a 	ret

00000780 <getCharacter>:

int getCharacter(unsigned int c) {
	return ((c >> 0));
}
     780:	2005883a 	mov	r2,r4
     784:	f800283a 	ret

00000788 <getBits>:
int getBits(unsigned int c) {
	printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
     788:	2004d13a 	srli	r2,r4,4

int getCharacter(unsigned int c) {
	return ((c >> 0));
}

int getBits(unsigned int c) {
     78c:	defffa04 	addi	sp,sp,-24
	printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
     790:	200ad1fa 	srli	r5,r4,7
int getCharacter(unsigned int c) {
	return ((c >> 0));
}

int getBits(unsigned int c) {
	printf("%x%x%x%x%x%x%x%x\n",
     794:	1080004c 	andi	r2,r2,1
     798:	d8800015 	stw	r2,0(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
     79c:	2004d0fa 	srli	r2,r4,3
}

int getBits(unsigned int c) {
	printf("%x%x%x%x%x%x%x%x\n",
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
     7a0:	200cd1ba 	srli	r6,r4,6
			(c >> 5) & 0b00000001,
     7a4:	200ed17a 	srli	r7,r4,5
int getCharacter(unsigned int c) {
	return ((c >> 0));
}

int getBits(unsigned int c) {
	printf("%x%x%x%x%x%x%x%x\n",
     7a8:	1080004c 	andi	r2,r2,1
     7ac:	d8800115 	stw	r2,4(sp)
			(c >> 7) & 0b00000001,
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
     7b0:	2004d0ba 	srli	r2,r4,2
int getCharacter(unsigned int c) {
	return ((c >> 0));
}

int getBits(unsigned int c) {
	printf("%x%x%x%x%x%x%x%x\n",
     7b4:	2940004c 	andi	r5,r5,1
     7b8:	3180004c 	andi	r6,r6,1
     7bc:	1080004c 	andi	r2,r2,1
     7c0:	d8800215 	stw	r2,8(sp)
			(c >> 6) & 0b00000001,
			(c >> 5) & 0b00000001,
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
     7c4:	2004d07a 	srli	r2,r4,1
int getCharacter(unsigned int c) {
	return ((c >> 0));
}

int getBits(unsigned int c) {
	printf("%x%x%x%x%x%x%x%x\n",
     7c8:	2100004c 	andi	r4,r4,1
     7cc:	d9000415 	stw	r4,16(sp)
     7d0:	1080004c 	andi	r2,r2,1
     7d4:	01000034 	movhi	r4,0
     7d8:	d8800315 	stw	r2,12(sp)
     7dc:	210a7104 	addi	r4,r4,10692
     7e0:	39c0004c 	andi	r7,r7,1

int getCharacter(unsigned int c) {
	return ((c >> 0));
}

int getBits(unsigned int c) {
     7e4:	dfc00515 	stw	ra,20(sp)
	printf("%x%x%x%x%x%x%x%x\n",
     7e8:	0001af00 	call	1af0 <printf>
			(c >> 4) & 0b00000001,
			(c >> 3) & 0b00000001,
			(c >> 2) & 0b00000001,
			(c >> 1) & 0b00000001,
			(c >> 0) & 0b00000001);
}
     7ec:	dfc00517 	ldw	ra,20(sp)
     7f0:	dec00604 	addi	sp,sp,24
     7f4:	f800283a 	ret

000007f8 <newAlien>:
struct Alien newAlien(char alive, char type, char id) {
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
     7f8:	29403fcc 	andi	r5,r5,255
     7fc:	31803fcc 	andi	r6,r6,255
     800:	280a923a 	slli	r5,r5,8
     804:	3004943a 	slli	r2,r6,16
     808:	21003fcc 	andi	r4,r4,255
     80c:	214ab03a 	or	r5,r4,r5
};
     810:	2884b03a 	or	r2,r5,r2
#include "data_structures_constants.h"
#include "sram.h"
#include "display.h"


struct Alien newAlien(char alive, char type, char id) {
     814:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = alive;
    a.type = type;
    a.rowId = id;
    return a;
};
     818:	dec00104 	addi	sp,sp,4
     81c:	f800283a 	ret

00000820 <initRandomAliens>:

void initRandomAliens(int pSramAliens) {
     820:	defff804 	addi	sp,sp,-32
     824:	dd400615 	stw	r21,24(sp)
     828:	dd000515 	stw	r20,20(sp)
     82c:	dcc00415 	stw	r19,16(sp)
     830:	dc800315 	stw	r18,12(sp)
     834:	dc400215 	stw	r17,8(sp)
     838:	dfc00715 	stw	ra,28(sp)
     83c:	dc000115 	stw	r16,4(sp)
     840:	2025883a 	mov	r18,r4
    int x, y;
    for(x = 0; x < 3; x++) {
     844:	0023883a 	mov	r17,zero
     848:	04c00044 	movi	r19,1
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     84c:	050000c4 	movi	r20,3
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     850:	05400204 	movi	r21,8
    a.type = type;
    a.rowId = id;
    return a;
};

void initRandomAliens(int pSramAliens) {
     854:	0021883a 	mov	r16,zero
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
     858:	0001c040 	call	1c04 <rand>
     85c:	1009883a 	mov	r4,r2
     860:	014000c4 	movi	r5,3
     864:	dcc00005 	stb	r19,0(sp)
     868:	00017140 	call	1714 <__modsi3>
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     86c:	d8800045 	stb	r2,1(sp)
     870:	dc000085 	stb	r16,2(sp)
     874:	d9c00017 	ldw	r7,0(sp)
     878:	800d883a 	mov	r6,r16
     87c:	9009883a 	mov	r4,r18
     880:	880b883a 	mov	r5,r17
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     884:	84000044 	addi	r16,r16,1
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
     888:	00014140 	call	1414 <setAlien>
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
        for(y = 0; y < 8; y++) {
     88c:	857ff21e 	bne	r16,r21,858 <_gp+0xffff5ca4>
    return a;
};

void initRandomAliens(int pSramAliens) {
    int x, y;
    for(x = 0; x < 3; x++) {
     890:	8c400044 	addi	r17,r17,1
     894:	8d3fef1e 	bne	r17,r20,854 <_gp+0xffff5ca0>
        for(y = 0; y < 8; y++) {
            int type = rand() % 3;
            setAlien(pSramAliens, x, y, newAlien(1, type, y));
        }
    }
}
     898:	dfc00717 	ldw	ra,28(sp)
     89c:	dd400617 	ldw	r21,24(sp)
     8a0:	dd000517 	ldw	r20,20(sp)
     8a4:	dcc00417 	ldw	r19,16(sp)
     8a8:	dc800317 	ldw	r18,12(sp)
     8ac:	dc400217 	ldw	r17,8(sp)
     8b0:	dc000117 	ldw	r16,4(sp)
     8b4:	dec00804 	addi	sp,sp,32
     8b8:	f800283a 	ret

000008bc <getAlienApperence>:

const char* getAlienApperence(int type) {
    if(type == 0) {
     8bc:	2000031e 	bne	r4,zero,8cc <getAlienApperence+0x10>
        return alien0;
     8c0:	00800034 	movhi	r2,0
     8c4:	108af004 	addi	r2,r2,11200
     8c8:	00000706 	br	8e8 <getAlienApperence+0x2c>
    } else if(type == 1) {
     8cc:	00800044 	movi	r2,1
     8d0:	2080031e 	bne	r4,r2,8e0 <getAlienApperence+0x24>
        return alien1;
     8d4:	00800034 	movhi	r2,0
     8d8:	108aef04 	addi	r2,r2,11196
     8dc:	00000206 	br	8e8 <getAlienApperence+0x2c>
    } else {
        return alien2;
     8e0:	00800034 	movhi	r2,0
     8e4:	108aee04 	addi	r2,r2,11192
     8e8:	10800017 	ldw	r2,0(r2)
    }
}
     8ec:	f800283a 	ret

000008f0 <printAlienSlice>:

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
     8f0:	defff904 	addi	sp,sp,-28
     8f4:	dc000115 	stw	r16,4(sp)
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	dd000515 	stw	r20,20(sp)
     900:	dcc00415 	stw	r19,16(sp)
     904:	dc800315 	stw	r18,12(sp)
     908:	dc400215 	stw	r17,8(sp)
     90c:	3821883a 	mov	r16,r7
    struct Alien alien = getAlien(pSramAliens, x, y);
     910:	00013cc0 	call	13cc <getAlien>
     914:	1006d23a 	srli	r3,r2,8
     918:	d8800005 	stb	r2,0(sp)
     91c:	d8c00045 	stb	r3,1(sp)
     920:	1006d43a 	srli	r3,r2,16
    if(alien.alive == 1) {
     924:	10803fcc 	andi	r2,r2,255
     928:	1080201c 	xori	r2,r2,128
        return alien2;
    }
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
     92c:	d8c00085 	stb	r3,2(sp)
    if(alien.alive == 1) {
     930:	10bfe004 	addi	r2,r2,-128
     934:	00c00044 	movi	r3,1
     938:	10c0181e 	bne	r2,r3,99c <printAlienSlice+0xac>
        char* alienApperence = getAlienApperence(alien.type);
     93c:	d9000047 	ldb	r4,1(sp)
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     940:	05000c04 	movi	r20,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     944:	04800144 	movi	r18,5
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     948:	00008bc0 	call	8bc <getAlienApperence>
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     94c:	d9000717 	ldw	r4,28(sp)
     950:	014003c4 	movi	r5,15
}

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
     954:	1027883a 	mov	r19,r2
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     958:	00017800 	call	1780 <__mulsi3>
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     95c:	8009883a 	mov	r4,r16
     960:	01400144 	movi	r5,5

void printAlienSlice(int pSramAliens, int x, int y, int slice, int step) {
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
     964:	1023883a 	mov	r17,r2
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
            int index = offset + (slice * ALIEN_WIDTH) + i;
     968:	00017800 	call	1780 <__mulsi3>
     96c:	88a3883a 	add	r17,r17,r2
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     970:	0021883a 	mov	r16,zero
     974:	8447883a 	add	r3,r16,r17
     978:	98c7883a 	add	r3,r19,r3
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
     97c:	19000007 	ldb	r4,0(r3)
     980:	2500021e 	bne	r4,r20,98c <printAlienSlice+0x9c>
                putchar(alien.rowId + 48);
     984:	d9000087 	ldb	r4,2(sp)
     988:	21000c04 	addi	r4,r4,48
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     98c:	84000044 	addi	r16,r16,1
            int index = offset + (slice * ALIEN_WIDTH) + i;
            if(alienApperence[index] == '0') {
                putchar(alien.rowId + 48);
            } else {
                putchar(alienApperence[index]);
     990:	0001b440 	call	1b44 <putchar>
    struct Alien alien = getAlien(pSramAliens, x, y);
    if(alien.alive == 1) {
        char* alienApperence = getAlienApperence(alien.type);
        int offset = step * ALIEN_WIDTH * ALIEN_HEIGHT;
        int i;
        for(i = 0; i < ALIEN_WIDTH; i++) {
     994:	84bff71e 	bne	r16,r18,974 <_gp+0xffff5dc0>
     998:	00000506 	br	9b0 <printAlienSlice+0xc0>
     99c:	04000144 	movi	r16,5
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
			//alt_putchar('-');
			alt_putchar(' ');
     9a0:	01000804 	movi	r4,32
     9a4:	843fffc4 	addi	r16,r16,-1
     9a8:	00027d00 	call	27d0 <alt_putchar>
                putchar(alienApperence[index]);
            }
        }
    } else {
		int i;
		for(i = 0; i < ALIEN_WIDTH; i++) {
     9ac:	803ffc1e 	bne	r16,zero,9a0 <_gp+0xffff5dec>
			//alt_putchar('-');
			alt_putchar(' ');
		}
	}
}
     9b0:	dfc00617 	ldw	ra,24(sp)
     9b4:	dd000517 	ldw	r20,20(sp)
     9b8:	dcc00417 	ldw	r19,16(sp)
     9bc:	dc800317 	ldw	r18,12(sp)
     9c0:	dc400217 	ldw	r17,8(sp)
     9c4:	dc000117 	ldw	r16,4(sp)
     9c8:	dec00704 	addi	sp,sp,28
     9cc:	f800283a 	ret

000009d0 <printSlice>:

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     9d0:	defff604 	addi	sp,sp,-40
     9d4:	dc400215 	stw	r17,8(sp)
     9d8:	dc400a17 	ldw	r17,40(sp)
     9dc:	dd800715 	stw	r22,28(sp)
     9e0:	dc000115 	stw	r16,4(sp)
     9e4:	008003c4 	movi	r2,15
     9e8:	040001c4 	movi	r16,7
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     9ec:	05a00034 	movhi	r22,32768
			alt_putchar(' ');
		}
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
     9f0:	ddc00815 	stw	r23,32(sp)
     9f4:	dd400615 	stw	r21,24(sp)
     9f8:	dd000515 	stw	r20,20(sp)
     9fc:	dcc00415 	stw	r19,16(sp)
     a00:	dc800315 	stw	r18,12(sp)
     a04:	8461c83a 	sub	r16,r16,r17
     a08:	dfc00915 	stw	ra,36(sp)
     a0c:	2029883a 	mov	r20,r4
     a10:	2827883a 	mov	r19,r5
     a14:	3025883a 	mov	r18,r6
     a18:	382b883a 	mov	r21,r7
     a1c:	1463c83a 	sub	r17,r2,r17
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
     a20:	b58001c4 	addi	r22,r22,7
     a24:	05fffe04 	movi	r23,-8
     a28:	858c703a 	and	r6,r16,r22
     a2c:	3000030e 	bge	r6,zero,a3c <printSlice+0x6c>
     a30:	31bfffc4 	addi	r6,r6,-1
     a34:	35ccb03a 	or	r6,r6,r23
     a38:	31800044 	addi	r6,r6,1
     a3c:	dd400015 	stw	r21,0(sp)
     a40:	a009883a 	mov	r4,r20
     a44:	980b883a 	mov	r5,r19
     a48:	900f883a 	mov	r7,r18
     a4c:	84000044 	addi	r16,r16,1
     a50:	00008f00 	call	8f0 <printAlienSlice>
	}
}

void printSlice(int pSramAliens, int x, int slice, int step, int shift) {
    int y;
    for(y = 0; y < ALIEN_COLS; y++) {
     a54:	847ff41e 	bne	r16,r17,a28 <_gp+0xffff5e74>
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     a58:	01000284 	movi	r4,10
}
     a5c:	dfc00917 	ldw	ra,36(sp)
     a60:	ddc00817 	ldw	r23,32(sp)
     a64:	dd800717 	ldw	r22,28(sp)
     a68:	dd400617 	ldw	r21,24(sp)
     a6c:	dd000517 	ldw	r20,20(sp)
     a70:	dcc00417 	ldw	r19,16(sp)
     a74:	dc800317 	ldw	r18,12(sp)
     a78:	dc400217 	ldw	r17,8(sp)
     a7c:	dc000117 	ldw	r16,4(sp)
     a80:	dec00a04 	addi	sp,sp,40
    for(y = 0; y < ALIEN_COLS; y++) {
        //printf("real position: %i\n", (y + shift) % ALIEN_COLS);
        printAlienSlice(pSramAliens, x, (y + (7-shift)) % ALIEN_COLS, slice, step);
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
     a84:	0001b441 	jmpi	1b44 <putchar>

00000a88 <printAliens>:
}

void printAliens(int pSramAliens, int step, int shift) {
     a88:	defff804 	addi	sp,sp,-32
     a8c:	dd400615 	stw	r21,24(sp)
     a90:	dd000515 	stw	r20,20(sp)
     a94:	dcc00415 	stw	r19,16(sp)
     a98:	dc800315 	stw	r18,12(sp)
     a9c:	dc400215 	stw	r17,8(sp)
     aa0:	dfc00715 	stw	ra,28(sp)
     aa4:	dc000115 	stw	r16,4(sp)
     aa8:	2025883a 	mov	r18,r4
     aac:	2827883a 	mov	r19,r5
     ab0:	3029883a 	mov	r20,r6
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     ab4:	0023883a 	mov	r17,zero
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     ab8:	054000c4 	movi	r21,3
		//printAlienSlice(pSramAliens, x, y, slice, step);
    }
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
     abc:	0021883a 	mov	r16,zero
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
     ac0:	800d883a 	mov	r6,r16
     ac4:	dd000015 	stw	r20,0(sp)
     ac8:	9009883a 	mov	r4,r18
     acc:	880b883a 	mov	r5,r17
     ad0:	980f883a 	mov	r7,r19
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     ad4:	84000044 	addi	r16,r16,1
            printSlice(pSramAliens, x, slice, step, shift);
     ad8:	00009d00 	call	9d0 <printSlice>
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
     adc:	857ff81e 	bne	r16,r21,ac0 <_gp+0xffff5f0c>
    printf("\n");
}

void printAliens(int pSramAliens, int step, int shift) {
    int x, slice;
    for(x = 0; x < ALIEN_ROWS; x++) {
     ae0:	8c400044 	addi	r17,r17,1
     ae4:	8c3ff51e 	bne	r17,r16,abc <_gp+0xffff5f08>
        for(slice = 0; slice < ALIEN_HEIGHT; slice++) {
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}
     ae8:	dfc00717 	ldw	ra,28(sp)
     aec:	dd400617 	ldw	r21,24(sp)
     af0:	dd000517 	ldw	r20,20(sp)
     af4:	dcc00417 	ldw	r19,16(sp)
     af8:	dc800317 	ldw	r18,12(sp)
     afc:	dc400217 	ldw	r17,8(sp)
     b00:	dc000117 	ldw	r16,4(sp)
     b04:	dec00804 	addi	sp,sp,32
     b08:	f800283a 	ret

00000b0c <printVoid>:

void printVoid(int pSramBulletBuffer) {
     b0c:	defff804 	addi	sp,sp,-32
     b10:	dd000615 	stw	r20,24(sp)
     b14:	dcc00515 	stw	r19,20(sp)
     b18:	dc800415 	stw	r18,16(sp)
     b1c:	dc400315 	stw	r17,12(sp)
     b20:	dfc00715 	stw	ra,28(sp)
     b24:	dc000215 	stw	r16,8(sp)
     b28:	2025883a 	mov	r18,r4
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     b2c:	04400084 	movi	r17,2
        }
    }
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
     b30:	00003a00 	call	3a0 <updateProjectileBuffer>
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     b34:	04c00a04 	movi	r19,40
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     b38:	053fffc4 	movi	r20,-1
            printSlice(pSramAliens, x, slice, step, shift);
        }
    }
}

void printVoid(int pSramBulletBuffer) {
     b3c:	0021883a 	mov	r16,zero
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     b40:	9009883a 	mov	r4,r18
     b44:	800b883a 	mov	r5,r16
     b48:	880d883a 	mov	r6,r17
     b4c:	00014580 	call	1458 <getProjectile>
     b50:	1004d63a 	srli	r2,r2,24
			if(empty.type != 0) {
     b54:	18c03fcc 	andi	r3,r3,255
     b58:	18c0201c 	xori	r3,r3,128
void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
     b5c:	d88000c5 	stb	r2,3(sp)
			if(empty.type != 0) {
     b60:	18ffe004 	addi	r3,r3,-128
     b64:	18000426 	beq	r3,zero,b78 <printVoid+0x6c>
				alt_putchar(empty.symbol);
     b68:	11003fcc 	andi	r4,r2,255
     b6c:	2100201c 	xori	r4,r4,128
     b70:	213fe004 	addi	r4,r4,-128
     b74:	00000106 	br	b7c <printVoid+0x70>
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
     b78:	01000804 	movi	r4,32

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     b7c:	84000044 	addi	r16,r16,1
			struct Projectile empty = getProjectile(pSramBulletBuffer, x, y);
			if(empty.type != 0) {
				alt_putchar(empty.symbol);
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
     b80:	00027d00 	call	27d0 <alt_putchar>

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
		for(x = 0; x < (ALIEN_COLS * ALIEN_WIDTH); x++) {
     b84:	84ffee1e 	bne	r16,r19,b40 <_gp+0xffff5f8c>
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
			}
        }
		printf("\n");
     b88:	01000284 	movi	r4,10
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     b8c:	8c7fffc4 	addi	r17,r17,-1
			} else {
				//alt_putchar('-');
				alt_putchar(' ');
			}
        }
		printf("\n");
     b90:	0001b440 	call	1b44 <putchar>
}

void printVoid(int pSramBulletBuffer) {
	updateProjectileBuffer(pSramBulletBuffer);
    	int x, y;
	for(y = VOID_HEIGHT-1; y >= 0 ; y--) {
     b94:	8d3fe91e 	bne	r17,r20,b3c <_gp+0xffff5f88>
				alt_putchar(' ');
			}
        }
		printf("\n");
    }
}
     b98:	dfc00717 	ldw	ra,28(sp)
     b9c:	dd000617 	ldw	r20,24(sp)
     ba0:	dcc00517 	ldw	r19,20(sp)
     ba4:	dc800417 	ldw	r18,16(sp)
     ba8:	dc400317 	ldw	r17,12(sp)
     bac:	dc000217 	ldw	r16,8(sp)
     bb0:	dec00804 	addi	sp,sp,32
     bb4:	f800283a 	ret

00000bb8 <printGunnerSlice>:

printGunnerSlice(int gunnerX, int slice) {
     bb8:	defffa04 	addi	sp,sp,-24
     bbc:	dc800215 	stw	r18,8(sp)
     bc0:	2025883a 	mov	r18,r4
     bc4:	dc400115 	stw	r17,4(sp)
     bc8:	dfc00515 	stw	ra,20(sp)
     bcc:	dd000415 	stw	r20,16(sp)
     bd0:	dcc00315 	stw	r19,12(sp)
     bd4:	dc000015 	stw	r16,0(sp)
    int SCREEN_WIDTH = ALIEN_COLS * ALIEN_WIDTH;
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
     bd8:	947ff7c4 	addi	r17,r18,-33
        }
		printf("\n");
    }
}

printGunnerSlice(int gunnerX, int slice) {
     bdc:	2809883a 	mov	r4,r5
     be0:	8800010e 	bge	r17,zero,be8 <printGunnerSlice+0x30>
     be4:	0023883a 	mov	r17,zero
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     be8:	014001c4 	movi	r5,7
     bec:	00017800 	call	1780 <__mulsi3>
     bf0:	05000034 	movhi	r20,0
     bf4:	1027883a 	mov	r19,r2
     bf8:	1461c83a 	sub	r16,r2,r17
     bfc:	a50aed04 	addi	r20,r20,11188
    int numberOfWraps = (gunnerX + GUNNER_WIDTH) - SCREEN_WIDTH;
    if(numberOfWraps < 0) numberOfWraps = 0;

    int i;

    for(i = 0; i < numberOfWraps; i++) {
     c00:	84c00626 	beq	r16,r19,c1c <printGunnerSlice+0x64>
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
     c04:	a0800017 	ldw	r2,0(r20)
     c08:	1405883a 	add	r2,r2,r16
     c0c:	110001c7 	ldb	r4,7(r2)
     c10:	84000044 	addi	r16,r16,1
     c14:	0001b440 	call	1b44 <putchar>
     c18:	003ff906 	br	c00 <_gp+0xffff604c>
     c1c:	0029883a 	mov	r20,zero
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     c20:	9465c83a 	sub	r18,r18,r17
     c24:	a480040e 	bge	r20,r18,c38 <printGunnerSlice+0x80>
        //putchar('-');
		putchar(' ');
     c28:	01000804 	movi	r4,32
     c2c:	0001b440 	call	1b44 <putchar>
    int i;

    for(i = 0; i < numberOfWraps; i++) {
        putchar(gunner[(slice * GUNNER_WIDTH) + (GUNNER_WIDTH - numberOfWraps + i)]);
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
     c30:	a5000044 	addi	r20,r20,1
     c34:	003ffb06 	br	c24 <_gp+0xffff6070>
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     c38:	00c001c4 	movi	r3,7
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     c3c:	04800034 	movhi	r18,0
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     c40:	1c63c83a 	sub	r17,r3,r17
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     c44:	948aed04 	addi	r18,r18,11188
     c48:	84c5c83a 	sub	r2,r16,r19
    }
    for(i = 0; i < (gunnerX - numberOfWraps); i++) {
        //putchar('-');
		putchar(' ');
    }
    for(i = 0; i < GUNNER_WIDTH - numberOfWraps; i++) {
     c4c:	1440060e 	bge	r2,r17,c68 <printGunnerSlice+0xb0>
        putchar(gunner[(slice * GUNNER_WIDTH) + i]);
     c50:	90800017 	ldw	r2,0(r18)
     c54:	1405883a 	add	r2,r2,r16
     c58:	11000007 	ldb	r4,0(r2)
     c5c:	84000044 	addi	r16,r16,1
     c60:	0001b440 	call	1b44 <putchar>
     c64:	003ff806 	br	c48 <_gp+0xffff6094>
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}
     c68:	dfc00517 	ldw	ra,20(sp)
     c6c:	dd000417 	ldw	r20,16(sp)
     c70:	dcc00317 	ldw	r19,12(sp)
     c74:	dc800217 	ldw	r18,8(sp)
     c78:	dc400117 	ldw	r17,4(sp)
     c7c:	dc000017 	ldw	r16,0(sp)
     c80:	dec00604 	addi	sp,sp,24
     c84:	f800283a 	ret

00000c88 <printGunner>:

void printGunner(int gunnerX) {
     c88:	defffd04 	addi	sp,sp,-12
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     c8c:	000b883a 	mov	r5,zero
    }
    //printf("numberofWraps: %i %i %i", numberOfWraps, gunnerX, gunnerX - numberOfWraps);

}

void printGunner(int gunnerX) {
     c90:	dfc00215 	stw	ra,8(sp)
     c94:	dc400115 	stw	r17,4(sp)
     c98:	dc000015 	stw	r16,0(sp)
     c9c:	2023883a 	mov	r17,r4
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     ca0:	04000284 	movi	r16,10
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     ca4:	0000bb80 	call	bb8 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     ca8:	8009883a 	mov	r4,r16
     cac:	0001b440 	call	1b44 <putchar>
}

void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
     cb0:	8809883a 	mov	r4,r17
     cb4:	01400044 	movi	r5,1
     cb8:	0000bb80 	call	bb8 <printGunnerSlice>
        //printf("gunner!");
        printf("\n");
     cbc:	8009883a 	mov	r4,r16
    }
    //printf("Gunner location: %i\n", gunnerX);
}
     cc0:	dfc00217 	ldw	ra,8(sp)
     cc4:	dc400117 	ldw	r17,4(sp)
     cc8:	dc000017 	ldw	r16,0(sp)
     ccc:	dec00304 	addi	sp,sp,12
void printGunner(int gunnerX) {
    int x;
    for(x = 0; x < GUNNER_HEIGHT; x++) {
        printGunnerSlice(gunnerX, x);
        //printf("gunner!");
        printf("\n");
     cd0:	0001b441 	jmpi	1b44 <putchar>

00000cd4 <updateDisplay>:
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     cd4:	defffa04 	addi	sp,sp,-24
     cd8:	dd000415 	stw	r20,16(sp)
     cdc:	dc800215 	stw	r18,8(sp)
     ce0:	2029883a 	mov	r20,r4
     ce4:	dc800617 	ldw	r18,24(sp)
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     ce8:	01000034 	movhi	r4,0
     cec:	210a9a04 	addi	r4,r4,10856
        printf("\n");
    }
    //printf("Gunner location: %i\n", gunnerX);
}

void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
     cf0:	dfc00515 	stw	ra,20(sp)
     cf4:	dcc00315 	stw	r19,12(sp)
     cf8:	dc400115 	stw	r17,4(sp)
     cfc:	3827883a 	mov	r19,r7
     d00:	2823883a 	mov	r17,r5
     d04:	dc000015 	stw	r16,0(sp)
     d08:	3021883a 	mov	r16,r6
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     d0c:	0001bdc0 	call	1bdc <puts>
    printAliens(pSramAliens, step, shift);
     d10:	980b883a 	mov	r5,r19
     d14:	900d883a 	mov	r6,r18
     d18:	a009883a 	mov	r4,r20
     d1c:	0000a880 	call	a88 <printAliens>
    printVoid(pSramBulletBuffer);
     d20:	8809883a 	mov	r4,r17
     d24:	0000b0c0 	call	b0c <printVoid>
    printGunner(gunnerX);
     d28:	8009883a 	mov	r4,r16
     d2c:	0000c880 	call	c88 <printGunner>
	checkGunnerWin();
	//printf("List Length: %i\n", listLength());
}
     d30:	dfc00517 	ldw	ra,20(sp)
     d34:	dd000417 	ldw	r20,16(sp)
     d38:	dcc00317 	ldw	r19,12(sp)
     d3c:	dc800217 	ldw	r18,8(sp)
     d40:	dc400117 	ldw	r17,4(sp)
     d44:	dc000017 	ldw	r16,0(sp)
     d48:	dec00604 	addi	sp,sp,24
void updateDisplay(int pSramAliens, int pSramBulletBuffer, int gunnerX, int step, int shift) {
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printAliens(pSramAliens, step, shift);
    printVoid(pSramBulletBuffer);
    printGunner(gunnerX);
	checkGunnerWin();
     d4c:	00010641 	jmpi	1064 <checkGunnerWin>

00000d50 <initializeGame>:

#include "gamelogic.h"
#include "data_structures_constants.h"
#include "sram.h"

void initializeGame() {
     d50:	f800283a 	ret

00000d54 <moveGunnerLeft>:
}


int gunnerLeftToggle = 1;
void moveGunnerLeft(int* gunnerX) {
	if((*gun_left) && gunnerLeftToggle) {
     d54:	00941c04 	movi	r2,20592
     d58:	10c00003 	ldbu	r3,0(r2)
     d5c:	18c03fcc 	andi	r3,r3,255
     d60:	18c0201c 	xori	r3,r3,128
     d64:	18ffe004 	addi	r3,r3,-128
     d68:	18000a26 	beq	r3,zero,d94 <moveGunnerLeft+0x40>
     d6c:	d0e00817 	ldw	r3,-32736(gp)
     d70:	18000826 	beq	r3,zero,d94 <moveGunnerLeft+0x40>
		gunnerLeftToggle = 0;
     d74:	d0200815 	stw	zero,-32736(gp)
		if((*gunnerX) == 0) {
     d78:	20800017 	ldw	r2,0(r4)
     d7c:	1000021e 	bne	r2,zero,d88 <moveGunnerLeft+0x34>
			(*gunnerX) = (ALIEN_WIDTH * ALIEN_COLS) - 1;
     d80:	008009c4 	movi	r2,39
     d84:	00000106 	br	d8c <moveGunnerLeft+0x38>
		} else {
			(*gunnerX)--;
     d88:	10bfffc4 	addi	r2,r2,-1
     d8c:	20800015 	stw	r2,0(r4)
     d90:	f800283a 	ret
		}		
	} else if (!(*gun_left) && !(gunnerLeftToggle)) {
     d94:	10800003 	ldbu	r2,0(r2)
     d98:	10803fcc 	andi	r2,r2,255
     d9c:	1080201c 	xori	r2,r2,128
     da0:	10bfe004 	addi	r2,r2,-128
     da4:	1000041e 	bne	r2,zero,db8 <moveGunnerLeft+0x64>
     da8:	d0a00817 	ldw	r2,-32736(gp)
     dac:	1000021e 	bne	r2,zero,db8 <moveGunnerLeft+0x64>
		gunnerLeftToggle = 1;
     db0:	00800044 	movi	r2,1
     db4:	d0a00815 	stw	r2,-32736(gp)
     db8:	f800283a 	ret

00000dbc <moveGunnerLeftTransmited>:
	}
}

void moveGunnerLeftTransmited() {
	if((gunnerX) == 0) {
     dbc:	00c00034 	movhi	r3,0
     dc0:	18caf604 	addi	r3,r3,11224
     dc4:	18800017 	ldw	r2,0(r3)
     dc8:	1000021e 	bne	r2,zero,dd4 <moveGunnerLeftTransmited+0x18>
		(gunnerX) = (ALIEN_WIDTH * ALIEN_COLS) - 1;
     dcc:	008009c4 	movi	r2,39
     dd0:	00000106 	br	dd8 <moveGunnerLeftTransmited+0x1c>
	} else {
		(gunnerX)--;
     dd4:	10bfffc4 	addi	r2,r2,-1
     dd8:	18800015 	stw	r2,0(r3)
     ddc:	f800283a 	ret

00000de0 <moveGunnerRight>:
	}
}

int gunnerRightToggle = 1;
void moveGunnerRight(int* gunnerX) {	
	if((*gun_right) && gunnerRightToggle) {
     de0:	00941804 	movi	r2,20576
     de4:	10c00003 	ldbu	r3,0(r2)
     de8:	18c03fcc 	andi	r3,r3,255
     dec:	18c0201c 	xori	r3,r3,128
     df0:	18ffe004 	addi	r3,r3,-128
     df4:	18000b26 	beq	r3,zero,e24 <moveGunnerRight+0x44>
     df8:	d0e00717 	ldw	r3,-32740(gp)
     dfc:	18000926 	beq	r3,zero,e24 <moveGunnerRight+0x44>
		gunnerRightToggle = 0;
     e00:	d0200715 	stw	zero,-32740(gp)
		if((*gunnerX) == (ALIEN_WIDTH * ALIEN_COLS) - 1) {
     e04:	20800017 	ldw	r2,0(r4)
     e08:	00c009c4 	movi	r3,39
     e0c:	10c0021e 	bne	r2,r3,e18 <moveGunnerRight+0x38>
			(*gunnerX) = 0;
     e10:	20000015 	stw	zero,0(r4)
     e14:	f800283a 	ret
		} else {
			(*gunnerX)++;
     e18:	10800044 	addi	r2,r2,1
     e1c:	20800015 	stw	r2,0(r4)
     e20:	f800283a 	ret
		}		
	} else if (!(*gun_right) && !(gunnerRightToggle)) {
     e24:	10800003 	ldbu	r2,0(r2)
     e28:	10803fcc 	andi	r2,r2,255
     e2c:	1080201c 	xori	r2,r2,128
     e30:	10bfe004 	addi	r2,r2,-128
     e34:	1000041e 	bne	r2,zero,e48 <moveGunnerRight+0x68>
     e38:	d0a00717 	ldw	r2,-32740(gp)
     e3c:	1000021e 	bne	r2,zero,e48 <moveGunnerRight+0x68>
		gunnerRightToggle = 1;
     e40:	00800044 	movi	r2,1
     e44:	d0a00715 	stw	r2,-32740(gp)
     e48:	f800283a 	ret

00000e4c <moveGunnerRightTransmited>:
	}
}

void moveGunnerRightTransmited() {
	if((gunnerX) == (ALIEN_WIDTH * ALIEN_COLS) - 1) {
     e4c:	00c00034 	movhi	r3,0
     e50:	18caf604 	addi	r3,r3,11224
     e54:	18800017 	ldw	r2,0(r3)
     e58:	010009c4 	movi	r4,39
     e5c:	1100021e 	bne	r2,r4,e68 <moveGunnerRightTransmited+0x1c>
		(gunnerX) = 0;
     e60:	18000015 	stw	zero,0(r3)
     e64:	f800283a 	ret
	} else {
		(gunnerX)++;
     e68:	10800044 	addi	r2,r2,1
     e6c:	18800015 	stw	r2,0(r3)
     e70:	f800283a 	ret

00000e74 <shootGunner>:
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
     e74:	00941404 	movi	r2,20560
     e78:	10c00003 	ldbu	r3,0(r2)
     e7c:	18c03fcc 	andi	r3,r3,255
     e80:	18c0201c 	xori	r3,r3,128
     e84:	18ffe004 	addi	r3,r3,-128
     e88:	18001726 	beq	r3,zero,ee8 <shootGunner+0x74>
     e8c:	d0e00617 	ldw	r3,-32744(gp)
     e90:	18001526 	beq	r3,zero,ee8 <shootGunner+0x74>
		gunnerShootToggle = 0;
     e94:	d0200615 	stw	zero,-32744(gp)
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     e98:	21000017 	ldw	r4,0(r4)
	}
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
     e9c:	defffd04 	addi	sp,sp,-12
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     ea0:	01400a04 	movi	r5,40
     ea4:	210000c4 	addi	r4,r4,3
	}
}


int gunnerShootToggle = 1;
void shootGunner(int* gunnerX) {
     ea8:	dfc00215 	stw	ra,8(sp)
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     eac:	00017140 	call	1714 <__modsi3>
     eb0:	d8800005 	stb	r2,0(sp)
		proj.yVal = 0;
		proj.direction = 1;
		proj.symbol = '^';
     eb4:	00c01784 	movi	r3,94
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
		proj.yVal = 0;
		proj.direction = 1;
     eb8:	00800044 	movi	r2,1
void shootGunner(int* gunnerX) {
	if((*gun_shoot) && gunnerShootToggle) {
		gunnerShootToggle = 0;
		struct Projectile proj;
		proj.xVal = ((*gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
		proj.yVal = 0;
     ebc:	d8000045 	stb	zero,1(sp)
		proj.direction = 1;
     ec0:	d8800085 	stb	r2,2(sp)
		proj.symbol = '^';
     ec4:	d8c000c5 	stb	r3,3(sp)
		proj.type = 1;
     ec8:	d8800105 	stb	r2,4(sp)
		proj.timeTick = 0;
     ecc:	d8000145 	stb	zero,5(sp)
		
		//checkCollideAliens(pSramAliens, 2);
		addProjectileNode(proj);
     ed0:	d9000017 	ldw	r4,0(sp)
     ed4:	d9400117 	ldw	r5,4(sp)
     ed8:	00004080 	call	408 <addProjectileNode>
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
		gunnerShootToggle = 1;
	}
}
     edc:	dfc00217 	ldw	ra,8(sp)
     ee0:	dec00304 	addi	sp,sp,12
     ee4:	00000a06 	br	f10 <shootGunner+0x9c>
		proj.type = 1;
		proj.timeTick = 0;
		
		//checkCollideAliens(pSramAliens, 2);
		addProjectileNode(proj);
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
     ee8:	10800003 	ldbu	r2,0(r2)
     eec:	10803fcc 	andi	r2,r2,255
     ef0:	1080201c 	xori	r2,r2,128
     ef4:	10bfe004 	addi	r2,r2,-128
     ef8:	1000051e 	bne	r2,zero,f10 <shootGunner+0x9c>
     efc:	d0a00617 	ldw	r2,-32744(gp)
     f00:	1000031e 	bne	r2,zero,f10 <shootGunner+0x9c>
		gunnerShootToggle = 1;
     f04:	00800044 	movi	r2,1
     f08:	d0a00615 	stw	r2,-32744(gp)
     f0c:	f800283a 	ret
	}
}
     f10:	f800283a 	ret

00000f14 <shootGunnerTransmited>:

void shootGunnerTransmited() {
	struct Projectile proj;
	proj.xVal = ((gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     f14:	00800034 	movhi	r2,0
     f18:	108af604 	addi	r2,r2,11224
     f1c:	11000017 	ldw	r4,0(r2)
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
		gunnerShootToggle = 1;
	}
}

void shootGunnerTransmited() {
     f20:	defffd04 	addi	sp,sp,-12
	struct Projectile proj;
	proj.xVal = ((gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     f24:	01400a04 	movi	r5,40
     f28:	210000c4 	addi	r4,r4,3
	} else if (!(*gun_shoot) && !(gunnerShootToggle)) {
		gunnerShootToggle = 1;
	}
}

void shootGunnerTransmited() {
     f2c:	dfc00215 	stw	ra,8(sp)
	struct Projectile proj;
	proj.xVal = ((gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
     f30:	00017140 	call	1714 <__modsi3>
     f34:	d8800005 	stb	r2,0(sp)
	proj.yVal = 0;
	proj.direction = 1;
	proj.symbol = '^';
     f38:	00c01784 	movi	r3,94

void shootGunnerTransmited() {
	struct Projectile proj;
	proj.xVal = ((gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
	proj.yVal = 0;
	proj.direction = 1;
     f3c:	00800044 	movi	r2,1
}

void shootGunnerTransmited() {
	struct Projectile proj;
	proj.xVal = ((gunnerX) + (GUNNER_WIDTH/2)) % (ALIEN_COLS * ALIEN_WIDTH);
	proj.yVal = 0;
     f40:	d8000045 	stb	zero,1(sp)
	proj.direction = 1;
     f44:	d8800085 	stb	r2,2(sp)
	proj.symbol = '^';
     f48:	d8c000c5 	stb	r3,3(sp)
	proj.type = 1;
     f4c:	d8800105 	stb	r2,4(sp)
	proj.timeTick = 0;
     f50:	d8000145 	stb	zero,5(sp)
	
	//checkCollideAliens(pSramAliens, 2);
	addProjectileNode(proj);
     f54:	d9000017 	ldw	r4,0(sp)
     f58:	d9400117 	ldw	r5,4(sp)
     f5c:	00004080 	call	408 <addProjectileNode>
}
     f60:	dfc00217 	ldw	ra,8(sp)
     f64:	dec00304 	addi	sp,sp,12
     f68:	f800283a 	ret

00000f6c <shootAliens>:


int alienShootToggle = 1;
void shootAliens() {
	if((*gun_shoot) && alienShootToggle) {
     f6c:	00941404 	movi	r2,20560
     f70:	10c00003 	ldbu	r3,0(r2)
     f74:	18c03fcc 	andi	r3,r3,255
     f78:	18c0201c 	xori	r3,r3,128
     f7c:	18ffe004 	addi	r3,r3,-128
     f80:	18002d26 	beq	r3,zero,1038 <shootAliens+0xcc>
     f84:	d0e00517 	ldw	r3,-32748(gp)
     f88:	18002b26 	beq	r3,zero,1038 <shootAliens+0xcc>
		alienShootToggle = 0;
     f8c:	d0200515 	stw	zero,-32748(gp)
		//printf("X, Y: (%i, %i)\n", (*alien_x), (*alien_y));
		
		if(*alien_x == 0 || *alien_y == 0) {
     f90:	00d41004 	movi	r3,20544
     f94:	18800003 	ldbu	r2,0(r3)
     f98:	10803fcc 	andi	r2,r2,255
     f9c:	1080201c 	xori	r2,r2,128
     fa0:	10bfe004 	addi	r2,r2,-128
     fa4:	10002e26 	beq	r2,zero,1060 <shootAliens+0xf4>
     fa8:	00940c04 	movi	r2,20528
     fac:	10800003 	ldbu	r2,0(r2)
     fb0:	10803fcc 	andi	r2,r2,255
     fb4:	1080201c 	xori	r2,r2,128
     fb8:	10bfe004 	addi	r2,r2,-128
     fbc:	10002826 	beq	r2,zero,1060 <shootAliens+0xf4>
	addProjectileNode(proj);
}


int alienShootToggle = 1;
void shootAliens() {
     fc0:	defffd04 	addi	sp,sp,-12
     fc4:	dfc00215 	stw	ra,8(sp)
		if(*alien_x == 0 || *alien_y == 0) {
			return;
		}
		struct Projectile proj;
		//proj.xVal = (((*alien_x + alienShift) % ALIEN_COLS) * ALIEN_COLS) + (ALIEN_WIDTH / 2) + 1;
		proj.xVal = (((*alien_x) + alienShift + 1) * ALIEN_WIDTH) + (ALIEN_WIDTH / 2);
     fc8:	19000003 	ldbu	r4,0(r3)
     fcc:	00800034 	movhi	r2,0
     fd0:	108b4b04 	addi	r2,r2,11564
     fd4:	10800017 	ldw	r2,0(r2)
     fd8:	21003fcc 	andi	r4,r4,255
     fdc:	2100201c 	xori	r4,r4,128
     fe0:	213fe004 	addi	r4,r4,-128
     fe4:	2089883a 	add	r4,r4,r2
     fe8:	21000044 	addi	r4,r4,1
     fec:	01400144 	movi	r5,5
     ff0:	00017800 	call	1780 <__mulsi3>
     ff4:	10800084 	addi	r2,r2,2
     ff8:	d8800005 	stb	r2,0(sp)
		proj.yVal = VOID_HEIGHT - 1;
     ffc:	00800084 	movi	r2,2
    1000:	d8800045 	stb	r2,1(sp)
		proj.direction = -1;
    1004:	00bfffc4 	movi	r2,-1
    1008:	d8800085 	stb	r2,2(sp)
		proj.symbol = '*';
    100c:	00800a84 	movi	r2,42
    1010:	d88000c5 	stb	r2,3(sp)
		proj.type = 1;
    1014:	00800044 	movi	r2,1
    1018:	d8800105 	stb	r2,4(sp)
		proj.timeTick = 0;
    101c:	d8000145 	stb	zero,5(sp)
		
		addProjectileNode(proj);
    1020:	d9000017 	ldw	r4,0(sp)
    1024:	d9400117 	ldw	r5,4(sp)
    1028:	00004080 	call	408 <addProjectileNode>
		
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}
    102c:	dfc00217 	ldw	ra,8(sp)
    1030:	dec00304 	addi	sp,sp,12
    1034:	00000a06 	br	1060 <shootAliens+0xf4>
		proj.type = 1;
		proj.timeTick = 0;
		
		addProjectileNode(proj);
		
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
    1038:	10800003 	ldbu	r2,0(r2)
    103c:	10803fcc 	andi	r2,r2,255
    1040:	1080201c 	xori	r2,r2,128
    1044:	10bfe004 	addi	r2,r2,-128
    1048:	1000051e 	bne	r2,zero,1060 <shootAliens+0xf4>
    104c:	d0a00517 	ldw	r2,-32748(gp)
    1050:	1000031e 	bne	r2,zero,1060 <shootAliens+0xf4>
		alienShootToggle = 1;
    1054:	00800044 	movi	r2,1
    1058:	d0a00515 	stw	r2,-32748(gp)
    105c:	f800283a 	ret
	}
}
    1060:	f800283a 	ret

00001064 <checkGunnerWin>:

void checkGunnerWin() {
    1064:	defff904 	addi	sp,sp,-28
    1068:	dc800315 	stw	r18,12(sp)
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
    106c:	04800034 	movhi	r18,0
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkGunnerWin() {
    1070:	dd000515 	stw	r20,20(sp)
    1074:	dcc00415 	stw	r19,16(sp)
    1078:	dc400215 	stw	r17,8(sp)
    107c:	dfc00615 	stw	ra,24(sp)
    1080:	dc000115 	stw	r16,4(sp)
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
    1084:	0023883a 	mov	r17,zero
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
    1088:	948b4c04 	addi	r18,r18,11568
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
    108c:	04c000c4 	movi	r19,3
	}
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
    1090:	05000204 	movi	r20,8
	} else if (!(*gun_shoot) && !(alienShootToggle)) {
		alienShootToggle = 1;
	}
}

void checkGunnerWin() {
    1094:	0021883a 	mov	r16,zero
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
			struct Alien a = getAlien(pSramAliens, y, x);
    1098:	91000017 	ldw	r4,0(r18)
    109c:	800b883a 	mov	r5,r16
    10a0:	880d883a 	mov	r6,r17
    10a4:	00013cc0 	call	13cc <getAlien>
			if(a.alive) {
    10a8:	10803fcc 	andi	r2,r2,255
    10ac:	1080201c 	xori	r2,r2,128
    10b0:	10bfe004 	addi	r2,r2,-128
    10b4:	1000081e 	bne	r2,zero,10d8 <checkGunnerWin+0x74>
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
		for(y = 0; y < ALIEN_ROWS; y++) {
    10b8:	84000044 	addi	r16,r16,1
    10bc:	84fff61e 	bne	r16,r19,1098 <_gp+0xffff64e4>
	}
}

void checkGunnerWin() {
	int x, y;
	for(x = 0; x < ALIEN_COLS; x++) {
    10c0:	8c400044 	addi	r17,r17,1
    10c4:	8d3ff31e 	bne	r17,r20,1094 <_gp+0xffff64e0>
			if(a.alive) {
				return;
			}
		}
	}
	gameOver = 2;
    10c8:	00800034 	movhi	r2,0
    10cc:	00c00084 	movi	r3,2
    10d0:	108b4a04 	addi	r2,r2,11560
    10d4:	10c00015 	stw	r3,0(r2)
}
    10d8:	dfc00617 	ldw	ra,24(sp)
    10dc:	dd000517 	ldw	r20,20(sp)
    10e0:	dcc00417 	ldw	r19,16(sp)
    10e4:	dc800317 	ldw	r18,12(sp)
    10e8:	dc400217 	ldw	r17,8(sp)
    10ec:	dc000117 	ldw	r16,4(sp)
    10f0:	dec00704 	addi	sp,sp,28
    10f4:	f800283a 	ret

000010f8 <checkCollideAliens>:

void checkCollideAliens(int pSramAliens, int x) {
    10f8:	defff704 	addi	sp,sp,-36
    10fc:	dd400615 	stw	r21,24(sp)
    1100:	dd000515 	stw	r20,20(sp)
    1104:	dcc00415 	stw	r19,16(sp)
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
    1108:	050001c4 	movi	r20,7
    110c:	04c00034 	movhi	r19,0
    1110:	05600034 	movhi	r21,32768
		}
	}
	gameOver = 2;
}

void checkCollideAliens(int pSramAliens, int x) {
    1114:	dd800715 	stw	r22,28(sp)
    1118:	dc800315 	stw	r18,12(sp)
    111c:	dc400215 	stw	r17,8(sp)
    1120:	dc000115 	stw	r16,4(sp)
    1124:	dfc00815 	stw	ra,32(sp)
    1128:	2025883a 	mov	r18,r4
    112c:	2821883a 	mov	r16,r5
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
    1130:	04400084 	movi	r17,2
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
    1134:	9ccb4b04 	addi	r19,r19,11564
    1138:	ad2b883a 	add	r21,r21,r20
    113c:	05bffe04 	movi	r22,-8
    1140:	99800017 	ldw	r6,0(r19)
    1144:	a18dc83a 	sub	r6,r20,r6
    1148:	818d883a 	add	r6,r16,r6
    114c:	354c703a 	and	r6,r6,r21
    1150:	3000030e 	bge	r6,zero,1160 <checkCollideAliens+0x68>
    1154:	31bfffc4 	addi	r6,r6,-1
    1158:	358cb03a 	or	r6,r6,r22
    115c:	31800044 	addi	r6,r6,1
    1160:	9009883a 	mov	r4,r18
    1164:	880b883a 	mov	r5,r17
    1168:	00013cc0 	call	13cc <getAlien>
    116c:	1006d23a 	srli	r3,r2,8
    1170:	d8c00045 	stb	r3,1(sp)
    1174:	1006d43a 	srli	r3,r2,16
		if(a.alive) {
    1178:	10803fcc 	andi	r2,r2,255
    117c:	1080201c 	xori	r2,r2,128
}

void checkCollideAliens(int pSramAliens, int x) {
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
		struct Alien a = getAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS);
    1180:	d8c00085 	stb	r3,2(sp)
		if(a.alive) {
    1184:	10bfe004 	addi	r2,r2,-128
    1188:	10001326 	beq	r2,zero,11d8 <checkCollideAliens+0xe0>
			//printf("KILL (%i, %i)\n", (x + (7-alienShift)) % ALIEN_COLS, y);
			a.alive = 0;
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
    118c:	00800034 	movhi	r2,0
    1190:	108b4b04 	addi	r2,r2,11564
    1194:	11800017 	ldw	r6,0(r2)
    1198:	840001c4 	addi	r16,r16,7
    119c:	00a00034 	movhi	r2,32768
    11a0:	818dc83a 	sub	r6,r16,r6
    11a4:	108001c4 	addi	r2,r2,7
    11a8:	308c703a 	and	r6,r6,r2
    11ac:	3000040e 	bge	r6,zero,11c0 <checkCollideAliens+0xc8>
    11b0:	31bfffc4 	addi	r6,r6,-1
    11b4:	00bffe04 	movi	r2,-8
    11b8:	308cb03a 	or	r6,r6,r2
    11bc:	31800044 	addi	r6,r6,1
    11c0:	d8000005 	stb	zero,0(sp)
    11c4:	d9c00017 	ldw	r7,0(sp)
    11c8:	9009883a 	mov	r4,r18
    11cc:	880b883a 	mov	r5,r17
    11d0:	00014140 	call	1414 <setAlien>
    11d4:	00000306 	br	11e4 <checkCollideAliens+0xec>
	gameOver = 2;
}

void checkCollideAliens(int pSramAliens, int x) {
	int y;
	for(y = ALIEN_ROWS - 1; y >= 0; y--) {
    11d8:	8c7fffc4 	addi	r17,r17,-1
    11dc:	00bfffc4 	movi	r2,-1
    11e0:	88bfd71e 	bne	r17,r2,1140 <_gp+0xffff658c>
			setAlien(pSramAliens, y, (x + (7-alienShift)) % ALIEN_COLS, a);
			break;
		}
	}
	//checkGunnerWin();
}
    11e4:	dfc00817 	ldw	ra,32(sp)
    11e8:	dd800717 	ldw	r22,28(sp)
    11ec:	dd400617 	ldw	r21,24(sp)
    11f0:	dd000517 	ldw	r20,20(sp)
    11f4:	dcc00417 	ldw	r19,16(sp)
    11f8:	dc800317 	ldw	r18,12(sp)
    11fc:	dc400217 	ldw	r17,8(sp)
    1200:	dc000117 	ldw	r16,4(sp)
    1204:	dec00904 	addi	sp,sp,36
    1208:	f800283a 	ret

0000120c <checkCollideGunner>:


void checkCollideGunner(int projX) {
	int gunnerCenter = gunnerX + (GUNNER_WIDTH / 2);
	//printf("projx: %i, %i %i \n", projX, gunnerX, (gunnerX + GUNNER_WIDTH));
    if ((projX >= gunnerX) && (projX <= (gunnerX + GUNNER_WIDTH))) {
    120c:	00800034 	movhi	r2,0
    1210:	108af604 	addi	r2,r2,11224
    1214:	10800017 	ldw	r2,0(r2)
    1218:	20800616 	blt	r4,r2,1234 <checkCollideGunner+0x28>
    121c:	108001c4 	addi	r2,r2,7
    1220:	11000416 	blt	r2,r4,1234 <checkCollideGunner+0x28>
        gameOver = 1;
    1224:	00800034 	movhi	r2,0
    1228:	00c00044 	movi	r3,1
    122c:	108b4a04 	addi	r2,r2,11560
    1230:	10c00015 	stw	r3,0(r2)
    1234:	f800283a 	ret

00001238 <main>:
char* pTransmit;



int main()
{ 
    1238:	defff304 	addi	sp,sp,-52
    123c:	dfc00c15 	stw	ra,48(sp)
    1240:	dd000a15 	stw	r20,40(sp)
    1244:	dcc00915 	stw	r19,36(sp)
    1248:	dc800815 	stw	r18,32(sp)
    124c:	dc400715 	stw	r17,28(sp)
    1250:	dc000615 	stw	r16,24(sp)
    1254:	dd400b15 	stw	r21,44(sp)
    //Tests
    //sram_malloc_test();
    //sram_free_test();

    //Game Init
	setup_interrupt();
    1258:	00006a80 	call	6a8 <setup_interrupt>
    initializeGame();
    125c:	0000d500 	call	d50 <initializeGame>

    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    1260:	01001204 	movi	r4,72
    1264:	00015a40 	call	15a4 <sram_malloc>
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
    1268:	0100b584 	movi	r4,726

    //Game Init
	setup_interrupt();
    initializeGame();

    pSramAliens = sram_malloc(sizeof(struct Alien) * (ALIEN_COLS * ALIEN_ROWS));
    126c:	d0a05f15 	stw	r2,-32388(gp)
    int pSramBulletBuffer = sram_malloc((sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT)) + sizeof(struct Projectile));
    1270:	00015a40 	call	15a4 <sram_malloc>
    1274:	1027883a 	mov	r19,r2

	
	
    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
	gameOver = 0;
    1278:	d0205d15 	stw	zero,-32396(gp)
	unsigned int  gameStartTime = *game_time;
    127c:	00904004 	movi	r2,16640
	unsigned int  previousUpdateBoard = *game_time;
	unsigned int  previousUpdateBullets = *game_time;
    
	initRandomAliens(pSramAliens);
    1280:	d1205f17 	ldw	r4,-32388(gp)
	
	
    //printf("%i\n", sizeof(struct Projectile) * (ALIEN_COLS * ALIEN_WIDTH * VOID_HEIGHT));
    //New Game
	gameOver = 0;
	unsigned int  gameStartTime = *game_time;
    1284:	10c00017 	ldw	r3,0(r2)
	unsigned int  previousUpdateBoard = *game_time;
    1288:	14400017 	ldw	r17,0(r2)
	unsigned int  previousUpdateBullets = *game_time;
    128c:	14800017 	ldw	r18,0(r2)
    
	initRandomAliens(pSramAliens);
    1290:	00008200 	call	820 <initRandomAliens>
	initProjectileBuffer(pSramBulletBuffer);
    1294:	9809883a 	mov	r4,r19
    1298:	000030c0 	call	30c <initProjectileBuffer>
	pBuffer = calloc(TRANSMIT_BUFFER_SIZE, sizeof(char));
    129c:	01000c84 	movi	r4,50
    12a0:	01400044 	movi	r5,1
    12a4:	00017a80 	call	17a8 <calloc>
    12a8:	d0a06215 	stw	r2,-32376(gp)
	pBufferHead = pBuffer;
    12ac:	d0a06115 	stw	r2,-32380(gp)
	pTransmit = pBuffer;
    12b0:	d0a06015 	stw	r2,-32384(gp)
	
	*data_bus_output = 0xAF;
    12b4:	00ffebc4 	movi	r3,-81
    12b8:	00943c04 	movi	r2,20720
	
	//while(1);
	
	char hello[20] = "Hello, world! abc123";
    12bc:	01400034 	movhi	r5,0
	initProjectileBuffer(pSramBulletBuffer);
	pBuffer = calloc(TRANSMIT_BUFFER_SIZE, sizeof(char));
	pBufferHead = pBuffer;
	pTransmit = pBuffer;
	
	*data_bus_output = 0xAF;
    12c0:	10c00005 	stb	r3,0(r2)
	
	//while(1);
	
	char hello[20] = "Hello, world! abc123";
    12c4:	d9000104 	addi	r4,sp,4
    12c8:	294aaf04 	addi	r5,r5,10940
    12cc:	01800504 	movi	r6,20
    12d0:	00017ec0 	call	17ec <memcpy>
	int i;
	for(i = 0; i < 20; i++) {
    12d4:	0021883a 	mov	r16,zero
    12d8:	05000504 	movi	r20,20
    12dc:	d8c00104 	addi	r3,sp,4
    12e0:	1c05883a 	add	r2,r3,r16
		writeBuffer(hello[i]);
    12e4:	11000007 	ldb	r4,0(r2)
	
	//while(1);
	
	char hello[20] = "Hello, world! abc123";
	int i;
	for(i = 0; i < 20; i++) {
    12e8:	84000044 	addi	r16,r16,1
		writeBuffer(hello[i]);
    12ec:	00005a00 	call	5a0 <writeBuffer>
	
	//while(1);
	
	char hello[20] = "Hello, world! abc123";
	int i;
	for(i = 0; i < 20; i++) {
    12f0:	853ffa1e 	bne	r16,r20,12dc <_gp+0xffff6728>
		writeBuffer(hello[i]);
	}
	transmitIfBufferNotEmpty();
    12f4:	00005f40 	call	5f4 <transmitIfBufferNotEmpty>
			}
			return 0;
		}
		//gameOver =1;
		
		if(((*game_time) - previousUpdateBoard) > 10) {
    12f8:	04104004 	movi	r16,16640
    12fc:	05000284 	movi	r20,10
			updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);
			previousUpdateBoard = (*game_time);
			//printf("GunnerX: %i\n", gunnerX);
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
    1300:	05400144 	movi	r21,5
	}
	transmitIfBufferNotEmpty();
	
	//Game Event Loop
    while(1) {
		if(gameOver) {
    1304:	d0a05d17 	ldw	r2,-32396(gp)
    1308:	10000b26 	beq	r2,zero,1338 <main+0x100>
			if(gameOver == 1) {
    130c:	00c00044 	movi	r3,1
    1310:	10c0031e 	bne	r2,r3,1320 <main+0xe8>
				printf("\nAliens Win!\n");
    1314:	01000034 	movhi	r4,0
    1318:	210aa704 	addi	r4,r4,10908
    131c:	00000406 	br	1330 <main+0xf8>
			} else if(gameOver ==2) {
    1320:	00c00084 	movi	r3,2
    1324:	10c01f1e 	bne	r2,r3,13a4 <main+0x16c>
				printf("\nGunner Win!\n");
    1328:	01000034 	movhi	r4,0
    132c:	210aab04 	addi	r4,r4,10924
    1330:	0001bdc0 	call	1bdc <puts>
    1334:	00001b06 	br	13a4 <main+0x16c>
			}
			return 0;
		}
		//gameOver =1;
		
		if(((*game_time) - previousUpdateBoard) > 10) {
    1338:	80c00017 	ldw	r3,0(r16)
    133c:	1c47c83a 	sub	r3,r3,r17
    1340:	a0c00d2e 	bgeu	r20,r3,1378 <main+0x140>
			alienShift = ((*game_time) / 10) % 8;
    1344:	81000017 	ldw	r4,0(r16)
    1348:	01400284 	movi	r5,10
    134c:	00017700 	call	1770 <__udivsi3>
    1350:	108001cc 	andi	r2,r2,7
    1354:	d0a05e15 	stw	r2,-32392(gp)
			//alienShift = 2;
			updateDisplay(pSramAliens, pSramBulletBuffer, gunnerX, (*game_time) % 2, alienShift);
    1358:	81c00017 	ldw	r7,0(r16)
    135c:	d1205f17 	ldw	r4,-32388(gp)
    1360:	d1a00917 	ldw	r6,-32732(gp)
    1364:	d8800015 	stw	r2,0(sp)
    1368:	980b883a 	mov	r5,r19
    136c:	39c0004c 	andi	r7,r7,1
    1370:	0000cd40 	call	cd4 <updateDisplay>
			previousUpdateBoard = (*game_time);
    1374:	84400017 	ldw	r17,0(r16)
			//printf("GunnerX: %i\n", gunnerX);
		}
		
		if(((*game_time) - previousUpdateBullets) > 5) {
    1378:	80c00017 	ldw	r3,0(r16)
    137c:	1c87c83a 	sub	r3,r3,r18
    1380:	a8c0022e 	bgeu	r21,r3,138c <main+0x154>
			updateProjectileNodes();
    1384:	00001c80 	call	1c8 <updateProjectileNodes>
			previousUpdateBullets = (*game_time);
    1388:	84800017 	ldw	r18,0(r16)
		}
		
		moveGunnerLeft(&gunnerX);
    138c:	d1200904 	addi	r4,gp,-32732
    1390:	0000d540 	call	d54 <moveGunnerLeft>
		moveGunnerRight(&gunnerX);
    1394:	d1200904 	addi	r4,gp,-32732
    1398:	0000de00 	call	de0 <moveGunnerRight>
		//shootGunner(&gunnerX);
		shootAliens();
    139c:	0000f6c0 	call	f6c <shootAliens>
	}
    13a0:	003fd806 	br	1304 <_gp+0xffff6750>
	
    return 0;
}
    13a4:	0005883a 	mov	r2,zero
    13a8:	dfc00c17 	ldw	ra,48(sp)
    13ac:	dd400b17 	ldw	r21,44(sp)
    13b0:	dd000a17 	ldw	r20,40(sp)
    13b4:	dcc00917 	ldw	r19,36(sp)
    13b8:	dc800817 	ldw	r18,32(sp)
    13bc:	dc400717 	ldw	r17,28(sp)
    13c0:	dc000617 	ldw	r16,24(sp)
    13c4:	dec00d04 	addi	sp,sp,52
    13c8:	f800283a 	ret

000013cc <getAlien>:
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
    13cc:	280a90fa 	slli	r5,r5,3
#include "sram.h"
#include "data_structures_constants.h"

struct Alien getAlien(int pSramAliens, int x, int y) {
    13d0:	deffff04 	addi	sp,sp,-4
    struct Alien a;
    a.alive = sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))];
    13d4:	298d883a 	add	r6,r5,r6
    13d8:	318b883a 	add	r5,r6,r6
    13dc:	298d883a 	add	r6,r5,r6
    13e0:	310d883a 	add	r6,r6,r4
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
    13e4:	01000034 	movhi	r4,0
    13e8:	210b5904 	addi	r4,r4,11620
    13ec:	2189883a 	add	r4,r4,r6
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
    13f0:	20800043 	ldbu	r2,1(r4)
    13f4:	20c00083 	ldbu	r3,2(r4)
    13f8:	21400003 	ldbu	r5,0(r4)
    13fc:	1004923a 	slli	r2,r2,8
    1400:	1806943a 	slli	r3,r3,16
    1404:	1144b03a 	or	r2,r2,r5
}
    1408:	10c4b03a 	or	r2,r2,r3
    140c:	dec00104 	addi	sp,sp,4
    1410:	f800283a 	ret

00001414 <setAlien>:

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    1414:	280a90fa 	slli	r5,r5,3
    a.type = sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))];
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    1418:	deffff04 	addi	sp,sp,-4
    141c:	d9c00015 	stw	r7,0(sp)
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    1420:	298d883a 	add	r6,r5,r6
    1424:	318b883a 	add	r5,r6,r6
    1428:	298d883a 	add	r6,r5,r6
    142c:	310d883a 	add	r6,r6,r4
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    1430:	d8800043 	ldbu	r2,1(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    1434:	01000034 	movhi	r4,0
    1438:	210b5904 	addi	r4,r4,11620
    143c:	2189883a 	add	r4,r4,r6
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    1440:	20800045 	stb	r2,1(r4)
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
    1444:	d8800083 	ldbu	r2,2(sp)
    a.rowId = sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))];
    return a;
}

void setAlien(int pSramAliens, int x, int y, struct Alien a) {
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    1448:	21c00005 	stb	r7,0(r4)
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
    144c:	20800085 	stb	r2,2(r4)
}
    1450:	dec00104 	addi	sp,sp,4
    1454:	f800283a 	ret

00001458 <getProjectile>:

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
    1458:	defffb04 	addi	sp,sp,-20
    145c:	dc400315 	stw	r17,12(sp)
    1460:	dc000215 	stw	r16,8(sp)
    1464:	2823883a 	mov	r17,r5
    1468:	2021883a 	mov	r16,r4
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    146c:	01400a04 	movi	r5,40
    1470:	3009883a 	mov	r4,r6
    sram[(pSramAliens + 0) + (sizeof(struct Alien) * ((x * 8) + y))] = a.alive;
    sram[(pSramAliens + 1) + (sizeof(struct Alien) * ((x * 8) + y))] = a.type;
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
    1474:	dfc00415 	stw	ra,16(sp)
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    1478:	00017800 	call	1780 <__mulsi3>
    147c:	1449883a 	add	r4,r2,r17
    1480:	01400184 	movi	r5,6
    1484:	00017800 	call	1780 <__mulsi3>
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    1488:	01000034 	movhi	r4,0
    sram[(pSramAliens + 2) + (sizeof(struct Alien) * ((x * 8) + y))] = a.rowId;
}

struct Projectile getProjectile(int pSramBulletBuffer, int x, int y) {
    struct Projectile p;
    p.xVal = sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    148c:	1405883a 	add	r2,r2,r16
    p.yVal = sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    1490:	210b5904 	addi	r4,r4,11620
    1494:	2089883a 	add	r4,r4,r2
    p.direction = sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.symbol = sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
    1498:	20c00043 	ldbu	r3,1(r4)
    149c:	21400083 	ldbu	r5,2(r4)
    14a0:	21800003 	ldbu	r6,0(r4)
    14a4:	1806923a 	slli	r3,r3,8
    14a8:	280a943a 	slli	r5,r5,16
    14ac:	00804034 	movhi	r2,256
    14b0:	1986b03a 	or	r3,r3,r6
    14b4:	1946b03a 	or	r3,r3,r5
    14b8:	218000c3 	ldbu	r6,3(r4)
    14bc:	21400143 	ldbu	r5,5(r4)
    14c0:	10bfffc4 	addi	r2,r2,-1
    14c4:	300c963a 	slli	r6,r6,24
    14c8:	1884703a 	and	r2,r3,r2
    14cc:	280a923a 	slli	r5,r5,8
    14d0:	20c00103 	ldbu	r3,4(r4)
}
    14d4:	1184b03a 	or	r2,r2,r6
    14d8:	1946b03a 	or	r3,r3,r5
    14dc:	dfc00417 	ldw	ra,16(sp)
    14e0:	dc400317 	ldw	r17,12(sp)
    14e4:	dc000217 	ldw	r16,8(sp)
    14e8:	dec00504 	addi	sp,sp,20
    14ec:	f800283a 	ret

000014f0 <setProjectile>:

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    14f0:	defffb04 	addi	sp,sp,-20
    14f4:	dc800215 	stw	r18,8(sp)
    14f8:	dc000015 	stw	r16,0(sp)
    14fc:	2825883a 	mov	r18,r5
    1500:	2021883a 	mov	r16,r4
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
    1504:	01400a04 	movi	r5,40
    1508:	3009883a 	mov	r4,r6
    p.type = sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    150c:	dfc00315 	stw	ra,12(sp)
    1510:	dc400115 	stw	r17,4(sp)
    1514:	d9c00415 	stw	r7,16(sp)
    1518:	3823883a 	mov	r17,r7
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
    151c:	00017800 	call	1780 <__mulsi3>
    1520:	1489883a 	add	r4,r2,r18
    1524:	01400184 	movi	r5,6
    1528:	00017800 	call	1780 <__mulsi3>
    152c:	00c00034 	movhi	r3,0
    1530:	1405883a 	add	r2,r2,r16
    1534:	18cb5904 	addi	r3,r3,11620
    1538:	1885883a 	add	r2,r3,r2
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
    153c:	d8c00443 	ldbu	r3,17(sp)
    p.timeTick = sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))];
    return p;
}

void setProjectile(int pSramBulletBuffer, int x, int y, struct Projectile bullet) {
    sram[(pSramBulletBuffer + 0) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.xVal;
    1540:	14400005 	stb	r17,0(r2)
    sram[(pSramBulletBuffer + 1) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.yVal;
    1544:	10c00045 	stb	r3,1(r2)
    sram[(pSramBulletBuffer + 2) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.direction;
    1548:	d8c00483 	ldbu	r3,18(sp)
    154c:	10c00085 	stb	r3,2(r2)
    sram[(pSramBulletBuffer + 3) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.symbol;
    1550:	d8c004c3 	ldbu	r3,19(sp)
    1554:	10c000c5 	stb	r3,3(r2)
    sram[(pSramBulletBuffer + 4) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.type;
    1558:	d8c00503 	ldbu	r3,20(sp)
    155c:	10c00105 	stb	r3,4(r2)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
    1560:	d8c00543 	ldbu	r3,21(sp)
    1564:	10c00145 	stb	r3,5(r2)
}
    1568:	dfc00317 	ldw	ra,12(sp)
    156c:	dc800217 	ldw	r18,8(sp)
    1570:	dc400117 	ldw	r17,4(sp)
    1574:	dc000017 	ldw	r16,0(sp)
    1578:	dec00504 	addi	sp,sp,20
    157c:	f800283a 	ret

00001580 <resetSRAM>:

void resetSRAM() {
    1580:	01400034 	movhi	r5,0
    int i;
    for (i = 0; i < 2048; i++ ) {
    1584:	0005883a 	mov	r2,zero
    1588:	294b5904 	addi	r5,r5,11620
    158c:	00c20004 	movi	r3,2048
    1590:	1149883a 	add	r4,r2,r5
      sram[i] = 0;
    1594:	20000005 	stb	zero,0(r4)
    sram[(pSramBulletBuffer + 5) + (sizeof(struct Projectile) * ((y * ALIEN_COLS * ALIEN_WIDTH) + x))] = bullet.timeTick;
}

void resetSRAM() {
    int i;
    for (i = 0; i < 2048; i++ ) {
    1598:	10800044 	addi	r2,r2,1
    159c:	10fffc1e 	bne	r2,r3,1590 <_gp+0xffff69dc>
      sram[i] = 0;
   }
}
    15a0:	f800283a 	ret

000015a4 <sram_malloc>:

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
    15a4:	20002026 	beq	r4,zero,1628 <sram_malloc+0x84>
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
    15a8:	20bfffc4 	addi	r2,r4,-1
    15ac:	1000010e 	bge	r2,zero,15b4 <sram_malloc+0x10>
    15b0:	20800184 	addi	r2,r4,6
    15b4:	1005d0fa 	srai	r2,r2,3

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
    15b8:	02000034 	movhi	r8,0
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    15bc:	000b883a 	mov	r5,zero
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;
    15c0:	10c00044 	addi	r3,r2,1

    int currBlock = 0;
    15c4:	0009883a 	mov	r4,zero
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    15c8:	0005883a 	mov	r2,zero
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    15cc:	01c03884 	movi	r7,226
        if(sram[currBlock] == 0) {//curr block is free
    15d0:	420b5904 	addi	r8,r8,11620
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    15d4:	28c00916 	blt	r5,r3,15fc <sram_malloc+0x58>
    /*printf("Blocks Needed: %i\n", blocksNeeded);
    printf("Total Blocks: %i\n", TOTAL_BLOCKS);
    printf("Free List End: %i\n", FREE_LIST_END);
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
    15d8:	014038c4 	movi	r5,227
    15dc:	21401226 	beq	r4,r5,1628 <sram_malloc+0x84>
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
    15e0:	01000034 	movhi	r4,0
    15e4:	210b5904 	addi	r4,r4,11620
    15e8:	2089883a 	add	r4,r4,r2
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    15ec:	100490fa 	slli	r2,r2,3
    printf("Start Found Blocks: %i\n\n", startFoundBlocks);*/

    if(currBlock == FREE_LIST_END) {
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
    15f0:	20c00005 	stb	r3,0(r4)
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    15f4:	108038c4 	addi	r2,r2,227
    15f8:	f800283a 	ret
    int blocksNeeded = ((s - 1) / BLOCK_SIZE) + 1;

    int currBlock = 0;
    int foundBlocks = 0;
    int startFoundBlocks = 0;
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
    15fc:	393ff616 	blt	r7,r4,15d8 <_gp+0xffff6a24>
        if(sram[currBlock] == 0) {//curr block is free
    1600:	410d883a 	add	r6,r8,r4
    1604:	31800007 	ldb	r6,0(r6)
    1608:	3000031e 	bne	r6,zero,1618 <sram_malloc+0x74>
            foundBlocks++;
    160c:	29400044 	addi	r5,r5,1
            currBlock++;
    1610:	21000044 	addi	r4,r4,1
    1614:	003fef06 	br	15d4 <_gp+0xffff6a20>
        } else {//curr block is allocated
            foundBlocks = 0;
            startFoundBlocks = currBlock + sram[currBlock];
    1618:	2189883a 	add	r4,r4,r6
    161c:	2005883a 	mov	r2,r4
    while((foundBlocks < blocksNeeded) && (currBlock < FREE_LIST_END)) {
        if(sram[currBlock] == 0) {//curr block is free
            foundBlocks++;
            currBlock++;
        } else {//curr block is allocated
            foundBlocks = 0;
    1620:	000b883a 	mov	r5,zero
    1624:	003feb06 	br	15d4 <_gp+0xffff6a20>

/*  Fixed Block Size Dynamic Memory Allocation
    Implimented with a free list  */
int sram_malloc(int s) {
    if(s == 0) {
        return -1;
    1628:	00bfffc4 	movi	r2,-1
        return -1;//Out of memory, or heap fragmented
    } else {
        sram[startFoundBlocks] = blocksNeeded;
        return FREE_LIST_END + (startFoundBlocks * (BLOCK_SIZE));
    }
}
    162c:	f800283a 	ret

00001630 <sram_free>:
    int FREE_LIST_OVERHEAD = 1;// if byte is zero its not taken, else its how much is taken.
    int BLOCK_SIZE = 8;//8 Byte Blocks
    int TOTAL_BLOCKS = HEAP_SIZE / (BLOCK_SIZE + FREE_LIST_OVERHEAD);
    int FREE_LIST_END = (TOTAL_BLOCKS * FREE_LIST_OVERHEAD);

    int freeListLoc = (loc - FREE_LIST_END) / (BLOCK_SIZE);
    1630:	20bfc744 	addi	r2,r4,-227
    1634:	1000010e 	bge	r2,zero,163c <sram_free+0xc>
    1638:	20bfc904 	addi	r2,r4,-220
    163c:	1005d0fa 	srai	r2,r2,3

    //printf("Free List Location: %i\n", freeListLoc);

    sram[freeListLoc] = 0;
    1640:	00c00034 	movhi	r3,0
    1644:	18cb5904 	addi	r3,r3,11620
    1648:	1887883a 	add	r3,r3,r2
    164c:	18000005 	stb	zero,0(r3)
    return freeListLoc;

}
    1650:	f800283a 	ret

00001654 <udivmodsi4>:
    1654:	2900182e 	bgeu	r5,r4,16b8 <udivmodsi4+0x64>
    1658:	28001716 	blt	r5,zero,16b8 <udivmodsi4+0x64>
    165c:	00800804 	movi	r2,32
    1660:	00c00044 	movi	r3,1
    1664:	00000206 	br	1670 <udivmodsi4+0x1c>
    1668:	10001126 	beq	r2,zero,16b0 <udivmodsi4+0x5c>
    166c:	28000516 	blt	r5,zero,1684 <udivmodsi4+0x30>
    1670:	294b883a 	add	r5,r5,r5
    1674:	10bfffc4 	addi	r2,r2,-1
    1678:	18c7883a 	add	r3,r3,r3
    167c:	293ffa36 	bltu	r5,r4,1668 <_gp+0xffff6ab4>
    1680:	18000b26 	beq	r3,zero,16b0 <udivmodsi4+0x5c>
    1684:	0005883a 	mov	r2,zero
    1688:	21400236 	bltu	r4,r5,1694 <udivmodsi4+0x40>
    168c:	2149c83a 	sub	r4,r4,r5
    1690:	10c4b03a 	or	r2,r2,r3
    1694:	1806d07a 	srli	r3,r3,1
    1698:	280ad07a 	srli	r5,r5,1
    169c:	183ffa1e 	bne	r3,zero,1688 <_gp+0xffff6ad4>
    16a0:	3000011e 	bne	r6,zero,16a8 <udivmodsi4+0x54>
    16a4:	f800283a 	ret
    16a8:	2005883a 	mov	r2,r4
    16ac:	f800283a 	ret
    16b0:	0005883a 	mov	r2,zero
    16b4:	003ffa06 	br	16a0 <_gp+0xffff6aec>
    16b8:	00c00044 	movi	r3,1
    16bc:	003ff106 	br	1684 <_gp+0xffff6ad0>

000016c0 <__divsi3>:
    16c0:	defffe04 	addi	sp,sp,-8
    16c4:	dfc00115 	stw	ra,4(sp)
    16c8:	dc000015 	stw	r16,0(sp)
    16cc:	20000b16 	blt	r4,zero,16fc <__divsi3+0x3c>
    16d0:	0021883a 	mov	r16,zero
    16d4:	28000c16 	blt	r5,zero,1708 <__divsi3+0x48>
    16d8:	000d883a 	mov	r6,zero
    16dc:	00016540 	call	1654 <udivmodsi4>
    16e0:	0407c83a 	sub	r3,zero,r16
    16e4:	1884f03a 	xor	r2,r3,r2
    16e8:	1405883a 	add	r2,r2,r16
    16ec:	dfc00117 	ldw	ra,4(sp)
    16f0:	dc000017 	ldw	r16,0(sp)
    16f4:	dec00204 	addi	sp,sp,8
    16f8:	f800283a 	ret
    16fc:	0109c83a 	sub	r4,zero,r4
    1700:	04000044 	movi	r16,1
    1704:	283ff40e 	bge	r5,zero,16d8 <_gp+0xffff6b24>
    1708:	014bc83a 	sub	r5,zero,r5
    170c:	8400005c 	xori	r16,r16,1
    1710:	003ff106 	br	16d8 <_gp+0xffff6b24>

00001714 <__modsi3>:
    1714:	defffd04 	addi	sp,sp,-12
    1718:	dfc00215 	stw	ra,8(sp)
    171c:	dc400115 	stw	r17,4(sp)
    1720:	dc000015 	stw	r16,0(sp)
    1724:	20000c16 	blt	r4,zero,1758 <__modsi3+0x44>
    1728:	0023883a 	mov	r17,zero
    172c:	0021883a 	mov	r16,zero
    1730:	28000d16 	blt	r5,zero,1768 <__modsi3+0x54>
    1734:	01800044 	movi	r6,1
    1738:	00016540 	call	1654 <udivmodsi4>
    173c:	1404f03a 	xor	r2,r2,r16
    1740:	8885883a 	add	r2,r17,r2
    1744:	dfc00217 	ldw	ra,8(sp)
    1748:	dc400117 	ldw	r17,4(sp)
    174c:	dc000017 	ldw	r16,0(sp)
    1750:	dec00304 	addi	sp,sp,12
    1754:	f800283a 	ret
    1758:	0109c83a 	sub	r4,zero,r4
    175c:	04400044 	movi	r17,1
    1760:	043fffc4 	movi	r16,-1
    1764:	283ff30e 	bge	r5,zero,1734 <_gp+0xffff6b80>
    1768:	014bc83a 	sub	r5,zero,r5
    176c:	003ff106 	br	1734 <_gp+0xffff6b80>

00001770 <__udivsi3>:
    1770:	000d883a 	mov	r6,zero
    1774:	00016541 	jmpi	1654 <udivmodsi4>

00001778 <__umodsi3>:
    1778:	01800044 	movi	r6,1
    177c:	00016541 	jmpi	1654 <udivmodsi4>

00001780 <__mulsi3>:
    1780:	0005883a 	mov	r2,zero
    1784:	20000726 	beq	r4,zero,17a4 <__mulsi3+0x24>
    1788:	20c0004c 	andi	r3,r4,1
    178c:	2008d07a 	srli	r4,r4,1
    1790:	18000126 	beq	r3,zero,1798 <__mulsi3+0x18>
    1794:	1145883a 	add	r2,r2,r5
    1798:	294b883a 	add	r5,r5,r5
    179c:	203ffa1e 	bne	r4,zero,1788 <_gp+0xffff6bd4>
    17a0:	f800283a 	ret
    17a4:	f800283a 	ret

000017a8 <calloc>:
    17a8:	00c00034 	movhi	r3,0
    17ac:	18caf804 	addi	r3,r3,11232
    17b0:	2005883a 	mov	r2,r4
    17b4:	19000017 	ldw	r4,0(r3)
    17b8:	280d883a 	mov	r6,r5
    17bc:	100b883a 	mov	r5,r2
    17c0:	00018141 	jmpi	1814 <_calloc_r>

000017c4 <malloc>:
    17c4:	00800034 	movhi	r2,0
    17c8:	108af804 	addi	r2,r2,11232
    17cc:	200b883a 	mov	r5,r4
    17d0:	11000017 	ldw	r4,0(r2)
    17d4:	00019581 	jmpi	1958 <_malloc_r>

000017d8 <free>:
    17d8:	00800034 	movhi	r2,0
    17dc:	108af804 	addi	r2,r2,11232
    17e0:	200b883a 	mov	r5,r4
    17e4:	11000017 	ldw	r4,0(r2)
    17e8:	00018741 	jmpi	1874 <_free_r>

000017ec <memcpy>:
    17ec:	2005883a 	mov	r2,r4
    17f0:	0007883a 	mov	r3,zero
    17f4:	19800626 	beq	r3,r6,1810 <memcpy+0x24>
    17f8:	28c9883a 	add	r4,r5,r3
    17fc:	21c00003 	ldbu	r7,0(r4)
    1800:	10c9883a 	add	r4,r2,r3
    1804:	18c00044 	addi	r3,r3,1
    1808:	21c00005 	stb	r7,0(r4)
    180c:	003ff906 	br	17f4 <_gp+0xffff6c40>
    1810:	f800283a 	ret

00001814 <_calloc_r>:
    1814:	defffd04 	addi	sp,sp,-12
    1818:	dc000015 	stw	r16,0(sp)
    181c:	2021883a 	mov	r16,r4
    1820:	2809883a 	mov	r4,r5
    1824:	300b883a 	mov	r5,r6
    1828:	dfc00215 	stw	ra,8(sp)
    182c:	dc400115 	stw	r17,4(sp)
    1830:	00017800 	call	1780 <__mulsi3>
    1834:	8009883a 	mov	r4,r16
    1838:	100b883a 	mov	r5,r2
    183c:	1023883a 	mov	r17,r2
    1840:	00019580 	call	1958 <_malloc_r>
    1844:	1021883a 	mov	r16,r2
    1848:	10000426 	beq	r2,zero,185c <_calloc_r+0x48>
    184c:	1009883a 	mov	r4,r2
    1850:	000b883a 	mov	r5,zero
    1854:	880d883a 	mov	r6,r17
    1858:	00023780 	call	2378 <memset>
    185c:	8005883a 	mov	r2,r16
    1860:	dfc00217 	ldw	ra,8(sp)
    1864:	dc400117 	ldw	r17,4(sp)
    1868:	dc000017 	ldw	r16,0(sp)
    186c:	dec00304 	addi	sp,sp,12
    1870:	f800283a 	ret

00001874 <_free_r>:
    1874:	28003726 	beq	r5,zero,1954 <_free_r+0xe0>
    1878:	28ffff17 	ldw	r3,-4(r5)
    187c:	28bfff04 	addi	r2,r5,-4
    1880:	1800010e 	bge	r3,zero,1888 <_free_r+0x14>
    1884:	10c5883a 	add	r2,r2,r3
    1888:	01400034 	movhi	r5,0
    188c:	294b5104 	addi	r5,r5,11588
    1890:	28c00017 	ldw	r3,0(r5)
    1894:	280d883a 	mov	r6,r5
    1898:	1800031e 	bne	r3,zero,18a8 <_free_r+0x34>
    189c:	10000115 	stw	zero,4(r2)
    18a0:	28800015 	stw	r2,0(r5)
    18a4:	f800283a 	ret
    18a8:	10c00c2e 	bgeu	r2,r3,18dc <_free_r+0x68>
    18ac:	11400017 	ldw	r5,0(r2)
    18b0:	1149883a 	add	r4,r2,r5
    18b4:	20c0041e 	bne	r4,r3,18c8 <_free_r+0x54>
    18b8:	20c00017 	ldw	r3,0(r4)
    18bc:	28c7883a 	add	r3,r5,r3
    18c0:	10c00015 	stw	r3,0(r2)
    18c4:	20c00117 	ldw	r3,4(r4)
    18c8:	10c00115 	stw	r3,4(r2)
    18cc:	30800015 	stw	r2,0(r6)
    18d0:	f800283a 	ret
    18d4:	11400336 	bltu	r2,r5,18e4 <_free_r+0x70>
    18d8:	2807883a 	mov	r3,r5
    18dc:	19400117 	ldw	r5,4(r3)
    18e0:	283ffc1e 	bne	r5,zero,18d4 <_gp+0xffff6d20>
    18e4:	19c00017 	ldw	r7,0(r3)
    18e8:	19cd883a 	add	r6,r3,r7
    18ec:	30800a1e 	bne	r6,r2,1918 <_free_r+0xa4>
    18f0:	10800017 	ldw	r2,0(r2)
    18f4:	3885883a 	add	r2,r7,r2
    18f8:	18800015 	stw	r2,0(r3)
    18fc:	1889883a 	add	r4,r3,r2
    1900:	2140141e 	bne	r4,r5,1954 <_free_r+0xe0>
    1904:	29000017 	ldw	r4,0(r5)
    1908:	1105883a 	add	r2,r2,r4
    190c:	18800015 	stw	r2,0(r3)
    1910:	28800117 	ldw	r2,4(r5)
    1914:	00000e06 	br	1950 <_free_r+0xdc>
    1918:	1180032e 	bgeu	r2,r6,1928 <_free_r+0xb4>
    191c:	00800304 	movi	r2,12
    1920:	20800015 	stw	r2,0(r4)
    1924:	f800283a 	ret
    1928:	11800017 	ldw	r6,0(r2)
    192c:	1189883a 	add	r4,r2,r6
    1930:	2140061e 	bne	r4,r5,194c <_free_r+0xd8>
    1934:	29000017 	ldw	r4,0(r5)
    1938:	3109883a 	add	r4,r6,r4
    193c:	11000015 	stw	r4,0(r2)
    1940:	29000117 	ldw	r4,4(r5)
    1944:	11000115 	stw	r4,4(r2)
    1948:	00000106 	br	1950 <_free_r+0xdc>
    194c:	11400115 	stw	r5,4(r2)
    1950:	18800115 	stw	r2,4(r3)
    1954:	f800283a 	ret

00001958 <_malloc_r>:
    1958:	defffb04 	addi	sp,sp,-20
    195c:	00bfff04 	movi	r2,-4
    1960:	dc000015 	stw	r16,0(sp)
    1964:	2c0000c4 	addi	r16,r5,3
    1968:	80a0703a 	and	r16,r16,r2
    196c:	dc800215 	stw	r18,8(sp)
    1970:	dfc00415 	stw	ra,16(sp)
    1974:	dcc00315 	stw	r19,12(sp)
    1978:	dc400115 	stw	r17,4(sp)
    197c:	84000204 	addi	r16,r16,8
    1980:	00800304 	movi	r2,12
    1984:	2025883a 	mov	r18,r4
    1988:	8080022e 	bgeu	r16,r2,1994 <_malloc_r+0x3c>
    198c:	1021883a 	mov	r16,r2
    1990:	00000506 	br	19a8 <_malloc_r+0x50>
    1994:	8000040e 	bge	r16,zero,19a8 <_malloc_r+0x50>
    1998:	00800304 	movi	r2,12
    199c:	90800015 	stw	r2,0(r18)
    19a0:	0005883a 	mov	r2,zero
    19a4:	00003c06 	br	1a98 <_malloc_r+0x140>
    19a8:	817ffb36 	bltu	r16,r5,1998 <_gp+0xffff6de4>
    19ac:	01000034 	movhi	r4,0
    19b0:	210b5104 	addi	r4,r4,11588
    19b4:	20800017 	ldw	r2,0(r4)
    19b8:	1007883a 	mov	r3,r2
    19bc:	18000926 	beq	r3,zero,19e4 <_malloc_r+0x8c>
    19c0:	19400017 	ldw	r5,0(r3)
    19c4:	2c0bc83a 	sub	r5,r5,r16
    19c8:	28001716 	blt	r5,zero,1a28 <_malloc_r+0xd0>
    19cc:	018002c4 	movi	r6,11
    19d0:	31400d2e 	bgeu	r6,r5,1a08 <_malloc_r+0xb0>
    19d4:	19400015 	stw	r5,0(r3)
    19d8:	1945883a 	add	r2,r3,r5
    19dc:	14000015 	stw	r16,0(r2)
    19e0:	1000231e 	bne	r2,zero,1a70 <_malloc_r+0x118>
    19e4:	04400034 	movhi	r17,0
    19e8:	8c4b5004 	addi	r17,r17,11584
    19ec:	88800017 	ldw	r2,0(r17)
    19f0:	1000101e 	bne	r2,zero,1a34 <_malloc_r+0xdc>
    19f4:	9009883a 	mov	r4,r18
    19f8:	000b883a 	mov	r5,zero
    19fc:	0001c640 	call	1c64 <_sbrk_r>
    1a00:	88800015 	stw	r2,0(r17)
    1a04:	00000b06 	br	1a34 <_malloc_r+0xdc>
    1a08:	10c0031e 	bne	r2,r3,1a18 <_malloc_r+0xc0>
    1a0c:	10c00117 	ldw	r3,4(r2)
    1a10:	20c00015 	stw	r3,0(r4)
    1a14:	00001606 	br	1a70 <_malloc_r+0x118>
    1a18:	19000117 	ldw	r4,4(r3)
    1a1c:	11000115 	stw	r4,4(r2)
    1a20:	1805883a 	mov	r2,r3
    1a24:	00001206 	br	1a70 <_malloc_r+0x118>
    1a28:	1805883a 	mov	r2,r3
    1a2c:	18c00117 	ldw	r3,4(r3)
    1a30:	003fe206 	br	19bc <_gp+0xffff6e08>
    1a34:	9009883a 	mov	r4,r18
    1a38:	800b883a 	mov	r5,r16
    1a3c:	0001c640 	call	1c64 <_sbrk_r>
    1a40:	04ffffc4 	movi	r19,-1
    1a44:	14ffd426 	beq	r2,r19,1998 <_gp+0xffff6de4>
    1a48:	144000c4 	addi	r17,r2,3
    1a4c:	00ffff04 	movi	r3,-4
    1a50:	88e2703a 	and	r17,r17,r3
    1a54:	88800526 	beq	r17,r2,1a6c <_malloc_r+0x114>
    1a58:	9009883a 	mov	r4,r18
    1a5c:	888bc83a 	sub	r5,r17,r2
    1a60:	0001c640 	call	1c64 <_sbrk_r>
    1a64:	14ffcc26 	beq	r2,r19,1998 <_gp+0xffff6de4>
    1a68:	8805883a 	mov	r2,r17
    1a6c:	14000015 	stw	r16,0(r2)
    1a70:	114002c4 	addi	r5,r2,11
    1a74:	00fffe04 	movi	r3,-8
    1a78:	11000104 	addi	r4,r2,4
    1a7c:	28c6703a 	and	r3,r5,r3
    1a80:	1909c83a 	sub	r4,r3,r4
    1a84:	20000326 	beq	r4,zero,1a94 <_malloc_r+0x13c>
    1a88:	110b883a 	add	r5,r2,r4
    1a8c:	0109c83a 	sub	r4,zero,r4
    1a90:	29000015 	stw	r4,0(r5)
    1a94:	1805883a 	mov	r2,r3
    1a98:	dfc00417 	ldw	ra,16(sp)
    1a9c:	dcc00317 	ldw	r19,12(sp)
    1aa0:	dc800217 	ldw	r18,8(sp)
    1aa4:	dc400117 	ldw	r17,4(sp)
    1aa8:	dc000017 	ldw	r16,0(sp)
    1aac:	dec00504 	addi	sp,sp,20
    1ab0:	f800283a 	ret

00001ab4 <_printf_r>:
    1ab4:	defffd04 	addi	sp,sp,-12
    1ab8:	dfc00015 	stw	ra,0(sp)
    1abc:	d9800115 	stw	r6,4(sp)
    1ac0:	d9c00215 	stw	r7,8(sp)
    1ac4:	20c00217 	ldw	r3,8(r4)
    1ac8:	280d883a 	mov	r6,r5
    1acc:	01400034 	movhi	r5,0
    1ad0:	2948b304 	addi	r5,r5,8908
    1ad4:	19400115 	stw	r5,4(r3)
    1ad8:	21400217 	ldw	r5,8(r4)
    1adc:	d9c00104 	addi	r7,sp,4
    1ae0:	0001d3c0 	call	1d3c <___vfprintf_internal_r>
    1ae4:	dfc00017 	ldw	ra,0(sp)
    1ae8:	dec00304 	addi	sp,sp,12
    1aec:	f800283a 	ret

00001af0 <printf>:
    1af0:	defffc04 	addi	sp,sp,-16
    1af4:	dfc00015 	stw	ra,0(sp)
    1af8:	d9400115 	stw	r5,4(sp)
    1afc:	d9800215 	stw	r6,8(sp)
    1b00:	d9c00315 	stw	r7,12(sp)
    1b04:	00800034 	movhi	r2,0
    1b08:	108af804 	addi	r2,r2,11232
    1b0c:	10800017 	ldw	r2,0(r2)
    1b10:	200b883a 	mov	r5,r4
    1b14:	01000034 	movhi	r4,0
    1b18:	10c00217 	ldw	r3,8(r2)
    1b1c:	2108b304 	addi	r4,r4,8908
    1b20:	d9800104 	addi	r6,sp,4
    1b24:	19000115 	stw	r4,4(r3)
    1b28:	11000217 	ldw	r4,8(r2)
    1b2c:	00022a80 	call	22a8 <__vfprintf_internal>
    1b30:	dfc00017 	ldw	ra,0(sp)
    1b34:	dec00404 	addi	sp,sp,16
    1b38:	f800283a 	ret

00001b3c <_putchar_r>:
    1b3c:	21800217 	ldw	r6,8(r4)
    1b40:	00023ec1 	jmpi	23ec <_putc_r>

00001b44 <putchar>:
    1b44:	00800034 	movhi	r2,0
    1b48:	108af804 	addi	r2,r2,11232
    1b4c:	200b883a 	mov	r5,r4
    1b50:	11000017 	ldw	r4,0(r2)
    1b54:	21800217 	ldw	r6,8(r4)
    1b58:	00023ec1 	jmpi	23ec <_putc_r>

00001b5c <_puts_r>:
    1b5c:	defffd04 	addi	sp,sp,-12
    1b60:	dc000015 	stw	r16,0(sp)
    1b64:	2021883a 	mov	r16,r4
    1b68:	2809883a 	mov	r4,r5
    1b6c:	dfc00215 	stw	ra,8(sp)
    1b70:	dc400115 	stw	r17,4(sp)
    1b74:	2823883a 	mov	r17,r5
    1b78:	0001cb40 	call	1cb4 <strlen>
    1b7c:	81400217 	ldw	r5,8(r16)
    1b80:	00c00034 	movhi	r3,0
    1b84:	18c8b304 	addi	r3,r3,8908
    1b88:	28c00115 	stw	r3,4(r5)
    1b8c:	8009883a 	mov	r4,r16
    1b90:	880d883a 	mov	r6,r17
    1b94:	100f883a 	mov	r7,r2
    1b98:	00022cc0 	call	22cc <__sfvwrite_small_dev>
    1b9c:	00ffffc4 	movi	r3,-1
    1ba0:	10c00926 	beq	r2,r3,1bc8 <_puts_r+0x6c>
    1ba4:	81400217 	ldw	r5,8(r16)
    1ba8:	01800034 	movhi	r6,0
    1bac:	8009883a 	mov	r4,r16
    1bb0:	28800117 	ldw	r2,4(r5)
    1bb4:	318aa604 	addi	r6,r6,10904
    1bb8:	01c00044 	movi	r7,1
    1bbc:	103ee83a 	callr	r2
    1bc0:	10bfffe0 	cmpeqi	r2,r2,-1
    1bc4:	0085c83a 	sub	r2,zero,r2
    1bc8:	dfc00217 	ldw	ra,8(sp)
    1bcc:	dc400117 	ldw	r17,4(sp)
    1bd0:	dc000017 	ldw	r16,0(sp)
    1bd4:	dec00304 	addi	sp,sp,12
    1bd8:	f800283a 	ret

00001bdc <puts>:
    1bdc:	00800034 	movhi	r2,0
    1be0:	108af804 	addi	r2,r2,11232
    1be4:	200b883a 	mov	r5,r4
    1be8:	11000017 	ldw	r4,0(r2)
    1bec:	0001b5c1 	jmpi	1b5c <_puts_r>

00001bf0 <srand>:
    1bf0:	00800034 	movhi	r2,0
    1bf4:	108b5204 	addi	r2,r2,11592
    1bf8:	11000015 	stw	r4,0(r2)
    1bfc:	10000115 	stw	zero,4(r2)
    1c00:	f800283a 	ret

00001c04 <rand>:
    1c04:	defffe04 	addi	sp,sp,-8
    1c08:	dc000015 	stw	r16,0(sp)
    1c0c:	04000034 	movhi	r16,0
    1c10:	840b5204 	addi	r16,r16,11592
    1c14:	81000017 	ldw	r4,0(r16)
    1c18:	81400117 	ldw	r5,4(r16)
    1c1c:	01932574 	movhi	r6,19605
    1c20:	01d614b4 	movhi	r7,22610
    1c24:	319fcb44 	addi	r6,r6,32557
    1c28:	39fd0b44 	addi	r7,r7,-3027
    1c2c:	dfc00115 	stw	ra,4(sp)
    1c30:	000249c0 	call	249c <__muldi3>
    1c34:	11000044 	addi	r4,r2,1
    1c38:	2085803a 	cmpltu	r2,r4,r2
    1c3c:	10c7883a 	add	r3,r2,r3
    1c40:	00a00034 	movhi	r2,32768
    1c44:	10bfffc4 	addi	r2,r2,-1
    1c48:	1884703a 	and	r2,r3,r2
    1c4c:	81000015 	stw	r4,0(r16)
    1c50:	80c00115 	stw	r3,4(r16)
    1c54:	dfc00117 	ldw	ra,4(sp)
    1c58:	dc000017 	ldw	r16,0(sp)
    1c5c:	dec00204 	addi	sp,sp,8
    1c60:	f800283a 	ret

00001c64 <_sbrk_r>:
    1c64:	defffd04 	addi	sp,sp,-12
    1c68:	dc000015 	stw	r16,0(sp)
    1c6c:	04000034 	movhi	r16,0
    1c70:	dc400115 	stw	r17,4(sp)
    1c74:	840b5404 	addi	r16,r16,11600
    1c78:	2023883a 	mov	r17,r4
    1c7c:	2809883a 	mov	r4,r5
    1c80:	dfc00215 	stw	ra,8(sp)
    1c84:	80000015 	stw	zero,0(r16)
    1c88:	00028180 	call	2818 <sbrk>
    1c8c:	00ffffc4 	movi	r3,-1
    1c90:	10c0031e 	bne	r2,r3,1ca0 <_sbrk_r+0x3c>
    1c94:	80c00017 	ldw	r3,0(r16)
    1c98:	18000126 	beq	r3,zero,1ca0 <_sbrk_r+0x3c>
    1c9c:	88c00015 	stw	r3,0(r17)
    1ca0:	dfc00217 	ldw	ra,8(sp)
    1ca4:	dc400117 	ldw	r17,4(sp)
    1ca8:	dc000017 	ldw	r16,0(sp)
    1cac:	dec00304 	addi	sp,sp,12
    1cb0:	f800283a 	ret

00001cb4 <strlen>:
    1cb4:	2005883a 	mov	r2,r4
    1cb8:	10c00007 	ldb	r3,0(r2)
    1cbc:	18000226 	beq	r3,zero,1cc8 <strlen+0x14>
    1cc0:	10800044 	addi	r2,r2,1
    1cc4:	003ffc06 	br	1cb8 <_gp+0xffff7104>
    1cc8:	1105c83a 	sub	r2,r2,r4
    1ccc:	f800283a 	ret

00001cd0 <print_repeat>:
    1cd0:	defffb04 	addi	sp,sp,-20
    1cd4:	dc800315 	stw	r18,12(sp)
    1cd8:	dc400215 	stw	r17,8(sp)
    1cdc:	dc000115 	stw	r16,4(sp)
    1ce0:	dfc00415 	stw	ra,16(sp)
    1ce4:	2025883a 	mov	r18,r4
    1ce8:	2823883a 	mov	r17,r5
    1cec:	d9800005 	stb	r6,0(sp)
    1cf0:	3821883a 	mov	r16,r7
    1cf4:	04000a0e 	bge	zero,r16,1d20 <print_repeat+0x50>
    1cf8:	88800117 	ldw	r2,4(r17)
    1cfc:	9009883a 	mov	r4,r18
    1d00:	880b883a 	mov	r5,r17
    1d04:	d80d883a 	mov	r6,sp
    1d08:	01c00044 	movi	r7,1
    1d0c:	103ee83a 	callr	r2
    1d10:	843fffc4 	addi	r16,r16,-1
    1d14:	103ff726 	beq	r2,zero,1cf4 <_gp+0xffff7140>
    1d18:	00bfffc4 	movi	r2,-1
    1d1c:	00000106 	br	1d24 <print_repeat+0x54>
    1d20:	0005883a 	mov	r2,zero
    1d24:	dfc00417 	ldw	ra,16(sp)
    1d28:	dc800317 	ldw	r18,12(sp)
    1d2c:	dc400217 	ldw	r17,8(sp)
    1d30:	dc000117 	ldw	r16,4(sp)
    1d34:	dec00504 	addi	sp,sp,20
    1d38:	f800283a 	ret

00001d3c <___vfprintf_internal_r>:
    1d3c:	deffe304 	addi	sp,sp,-116
    1d40:	d8c00804 	addi	r3,sp,32
    1d44:	df001b15 	stw	fp,108(sp)
    1d48:	ddc01a15 	stw	r23,104(sp)
    1d4c:	dd801915 	stw	r22,100(sp)
    1d50:	dd401815 	stw	r21,96(sp)
    1d54:	dd001715 	stw	r20,92(sp)
    1d58:	dcc01615 	stw	r19,88(sp)
    1d5c:	dc801515 	stw	r18,84(sp)
    1d60:	dc401415 	stw	r17,80(sp)
    1d64:	dc001315 	stw	r16,76(sp)
    1d68:	dfc01c15 	stw	ra,112(sp)
    1d6c:	2029883a 	mov	r20,r4
    1d70:	2823883a 	mov	r17,r5
    1d74:	3839883a 	mov	fp,r7
    1d78:	d9800f15 	stw	r6,60(sp)
    1d7c:	0021883a 	mov	r16,zero
    1d80:	d8000e15 	stw	zero,56(sp)
    1d84:	002f883a 	mov	r23,zero
    1d88:	002b883a 	mov	r21,zero
    1d8c:	0027883a 	mov	r19,zero
    1d90:	0025883a 	mov	r18,zero
    1d94:	d8000c15 	stw	zero,48(sp)
    1d98:	d8000b15 	stw	zero,44(sp)
    1d9c:	002d883a 	mov	r22,zero
    1da0:	d8c00915 	stw	r3,36(sp)
    1da4:	d8c00f17 	ldw	r3,60(sp)
    1da8:	19000003 	ldbu	r4,0(r3)
    1dac:	20803fcc 	andi	r2,r4,255
    1db0:	1080201c 	xori	r2,r2,128
    1db4:	10bfe004 	addi	r2,r2,-128
    1db8:	10012e26 	beq	r2,zero,2274 <___vfprintf_internal_r+0x538>
    1dbc:	01400044 	movi	r5,1
    1dc0:	b1401426 	beq	r22,r5,1e14 <___vfprintf_internal_r+0xd8>
    1dc4:	2d800216 	blt	r5,r22,1dd0 <___vfprintf_internal_r+0x94>
    1dc8:	b0000626 	beq	r22,zero,1de4 <___vfprintf_internal_r+0xa8>
    1dcc:	00012506 	br	2264 <___vfprintf_internal_r+0x528>
    1dd0:	01400084 	movi	r5,2
    1dd4:	b1401d26 	beq	r22,r5,1e4c <___vfprintf_internal_r+0x110>
    1dd8:	014000c4 	movi	r5,3
    1ddc:	b1402b26 	beq	r22,r5,1e8c <___vfprintf_internal_r+0x150>
    1de0:	00012006 	br	2264 <___vfprintf_internal_r+0x528>
    1de4:	01400944 	movi	r5,37
    1de8:	11410d26 	beq	r2,r5,2220 <___vfprintf_internal_r+0x4e4>
    1dec:	88800117 	ldw	r2,4(r17)
    1df0:	d9000005 	stb	r4,0(sp)
    1df4:	880b883a 	mov	r5,r17
    1df8:	a009883a 	mov	r4,r20
    1dfc:	d80d883a 	mov	r6,sp
    1e00:	01c00044 	movi	r7,1
    1e04:	103ee83a 	callr	r2
    1e08:	1000e81e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    1e0c:	84000044 	addi	r16,r16,1
    1e10:	00011406 	br	2264 <___vfprintf_internal_r+0x528>
    1e14:	01400c04 	movi	r5,48
    1e18:	11410a26 	beq	r2,r5,2244 <___vfprintf_internal_r+0x508>
    1e1c:	01400944 	movi	r5,37
    1e20:	11400a1e 	bne	r2,r5,1e4c <___vfprintf_internal_r+0x110>
    1e24:	d8800005 	stb	r2,0(sp)
    1e28:	88800117 	ldw	r2,4(r17)
    1e2c:	a009883a 	mov	r4,r20
    1e30:	880b883a 	mov	r5,r17
    1e34:	d80d883a 	mov	r6,sp
    1e38:	b00f883a 	mov	r7,r22
    1e3c:	103ee83a 	callr	r2
    1e40:	1000da1e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    1e44:	84000044 	addi	r16,r16,1
    1e48:	00010506 	br	2260 <___vfprintf_internal_r+0x524>
    1e4c:	25bff404 	addi	r22,r4,-48
    1e50:	b5803fcc 	andi	r22,r22,255
    1e54:	00c00244 	movi	r3,9
    1e58:	1d800936 	bltu	r3,r22,1e80 <___vfprintf_internal_r+0x144>
    1e5c:	00bfffc4 	movi	r2,-1
    1e60:	90800426 	beq	r18,r2,1e74 <___vfprintf_internal_r+0x138>
    1e64:	9009883a 	mov	r4,r18
    1e68:	01400284 	movi	r5,10
    1e6c:	00017800 	call	1780 <__mulsi3>
    1e70:	00000106 	br	1e78 <___vfprintf_internal_r+0x13c>
    1e74:	0005883a 	mov	r2,zero
    1e78:	15a5883a 	add	r18,r2,r22
    1e7c:	0000f206 	br	2248 <___vfprintf_internal_r+0x50c>
    1e80:	01400b84 	movi	r5,46
    1e84:	1140f426 	beq	r2,r5,2258 <___vfprintf_internal_r+0x51c>
    1e88:	05800084 	movi	r22,2
    1e8c:	213ff404 	addi	r4,r4,-48
    1e90:	20c03fcc 	andi	r3,r4,255
    1e94:	01000244 	movi	r4,9
    1e98:	20c00b36 	bltu	r4,r3,1ec8 <___vfprintf_internal_r+0x18c>
    1e9c:	00bfffc4 	movi	r2,-1
    1ea0:	98800626 	beq	r19,r2,1ebc <___vfprintf_internal_r+0x180>
    1ea4:	9809883a 	mov	r4,r19
    1ea8:	01400284 	movi	r5,10
    1eac:	d8c01115 	stw	r3,68(sp)
    1eb0:	00017800 	call	1780 <__mulsi3>
    1eb4:	d8c01117 	ldw	r3,68(sp)
    1eb8:	00000106 	br	1ec0 <___vfprintf_internal_r+0x184>
    1ebc:	0005883a 	mov	r2,zero
    1ec0:	10e7883a 	add	r19,r2,r3
    1ec4:	0000e706 	br	2264 <___vfprintf_internal_r+0x528>
    1ec8:	01401b04 	movi	r5,108
    1ecc:	1140e026 	beq	r2,r5,2250 <___vfprintf_internal_r+0x514>
    1ed0:	013fffc4 	movi	r4,-1
    1ed4:	99000226 	beq	r19,r4,1ee0 <___vfprintf_internal_r+0x1a4>
    1ed8:	d8000b15 	stw	zero,44(sp)
    1edc:	00000106 	br	1ee4 <___vfprintf_internal_r+0x1a8>
    1ee0:	04c00044 	movi	r19,1
    1ee4:	01001a44 	movi	r4,105
    1ee8:	11001626 	beq	r2,r4,1f44 <___vfprintf_internal_r+0x208>
    1eec:	20800916 	blt	r4,r2,1f14 <___vfprintf_internal_r+0x1d8>
    1ef0:	010018c4 	movi	r4,99
    1ef4:	11009626 	beq	r2,r4,2150 <___vfprintf_internal_r+0x414>
    1ef8:	01001904 	movi	r4,100
    1efc:	11001126 	beq	r2,r4,1f44 <___vfprintf_internal_r+0x208>
    1f00:	01001604 	movi	r4,88
    1f04:	1100d61e 	bne	r2,r4,2260 <___vfprintf_internal_r+0x524>
    1f08:	00c00044 	movi	r3,1
    1f0c:	d8c00e15 	stw	r3,56(sp)
    1f10:	00001406 	br	1f64 <___vfprintf_internal_r+0x228>
    1f14:	01001cc4 	movi	r4,115
    1f18:	1100a626 	beq	r2,r4,21b4 <___vfprintf_internal_r+0x478>
    1f1c:	20800416 	blt	r4,r2,1f30 <___vfprintf_internal_r+0x1f4>
    1f20:	01001bc4 	movi	r4,111
    1f24:	1100ce1e 	bne	r2,r4,2260 <___vfprintf_internal_r+0x524>
    1f28:	05400204 	movi	r21,8
    1f2c:	00000e06 	br	1f68 <___vfprintf_internal_r+0x22c>
    1f30:	01001d44 	movi	r4,117
    1f34:	11000c26 	beq	r2,r4,1f68 <___vfprintf_internal_r+0x22c>
    1f38:	01001e04 	movi	r4,120
    1f3c:	11000926 	beq	r2,r4,1f64 <___vfprintf_internal_r+0x228>
    1f40:	0000c706 	br	2260 <___vfprintf_internal_r+0x524>
    1f44:	e0800104 	addi	r2,fp,4
    1f48:	b8000726 	beq	r23,zero,1f68 <___vfprintf_internal_r+0x22c>
    1f4c:	d8800d15 	stw	r2,52(sp)
    1f50:	e7000017 	ldw	fp,0(fp)
    1f54:	e000080e 	bge	fp,zero,1f78 <___vfprintf_internal_r+0x23c>
    1f58:	0739c83a 	sub	fp,zero,fp
    1f5c:	02000044 	movi	r8,1
    1f60:	00000606 	br	1f7c <___vfprintf_internal_r+0x240>
    1f64:	05400404 	movi	r21,16
    1f68:	e0c00104 	addi	r3,fp,4
    1f6c:	d8c00d15 	stw	r3,52(sp)
    1f70:	e7000017 	ldw	fp,0(fp)
    1f74:	002f883a 	mov	r23,zero
    1f78:	0011883a 	mov	r8,zero
    1f7c:	002d883a 	mov	r22,zero
    1f80:	dd87883a 	add	r3,sp,r22
    1f84:	e0001a26 	beq	fp,zero,1ff0 <___vfprintf_internal_r+0x2b4>
    1f88:	e009883a 	mov	r4,fp
    1f8c:	a80b883a 	mov	r5,r21
    1f90:	d8c01115 	stw	r3,68(sp)
    1f94:	da001215 	stw	r8,72(sp)
    1f98:	00017700 	call	1770 <__udivsi3>
    1f9c:	a809883a 	mov	r4,r21
    1fa0:	100b883a 	mov	r5,r2
    1fa4:	d8801015 	stw	r2,64(sp)
    1fa8:	00017800 	call	1780 <__mulsi3>
    1fac:	e085c83a 	sub	r2,fp,r2
    1fb0:	01000244 	movi	r4,9
    1fb4:	d8c01117 	ldw	r3,68(sp)
    1fb8:	d9801017 	ldw	r6,64(sp)
    1fbc:	da001217 	ldw	r8,72(sp)
    1fc0:	20800216 	blt	r4,r2,1fcc <___vfprintf_internal_r+0x290>
    1fc4:	17000c04 	addi	fp,r2,48
    1fc8:	00000506 	br	1fe0 <___vfprintf_internal_r+0x2a4>
    1fcc:	d9400e17 	ldw	r5,56(sp)
    1fd0:	28000226 	beq	r5,zero,1fdc <___vfprintf_internal_r+0x2a0>
    1fd4:	17000dc4 	addi	fp,r2,55
    1fd8:	00000106 	br	1fe0 <___vfprintf_internal_r+0x2a4>
    1fdc:	170015c4 	addi	fp,r2,87
    1fe0:	1f000005 	stb	fp,0(r3)
    1fe4:	b5800044 	addi	r22,r22,1
    1fe8:	3039883a 	mov	fp,r6
    1fec:	003fe406 	br	1f80 <_gp+0xffff73cc>
    1ff0:	1ec5c83a 	sub	r2,r3,sp
    1ff4:	d8800a15 	stw	r2,40(sp)
    1ff8:	9885c83a 	sub	r2,r19,r2
    1ffc:	1839883a 	mov	fp,r3
    2000:	00800e0e 	bge	zero,r2,203c <___vfprintf_internal_r+0x300>
    2004:	182d883a 	mov	r22,r3
    2008:	1885883a 	add	r2,r3,r2
    200c:	01000c04 	movi	r4,48
    2010:	d9400917 	ldw	r5,36(sp)
    2014:	b007883a 	mov	r3,r22
    2018:	b140052e 	bgeu	r22,r5,2030 <___vfprintf_internal_r+0x2f4>
    201c:	b5800044 	addi	r22,r22,1
    2020:	19000005 	stb	r4,0(r3)
    2024:	b039883a 	mov	fp,r22
    2028:	b0bff91e 	bne	r22,r2,2010 <_gp+0xffff745c>
    202c:	00000106 	br	2034 <___vfprintf_internal_r+0x2f8>
    2030:	b039883a 	mov	fp,r22
    2034:	b6edc83a 	sub	r22,r22,sp
    2038:	dd800a15 	stw	r22,40(sp)
    203c:	d8800a17 	ldw	r2,40(sp)
    2040:	1207883a 	add	r3,r2,r8
    2044:	90edc83a 	sub	r22,r18,r3
    2048:	d8c00b17 	ldw	r3,44(sp)
    204c:	18001726 	beq	r3,zero,20ac <___vfprintf_internal_r+0x370>
    2050:	40000a26 	beq	r8,zero,207c <___vfprintf_internal_r+0x340>
    2054:	00800b44 	movi	r2,45
    2058:	d8800805 	stb	r2,32(sp)
    205c:	88800117 	ldw	r2,4(r17)
    2060:	a009883a 	mov	r4,r20
    2064:	880b883a 	mov	r5,r17
    2068:	d9800804 	addi	r6,sp,32
    206c:	01c00044 	movi	r7,1
    2070:	103ee83a 	callr	r2
    2074:	10004d1e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    2078:	84000044 	addi	r16,r16,1
    207c:	0580070e 	bge	zero,r22,209c <___vfprintf_internal_r+0x360>
    2080:	a009883a 	mov	r4,r20
    2084:	880b883a 	mov	r5,r17
    2088:	01800c04 	movi	r6,48
    208c:	b00f883a 	mov	r7,r22
    2090:	0001cd00 	call	1cd0 <print_repeat>
    2094:	1000451e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    2098:	85a1883a 	add	r16,r16,r22
    209c:	d9000a17 	ldw	r4,40(sp)
    20a0:	e007883a 	mov	r3,fp
    20a4:	272dc83a 	sub	r22,r4,fp
    20a8:	00002206 	br	2134 <___vfprintf_internal_r+0x3f8>
    20ac:	0580090e 	bge	zero,r22,20d4 <___vfprintf_internal_r+0x398>
    20b0:	a009883a 	mov	r4,r20
    20b4:	880b883a 	mov	r5,r17
    20b8:	01800804 	movi	r6,32
    20bc:	b00f883a 	mov	r7,r22
    20c0:	da001215 	stw	r8,72(sp)
    20c4:	0001cd00 	call	1cd0 <print_repeat>
    20c8:	da001217 	ldw	r8,72(sp)
    20cc:	1000371e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    20d0:	85a1883a 	add	r16,r16,r22
    20d4:	403ff126 	beq	r8,zero,209c <_gp+0xffff74e8>
    20d8:	00800b44 	movi	r2,45
    20dc:	d8800805 	stb	r2,32(sp)
    20e0:	88800117 	ldw	r2,4(r17)
    20e4:	a009883a 	mov	r4,r20
    20e8:	880b883a 	mov	r5,r17
    20ec:	d9800804 	addi	r6,sp,32
    20f0:	01c00044 	movi	r7,1
    20f4:	103ee83a 	callr	r2
    20f8:	10002c1e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    20fc:	84000044 	addi	r16,r16,1
    2100:	003fe606 	br	209c <_gp+0xffff74e8>
    2104:	18ffffc4 	addi	r3,r3,-1
    2108:	18800003 	ldbu	r2,0(r3)
    210c:	a009883a 	mov	r4,r20
    2110:	d8c01115 	stw	r3,68(sp)
    2114:	d8800805 	stb	r2,32(sp)
    2118:	88800117 	ldw	r2,4(r17)
    211c:	880b883a 	mov	r5,r17
    2120:	d9800804 	addi	r6,sp,32
    2124:	01c00044 	movi	r7,1
    2128:	103ee83a 	callr	r2
    212c:	d8c01117 	ldw	r3,68(sp)
    2130:	10001e1e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    2134:	80c5c83a 	sub	r2,r16,r3
    2138:	1d89883a 	add	r4,r3,r22
    213c:	e085883a 	add	r2,fp,r2
    2140:	013ff016 	blt	zero,r4,2104 <_gp+0xffff7550>
    2144:	1021883a 	mov	r16,r2
    2148:	df000d17 	ldw	fp,52(sp)
    214c:	00004406 	br	2260 <___vfprintf_internal_r+0x524>
    2150:	01000044 	movi	r4,1
    2154:	2480080e 	bge	r4,r18,2178 <___vfprintf_internal_r+0x43c>
    2158:	95bfffc4 	addi	r22,r18,-1
    215c:	a009883a 	mov	r4,r20
    2160:	880b883a 	mov	r5,r17
    2164:	01800804 	movi	r6,32
    2168:	b00f883a 	mov	r7,r22
    216c:	0001cd00 	call	1cd0 <print_repeat>
    2170:	10000e1e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    2174:	85a1883a 	add	r16,r16,r22
    2178:	e0800017 	ldw	r2,0(fp)
    217c:	a009883a 	mov	r4,r20
    2180:	880b883a 	mov	r5,r17
    2184:	d8800005 	stb	r2,0(sp)
    2188:	88800117 	ldw	r2,4(r17)
    218c:	d80d883a 	mov	r6,sp
    2190:	01c00044 	movi	r7,1
    2194:	e5800104 	addi	r22,fp,4
    2198:	103ee83a 	callr	r2
    219c:	1000031e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x470>
    21a0:	84000044 	addi	r16,r16,1
    21a4:	b039883a 	mov	fp,r22
    21a8:	00002d06 	br	2260 <___vfprintf_internal_r+0x524>
    21ac:	00bfffc4 	movi	r2,-1
    21b0:	00003106 	br	2278 <___vfprintf_internal_r+0x53c>
    21b4:	e5800017 	ldw	r22,0(fp)
    21b8:	e0c00104 	addi	r3,fp,4
    21bc:	d8c00a15 	stw	r3,40(sp)
    21c0:	b009883a 	mov	r4,r22
    21c4:	0001cb40 	call	1cb4 <strlen>
    21c8:	9091c83a 	sub	r8,r18,r2
    21cc:	1039883a 	mov	fp,r2
    21d0:	0200090e 	bge	zero,r8,21f8 <___vfprintf_internal_r+0x4bc>
    21d4:	400f883a 	mov	r7,r8
    21d8:	a009883a 	mov	r4,r20
    21dc:	880b883a 	mov	r5,r17
    21e0:	01800804 	movi	r6,32
    21e4:	da001215 	stw	r8,72(sp)
    21e8:	0001cd00 	call	1cd0 <print_repeat>
    21ec:	da001217 	ldw	r8,72(sp)
    21f0:	103fee1e 	bne	r2,zero,21ac <_gp+0xffff75f8>
    21f4:	8221883a 	add	r16,r16,r8
    21f8:	88800117 	ldw	r2,4(r17)
    21fc:	a009883a 	mov	r4,r20
    2200:	880b883a 	mov	r5,r17
    2204:	b00d883a 	mov	r6,r22
    2208:	e00f883a 	mov	r7,fp
    220c:	103ee83a 	callr	r2
    2210:	103fe61e 	bne	r2,zero,21ac <_gp+0xffff75f8>
    2214:	8721883a 	add	r16,r16,fp
    2218:	df000a17 	ldw	fp,40(sp)
    221c:	00001006 	br	2260 <___vfprintf_internal_r+0x524>
    2220:	05c00044 	movi	r23,1
    2224:	04ffffc4 	movi	r19,-1
    2228:	d8000e15 	stw	zero,56(sp)
    222c:	05400284 	movi	r21,10
    2230:	9825883a 	mov	r18,r19
    2234:	d8000c15 	stw	zero,48(sp)
    2238:	d8000b15 	stw	zero,44(sp)
    223c:	b82d883a 	mov	r22,r23
    2240:	00000806 	br	2264 <___vfprintf_internal_r+0x528>
    2244:	dd800b15 	stw	r22,44(sp)
    2248:	05800084 	movi	r22,2
    224c:	00000506 	br	2264 <___vfprintf_internal_r+0x528>
    2250:	00c00044 	movi	r3,1
    2254:	d8c00c15 	stw	r3,48(sp)
    2258:	058000c4 	movi	r22,3
    225c:	00000106 	br	2264 <___vfprintf_internal_r+0x528>
    2260:	002d883a 	mov	r22,zero
    2264:	d8c00f17 	ldw	r3,60(sp)
    2268:	18c00044 	addi	r3,r3,1
    226c:	d8c00f15 	stw	r3,60(sp)
    2270:	003ecc06 	br	1da4 <_gp+0xffff71f0>
    2274:	8005883a 	mov	r2,r16
    2278:	dfc01c17 	ldw	ra,112(sp)
    227c:	df001b17 	ldw	fp,108(sp)
    2280:	ddc01a17 	ldw	r23,104(sp)
    2284:	dd801917 	ldw	r22,100(sp)
    2288:	dd401817 	ldw	r21,96(sp)
    228c:	dd001717 	ldw	r20,92(sp)
    2290:	dcc01617 	ldw	r19,88(sp)
    2294:	dc801517 	ldw	r18,84(sp)
    2298:	dc401417 	ldw	r17,80(sp)
    229c:	dc001317 	ldw	r16,76(sp)
    22a0:	dec01d04 	addi	sp,sp,116
    22a4:	f800283a 	ret

000022a8 <__vfprintf_internal>:
    22a8:	2007883a 	mov	r3,r4
    22ac:	01000034 	movhi	r4,0
    22b0:	210af804 	addi	r4,r4,11232
    22b4:	21000017 	ldw	r4,0(r4)
    22b8:	2805883a 	mov	r2,r5
    22bc:	300f883a 	mov	r7,r6
    22c0:	180b883a 	mov	r5,r3
    22c4:	100d883a 	mov	r6,r2
    22c8:	0001d3c1 	jmpi	1d3c <___vfprintf_internal_r>

000022cc <__sfvwrite_small_dev>:
    22cc:	2880000b 	ldhu	r2,0(r5)
    22d0:	defffa04 	addi	sp,sp,-24
    22d4:	dc000015 	stw	r16,0(sp)
    22d8:	dfc00515 	stw	ra,20(sp)
    22dc:	dd000415 	stw	r20,16(sp)
    22e0:	dcc00315 	stw	r19,12(sp)
    22e4:	dc800215 	stw	r18,8(sp)
    22e8:	dc400115 	stw	r17,4(sp)
    22ec:	1080020c 	andi	r2,r2,8
    22f0:	2821883a 	mov	r16,r5
    22f4:	10001726 	beq	r2,zero,2354 <__sfvwrite_small_dev+0x88>
    22f8:	2880008f 	ldh	r2,2(r5)
    22fc:	10001216 	blt	r2,zero,2348 <__sfvwrite_small_dev+0x7c>
    2300:	2027883a 	mov	r19,r4
    2304:	3025883a 	mov	r18,r6
    2308:	3823883a 	mov	r17,r7
    230c:	05010004 	movi	r20,1024
    2310:	04400b0e 	bge	zero,r17,2340 <__sfvwrite_small_dev+0x74>
    2314:	8140008f 	ldh	r5,2(r16)
    2318:	880f883a 	mov	r7,r17
    231c:	a440010e 	bge	r20,r17,2324 <__sfvwrite_small_dev+0x58>
    2320:	01c10004 	movi	r7,1024
    2324:	9809883a 	mov	r4,r19
    2328:	900d883a 	mov	r6,r18
    232c:	00024440 	call	2444 <_write_r>
    2330:	0080050e 	bge	zero,r2,2348 <__sfvwrite_small_dev+0x7c>
    2334:	88a3c83a 	sub	r17,r17,r2
    2338:	90a5883a 	add	r18,r18,r2
    233c:	003ff406 	br	2310 <_gp+0xffff775c>
    2340:	0005883a 	mov	r2,zero
    2344:	00000406 	br	2358 <__sfvwrite_small_dev+0x8c>
    2348:	8080000b 	ldhu	r2,0(r16)
    234c:	10801014 	ori	r2,r2,64
    2350:	8080000d 	sth	r2,0(r16)
    2354:	00bfffc4 	movi	r2,-1
    2358:	dfc00517 	ldw	ra,20(sp)
    235c:	dd000417 	ldw	r20,16(sp)
    2360:	dcc00317 	ldw	r19,12(sp)
    2364:	dc800217 	ldw	r18,8(sp)
    2368:	dc400117 	ldw	r17,4(sp)
    236c:	dc000017 	ldw	r16,0(sp)
    2370:	dec00604 	addi	sp,sp,24
    2374:	f800283a 	ret

00002378 <memset>:
    2378:	2005883a 	mov	r2,r4
    237c:	2007883a 	mov	r3,r4
    2380:	218d883a 	add	r6,r4,r6
    2384:	19800326 	beq	r3,r6,2394 <memset+0x1c>
    2388:	19400005 	stb	r5,0(r3)
    238c:	18c00044 	addi	r3,r3,1
    2390:	003ffc06 	br	2384 <_gp+0xffff77d0>
    2394:	f800283a 	ret

00002398 <putc>:
    2398:	defffd04 	addi	sp,sp,-12
    239c:	00800034 	movhi	r2,0
    23a0:	dc000115 	stw	r16,4(sp)
    23a4:	dfc00215 	stw	ra,8(sp)
    23a8:	1088b304 	addi	r2,r2,8908
    23ac:	28800115 	stw	r2,4(r5)
    23b0:	00800034 	movhi	r2,0
    23b4:	108af804 	addi	r2,r2,11232
    23b8:	d9000005 	stb	r4,0(sp)
    23bc:	2021883a 	mov	r16,r4
    23c0:	11000017 	ldw	r4,0(r2)
    23c4:	d80d883a 	mov	r6,sp
    23c8:	01c00044 	movi	r7,1
    23cc:	00022cc0 	call	22cc <__sfvwrite_small_dev>
    23d0:	00ffffc4 	movi	r3,-1
    23d4:	10c00126 	beq	r2,r3,23dc <putc+0x44>
    23d8:	8005883a 	mov	r2,r16
    23dc:	dfc00217 	ldw	ra,8(sp)
    23e0:	dc000117 	ldw	r16,4(sp)
    23e4:	dec00304 	addi	sp,sp,12
    23e8:	f800283a 	ret

000023ec <_putc_r>:
    23ec:	defffd04 	addi	sp,sp,-12
    23f0:	00800034 	movhi	r2,0
    23f4:	dc000115 	stw	r16,4(sp)
    23f8:	dfc00215 	stw	ra,8(sp)
    23fc:	1088b304 	addi	r2,r2,8908
    2400:	30800115 	stw	r2,4(r6)
    2404:	00800034 	movhi	r2,0
    2408:	108af804 	addi	r2,r2,11232
    240c:	11000017 	ldw	r4,0(r2)
    2410:	2821883a 	mov	r16,r5
    2414:	01c00044 	movi	r7,1
    2418:	300b883a 	mov	r5,r6
    241c:	d80d883a 	mov	r6,sp
    2420:	dc000005 	stb	r16,0(sp)
    2424:	00022cc0 	call	22cc <__sfvwrite_small_dev>
    2428:	00ffffc4 	movi	r3,-1
    242c:	10c00126 	beq	r2,r3,2434 <_putc_r+0x48>
    2430:	8005883a 	mov	r2,r16
    2434:	dfc00217 	ldw	ra,8(sp)
    2438:	dc000117 	ldw	r16,4(sp)
    243c:	dec00304 	addi	sp,sp,12
    2440:	f800283a 	ret

00002444 <_write_r>:
    2444:	defffd04 	addi	sp,sp,-12
    2448:	dc000015 	stw	r16,0(sp)
    244c:	04000034 	movhi	r16,0
    2450:	dc400115 	stw	r17,4(sp)
    2454:	840b5404 	addi	r16,r16,11600
    2458:	2023883a 	mov	r17,r4
    245c:	2809883a 	mov	r4,r5
    2460:	300b883a 	mov	r5,r6
    2464:	380d883a 	mov	r6,r7
    2468:	dfc00215 	stw	ra,8(sp)
    246c:	80000015 	stw	zero,0(r16)
    2470:	00028680 	call	2868 <write>
    2474:	00ffffc4 	movi	r3,-1
    2478:	10c0031e 	bne	r2,r3,2488 <_write_r+0x44>
    247c:	80c00017 	ldw	r3,0(r16)
    2480:	18000126 	beq	r3,zero,2488 <_write_r+0x44>
    2484:	88c00015 	stw	r3,0(r17)
    2488:	dfc00217 	ldw	ra,8(sp)
    248c:	dc400117 	ldw	r17,4(sp)
    2490:	dc000017 	ldw	r16,0(sp)
    2494:	dec00304 	addi	sp,sp,12
    2498:	f800283a 	ret

0000249c <__muldi3>:
    249c:	defff604 	addi	sp,sp,-40
    24a0:	dd800615 	stw	r22,24(sp)
    24a4:	dd400515 	stw	r21,20(sp)
    24a8:	25bfffcc 	andi	r22,r4,65535
    24ac:	357fffcc 	andi	r21,r6,65535
    24b0:	dc400115 	stw	r17,4(sp)
    24b4:	2022d43a 	srli	r17,r4,16
    24b8:	dcc00315 	stw	r19,12(sp)
    24bc:	dc800215 	stw	r18,8(sp)
    24c0:	2027883a 	mov	r19,r4
    24c4:	2825883a 	mov	r18,r5
    24c8:	a809883a 	mov	r4,r21
    24cc:	b00b883a 	mov	r5,r22
    24d0:	dfc00915 	stw	ra,36(sp)
    24d4:	df000815 	stw	fp,32(sp)
    24d8:	ddc00715 	stw	r23,28(sp)
    24dc:	3839883a 	mov	fp,r7
    24e0:	302ed43a 	srli	r23,r6,16
    24e4:	dd000415 	stw	r20,16(sp)
    24e8:	dc000015 	stw	r16,0(sp)
    24ec:	3029883a 	mov	r20,r6
    24f0:	00017800 	call	1780 <__mulsi3>
    24f4:	a809883a 	mov	r4,r21
    24f8:	880b883a 	mov	r5,r17
    24fc:	1021883a 	mov	r16,r2
    2500:	00017800 	call	1780 <__mulsi3>
    2504:	880b883a 	mov	r5,r17
    2508:	b809883a 	mov	r4,r23
    250c:	102b883a 	mov	r21,r2
    2510:	00017800 	call	1780 <__mulsi3>
    2514:	b809883a 	mov	r4,r23
    2518:	b00b883a 	mov	r5,r22
    251c:	1023883a 	mov	r17,r2
    2520:	00017800 	call	1780 <__mulsi3>
    2524:	8012d43a 	srli	r9,r16,16
    2528:	a885883a 	add	r2,r21,r2
    252c:	1251883a 	add	r8,r2,r9
    2530:	4540022e 	bgeu	r8,r21,253c <__muldi3+0xa0>
    2534:	00800074 	movhi	r2,1
    2538:	88a3883a 	add	r17,r17,r2
    253c:	4006d43a 	srli	r3,r8,16
    2540:	4010943a 	slli	r8,r8,16
    2544:	9809883a 	mov	r4,r19
    2548:	e00b883a 	mov	r5,fp
    254c:	843fffcc 	andi	r16,r16,65535
    2550:	88e3883a 	add	r17,r17,r3
    2554:	4421883a 	add	r16,r8,r16
    2558:	00017800 	call	1780 <__mulsi3>
    255c:	a009883a 	mov	r4,r20
    2560:	900b883a 	mov	r5,r18
    2564:	1027883a 	mov	r19,r2
    2568:	00017800 	call	1780 <__mulsi3>
    256c:	9885883a 	add	r2,r19,r2
    2570:	1447883a 	add	r3,r2,r17
    2574:	8005883a 	mov	r2,r16
    2578:	dfc00917 	ldw	ra,36(sp)
    257c:	df000817 	ldw	fp,32(sp)
    2580:	ddc00717 	ldw	r23,28(sp)
    2584:	dd800617 	ldw	r22,24(sp)
    2588:	dd400517 	ldw	r21,20(sp)
    258c:	dd000417 	ldw	r20,16(sp)
    2590:	dcc00317 	ldw	r19,12(sp)
    2594:	dc800217 	ldw	r18,8(sp)
    2598:	dc400117 	ldw	r17,4(sp)
    259c:	dc000017 	ldw	r16,0(sp)
    25a0:	dec00a04 	addi	sp,sp,40
    25a4:	f800283a 	ret

000025a8 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    25a8:	00026441 	jmpi	2644 <alt_iic_isr_register>

000025ac <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25ac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25b0:	00bfff84 	movi	r2,-2
    25b4:	3084703a 	and	r2,r6,r2
    25b8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    25bc:	00800034 	movhi	r2,0
    25c0:	108b5504 	addi	r2,r2,11604
    25c4:	01000044 	movi	r4,1
    25c8:	10c00017 	ldw	r3,0(r2)
    25cc:	214a983a 	sll	r5,r4,r5
    25d0:	28cab03a 	or	r5,r5,r3
    25d4:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    25d8:	10800017 	ldw	r2,0(r2)
    25dc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    25e0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    25e4:	0005883a 	mov	r2,zero
    25e8:	f800283a 	ret

000025ec <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25ec:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25f0:	00bfff84 	movi	r2,-2
    25f4:	3084703a 	and	r2,r6,r2
    25f8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    25fc:	00800034 	movhi	r2,0
    2600:	108b5504 	addi	r2,r2,11604
    2604:	013fff84 	movi	r4,-2
    2608:	10c00017 	ldw	r3,0(r2)
    260c:	214a183a 	rol	r5,r4,r5
    2610:	28ca703a 	and	r5,r5,r3
    2614:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2618:	10800017 	ldw	r2,0(r2)
    261c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2620:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    2624:	0005883a 	mov	r2,zero
    2628:	f800283a 	ret

0000262c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    262c:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2630:	00c00044 	movi	r3,1
    2634:	194a983a 	sll	r5,r3,r5
    2638:	1144703a 	and	r2,r2,r5
}
    263c:	1004c03a 	cmpne	r2,r2,zero
    2640:	f800283a 	ret

00002644 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2644:	00c007c4 	movi	r3,31
    2648:	19401616 	blt	r3,r5,26a4 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    264c:	defffe04 	addi	sp,sp,-8
    2650:	dfc00115 	stw	ra,4(sp)
    2654:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2658:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    265c:	00ffff84 	movi	r3,-2
    2660:	80c6703a 	and	r3,r16,r3
    2664:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    2668:	280490fa 	slli	r2,r5,3
    266c:	00c00034 	movhi	r3,0
    2670:	18cd5904 	addi	r3,r3,13668
    2674:	1891883a 	add	r8,r3,r2
    2678:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
    267c:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2680:	30000226 	beq	r6,zero,268c <alt_iic_isr_register+0x48>
    2684:	00025ac0 	call	25ac <alt_ic_irq_enable>
    2688:	00000106 	br	2690 <alt_iic_isr_register+0x4c>
    268c:	00025ec0 	call	25ec <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2690:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	dc000017 	ldw	r16,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    26a4:	00bffa84 	movi	r2,-22
    26a8:	f800283a 	ret

000026ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    26ac:	deffff04 	addi	sp,sp,-4
    26b0:	01000034 	movhi	r4,0
    26b4:	01400034 	movhi	r5,0
    26b8:	dfc00015 	stw	ra,0(sp)
    26bc:	210ab504 	addi	r4,r4,10964
    26c0:	294afd04 	addi	r5,r5,11252

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    26c4:	2140061e 	bne	r4,r5,26e0 <alt_load+0x34>
    26c8:	01000034 	movhi	r4,0
    26cc:	01400034 	movhi	r5,0
    26d0:	21000804 	addi	r4,r4,32
    26d4:	29400804 	addi	r5,r5,32
    26d8:	2140141e 	bne	r4,r5,272c <alt_load+0x80>
    26dc:	00000d06 	br	2714 <alt_load+0x68>
    26e0:	00c00034 	movhi	r3,0
    26e4:	18cafd04 	addi	r3,r3,11252
    26e8:	00bfff04 	movi	r2,-4
    26ec:	1907c83a 	sub	r3,r3,r4
    26f0:	1886703a 	and	r3,r3,r2
    26f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    26f8:	10fff326 	beq	r2,r3,26c8 <_gp+0xffff7b14>
    26fc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2700:	39c00017 	ldw	r7,0(r7)
    2704:	110d883a 	add	r6,r2,r4
    2708:	10800104 	addi	r2,r2,4
    270c:	31c00015 	stw	r7,0(r6)
    2710:	003ff906 	br	26f8 <_gp+0xffff7b44>
    2714:	01000034 	movhi	r4,0
    2718:	01400034 	movhi	r5,0
    271c:	210a7104 	addi	r4,r4,10692
    2720:	294a7104 	addi	r5,r5,10692

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2724:	2140121e 	bne	r4,r5,2770 <alt_load+0xc4>
    2728:	00000d06 	br	2760 <alt_load+0xb4>
    272c:	00c00034 	movhi	r3,0
    2730:	18c05404 	addi	r3,r3,336
    2734:	00bfff04 	movi	r2,-4
    2738:	1907c83a 	sub	r3,r3,r4
    273c:	1886703a 	and	r3,r3,r2
    2740:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2744:	10fff326 	beq	r2,r3,2714 <_gp+0xffff7b60>
    2748:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    274c:	39c00017 	ldw	r7,0(r7)
    2750:	110d883a 	add	r6,r2,r4
    2754:	10800104 	addi	r2,r2,4
    2758:	31c00015 	stw	r7,0(r6)
    275c:	003ff906 	br	2744 <_gp+0xffff7b90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2760:	00029b40 	call	29b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2764:	dfc00017 	ldw	ra,0(sp)
    2768:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    276c:	00029b81 	jmpi	29b8 <alt_icache_flush_all>
    2770:	00c00034 	movhi	r3,0
    2774:	18cab504 	addi	r3,r3,10964
    2778:	00bfff04 	movi	r2,-4
    277c:	1907c83a 	sub	r3,r3,r4
    2780:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2784:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2788:	10fff526 	beq	r2,r3,2760 <_gp+0xffff7bac>
    278c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2790:	39c00017 	ldw	r7,0(r7)
    2794:	110d883a 	add	r6,r2,r4
    2798:	10800104 	addi	r2,r2,4
    279c:	31c00015 	stw	r7,0(r6)
    27a0:	003ff906 	br	2788 <_gp+0xffff7bd4>

000027a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    27a4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    27a8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    27ac:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    27b0:	00028d40 	call	28d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    27b4:	00028f40 	call	28f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    27b8:	d1206b17 	ldw	r4,-32340(gp)
    27bc:	d1606a17 	ldw	r5,-32344(gp)
    27c0:	d1a06917 	ldw	r6,-32348(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    27c4:	dfc00017 	ldw	ra,0(sp)
    27c8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    27cc:	00012381 	jmpi	1238 <main>

000027d0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    27d0:	defffd04 	addi	sp,sp,-12
    27d4:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    27d8:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    27dc:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    27e0:	01000034 	movhi	r4,0
    27e4:	210afb04 	addi	r4,r4,11244
    27e8:	d80b883a 	mov	r5,sp
    27ec:	01800044 	movi	r6,1
    27f0:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    27f4:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    27f8:	00028f80 	call	28f8 <altera_avalon_jtag_uart_write>
    27fc:	00ffffc4 	movi	r3,-1
    2800:	10c00126 	beq	r2,r3,2808 <alt_putchar+0x38>
        return -1;
    }
    return c;
    2804:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    2808:	dfc00217 	ldw	ra,8(sp)
    280c:	dc000117 	ldw	r16,4(sp)
    2810:	dec00304 	addi	sp,sp,12
    2814:	f800283a 	ret

00002818 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2818:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    281c:	00bfff84 	movi	r2,-2
    2820:	2884703a 	and	r2,r5,r2
    2824:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2828:	d0a00d17 	ldw	r2,-32716(gp)
    282c:	00ffff04 	movi	r3,-4
    2830:	108000c4 	addi	r2,r2,3
    2834:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2838:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    283c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2840:	1109883a 	add	r4,r2,r4
    2844:	18d00004 	addi	r3,r3,16384
    2848:	1900032e 	bgeu	r3,r4,2858 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    284c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    2850:	00bfffc4 	movi	r2,-1
    2854:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    2858:	d1200d15 	stw	r4,-32716(gp)
    285c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    2860:	f800283a 	ret

00002864 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    2864:	000292c1 	jmpi	292c <alt_busy_sleep>

00002868 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2868:	00800044 	movi	r2,1
    286c:	20800226 	beq	r4,r2,2878 <write+0x10>
    2870:	00800084 	movi	r2,2
    2874:	2080041e 	bne	r4,r2,2888 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2878:	01000034 	movhi	r4,0
    287c:	210afb04 	addi	r4,r4,11244
    2880:	000f883a 	mov	r7,zero
    2884:	00028f81 	jmpi	28f8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2888:	00800034 	movhi	r2,0
    288c:	108afc04 	addi	r2,r2,11248
    2890:	10800017 	ldw	r2,0(r2)
    2894:	10000926 	beq	r2,zero,28bc <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2898:	deffff04 	addi	sp,sp,-4
    289c:	dfc00015 	stw	ra,0(sp)
    28a0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    28a4:	00c01444 	movi	r3,81
    28a8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    28ac:	00bfffc4 	movi	r2,-1
    28b0:	dfc00017 	ldw	ra,0(sp)
    28b4:	dec00104 	addi	sp,sp,4
    28b8:	f800283a 	ret
    28bc:	00800034 	movhi	r2,0
    28c0:	108b5404 	addi	r2,r2,11600
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    28c4:	00c01444 	movi	r3,81
    28c8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    28cc:	00bfffc4 	movi	r2,-1
    28d0:	f800283a 	ret

000028d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    28d4:	deffff04 	addi	sp,sp,-4
    28d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    28dc:	00029bc0 	call	29bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    28e0:	00800044 	movi	r2,1
    28e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    28e8:	dfc00017 	ldw	ra,0(sp)
    28ec:	dec00104 	addi	sp,sp,4
    28f0:	f800283a 	ret

000028f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    28f4:	f800283a 	ret

000028f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    28f8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    28fc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2900:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2904:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2908:	2980072e 	bgeu	r5,r6,2928 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    290c:	38c00037 	ldwio	r3,0(r7)
    2910:	18ffffec 	andhi	r3,r3,65535
    2914:	183ffc26 	beq	r3,zero,2908 <_gp+0xffff7d54>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2918:	28c00007 	ldb	r3,0(r5)
    291c:	20c00035 	stwio	r3,0(r4)
    2920:	29400044 	addi	r5,r5,1
    2924:	003ff806 	br	2908 <_gp+0xffff7d54>

  return count;
}
    2928:	f800283a 	ret

0000292c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    292c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2930:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2934:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2938:	dc000015 	stw	r16,0(sp)
    293c:	dfc00115 	stw	ra,4(sp)
    2940:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2944:	00017700 	call	1770 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2948:	10001026 	beq	r2,zero,298c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    294c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2950:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2954:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2958:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    295c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2960:	297fffc4 	addi	r5,r5,-1
    2964:	283ffe1e 	bne	r5,zero,2960 <_gp+0xffff7dac>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2968:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    296c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2970:	18bffb16 	blt	r3,r2,2960 <_gp+0xffff7dac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    2974:	8009883a 	mov	r4,r16
    2978:	01400144 	movi	r5,5
    297c:	00017800 	call	1780 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2980:	10bfffc4 	addi	r2,r2,-1
    2984:	103ffe1e 	bne	r2,zero,2980 <_gp+0xffff7dcc>
    2988:	00000506 	br	29a0 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    298c:	8009883a 	mov	r4,r16
    2990:	01400144 	movi	r5,5
    2994:	00017800 	call	1780 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2998:	10bfffc4 	addi	r2,r2,-1
    299c:	00bffe16 	blt	zero,r2,2998 <_gp+0xffff7de4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    29a0:	0005883a 	mov	r2,zero
    29a4:	dfc00117 	ldw	ra,4(sp)
    29a8:	dc000017 	ldw	r16,0(sp)
    29ac:	dec00204 	addi	sp,sp,8
    29b0:	f800283a 	ret

000029b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    29b4:	f800283a 	ret

000029b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    29b8:	f800283a 	ret

000029bc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    29bc:	000170fa 	wrctl	ienable,zero
    29c0:	f800283a 	ret
