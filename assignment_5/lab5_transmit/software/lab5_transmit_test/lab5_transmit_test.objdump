
lab5_transmit_test.elf:     file format elf32-littlenios2
lab5_transmit_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000009e4 memsz 0x000009e4 flags r-x
    LOAD off    0x00001a04 vaddr 0x00000a04 paddr 0x00000a78 align 2**12
         filesz 0x00000074 memsz 0x00000074 flags rw-
    LOAD off    0x00001aec vaddr 0x00000aec paddr 0x00000aec align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001a78  2**0
                  CONTENTS
  2 .text         00000994  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000009b4  000009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000074  00000a04  00000a78  00001a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000aec  00000aec  00001aec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000afc  00000afc  00001a78  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002c0  00000000  00000000  00001aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002478  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000100e  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000010bc  00000000  00000000  000051e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000434  00000000  00000000  000062a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c0f  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000930  00000000  00000000  000072e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00007c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00007c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008f49  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00008f4c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008f4f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008f50  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00008f51  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00008f5a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00008f63  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00008f6c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00008f73  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00008fac  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006be72  00000000  00000000  0000c61f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000009b4 l    d  .rodata	00000000 .rodata
00000a04 l    d  .rwdata	00000000 .rwdata
00000aec l    d  .bss	00000000 .bss
00000afc l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab5_transmit_test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000830 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000860 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000640 g     F .text	0000002c alt_main
00000a78 g       *ABS*	00000000 __flash_rwdata_start
000000a8 g     F .text	0000003c writeBuffer
000006b4 g     F .text	00000038 alt_putstr
00000a5c g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000af8 g     O .bss	00000004 errno
00000af0 g     O .bss	00000004 alt_argv
00008a5c g       *ABS*	00000000 _gp
000006ec g     F .text	00000004 usleep
00000a04 g     O .rwdata	00000030 alt_fd_list
00000714 g     F .text	0000005c altera_avalon_jtag_uart_read
0000097c g     F .text	00000008 .hidden __udivsi3
00000a60 g     O .rwdata	00000004 alt_max_fd
0000005c g     F .text	0000004c readBuffer
00000afc g       *ABS*	00000000 __bss_end
00000504 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000a34 g     O .rwdata	00000028 alt_dev_null
0000082c g     F .text	00000004 alt_dcache_flush_all
00000a78 g       *ABS*	00000000 __ram_rwdata_end
00000a64 g     O .rwdata	00000008 alt_dev_list
00000a04 g       *ABS*	00000000 __ram_rodata_end
00000984 g     F .text	00000008 .hidden __umodsi3
00000afc g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00000770 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000710 g     F .text	00000004 alt_sys_init
0000098c g     F .text	00000028 .hidden __mulsi3
00000a04 g       *ABS*	00000000 __ram_rwdata_start
000009b4 g       *ABS*	00000000 __ram_rodata_start
000007a4 g     F .text	00000088 alt_busy_sleep
00000afc g       *ABS*	00000000 __alt_stack_base
00000aec g       *ABS*	00000000 __bss_start
000002ec g     F .text	000000a8 printIfCharacterReceive
00000394 g     F .text	0000004c main
00000aec g     O .bss	00000004 alt_envp
00000194 g     F .text	00000158 transmitIfBufferNotEmpty
00000a74 g     O .rwdata	00000004 alt_errno
000008cc g     F .text	00000054 .hidden __divsi3
000009b4 g       *ABS*	00000000 __flash_rodata_start
000006f0 g     F .text	00000020 alt_irq_init
00000134 g     F .text	00000060 readKeyboardToBuffer
00000af4 g     O .bss	00000004 alt_argc
00000a6c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000a78 g       *ABS*	00000000 _edata
00000afc g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000000e4 g     F .text	0000003c isEvenParity
00000120 g     F .text	00000014 getParityBit
0000083c g     F .text	00000008 altera_nios2_qsys_irq_init
00000920 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000844 g     F .text	0000001c strlen
0000066c g     F .text	00000048 alt_putchar
00000838 g     F .text	00000004 alt_icache_flush_all
000003e0 g     F .text	00000124 fcntl
00000548 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a29714 	ori	gp,gp,35420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1082bb14 	ori	r2,r2,2796

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c2bf14 	ori	r3,r3,2812

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff75e8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00005480 	call	548 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00006400 	call	640 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff75fc>

0000005c <readBuffer>:
#define data_bus_LEDs (volatile char *) 0x00003080


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
  5c:	20c00017 	ldw	r3,0(r4)
  60:	01401804 	movi	r5,96
  64:	18800003 	ldbu	r2,0(r3)
  68:	11c03fcc 	andi	r7,r2,255
  6c:	39c0201c 	xori	r7,r7,128
  70:	39ffe004 	addi	r7,r7,-128
  74:	39400a26 	beq	r7,r5,a0 <readBuffer+0x44>
  78:	38000a26 	beq	r7,zero,a4 <readBuffer+0x48>
        return '\0';
    } else {
        char c = **pTransmit;
        **pTransmit = 0x60;
  7c:	19400005 	stb	r5,0(r3)

        if((*pTransmit - pBuffer) == (BUFFER_SIZE - 1)) {
  80:	20c00017 	ldw	r3,0(r4)
  84:	197ff3c4 	addi	r5,r3,-49
  88:	2980021e 	bne	r5,r6,94 <readBuffer+0x38>
            *pTransmit = pBuffer;
  8c:	21800015 	stw	r6,0(r4)
  90:	f800283a 	ret
        } else {
            *pTransmit = *pTransmit + sizeof(char);
  94:	18c00044 	addi	r3,r3,1
  98:	20c00015 	stw	r3,0(r4)
  9c:	f800283a 	ret


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
        return '\0';
  a0:	0005883a 	mov	r2,zero
        } else {
            *pTransmit = *pTransmit + sizeof(char);
        }
        return c;
    }
}
  a4:	f800283a 	ret

000000a8 <writeBuffer>:

void writeBuffer(char c, char** pBufferHead, char** pBuffer) {
    if(!(**pBufferHead == 0x60 || **pBufferHead == '\0')) return;
  a8:	28800017 	ldw	r2,0(r5)
  ac:	01c01804 	movi	r7,96
  b0:	10c00007 	ldb	r3,0(r2)
  b4:	19c00126 	beq	r3,r7,bc <writeBuffer+0x14>
  b8:	1800091e 	bne	r3,zero,e0 <writeBuffer+0x38>

    *(*pBufferHead) = c;
  bc:	11000005 	stb	r4,0(r2)
    if((*pBufferHead - *pBuffer) == (BUFFER_SIZE - 1)) {
  c0:	28800017 	ldw	r2,0(r5)
  c4:	30c00017 	ldw	r3,0(r6)
  c8:	113ff3c4 	addi	r4,r2,-49
  cc:	20c0021e 	bne	r4,r3,d8 <writeBuffer+0x30>
        *pBufferHead = *pBuffer;
  d0:	28c00015 	stw	r3,0(r5)
  d4:	f800283a 	ret
    } else {
        *pBufferHead = *pBufferHead + sizeof(char);
  d8:	10800044 	addi	r2,r2,1
  dc:	28800015 	stw	r2,0(r5)
  e0:	f800283a 	ret

000000e4 <isEvenParity>:
unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
        int bit = (data >> i) & 0x01;
  e4:	21003fcc 	andi	r4,r4,255
  e8:	2100201c 	xori	r4,r4,128

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
  ec:	0007883a 	mov	r3,zero
        *pBufferHead = *pBufferHead + sizeof(char);
    }
}

unsigned int isEvenParity(char data) {
    int count = 0;
  f0:	0005883a 	mov	r2,zero

    int i;
    for(i = 0; i < 7; i++) {
        int bit = (data >> i) & 0x01;
  f4:	213fe004 	addi	r4,r4,-128

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
  f8:	018001c4 	movi	r6,7
        int bit = (data >> i) & 0x01;
  fc:	20cbd83a 	sra	r5,r4,r3
 100:	2940004c 	andi	r5,r5,1
        if(bit) {
 104:	28000126 	beq	r5,zero,10c <isEvenParity+0x28>
            count++;
 108:	10800044 	addi	r2,r2,1

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
 10c:	18c00044 	addi	r3,r3,1
 110:	19bffa1e 	bne	r3,r6,fc <_gp+0xffff76a0>
        int bit = (data >> i) & 0x01;
        if(bit) {
            count++;
        }
    }
    return ((count + 1) % 2);
 114:	10800044 	addi	r2,r2,1
}
 118:	1080004c 	andi	r2,r2,1
 11c:	f800283a 	ret

00000120 <getParityBit>:

unsigned int getParityBit(char data) {
    return data < 7;
 120:	21003fcc 	andi	r4,r4,255
 124:	2100201c 	xori	r4,r4,128
 128:	213fe004 	addi	r4,r4,-128
 12c:	208001d0 	cmplti	r2,r4,7
}
 130:	f800283a 	ret

00000134 <readKeyboardToBuffer>:

void readKeyboardToBuffer(char** pBufferHead, char** pBuffer) {
 134:	defffd04 	addi	sp,sp,-12
 138:	dc400115 	stw	r17,4(sp)
 13c:	dc000015 	stw	r16,0(sp)
 140:	2023883a 	mov	r17,r4
 144:	dfc00215 	stw	ra,8(sp)
 148:	2821883a 	mov	r16,r5
	char newC = alt_getchar();
 14c:	00005040 	call	504 <alt_getchar>
	if(newC > 31 && newC < 128) {
 150:	11003fcc 	andi	r4,r2,255
 154:	2100201c 	xori	r4,r4,128
 158:	213fe004 	addi	r4,r4,-128
 15c:	00c007c4 	movi	r3,31
 160:	1900070e 	bge	r3,r4,180 <readKeyboardToBuffer+0x4c>
		writeBuffer(newC, pBufferHead, pBuffer);
 164:	880b883a 	mov	r5,r17
 168:	800d883a 	mov	r6,r16
	}
}
 16c:	dfc00217 	ldw	ra,8(sp)
 170:	dc400117 	ldw	r17,4(sp)
 174:	dc000017 	ldw	r16,0(sp)
 178:	dec00304 	addi	sp,sp,12
}

void readKeyboardToBuffer(char** pBufferHead, char** pBuffer) {
	char newC = alt_getchar();
	if(newC > 31 && newC < 128) {
		writeBuffer(newC, pBufferHead, pBuffer);
 17c:	00000a81 	jmpi	a8 <writeBuffer>
	}
}
 180:	dfc00217 	ldw	ra,8(sp)
 184:	dc400117 	ldw	r17,4(sp)
 188:	dc000017 	ldw	r16,0(sp)
 18c:	dec00304 	addi	sp,sp,12
 190:	f800283a 	ret

00000194 <transmitIfBufferNotEmpty>:

void transmitIfBufferNotEmpty(char** pTransmit, char* pBufferHead, char* pBuffer, int* write) {
 194:	defffc04 	addi	sp,sp,-16
 198:	dc000015 	stw	r16,0(sp)
 19c:	dfc00315 	stw	ra,12(sp)
 1a0:	dc800215 	stw	r18,8(sp)
 1a4:	dc400115 	stw	r17,4(sp)
	if(*load) {
 1a8:	00cc1804 	movi	r3,12384
 1ac:	18800003 	ldbu	r2,0(r3)
	if(newC > 31 && newC < 128) {
		writeBuffer(newC, pBufferHead, pBuffer);
	}
}

void transmitIfBufferNotEmpty(char** pTransmit, char* pBufferHead, char* pBuffer, int* write) {
 1b0:	3821883a 	mov	r16,r7
	if(*load) {
 1b4:	10803fcc 	andi	r2,r2,255
 1b8:	1080201c 	xori	r2,r2,128
 1bc:	10bfe004 	addi	r2,r2,-128
 1c0:	10000126 	beq	r2,zero,1c8 <transmitIfBufferNotEmpty+0x34>
		  *load = 0;
 1c4:	18000005 	stb	zero,0(r3)
	  }

	  char c = '\0';
	  if(*write) {
 1c8:	80800017 	ldw	r2,0(r16)
 1cc:	10003426 	beq	r2,zero,2a0 <transmitIfBufferNotEmpty+0x10c>
		  c = readBuffer(pTransmit, pBufferHead, pBuffer);
 1d0:	000005c0 	call	5c <readBuffer>
 1d4:	1025883a 	mov	r18,r2
		  if(c != '\0' && c != 0x60 ) {
 1d8:	94403fcc 	andi	r17,r18,255
 1dc:	8c40201c 	xori	r17,r17,128
 1e0:	8c7fe004 	addi	r17,r17,-128
 1e4:	88002e26 	beq	r17,zero,2a0 <transmitIfBufferNotEmpty+0x10c>
 1e8:	00801804 	movi	r2,96
 1ec:	88802c26 	beq	r17,r2,2a0 <transmitIfBufferNotEmpty+0x10c>
			  alt_putstr("writing: ");
 1f0:	01000034 	movhi	r4,0
 1f4:	21026d04 	addi	r4,r4,2484
 1f8:	00006b40 	call	6b4 <alt_putstr>
			  alt_putchar(c);
 1fc:	8809883a 	mov	r4,r17
 200:	000066c0 	call	66c <alt_putchar>
			  alt_putstr("\n");
 204:	01000034 	movhi	r4,0
 208:	21027004 	addi	r4,r4,2496
 20c:	00006b40 	call	6b4 <alt_putstr>
			  *write = 0;
			  *data_bus_output = c;
 210:	008c1c04 	movi	r2,12400
		  c = readBuffer(pTransmit, pBufferHead, pBuffer);
		  if(c != '\0' && c != 0x60 ) {
			  alt_putstr("writing: ");
			  alt_putchar(c);
			  alt_putstr("\n");
			  *write = 0;
 214:	80000015 	stw	zero,0(r16)
			  *data_bus_output = c;
			  usleep(1000);
 218:	0100fa04 	movi	r4,1000
		  if(c != '\0' && c != 0x60 ) {
			  alt_putstr("writing: ");
			  alt_putchar(c);
			  alt_putstr("\n");
			  *write = 0;
			  *data_bus_output = c;
 21c:	14800005 	stb	r18,0(r2)
			  usleep(1000);
 220:	00006ec0 	call	6ec <usleep>
			  *load = 1;
 224:	00cc1804 	movi	r3,12384
 228:	01000044 	movi	r4,1
 22c:	19000005 	stb	r4,0(r3)
			  *transmit_enable = 1;
 230:	008c1004 	movi	r2,12352
 234:	11000005 	stb	r4,0(r2)
			  //alt_putchar(c);
			  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 238:	19800003 	ldbu	r6,0(r3)
 23c:	10800003 	ldbu	r2,0(r2)
 240:	00cc1404 	movi	r3,12368
 244:	18c00003 	ldbu	r3,0(r3)
 248:	010c2404 	movi	r4,12432
 24c:	10803fcc 	andi	r2,r2,255
 250:	21000003 	ldbu	r4,0(r4)
 254:	1080201c 	xori	r2,r2,128
 258:	10bfe004 	addi	r2,r2,-128
 25c:	108b883a 	add	r5,r2,r2
 260:	18803fcc 	andi	r2,r3,255
 264:	1080201c 	xori	r2,r2,128
 268:	20c03fcc 	andi	r3,r4,255
 26c:	10bfe004 	addi	r2,r2,-128
 270:	18c0201c 	xori	r3,r3,128
 274:	1085883a 	add	r2,r2,r2
 278:	18ffe004 	addi	r3,r3,-128
 27c:	180690fa 	slli	r3,r3,3
 280:	1085883a 	add	r2,r2,r2
 284:	2884b03a 	or	r2,r5,r2
 288:	1184b03a 	or	r2,r2,r6
 28c:	10c4b03a 	or	r2,r2,r3
 290:	00cc2004 	movi	r3,12416
 294:	18800005 	stb	r2,0(r3)
			  //*data_bus_LEDs = c;
			  usleep(500);
 298:	01007d04 	movi	r4,500
 29c:	00006ec0 	call	6ec <usleep>
		  }
	  }
	  if(*character_sent) {
 2a0:	008c1404 	movi	r2,12368
 2a4:	10800003 	ldbu	r2,0(r2)
 2a8:	10803fcc 	andi	r2,r2,255
 2ac:	1080201c 	xori	r2,r2,128
 2b0:	10bfe004 	addi	r2,r2,-128
 2b4:	10000726 	beq	r2,zero,2d4 <transmitIfBufferNotEmpty+0x140>
		  alt_putstr("char sent\n");
 2b8:	01000034 	movhi	r4,0
 2bc:	21027104 	addi	r4,r4,2500
 2c0:	00006b40 	call	6b4 <alt_putstr>
		  *write = 1;
 2c4:	00800044 	movi	r2,1
 2c8:	80800015 	stw	r2,0(r16)
		  *transmit_enable = 0;
 2cc:	008c1004 	movi	r2,12352
 2d0:	10000005 	stb	zero,0(r2)
	  }
}
 2d4:	dfc00317 	ldw	ra,12(sp)
 2d8:	dc800217 	ldw	r18,8(sp)
 2dc:	dc400117 	ldw	r17,4(sp)
 2e0:	dc000017 	ldw	r16,0(sp)
 2e4:	dec00404 	addi	sp,sp,16
 2e8:	f800283a 	ret

000002ec <printIfCharacterReceive>:

void printIfCharacterReceive(int* read) {
	if(*character_received & *read) {
 2ec:	014c2404 	movi	r5,12432
 2f0:	28800003 	ldbu	r2,0(r5)
 2f4:	10c03fcc 	andi	r3,r2,255
 2f8:	20800017 	ldw	r2,0(r4)
 2fc:	18c0201c 	xori	r3,r3,128
 300:	18ffe004 	addi	r3,r3,-128
 304:	1884703a 	and	r2,r3,r2
 308:	10001626 	beq	r2,zero,364 <printIfCharacterReceive+0x78>
		  *write = 1;
		  *transmit_enable = 0;
	  }
}

void printIfCharacterReceive(int* read) {
 30c:	defffe04 	addi	sp,sp,-8
 310:	dfc00115 	stw	ra,4(sp)
 314:	dc000015 	stw	r16,0(sp)
	if(*character_received & *read) {
		*read = 0;
 318:	20000015 	stw	zero,0(r4)
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
 31c:	008c2804 	movi	r2,12448
 320:	14000003 	ldbu	r16,0(r2)
 324:	84003fcc 	andi	r16,r16,255
 328:	8400201c 	xori	r16,r16,128
 32c:	843fe004 	addi	r16,r16,-128
		char parityBit = getParityBit(cRec);
		char calcParityBit = isEvenParity(cRec);
 330:	8021d07a 	srai	r16,r16,1
 334:	8009883a 	mov	r4,r16
 338:	00000e40 	call	e4 <isEvenParity>
		if(parityBit == calcParityBit) {
 33c:	10803fcc 	andi	r2,r2,255
 340:	1080201c 	xori	r2,r2,128
    }
    return ((count + 1) % 2);
}

unsigned int getParityBit(char data) {
    return data < 7;
 344:	80c001d0 	cmplti	r3,r16,7
	if(*character_received & *read) {
		*read = 0;
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
		char parityBit = getParityBit(cRec);
		char calcParityBit = isEvenParity(cRec);
		if(parityBit == calcParityBit) {
 348:	10bfe004 	addi	r2,r2,-128
 34c:	18800d1e 	bne	r3,r2,384 <printIfCharacterReceive+0x98>
			alt_putchar(cRec);
 350:	8009883a 	mov	r4,r16
		}
	} else if(!(*character_received)) {
		*read = 1;
	}
}
 354:	dfc00117 	ldw	ra,4(sp)
 358:	dc000017 	ldw	r16,0(sp)
 35c:	dec00204 	addi	sp,sp,8
		*read = 0;
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
		char parityBit = getParityBit(cRec);
		char calcParityBit = isEvenParity(cRec);
		if(parityBit == calcParityBit) {
			alt_putchar(cRec);
 360:	000066c1 	jmpi	66c <alt_putchar>
		}
	} else if(!(*character_received)) {
 364:	28800003 	ldbu	r2,0(r5)
 368:	10803fcc 	andi	r2,r2,255
 36c:	1080201c 	xori	r2,r2,128
 370:	10bfe004 	addi	r2,r2,-128
 374:	1000061e 	bne	r2,zero,390 <printIfCharacterReceive+0xa4>
		*read = 1;
 378:	00800044 	movi	r2,1
 37c:	20800015 	stw	r2,0(r4)
 380:	f800283a 	ret
	}
}
 384:	dfc00117 	ldw	ra,4(sp)
 388:	dc000017 	ldw	r16,0(sp)
 38c:	dec00204 	addi	sp,sp,8
 390:	f800283a 	ret

00000394 <main>:


int main() {
 394:	deffff04 	addi	sp,sp,-4
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 398:	0009883a 	mov	r4,zero
 39c:	01400104 	movi	r5,4
 3a0:	01900004 	movi	r6,16384
		*read = 1;
	}
}


int main() {
 3a4:	dfc00015 	stw	ra,0(sp)
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 3a8:	00003e00 	call	3e0 <fcntl>

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
 3ac:	01000034 	movhi	r4,0
 3b0:	21027404 	addi	r4,r4,2512
 3b4:	00006b40 	call	6b4 <alt_putstr>

	char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
	char* pBufferHead = pBuffer;
	char* pTransmit = pBuffer;

	*load = 0;
 3b8:	008c1804 	movi	r2,12384
 3bc:	10000005 	stb	zero,0(r2)
	*transmit_enable = 0;
 3c0:	008c1004 	movi	r2,12352
 3c4:	10000005 	stb	zero,0(r2)
	*data_bus_output = 0xFF;
 3c8:	00ffffc4 	movi	r3,-1
 3cc:	008c1c04 	movi	r2,12400
 3d0:	10c00005 	stb	r3,0(r2)
	*data_bus_LEDs = 0x00;
 3d4:	008c2004 	movi	r2,12416
 3d8:	10000005 	stb	zero,0(r2)
	  printIfCharacterReceive(&read);

	  //******Debug outputs
	  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
	  //*data_bus_LEDs = 0xFF;*/
  }
 3dc:	003fff06 	br	3dc <_gp+0xffff7980>

000003e0 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 3e0:	defff904 	addi	sp,sp,-28
 3e4:	dcc00315 	stw	r19,12(sp)
 3e8:	2027883a 	mov	r19,r4
 3ec:	dfc00415 	stw	ra,16(sp)
 3f0:	dc800215 	stw	r18,8(sp)
 3f4:	dc400115 	stw	r17,4(sp)
 3f8:	dc000015 	stw	r16,0(sp)
 3fc:	d9800515 	stw	r6,20(sp)
 400:	d9c00615 	stw	r7,24(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404:	20002d16 	blt	r4,zero,4bc <fcntl+0xdc>
 408:	2823883a 	mov	r17,r5
 40c:	04000034 	movhi	r16,0
 410:	01400304 	movi	r5,12
 414:	000098c0 	call	98c <__mulsi3>
 418:	84028104 	addi	r16,r16,2564
 41c:	1407883a 	add	r3,r2,r16
  
  if (fd)
 420:	18002626 	beq	r3,zero,4bc <fcntl+0xdc>
  {
    switch (cmd)
 424:	00c000c4 	movi	r3,3
 428:	88c01126 	beq	r17,r3,470 <fcntl+0x90>
 42c:	00c00104 	movi	r3,4
 430:	88c0181e 	bne	r17,r3,494 <fcntl+0xb4>
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 434:	10800204 	addi	r2,r2,8
 438:	80a3883a 	add	r17,r16,r2
 43c:	d8800517 	ldw	r2,20(sp)
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 440:	9809883a 	mov	r4,r19
 444:	01400304 	movi	r5,12
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 448:	1490020c 	andi	r18,r2,16392
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 44c:	000098c0 	call	98c <__mulsi3>
 450:	8085883a 	add	r2,r16,r2
 454:	10800217 	ldw	r2,8(r2)
 458:	00effdc4 	movi	r3,-16393
 45c:	10c4703a 	and	r2,r2,r3
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 460:	9084b03a 	or	r2,r18,r2
 464:	88800015 	stw	r2,0(r17)
      va_end(argp);
      return 0;
 468:	0005883a 	mov	r2,zero
 46c:	00001e06 	br	4e8 <fcntl+0x108>
  if (fd)
  {
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 470:	9809883a 	mov	r4,r19
 474:	01400304 	movi	r5,12
 478:	000098c0 	call	98c <__mulsi3>
 47c:	8085883a 	add	r2,r16,r2
 480:	10c00217 	ldw	r3,8(r2)
 484:	00900034 	movhi	r2,16384
 488:	10bfffc4 	addi	r2,r2,-1
 48c:	1884703a 	and	r2,r3,r2
 490:	00001506 	br	4e8 <fcntl+0x108>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 494:	00800034 	movhi	r2,0
 498:	10829d04 	addi	r2,r2,2676
 49c:	10800017 	ldw	r2,0(r2)
 4a0:	10000226 	beq	r2,zero,4ac <fcntl+0xcc>
 4a4:	103ee83a 	callr	r2
 4a8:	00000206 	br	4b4 <fcntl+0xd4>
 4ac:	00800034 	movhi	r2,0
 4b0:	1082be04 	addi	r2,r2,2808
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
      va_end(argp);
      return 0;
    default:
      ALT_ERRNO = EINVAL;
 4b4:	00c00584 	movi	r3,22
 4b8:	00000906 	br	4e0 <fcntl+0x100>
 4bc:	00800034 	movhi	r2,0
 4c0:	10829d04 	addi	r2,r2,2676
 4c4:	10800017 	ldw	r2,0(r2)
 4c8:	10000226 	beq	r2,zero,4d4 <fcntl+0xf4>
 4cc:	103ee83a 	callr	r2
 4d0:	00000206 	br	4dc <fcntl+0xfc>
 4d4:	00800034 	movhi	r2,0
 4d8:	1082be04 	addi	r2,r2,2808
      return -1;
    }
  }

  ALT_ERRNO = EBADFD;
 4dc:	00c01444 	movi	r3,81
 4e0:	10c00015 	stw	r3,0(r2)
  return -1;
 4e4:	00bfffc4 	movi	r2,-1
}
 4e8:	dfc00417 	ldw	ra,16(sp)
 4ec:	dcc00317 	ldw	r19,12(sp)
 4f0:	dc800217 	ldw	r18,8(sp)
 4f4:	dc400117 	ldw	r17,4(sp)
 4f8:	dc000017 	ldw	r16,0(sp)
 4fc:	dec00704 	addi	sp,sp,28
 500:	f800283a 	ret

00000504 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 504:	00800034 	movhi	r2,0
 508:	10828104 	addi	r2,r2,2564
 50c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 510:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 514:	01000034 	movhi	r4,0
 518:	21029704 	addi	r4,r4,2652
 51c:	d80b883a 	mov	r5,sp
 520:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 524:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 528:	00007140 	call	714 <altera_avalon_jtag_uart_read>
 52c:	0080020e 	bge	zero,r2,538 <alt_getchar+0x34>
        return -1;
    }
    return c;
 530:	d8800007 	ldb	r2,0(sp)
 534:	00000106 	br	53c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 538:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 53c:	dfc00117 	ldw	ra,4(sp)
 540:	dec00204 	addi	sp,sp,8
 544:	f800283a 	ret

00000548 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 548:	deffff04 	addi	sp,sp,-4
 54c:	01000034 	movhi	r4,0
 550:	01400034 	movhi	r5,0
 554:	dfc00015 	stw	ra,0(sp)
 558:	21028104 	addi	r4,r4,2564
 55c:	29429e04 	addi	r5,r5,2680

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 560:	2140061e 	bne	r4,r5,57c <alt_load+0x34>
 564:	01000034 	movhi	r4,0
 568:	01400034 	movhi	r5,0
 56c:	21000804 	addi	r4,r4,32
 570:	29400804 	addi	r5,r5,32
 574:	2140141e 	bne	r4,r5,5c8 <alt_load+0x80>
 578:	00000d06 	br	5b0 <alt_load+0x68>
 57c:	00c00034 	movhi	r3,0
 580:	18c29e04 	addi	r3,r3,2680
 584:	00bfff04 	movi	r2,-4
 588:	1907c83a 	sub	r3,r3,r4
 58c:	1886703a 	and	r3,r3,r2
 590:	0005883a 	mov	r2,zero
  {
    while( to != end )
 594:	10fff326 	beq	r2,r3,564 <_gp+0xffff7b08>
 598:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 59c:	39c00017 	ldw	r7,0(r7)
 5a0:	110d883a 	add	r6,r2,r4
 5a4:	10800104 	addi	r2,r2,4
 5a8:	31c00015 	stw	r7,0(r6)
 5ac:	003ff906 	br	594 <_gp+0xffff7b38>
 5b0:	01000034 	movhi	r4,0
 5b4:	01400034 	movhi	r5,0
 5b8:	21026d04 	addi	r4,r4,2484
 5bc:	29426d04 	addi	r5,r5,2484

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 5c0:	2140121e 	bne	r4,r5,60c <alt_load+0xc4>
 5c4:	00000d06 	br	5fc <alt_load+0xb4>
 5c8:	00c00034 	movhi	r3,0
 5cc:	18c00804 	addi	r3,r3,32
 5d0:	00bfff04 	movi	r2,-4
 5d4:	1907c83a 	sub	r3,r3,r4
 5d8:	1886703a 	and	r3,r3,r2
 5dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 5e0:	10fff326 	beq	r2,r3,5b0 <_gp+0xffff7b54>
 5e4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 5e8:	39c00017 	ldw	r7,0(r7)
 5ec:	110d883a 	add	r6,r2,r4
 5f0:	10800104 	addi	r2,r2,4
 5f4:	31c00015 	stw	r7,0(r6)
 5f8:	003ff906 	br	5e0 <_gp+0xffff7b84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 5fc:	000082c0 	call	82c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 600:	dfc00017 	ldw	ra,0(sp)
 604:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 608:	00008381 	jmpi	838 <alt_icache_flush_all>
 60c:	00c00034 	movhi	r3,0
 610:	18c28104 	addi	r3,r3,2564
 614:	00bfff04 	movi	r2,-4
 618:	1907c83a 	sub	r3,r3,r4
 61c:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 620:	0005883a 	mov	r2,zero
  {
    while( to != end )
 624:	10fff526 	beq	r2,r3,5fc <_gp+0xffff7ba0>
 628:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 62c:	39c00017 	ldw	r7,0(r7)
 630:	110d883a 	add	r6,r2,r4
 634:	10800104 	addi	r2,r2,4
 638:	31c00015 	stw	r7,0(r6)
 63c:	003ff906 	br	624 <_gp+0xffff7bc8>

00000640 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 640:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 644:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 648:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 64c:	00006f00 	call	6f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 650:	00007100 	call	710 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 654:	d1202617 	ldw	r4,-32616(gp)
 658:	d1602517 	ldw	r5,-32620(gp)
 65c:	d1a02417 	ldw	r6,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 660:	dfc00017 	ldw	ra,0(sp)
 664:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 668:	00003941 	jmpi	394 <main>

0000066c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 66c:	defffd04 	addi	sp,sp,-12
 670:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 674:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 678:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 67c:	01000034 	movhi	r4,0
 680:	21029704 	addi	r4,r4,2652
 684:	d80b883a 	mov	r5,sp
 688:	01800044 	movi	r6,1
 68c:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 690:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 694:	00007700 	call	770 <altera_avalon_jtag_uart_write>
 698:	00ffffc4 	movi	r3,-1
 69c:	10c00126 	beq	r2,r3,6a4 <alt_putchar+0x38>
        return -1;
    }
    return c;
 6a0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 6a4:	dfc00217 	ldw	ra,8(sp)
 6a8:	dc000117 	ldw	r16,4(sp)
 6ac:	dec00304 	addi	sp,sp,12
 6b0:	f800283a 	ret

000006b4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 6b4:	defffe04 	addi	sp,sp,-8
 6b8:	dc000015 	stw	r16,0(sp)
 6bc:	dfc00115 	stw	ra,4(sp)
 6c0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 6c4:	00008440 	call	844 <strlen>
 6c8:	01000034 	movhi	r4,0
 6cc:	21029704 	addi	r4,r4,2652
 6d0:	800b883a 	mov	r5,r16
 6d4:	100d883a 	mov	r6,r2
 6d8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 6dc:	dfc00117 	ldw	ra,4(sp)
 6e0:	dc000017 	ldw	r16,0(sp)
 6e4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 6e8:	00007701 	jmpi	770 <altera_avalon_jtag_uart_write>

000006ec <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 6ec:	00007a41 	jmpi	7a4 <alt_busy_sleep>

000006f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 6f0:	deffff04 	addi	sp,sp,-4
 6f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 6f8:	000083c0 	call	83c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 6fc:	00800044 	movi	r2,1
 700:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 704:	dfc00017 	ldw	ra,0(sp)
 708:	dec00104 	addi	sp,sp,4
 70c:	f800283a 	ret

00000710 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 710:	f800283a 	ret

00000714 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 714:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 718:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 71c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 720:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 724:	11800b2e 	bgeu	r2,r6,754 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 728:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 72c:	1a60000c 	andi	r9,r3,32768
 730:	48000326 	beq	r9,zero,740 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 734:	10c00005 	stb	r3,0(r2)
 738:	10800044 	addi	r2,r2,1
 73c:	003ff906 	br	724 <_gp+0xffff7cc8>
    else if (ptr != buffer)
 740:	11400226 	beq	r2,r5,74c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 744:	1145c83a 	sub	r2,r2,r5
 748:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 74c:	403ff526 	beq	r8,zero,724 <_gp+0xffff7cc8>
 750:	00000106 	br	758 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 754:	117ffb1e 	bne	r2,r5,744 <_gp+0xffff7ce8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 758:	39d0000c 	andi	r7,r7,16384
 75c:	3800021e 	bne	r7,zero,768 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 760:	00bffec4 	movi	r2,-5
 764:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 768:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 76c:	f800283a 	ret

00000770 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 770:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 774:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 778:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 77c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 780:	2980072e 	bgeu	r5,r6,7a0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 784:	38c00037 	ldwio	r3,0(r7)
 788:	18ffffec 	andhi	r3,r3,65535
 78c:	183ffc26 	beq	r3,zero,780 <_gp+0xffff7d24>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 790:	28c00007 	ldb	r3,0(r5)
 794:	20c00035 	stwio	r3,0(r4)
 798:	29400044 	addi	r5,r5,1
 79c:	003ff806 	br	780 <_gp+0xffff7d24>

  return count;
}
 7a0:	f800283a 	ret

000007a4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 7a4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 7a8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 7ac:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 7b0:	dc000015 	stw	r16,0(sp)
 7b4:	dfc00115 	stw	ra,4(sp)
 7b8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 7bc:	000097c0 	call	97c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 7c0:	10001026 	beq	r2,zero,804 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 7c4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 7c8:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 7cc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 7d0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 7d4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 7d8:	297fffc4 	addi	r5,r5,-1
 7dc:	283ffe1e 	bne	r5,zero,7d8 <_gp+0xffff7d7c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 7e0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 7e4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 7e8:	18bffb16 	blt	r3,r2,7d8 <_gp+0xffff7d7c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 7ec:	8009883a 	mov	r4,r16
 7f0:	01400144 	movi	r5,5
 7f4:	000098c0 	call	98c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 7f8:	10bfffc4 	addi	r2,r2,-1
 7fc:	103ffe1e 	bne	r2,zero,7f8 <_gp+0xffff7d9c>
 800:	00000506 	br	818 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 804:	8009883a 	mov	r4,r16
 808:	01400144 	movi	r5,5
 80c:	000098c0 	call	98c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 810:	10bfffc4 	addi	r2,r2,-1
 814:	00bffe16 	blt	zero,r2,810 <_gp+0xffff7db4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 818:	0005883a 	mov	r2,zero
 81c:	dfc00117 	ldw	ra,4(sp)
 820:	dc000017 	ldw	r16,0(sp)
 824:	dec00204 	addi	sp,sp,8
 828:	f800283a 	ret

0000082c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 82c:	f800283a 	ret

00000830 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 830:	3005883a 	mov	r2,r6
 834:	f800283a 	ret

00000838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 838:	f800283a 	ret

0000083c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 83c:	000170fa 	wrctl	ienable,zero
 840:	f800283a 	ret

00000844 <strlen>:
 844:	2005883a 	mov	r2,r4
 848:	10c00007 	ldb	r3,0(r2)
 84c:	18000226 	beq	r3,zero,858 <strlen+0x14>
 850:	10800044 	addi	r2,r2,1
 854:	003ffc06 	br	848 <_gp+0xffff7dec>
 858:	1105c83a 	sub	r2,r2,r4
 85c:	f800283a 	ret

00000860 <udivmodsi4>:
 860:	2900182e 	bgeu	r5,r4,8c4 <udivmodsi4+0x64>
 864:	28001716 	blt	r5,zero,8c4 <udivmodsi4+0x64>
 868:	00800804 	movi	r2,32
 86c:	00c00044 	movi	r3,1
 870:	00000206 	br	87c <udivmodsi4+0x1c>
 874:	10001126 	beq	r2,zero,8bc <udivmodsi4+0x5c>
 878:	28000516 	blt	r5,zero,890 <udivmodsi4+0x30>
 87c:	294b883a 	add	r5,r5,r5
 880:	10bfffc4 	addi	r2,r2,-1
 884:	18c7883a 	add	r3,r3,r3
 888:	293ffa36 	bltu	r5,r4,874 <_gp+0xffff7e18>
 88c:	18000b26 	beq	r3,zero,8bc <udivmodsi4+0x5c>
 890:	0005883a 	mov	r2,zero
 894:	21400236 	bltu	r4,r5,8a0 <udivmodsi4+0x40>
 898:	2149c83a 	sub	r4,r4,r5
 89c:	10c4b03a 	or	r2,r2,r3
 8a0:	1806d07a 	srli	r3,r3,1
 8a4:	280ad07a 	srli	r5,r5,1
 8a8:	183ffa1e 	bne	r3,zero,894 <_gp+0xffff7e38>
 8ac:	3000011e 	bne	r6,zero,8b4 <udivmodsi4+0x54>
 8b0:	f800283a 	ret
 8b4:	2005883a 	mov	r2,r4
 8b8:	f800283a 	ret
 8bc:	0005883a 	mov	r2,zero
 8c0:	003ffa06 	br	8ac <_gp+0xffff7e50>
 8c4:	00c00044 	movi	r3,1
 8c8:	003ff106 	br	890 <_gp+0xffff7e34>

000008cc <__divsi3>:
 8cc:	defffe04 	addi	sp,sp,-8
 8d0:	dfc00115 	stw	ra,4(sp)
 8d4:	dc000015 	stw	r16,0(sp)
 8d8:	20000b16 	blt	r4,zero,908 <__divsi3+0x3c>
 8dc:	0021883a 	mov	r16,zero
 8e0:	28000c16 	blt	r5,zero,914 <__divsi3+0x48>
 8e4:	000d883a 	mov	r6,zero
 8e8:	00008600 	call	860 <udivmodsi4>
 8ec:	0407c83a 	sub	r3,zero,r16
 8f0:	1884f03a 	xor	r2,r3,r2
 8f4:	1405883a 	add	r2,r2,r16
 8f8:	dfc00117 	ldw	ra,4(sp)
 8fc:	dc000017 	ldw	r16,0(sp)
 900:	dec00204 	addi	sp,sp,8
 904:	f800283a 	ret
 908:	0109c83a 	sub	r4,zero,r4
 90c:	04000044 	movi	r16,1
 910:	283ff40e 	bge	r5,zero,8e4 <_gp+0xffff7e88>
 914:	014bc83a 	sub	r5,zero,r5
 918:	8400005c 	xori	r16,r16,1
 91c:	003ff106 	br	8e4 <_gp+0xffff7e88>

00000920 <__modsi3>:
 920:	defffd04 	addi	sp,sp,-12
 924:	dfc00215 	stw	ra,8(sp)
 928:	dc400115 	stw	r17,4(sp)
 92c:	dc000015 	stw	r16,0(sp)
 930:	20000c16 	blt	r4,zero,964 <__modsi3+0x44>
 934:	0023883a 	mov	r17,zero
 938:	0021883a 	mov	r16,zero
 93c:	28000d16 	blt	r5,zero,974 <__modsi3+0x54>
 940:	01800044 	movi	r6,1
 944:	00008600 	call	860 <udivmodsi4>
 948:	1404f03a 	xor	r2,r2,r16
 94c:	8885883a 	add	r2,r17,r2
 950:	dfc00217 	ldw	ra,8(sp)
 954:	dc400117 	ldw	r17,4(sp)
 958:	dc000017 	ldw	r16,0(sp)
 95c:	dec00304 	addi	sp,sp,12
 960:	f800283a 	ret
 964:	0109c83a 	sub	r4,zero,r4
 968:	04400044 	movi	r17,1
 96c:	043fffc4 	movi	r16,-1
 970:	283ff30e 	bge	r5,zero,940 <_gp+0xffff7ee4>
 974:	014bc83a 	sub	r5,zero,r5
 978:	003ff106 	br	940 <_gp+0xffff7ee4>

0000097c <__udivsi3>:
 97c:	000d883a 	mov	r6,zero
 980:	00008601 	jmpi	860 <udivmodsi4>

00000984 <__umodsi3>:
 984:	01800044 	movi	r6,1
 988:	00008601 	jmpi	860 <udivmodsi4>

0000098c <__mulsi3>:
 98c:	0005883a 	mov	r2,zero
 990:	20000726 	beq	r4,zero,9b0 <__mulsi3+0x24>
 994:	20c0004c 	andi	r3,r4,1
 998:	2008d07a 	srli	r4,r4,1
 99c:	18000126 	beq	r3,zero,9a4 <__mulsi3+0x18>
 9a0:	1145883a 	add	r2,r2,r5
 9a4:	294b883a 	add	r5,r5,r5
 9a8:	203ffa1e 	bne	r4,zero,994 <_gp+0xffff7f38>
 9ac:	f800283a 	ret
 9b0:	f800283a 	ret
