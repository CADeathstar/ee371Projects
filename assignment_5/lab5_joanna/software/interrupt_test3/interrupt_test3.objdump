
interrupt_test3.elf:     file format elf32-littlenios2
interrupt_test3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000150

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000006c0 memsz 0x000006c0 flags r-x
    LOAD off    0x000016e0 vaddr 0x000006e0 paddr 0x000006e8 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000016f0 vaddr 0x000006f0 paddr 0x000006f0 align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000130  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000570  00000150  00000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  000006c0  000006c0  000016c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  000006e0  000006e8  000016e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000114  000006f0  000006f0  000016f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000804  00000804  000016e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000290  00000000  00000000  00001710  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001828  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000db9  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000cfa  00000000  00000000  00003f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000304  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000080e  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000694  00000000  00000000  0000578e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00005e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006fd2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00006fd5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006fd8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006fd9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00006fda  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00006fe3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00006fec  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00006ff5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00006ffc  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009d326  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000150 l    d  .text	00000000 .text
000006c0 l    d  .rodata	00000000 .rodata
000006e0 l    d  .rwdata	00000000 .rwdata
000006f0 l    d  .bss	00000000 .bss
00000804 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../interrupt_test3_bsp//obj/HAL/src/crt0.o
00000188 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000424 g     F .text	0000002c alt_main
00000704 g     O .bss	00000100 alt_irq
000006e8 g       *ABS*	00000000 __flash_rwdata_start
00000604 g     F .text	00000038 alt_putstr
000006e4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
000006f0 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
000006fc g     O .bss	00000004 alt_argv
000086e0 g       *ABS*	00000000 _gp
0000018c g     F .text	0000003c gun_handler
00000804 g       *ABS*	00000000 __bss_end
000002c4 g     F .text	00000068 alt_iic_isr_register
000002ac g     F .text	00000018 alt_ic_irq_enabled
000006f4 g     O .bss	00000004 alt_irq_active
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000000ec g     F .exceptions	00000064 alt_irq_handler
00000694 g     F .text	00000004 alt_dcache_flush_all
000006e8 g       *ABS*	00000000 __ram_rwdata_end
000006e0 g       *ABS*	00000000 __ram_rodata_end
00000804 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000660 g     F .text	00000034 altera_avalon_jtag_uart_write
00000450 g     F .text	0000016c alt_printf
00000150 g     F .text	0000003c _start
0000065c g     F .text	00000004 alt_sys_init
000006e0 g       *ABS*	00000000 __ram_rwdata_start
000006c0 g       *ABS*	00000000 __ram_rodata_start
00000804 g       *ABS*	00000000 __alt_stack_base
000006f0 g       *ABS*	00000000 __bss_start
0000020c g     F .text	0000001c main
000006f8 g     O .bss	00000004 alt_envp
000006c0 g       *ABS*	00000000 __flash_rodata_start
0000063c g     F .text	00000020 alt_irq_init
00000700 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000228 g     F .text	00000004 alt_ic_isr_register
000006e8 g       *ABS*	00000000 _edata
00000804 g       *ABS*	00000000 _end
00000150 g       *ABS*	00000000 __ram_exceptions_end
0000026c g     F .text	00000040 alt_ic_irq_disable
0000069c g     F .text	00000008 altera_nios2_qsys_irq_init
00004000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000001c8 g     F .text	00000044 setup_interupt
0000000c g       .entry	00000000 _exit
000006a4 g     F .text	0000001c strlen
000005bc g     F .text	00000048 alt_putchar
00000698 g     F .text	00000004 alt_icache_flush_all
000006e0 g     O .rwdata	00000004 alt_priority_mask
0000022c g     F .text	00000040 alt_ic_irq_enable
0000032c g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08405414 	ori	at,at,336
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  fc:	04000034 	movhi	r16,0
 100:	8401c104 	addi	r16,r16,1796

  active = alt_irq_pending ();

  do
  {
    i = 0;
 104:	0005883a 	mov	r2,zero
    mask = 1;
 108:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 10c:	190a703a 	and	r5,r3,r4
 110:	28000c26 	beq	r5,zero,144 <alt_irq_handler+0x58>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 114:	100490fa 	slli	r2,r2,3
 118:	8087883a 	add	r3,r16,r2
 11c:	1805883a 	mov	r2,r3
 120:	11000117 	ldw	r4,4(r2)
 124:	18c00017 	ldw	r3,0(r3)
 128:	183ee83a 	callr	r3
 12c:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 130:	203ff41e 	bne	r4,zero,104 <_gp+0xffff7a24>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 134:	dfc00117 	ldw	ra,4(sp)
 138:	dc000017 	ldw	r16,0(sp)
 13c:	dec00204 	addi	sp,sp,8
 140:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	10800044 	addi	r2,r2,1

    } while (1);
 14c:	003fef06 	br	10c <_gp+0xffff7a2c>

Disassembly of section .text:

00000150 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 150:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 154:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
 158:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 15c:	d6a1b814 	ori	gp,gp,34528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 160:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 164:	1081bc14 	ori	r2,r2,1776

    movhi r3, %hi(__bss_end)
 168:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 16c:	18c20114 	ori	r3,r3,2052

    beq r2, r3, 1f
 170:	10c00326 	beq	r2,r3,180 <_start+0x30>

0:
    stw zero, (r2)
 174:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 178:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 17c:	10fffd36 	bltu	r2,r3,174 <_gp+0xffff7a94>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 180:	000032c0 	call	32c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 184:	00004240 	call	424 <alt_main>

00000188 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 188:	003fff06 	br	188 <_gp+0xffff7aa8>

0000018c <gun_handler>:
#include "altera_nios2_qsys_irq.h"
#include "sys/alt_irq.h"

void* edge_capture;

void gun_handler(void* context) {
 18c:	defffe04 	addi	sp,sp,-8
 190:	dc000015 	stw	r16,0(sp)
 194:	2021883a 	mov	r16,r4
	alt_printf("gun!\n");
 198:	01000034 	movhi	r4,0
 19c:	2101b004 	addi	r4,r4,1728
#include "altera_nios2_qsys_irq.h"
#include "sys/alt_irq.h"

void* edge_capture;

void gun_handler(void* context) {
 1a0:	dfc00115 	stw	ra,4(sp)
	alt_printf("gun!\n");
 1a4:	00004500 	call	450 <alt_printf>

	volatile int* edge_capture_ptr = (volatile int*) context; // volatile variable to avoid optimization...
	*edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE);    // Store edge capture register in *context.
 1a8:	00941f04 	movi	r2,20604
 1ac:	10c00037 	ldwio	r3,0(r2)
 1b0:	80c00015 	stw	r3,0(r16)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE, 0x0);     // Reset edge capture register
 1b4:	10000035 	stwio	zero,0(r2)
}
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	dc000017 	ldw	r16,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <setup_interupt>:


void setup_interupt() {
 1c8:	defffe04 	addi	sp,sp,-8
 1cc:	dfc00115 	stw	ra,4(sp)
	/* volatile variable to avoid optimization */
	void* edge_capture_ptr = (void*) &edge_capture;
	/* Enable first  button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(GUN_LEFT_BASE, 0x1);
 1d0:	00941e04 	movi	r2,20600
 1d4:	00c00044 	movi	r3,1
 1d8:	10c00035 	stwio	r3,0(r2)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(GUN_LEFT_BASE, 0x0);
 1dc:	00941f04 	movi	r2,20604
 1e0:	10000035 	stwio	zero,0(r2)
	/* Sets the interrupt handler */
	alt_ic_isr_register(GUN_LEFT_IRQ_INTERRUPT_CONTROLLER_ID, GUN_LEFT_IRQ, gun_handler, edge_capture_ptr, 0x0);
 1e4:	01800034 	movhi	r6,0
 1e8:	d8000015 	stw	zero,0(sp)
 1ec:	0009883a 	mov	r4,zero
 1f0:	01400084 	movi	r5,2
 1f4:	31806304 	addi	r6,r6,396
 1f8:	d1e00404 	addi	r7,gp,-32752
 1fc:	00002280 	call	228 <alt_ic_isr_register>
}
 200:	dfc00117 	ldw	ra,4(sp)
 204:	dec00204 	addi	sp,sp,8
 208:	f800283a 	ret

0000020c <main>:


int main()
{ 
 20c:	deffff04 	addi	sp,sp,-4
 210:	dfc00015 	stw	ra,0(sp)
	setup_interupt();
 214:	00001c80 	call	1c8 <setup_interupt>
	alt_putstr("Hello from Nios II!\n");
 218:	01000034 	movhi	r4,0
 21c:	2101b204 	addi	r4,r4,1736
 220:	00006040 	call	604 <alt_putstr>

  /* Event loop never exits. */
  while (1);
 224:	003fff06 	br	224 <_gp+0xffff7b44>

00000228 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 228:	00002c41 	jmpi	2c4 <alt_iic_isr_register>

0000022c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 22c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 230:	00bfff84 	movi	r2,-2
 234:	3084703a 	and	r2,r6,r2
 238:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 23c:	00800034 	movhi	r2,0
 240:	1081bd04 	addi	r2,r2,1780
 244:	01000044 	movi	r4,1
 248:	10c00017 	ldw	r3,0(r2)
 24c:	214a983a 	sll	r5,r4,r5
 250:	28cab03a 	or	r5,r5,r3
 254:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 258:	10800017 	ldw	r2,0(r2)
 25c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 260:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 264:	0005883a 	mov	r2,zero
 268:	f800283a 	ret

0000026c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 26c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 270:	00bfff84 	movi	r2,-2
 274:	3084703a 	and	r2,r6,r2
 278:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 27c:	00800034 	movhi	r2,0
 280:	1081bd04 	addi	r2,r2,1780
 284:	013fff84 	movi	r4,-2
 288:	10c00017 	ldw	r3,0(r2)
 28c:	214a183a 	rol	r5,r4,r5
 290:	28ca703a 	and	r5,r5,r3
 294:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 298:	10800017 	ldw	r2,0(r2)
 29c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2a0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 2a4:	0005883a 	mov	r2,zero
 2a8:	f800283a 	ret

000002ac <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2ac:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2b0:	00c00044 	movi	r3,1
 2b4:	194a983a 	sll	r5,r3,r5
 2b8:	1144703a 	and	r2,r2,r5
}
 2bc:	1004c03a 	cmpne	r2,r2,zero
 2c0:	f800283a 	ret

000002c4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2c4:	00c007c4 	movi	r3,31
 2c8:	19401616 	blt	r3,r5,324 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2cc:	defffe04 	addi	sp,sp,-8
 2d0:	dfc00115 	stw	ra,4(sp)
 2d4:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2d8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2dc:	00ffff84 	movi	r3,-2
 2e0:	80c6703a 	and	r3,r16,r3
 2e4:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 2e8:	280490fa 	slli	r2,r5,3
 2ec:	00c00034 	movhi	r3,0
 2f0:	18c1c104 	addi	r3,r3,1796
 2f4:	1891883a 	add	r8,r3,r2
 2f8:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
 2fc:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 300:	30000226 	beq	r6,zero,30c <alt_iic_isr_register+0x48>
 304:	000022c0 	call	22c <alt_ic_irq_enable>
 308:	00000106 	br	310 <alt_iic_isr_register+0x4c>
 30c:	000026c0 	call	26c <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 310:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 314:	dfc00117 	ldw	ra,4(sp)
 318:	dc000017 	ldw	r16,0(sp)
 31c:	dec00204 	addi	sp,sp,8
 320:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 324:	00bffa84 	movi	r2,-22
 328:	f800283a 	ret

0000032c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 32c:	deffff04 	addi	sp,sp,-4
 330:	01000034 	movhi	r4,0
 334:	01400034 	movhi	r5,0
 338:	dfc00015 	stw	ra,0(sp)
 33c:	2101b804 	addi	r4,r4,1760
 340:	2941ba04 	addi	r5,r5,1768

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 344:	2140061e 	bne	r4,r5,360 <alt_load+0x34>
 348:	01000034 	movhi	r4,0
 34c:	01400034 	movhi	r5,0
 350:	21000804 	addi	r4,r4,32
 354:	29400804 	addi	r5,r5,32
 358:	2140141e 	bne	r4,r5,3ac <alt_load+0x80>
 35c:	00000d06 	br	394 <alt_load+0x68>
 360:	00c00034 	movhi	r3,0
 364:	18c1ba04 	addi	r3,r3,1768
 368:	00bfff04 	movi	r2,-4
 36c:	1907c83a 	sub	r3,r3,r4
 370:	1886703a 	and	r3,r3,r2
 374:	0005883a 	mov	r2,zero
  {
    while( to != end )
 378:	10fff326 	beq	r2,r3,348 <_gp+0xffff7c68>
 37c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 380:	39c00017 	ldw	r7,0(r7)
 384:	110d883a 	add	r6,r2,r4
 388:	10800104 	addi	r2,r2,4
 38c:	31c00015 	stw	r7,0(r6)
 390:	003ff906 	br	378 <_gp+0xffff7c98>
 394:	01000034 	movhi	r4,0
 398:	01400034 	movhi	r5,0
 39c:	2101b004 	addi	r4,r4,1728
 3a0:	2941b004 	addi	r5,r5,1728

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 3a4:	2140121e 	bne	r4,r5,3f0 <alt_load+0xc4>
 3a8:	00000d06 	br	3e0 <alt_load+0xb4>
 3ac:	00c00034 	movhi	r3,0
 3b0:	18c05404 	addi	r3,r3,336
 3b4:	00bfff04 	movi	r2,-4
 3b8:	1907c83a 	sub	r3,r3,r4
 3bc:	1886703a 	and	r3,r3,r2
 3c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 3c4:	10fff326 	beq	r2,r3,394 <_gp+0xffff7cb4>
 3c8:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 3cc:	39c00017 	ldw	r7,0(r7)
 3d0:	110d883a 	add	r6,r2,r4
 3d4:	10800104 	addi	r2,r2,4
 3d8:	31c00015 	stw	r7,0(r6)
 3dc:	003ff906 	br	3c4 <_gp+0xffff7ce4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 3e0:	00006940 	call	694 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 3e4:	dfc00017 	ldw	ra,0(sp)
 3e8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 3ec:	00006981 	jmpi	698 <alt_icache_flush_all>
 3f0:	00c00034 	movhi	r3,0
 3f4:	18c1b804 	addi	r3,r3,1760
 3f8:	00bfff04 	movi	r2,-4
 3fc:	1907c83a 	sub	r3,r3,r4
 400:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 404:	0005883a 	mov	r2,zero
  {
    while( to != end )
 408:	10fff526 	beq	r2,r3,3e0 <_gp+0xffff7d00>
 40c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 410:	39c00017 	ldw	r7,0(r7)
 414:	110d883a 	add	r6,r2,r4
 418:	10800104 	addi	r2,r2,4
 41c:	31c00015 	stw	r7,0(r6)
 420:	003ff906 	br	408 <_gp+0xffff7d28>

00000424 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 424:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 428:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 42c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 430:	000063c0 	call	63c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 434:	000065c0 	call	65c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 438:	d1200817 	ldw	r4,-32736(gp)
 43c:	d1600717 	ldw	r5,-32740(gp)
 440:	d1a00617 	ldw	r6,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 444:	dfc00017 	ldw	ra,0(sp)
 448:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 44c:	000020c1 	jmpi	20c <main>

00000450 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 450:	defff204 	addi	sp,sp,-56
 454:	dfc00a15 	stw	ra,40(sp)
 458:	df000915 	stw	fp,36(sp)
 45c:	ddc00815 	stw	r23,32(sp)
 460:	dd800715 	stw	r22,28(sp)
 464:	dd400615 	stw	r21,24(sp)
 468:	dd000515 	stw	r20,20(sp)
 46c:	dcc00415 	stw	r19,16(sp)
 470:	dc800315 	stw	r18,12(sp)
 474:	dc400215 	stw	r17,8(sp)
 478:	dc000115 	stw	r16,4(sp)
 47c:	d9400b15 	stw	r5,44(sp)
 480:	d9800c15 	stw	r6,48(sp)
 484:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 488:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 48c:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
 490:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 494:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 498:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 49c:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4a0:	11000007 	ldb	r4,0(r2)
 4a4:	20003926 	beq	r4,zero,58c <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4a8:	24000226 	beq	r4,r16,4b4 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4ac:	14400044 	addi	r17,r2,1
 4b0:	00001106 	br	4f8 <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4b4:	14400084 	addi	r17,r2,2
 4b8:	10800047 	ldb	r2,1(r2)
 4bc:	10003326 	beq	r2,zero,58c <alt_printf+0x13c>
            {
                if (c == '%')
 4c0:	1400021e 	bne	r2,r16,4cc <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4c4:	8009883a 	mov	r4,r16
 4c8:	00000b06 	br	4f8 <alt_printf+0xa8>
                } 
                else if (c == 'c')
 4cc:	1480051e 	bne	r2,r18,4e4 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 4d0:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 4d4:	ad800104 	addi	r22,r21,4
 4d8:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 4dc:	00005bc0 	call	5bc <alt_putchar>
 4e0:	00002806 	br	584 <alt_printf+0x134>
                }
                else if (c == 'x')
 4e4:	14c01f1e 	bne	r2,r19,564 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4e8:	adc00017 	ldw	r23,0(r21)
 4ec:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4f0:	b800031e 	bne	r23,zero,500 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
 4f4:	01000c04 	movi	r4,48
 4f8:	00005bc0 	call	5bc <alt_putchar>
                        continue;
 4fc:	00002106 	br	584 <alt_printf+0x134>
 500:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 504:	00c003c4 	movi	r3,15
 508:	1d84983a 	sll	r2,r3,r22
 50c:	15c4703a 	and	r2,r2,r23
 510:	1000021e 	bne	r2,zero,51c <alt_printf+0xcc>
                        digit_shift -= 4;
 514:	b5bfff04 	addi	r22,r22,-4
 518:	003ffb06 	br	508 <_gp+0xffff7e28>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 51c:	070003c4 	movi	fp,15
                        if (digit <= 9)
 520:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 524:	b0001716 	blt	r22,zero,584 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 528:	e584983a 	sll	r2,fp,r22
 52c:	15c4703a 	and	r2,r2,r23
 530:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
 534:	18800236 	bltu	r3,r2,540 <alt_printf+0xf0>
                            c = '0' + digit;
 538:	11000c04 	addi	r4,r2,48
 53c:	00000106 	br	544 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
 540:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
 544:	21003fcc 	andi	r4,r4,255
 548:	2100201c 	xori	r4,r4,128
 54c:	213fe004 	addi	r4,r4,-128
 550:	d8c00015 	stw	r3,0(sp)
 554:	00005bc0 	call	5bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 558:	b5bfff04 	addi	r22,r22,-4
 55c:	d8c00017 	ldw	r3,0(sp)
 560:	003ff006 	br	524 <_gp+0xffff7e44>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 564:	1500071e 	bne	r2,r20,584 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 568:	ad800017 	ldw	r22,0(r21)
 56c:	ad400104 	addi	r21,r21,4

                    while(*s)
 570:	b1000007 	ldb	r4,0(r22)
 574:	20000326 	beq	r4,zero,584 <alt_printf+0x134>
                      alt_putchar(*s++);
 578:	b5800044 	addi	r22,r22,1
 57c:	00005bc0 	call	5bc <alt_putchar>
 580:	003ffb06 	br	570 <_gp+0xffff7e90>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 584:	8805883a 	mov	r2,r17
 588:	003fc506 	br	4a0 <_gp+0xffff7dc0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 58c:	dfc00a17 	ldw	ra,40(sp)
 590:	df000917 	ldw	fp,36(sp)
 594:	ddc00817 	ldw	r23,32(sp)
 598:	dd800717 	ldw	r22,28(sp)
 59c:	dd400617 	ldw	r21,24(sp)
 5a0:	dd000517 	ldw	r20,20(sp)
 5a4:	dcc00417 	ldw	r19,16(sp)
 5a8:	dc800317 	ldw	r18,12(sp)
 5ac:	dc400217 	ldw	r17,8(sp)
 5b0:	dc000117 	ldw	r16,4(sp)
 5b4:	dec00e04 	addi	sp,sp,56
 5b8:	f800283a 	ret

000005bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 5bc:	defffd04 	addi	sp,sp,-12
 5c0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 5c4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 5c8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 5cc:	01000034 	movhi	r4,0
 5d0:	2101b904 	addi	r4,r4,1764
 5d4:	d80b883a 	mov	r5,sp
 5d8:	01800044 	movi	r6,1
 5dc:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 5e0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 5e4:	00006600 	call	660 <altera_avalon_jtag_uart_write>
 5e8:	00ffffc4 	movi	r3,-1
 5ec:	10c00126 	beq	r2,r3,5f4 <alt_putchar+0x38>
        return -1;
    }
    return c;
 5f0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 5f4:	dfc00217 	ldw	ra,8(sp)
 5f8:	dc000117 	ldw	r16,4(sp)
 5fc:	dec00304 	addi	sp,sp,12
 600:	f800283a 	ret

00000604 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 604:	defffe04 	addi	sp,sp,-8
 608:	dc000015 	stw	r16,0(sp)
 60c:	dfc00115 	stw	ra,4(sp)
 610:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 614:	00006a40 	call	6a4 <strlen>
 618:	01000034 	movhi	r4,0
 61c:	2101b904 	addi	r4,r4,1764
 620:	800b883a 	mov	r5,r16
 624:	100d883a 	mov	r6,r2
 628:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 62c:	dfc00117 	ldw	ra,4(sp)
 630:	dc000017 	ldw	r16,0(sp)
 634:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 638:	00006601 	jmpi	660 <altera_avalon_jtag_uart_write>

0000063c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 63c:	deffff04 	addi	sp,sp,-4
 640:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 644:	000069c0 	call	69c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 648:	00800044 	movi	r2,1
 64c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 650:	dfc00017 	ldw	ra,0(sp)
 654:	dec00104 	addi	sp,sp,4
 658:	f800283a 	ret

0000065c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 65c:	f800283a 	ret

00000660 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 660:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 664:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 668:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 66c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 670:	2980072e 	bgeu	r5,r6,690 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 674:	38c00037 	ldwio	r3,0(r7)
 678:	18ffffec 	andhi	r3,r3,65535
 67c:	183ffc26 	beq	r3,zero,670 <_gp+0xffff7f90>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 680:	28c00007 	ldb	r3,0(r5)
 684:	20c00035 	stwio	r3,0(r4)
 688:	29400044 	addi	r5,r5,1
 68c:	003ff806 	br	670 <_gp+0xffff7f90>

  return count;
}
 690:	f800283a 	ret

00000694 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 694:	f800283a 	ret

00000698 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 698:	f800283a 	ret

0000069c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 69c:	000170fa 	wrctl	ienable,zero
 6a0:	f800283a 	ret

000006a4 <strlen>:
 6a4:	2005883a 	mov	r2,r4
 6a8:	10c00007 	ldb	r3,0(r2)
 6ac:	18000226 	beq	r3,zero,6b8 <strlen+0x14>
 6b0:	10800044 	addi	r2,r2,1
 6b4:	003ffc06 	br	6a8 <_gp+0xffff7fc8>
 6b8:	1105c83a 	sub	r2,r2,r4
 6bc:	f800283a 	ret
