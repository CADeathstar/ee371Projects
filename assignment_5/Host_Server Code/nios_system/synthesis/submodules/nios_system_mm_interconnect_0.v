// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2016.03.04.18:45:02

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                           clk_0_clk.clk
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,        //   cpu_reset_n_reset_bridge_in_reset.reset
		input  wire [13:0] cpu_data_master_address,                        //                     cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                    //                                    .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                     //                                    .byteenable
		input  wire        cpu_data_master_read,                           //                                    .read
		output wire [31:0] cpu_data_master_readdata,                       //                                    .readdata
		input  wire        cpu_data_master_write,                          //                                    .write
		input  wire [31:0] cpu_data_master_writedata,                      //                                    .writedata
		input  wire        cpu_data_master_debugaccess,                    //                                    .debugaccess
		input  wire [13:0] cpu_instruction_master_address,                 //              cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,             //                                    .waitrequest
		input  wire        cpu_instruction_master_read,                    //                                    .read
		output wire [31:0] cpu_instruction_master_readdata,                //                                    .readdata
		output wire [1:0]  ALIEN_SHOOT_s1_address,                         //                      ALIEN_SHOOT_s1.address
		input  wire [31:0] ALIEN_SHOOT_s1_readdata,                        //                                    .readdata
		output wire [1:0]  ALIEN_X_POSITION_s1_address,                    //                 ALIEN_X_POSITION_s1.address
		input  wire [31:0] ALIEN_X_POSITION_s1_readdata,                   //                                    .readdata
		output wire [1:0]  ALIEN_Y_POSITION_s1_address,                    //                 ALIEN_Y_POSITION_s1.address
		input  wire [31:0] ALIEN_Y_POSITION_s1_readdata,                   //                                    .readdata
		output wire [8:0]  cpu_jtag_debug_module_address,                  //               cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,                    //                                    .write
		output wire        cpu_jtag_debug_module_read,                     //                                    .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,                 //                                    .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,                //                                    .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,               //                                    .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,              //                                    .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,              //                                    .debugaccess
		output wire [1:0]  GAME_TIMER_s1_address,                          //                       GAME_TIMER_s1.address
		input  wire [31:0] GAME_TIMER_s1_readdata,                         //                                    .readdata
		output wire [1:0]  GUNNER_LEFT_s1_address,                         //                      GUNNER_LEFT_s1.address
		input  wire [31:0] GUNNER_LEFT_s1_readdata,                        //                                    .readdata
		output wire [1:0]  GUNNER_RIGHT_s1_address,                        //                     GUNNER_RIGHT_s1.address
		input  wire [31:0] GUNNER_RIGHT_s1_readdata,                       //                                    .readdata
		output wire [1:0]  GUNNER_SHOOT_s1_address,                        //                     GUNNER_SHOOT_s1.address
		input  wire [31:0] GUNNER_SHOOT_s1_readdata,                       //                                    .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,          //       jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,            //                                    .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,             //                                    .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,         //                                    .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,        //                                    .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,      //                                    .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,       //                                    .chipselect
		output wire [9:0]  onchip_memory2_0_s1_address,                    //                 onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                      //                                    .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                   //                                    .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                  //                                    .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                 //                                    .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                 //                                    .chipselect
		output wire        onchip_memory2_0_s1_clken,                      //                                    .clken
		output wire [1:0]  RANDOM_NUMBER_LFSR_OUTPUT_s1_address,           //        RANDOM_NUMBER_LFSR_OUTPUT_s1.address
		input  wire [31:0] RANDOM_NUMBER_LFSR_OUTPUT_s1_readdata,          //                                    .readdata
		output wire [1:0]  RECEIVE_CHARACTER_RECEIVED_s1_address,          //       RECEIVE_CHARACTER_RECEIVED_s1.address
		input  wire [31:0] RECEIVE_CHARACTER_RECEIVED_s1_readdata,         //                                    .readdata
		output wire [1:0]  RECEIVE_PARALLEL_TO_PROCESSOR_s1_address,       //    RECEIVE_PARALLEL_TO_PROCESSOR_s1.address
		input  wire [31:0] RECEIVE_PARALLEL_TO_PROCESSOR_s1_readdata,      //                                    .readdata
		output wire [1:0]  SRAM_ADDRESS_s1_address,                        //                     SRAM_ADDRESS_s1.address
		output wire        SRAM_ADDRESS_s1_write,                          //                                    .write
		input  wire [31:0] SRAM_ADDRESS_s1_readdata,                       //                                    .readdata
		output wire [31:0] SRAM_ADDRESS_s1_writedata,                      //                                    .writedata
		output wire        SRAM_ADDRESS_s1_chipselect,                     //                                    .chipselect
		output wire [1:0]  SRAM_DATA_s1_address,                           //                        SRAM_DATA_s1.address
		output wire        SRAM_DATA_s1_write,                             //                                    .write
		input  wire [31:0] SRAM_DATA_s1_readdata,                          //                                    .readdata
		output wire [31:0] SRAM_DATA_s1_writedata,                         //                                    .writedata
		output wire        SRAM_DATA_s1_chipselect,                        //                                    .chipselect
		output wire [1:0]  SRAM_ENABLE_s1_address,                         //                      SRAM_ENABLE_s1.address
		output wire        SRAM_ENABLE_s1_write,                           //                                    .write
		input  wire [31:0] SRAM_ENABLE_s1_readdata,                        //                                    .readdata
		output wire [31:0] SRAM_ENABLE_s1_writedata,                       //                                    .writedata
		output wire        SRAM_ENABLE_s1_chipselect,                      //                                    .chipselect
		output wire [1:0]  SRAM_READ_WRITE_s1_address,                     //                  SRAM_READ_WRITE_s1.address
		output wire        SRAM_READ_WRITE_s1_write,                       //                                    .write
		input  wire [31:0] SRAM_READ_WRITE_s1_readdata,                    //                                    .readdata
		output wire [31:0] SRAM_READ_WRITE_s1_writedata,                   //                                    .writedata
		output wire        SRAM_READ_WRITE_s1_chipselect,                  //                                    .chipselect
		output wire [1:0]  TRANSMIT_CHARACTER_SENT_s1_address,             //          TRANSMIT_CHARACTER_SENT_s1.address
		input  wire [31:0] TRANSMIT_CHARACTER_SENT_s1_readdata,            //                                    .readdata
		output wire [1:0]  TRANSMIT_ENABLE_s1_address,                     //                  TRANSMIT_ENABLE_s1.address
		output wire        TRANSMIT_ENABLE_s1_write,                       //                                    .write
		input  wire [31:0] TRANSMIT_ENABLE_s1_readdata,                    //                                    .readdata
		output wire [31:0] TRANSMIT_ENABLE_s1_writedata,                   //                                    .writedata
		output wire        TRANSMIT_ENABLE_s1_chipselect,                  //                                    .chipselect
		output wire [1:0]  TRANSMIT_LOAD_s1_address,                       //                    TRANSMIT_LOAD_s1.address
		output wire        TRANSMIT_LOAD_s1_write,                         //                                    .write
		input  wire [31:0] TRANSMIT_LOAD_s1_readdata,                      //                                    .readdata
		output wire [31:0] TRANSMIT_LOAD_s1_writedata,                     //                                    .writedata
		output wire        TRANSMIT_LOAD_s1_chipselect,                    //                                    .chipselect
		output wire [1:0]  TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_address,    // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1.address
		output wire        TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_write,      //                                    .write
		input  wire [31:0] TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_readdata,   //                                    .readdata
		output wire [31:0] TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_writedata,  //                                    .writedata
		output wire        TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_chipselect  //                                    .chipselect
	);

	wire         cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire  [13:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire         cpu_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire         cpu_instruction_master_translator_avalon_universal_master_0_write;         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire         cpu_instruction_master_translator_avalon_universal_master_0_read;          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire         cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire         cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire         rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire         rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> cpu_instruction_master_agent:rp_valid
	wire         rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire  [93:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> cpu_instruction_master_agent:rp_data
	wire  [20:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> cpu_instruction_master_agent:rp_channel
	wire         rsp_mux_src_ready;                                                         // cpu_instruction_master_agent:rp_ready -> rsp_mux:src_ready
	wire         cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire  [13:0] cpu_data_master_translator_avalon_universal_master_0_address;              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire         cpu_data_master_translator_avalon_universal_master_0_lock;                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire         cpu_data_master_translator_avalon_universal_master_0_write;                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire         cpu_data_master_translator_avalon_universal_master_0_read;                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire         cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire         cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire         rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire         rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> cpu_data_master_agent:rp_valid
	wire         rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire  [93:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> cpu_data_master_agent:rp_data
	wire  [20:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> cpu_data_master_agent:rp_channel
	wire         rsp_mux_001_src_ready;                                                     // cpu_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire         cpu_jtag_debug_module_agent_m0_waitrequest;                                // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_agent:m0_waitrequest
	wire   [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                 // cpu_jtag_debug_module_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire  [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                  // cpu_jtag_debug_module_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire  [13:0] cpu_jtag_debug_module_agent_m0_address;                                    // cpu_jtag_debug_module_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire         cpu_jtag_debug_module_agent_m0_write;                                      // cpu_jtag_debug_module_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire         cpu_jtag_debug_module_agent_m0_lock;                                       // cpu_jtag_debug_module_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire         cpu_jtag_debug_module_agent_m0_read;                                       // cpu_jtag_debug_module_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire  [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                   // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_agent:m0_readdata
	wire         cpu_jtag_debug_module_agent_m0_readdatavalid;                              // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_agent:m0_readdatavalid
	wire         cpu_jtag_debug_module_agent_m0_debugaccess;                                // cpu_jtag_debug_module_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire   [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                 // cpu_jtag_debug_module_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire         cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // cpu_jtag_debug_module_agent:rf_source_endofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire         cpu_jtag_debug_module_agent_rf_source_valid;                               // cpu_jtag_debug_module_agent:rf_source_valid -> cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire         cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // cpu_jtag_debug_module_agent:rf_source_startofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [94:0] cpu_jtag_debug_module_agent_rf_source_data;                                // cpu_jtag_debug_module_agent:rf_source_data -> cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire         cpu_jtag_debug_module_agent_rf_source_ready;                               // cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_agent:rf_source_ready
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_agent:rf_sink_valid
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [94:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // cpu_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_agent:rf_sink_data
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // cpu_jtag_debug_module_agent:rf_sink_ready -> cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire         cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire  [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // cpu_jtag_debug_module_agent:rdata_fifo_src_data -> cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire         cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> cpu_jtag_debug_module_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> cpu_jtag_debug_module_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> cpu_jtag_debug_module_agent:cp_startofpacket
	wire  [93:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> cpu_jtag_debug_module_agent:cp_data
	wire  [20:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> cpu_jtag_debug_module_agent:cp_channel
	wire         cmd_mux_src_ready;                                                         // cpu_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                  // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                   // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                    // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire  [13:0] onchip_memory2_0_s1_agent_m0_address;                                      // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire         onchip_memory2_0_s1_agent_m0_write;                                        // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire         onchip_memory2_0_s1_agent_m0_lock;                                         // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire         onchip_memory2_0_s1_agent_m0_read;                                         // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                     // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                  // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                   // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                           // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                 // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                         // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] onchip_memory2_0_s1_agent_rf_source_data;                                  // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                 // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                        // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                              // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                      // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire  [94:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                              // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                            // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                             // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                            // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire  [20:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                                     // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                        // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire   [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                         // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire  [13:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                            // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_write;                              // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                               // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_read;                               // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                           // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                        // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                         // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [94:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [94:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                    // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                   // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire         cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire         cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire  [93:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire  [20:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_002_src_ready;                                                     // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire         receive_parallel_to_processor_s1_agent_m0_waitrequest;                     // RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_waitrequest -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_waitrequest
	wire   [2:0] receive_parallel_to_processor_s1_agent_m0_burstcount;                      // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_burstcount -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_burstcount
	wire  [31:0] receive_parallel_to_processor_s1_agent_m0_writedata;                       // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_writedata -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_writedata
	wire  [13:0] receive_parallel_to_processor_s1_agent_m0_address;                         // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_address -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_address
	wire         receive_parallel_to_processor_s1_agent_m0_write;                           // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_write -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_write
	wire         receive_parallel_to_processor_s1_agent_m0_lock;                            // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_lock -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_lock
	wire         receive_parallel_to_processor_s1_agent_m0_read;                            // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_read -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_read
	wire  [31:0] receive_parallel_to_processor_s1_agent_m0_readdata;                        // RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_readdata -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_readdata
	wire         receive_parallel_to_processor_s1_agent_m0_readdatavalid;                   // RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_readdatavalid -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_readdatavalid
	wire         receive_parallel_to_processor_s1_agent_m0_debugaccess;                     // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_debugaccess -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_debugaccess
	wire   [3:0] receive_parallel_to_processor_s1_agent_m0_byteenable;                      // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:m0_byteenable -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_translator:uav_byteenable
	wire         receive_parallel_to_processor_s1_agent_rf_source_endofpacket;              // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_source_endofpacket -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:in_endofpacket
	wire         receive_parallel_to_processor_s1_agent_rf_source_valid;                    // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_source_valid -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:in_valid
	wire         receive_parallel_to_processor_s1_agent_rf_source_startofpacket;            // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_source_startofpacket -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] receive_parallel_to_processor_s1_agent_rf_source_data;                     // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_source_data -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:in_data
	wire         receive_parallel_to_processor_s1_agent_rf_source_ready;                    // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:in_ready -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_source_ready
	wire         receive_parallel_to_processor_s1_agent_rsp_fifo_out_endofpacket;           // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:out_endofpacket -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_sink_endofpacket
	wire         receive_parallel_to_processor_s1_agent_rsp_fifo_out_valid;                 // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:out_valid -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_sink_valid
	wire         receive_parallel_to_processor_s1_agent_rsp_fifo_out_startofpacket;         // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:out_startofpacket -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_sink_startofpacket
	wire  [94:0] receive_parallel_to_processor_s1_agent_rsp_fifo_out_data;                  // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:out_data -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_sink_data
	wire         receive_parallel_to_processor_s1_agent_rsp_fifo_out_ready;                 // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rf_sink_ready -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent_rsp_fifo:out_ready
	wire         receive_parallel_to_processor_s1_agent_rdata_fifo_src_valid;               // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rdata_fifo_src_valid -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] receive_parallel_to_processor_s1_agent_rdata_fifo_src_data;                // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rdata_fifo_src_data -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rdata_fifo_sink_data
	wire         receive_parallel_to_processor_s1_agent_rdata_fifo_src_ready;               // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rdata_fifo_sink_ready -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:cp_endofpacket
	wire         cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:cp_valid
	wire         cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:cp_data
	wire  [20:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:cp_channel
	wire         cmd_mux_003_src_ready;                                                     // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire         transmit_parallel_from_processor_s1_agent_m0_waitrequest;                  // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_waitrequest -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_waitrequest
	wire   [2:0] transmit_parallel_from_processor_s1_agent_m0_burstcount;                   // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_burstcount -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_burstcount
	wire  [31:0] transmit_parallel_from_processor_s1_agent_m0_writedata;                    // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_writedata -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_writedata
	wire  [13:0] transmit_parallel_from_processor_s1_agent_m0_address;                      // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_address -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_address
	wire         transmit_parallel_from_processor_s1_agent_m0_write;                        // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_write -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_write
	wire         transmit_parallel_from_processor_s1_agent_m0_lock;                         // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_lock -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_lock
	wire         transmit_parallel_from_processor_s1_agent_m0_read;                         // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_read -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_read
	wire  [31:0] transmit_parallel_from_processor_s1_agent_m0_readdata;                     // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_readdata -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_readdata
	wire         transmit_parallel_from_processor_s1_agent_m0_readdatavalid;                // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_readdatavalid -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_readdatavalid
	wire         transmit_parallel_from_processor_s1_agent_m0_debugaccess;                  // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_debugaccess -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_debugaccess
	wire   [3:0] transmit_parallel_from_processor_s1_agent_m0_byteenable;                   // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:m0_byteenable -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_translator:uav_byteenable
	wire         transmit_parallel_from_processor_s1_agent_rf_source_endofpacket;           // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_source_endofpacket -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:in_endofpacket
	wire         transmit_parallel_from_processor_s1_agent_rf_source_valid;                 // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_source_valid -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:in_valid
	wire         transmit_parallel_from_processor_s1_agent_rf_source_startofpacket;         // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_source_startofpacket -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] transmit_parallel_from_processor_s1_agent_rf_source_data;                  // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_source_data -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:in_data
	wire         transmit_parallel_from_processor_s1_agent_rf_source_ready;                 // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:in_ready -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_source_ready
	wire         transmit_parallel_from_processor_s1_agent_rsp_fifo_out_endofpacket;        // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:out_endofpacket -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_sink_endofpacket
	wire         transmit_parallel_from_processor_s1_agent_rsp_fifo_out_valid;              // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:out_valid -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_sink_valid
	wire         transmit_parallel_from_processor_s1_agent_rsp_fifo_out_startofpacket;      // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:out_startofpacket -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_sink_startofpacket
	wire  [94:0] transmit_parallel_from_processor_s1_agent_rsp_fifo_out_data;               // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:out_data -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_sink_data
	wire         transmit_parallel_from_processor_s1_agent_rsp_fifo_out_ready;              // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rf_sink_ready -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent_rsp_fifo:out_ready
	wire         transmit_parallel_from_processor_s1_agent_rdata_fifo_src_valid;            // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rdata_fifo_src_valid -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] transmit_parallel_from_processor_s1_agent_rdata_fifo_src_data;             // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rdata_fifo_src_data -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rdata_fifo_sink_data
	wire         transmit_parallel_from_processor_s1_agent_rdata_fifo_src_ready;            // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rdata_fifo_sink_ready -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:cp_data
	wire  [20:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                                     // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire         transmit_enable_s1_agent_m0_waitrequest;                                   // TRANSMIT_ENABLE_s1_translator:uav_waitrequest -> TRANSMIT_ENABLE_s1_agent:m0_waitrequest
	wire   [2:0] transmit_enable_s1_agent_m0_burstcount;                                    // TRANSMIT_ENABLE_s1_agent:m0_burstcount -> TRANSMIT_ENABLE_s1_translator:uav_burstcount
	wire  [31:0] transmit_enable_s1_agent_m0_writedata;                                     // TRANSMIT_ENABLE_s1_agent:m0_writedata -> TRANSMIT_ENABLE_s1_translator:uav_writedata
	wire  [13:0] transmit_enable_s1_agent_m0_address;                                       // TRANSMIT_ENABLE_s1_agent:m0_address -> TRANSMIT_ENABLE_s1_translator:uav_address
	wire         transmit_enable_s1_agent_m0_write;                                         // TRANSMIT_ENABLE_s1_agent:m0_write -> TRANSMIT_ENABLE_s1_translator:uav_write
	wire         transmit_enable_s1_agent_m0_lock;                                          // TRANSMIT_ENABLE_s1_agent:m0_lock -> TRANSMIT_ENABLE_s1_translator:uav_lock
	wire         transmit_enable_s1_agent_m0_read;                                          // TRANSMIT_ENABLE_s1_agent:m0_read -> TRANSMIT_ENABLE_s1_translator:uav_read
	wire  [31:0] transmit_enable_s1_agent_m0_readdata;                                      // TRANSMIT_ENABLE_s1_translator:uav_readdata -> TRANSMIT_ENABLE_s1_agent:m0_readdata
	wire         transmit_enable_s1_agent_m0_readdatavalid;                                 // TRANSMIT_ENABLE_s1_translator:uav_readdatavalid -> TRANSMIT_ENABLE_s1_agent:m0_readdatavalid
	wire         transmit_enable_s1_agent_m0_debugaccess;                                   // TRANSMIT_ENABLE_s1_agent:m0_debugaccess -> TRANSMIT_ENABLE_s1_translator:uav_debugaccess
	wire   [3:0] transmit_enable_s1_agent_m0_byteenable;                                    // TRANSMIT_ENABLE_s1_agent:m0_byteenable -> TRANSMIT_ENABLE_s1_translator:uav_byteenable
	wire         transmit_enable_s1_agent_rf_source_endofpacket;                            // TRANSMIT_ENABLE_s1_agent:rf_source_endofpacket -> TRANSMIT_ENABLE_s1_agent_rsp_fifo:in_endofpacket
	wire         transmit_enable_s1_agent_rf_source_valid;                                  // TRANSMIT_ENABLE_s1_agent:rf_source_valid -> TRANSMIT_ENABLE_s1_agent_rsp_fifo:in_valid
	wire         transmit_enable_s1_agent_rf_source_startofpacket;                          // TRANSMIT_ENABLE_s1_agent:rf_source_startofpacket -> TRANSMIT_ENABLE_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] transmit_enable_s1_agent_rf_source_data;                                   // TRANSMIT_ENABLE_s1_agent:rf_source_data -> TRANSMIT_ENABLE_s1_agent_rsp_fifo:in_data
	wire         transmit_enable_s1_agent_rf_source_ready;                                  // TRANSMIT_ENABLE_s1_agent_rsp_fifo:in_ready -> TRANSMIT_ENABLE_s1_agent:rf_source_ready
	wire         transmit_enable_s1_agent_rsp_fifo_out_endofpacket;                         // TRANSMIT_ENABLE_s1_agent_rsp_fifo:out_endofpacket -> TRANSMIT_ENABLE_s1_agent:rf_sink_endofpacket
	wire         transmit_enable_s1_agent_rsp_fifo_out_valid;                               // TRANSMIT_ENABLE_s1_agent_rsp_fifo:out_valid -> TRANSMIT_ENABLE_s1_agent:rf_sink_valid
	wire         transmit_enable_s1_agent_rsp_fifo_out_startofpacket;                       // TRANSMIT_ENABLE_s1_agent_rsp_fifo:out_startofpacket -> TRANSMIT_ENABLE_s1_agent:rf_sink_startofpacket
	wire  [94:0] transmit_enable_s1_agent_rsp_fifo_out_data;                                // TRANSMIT_ENABLE_s1_agent_rsp_fifo:out_data -> TRANSMIT_ENABLE_s1_agent:rf_sink_data
	wire         transmit_enable_s1_agent_rsp_fifo_out_ready;                               // TRANSMIT_ENABLE_s1_agent:rf_sink_ready -> TRANSMIT_ENABLE_s1_agent_rsp_fifo:out_ready
	wire         transmit_enable_s1_agent_rdata_fifo_src_valid;                             // TRANSMIT_ENABLE_s1_agent:rdata_fifo_src_valid -> TRANSMIT_ENABLE_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] transmit_enable_s1_agent_rdata_fifo_src_data;                              // TRANSMIT_ENABLE_s1_agent:rdata_fifo_src_data -> TRANSMIT_ENABLE_s1_agent:rdata_fifo_sink_data
	wire         transmit_enable_s1_agent_rdata_fifo_src_ready;                             // TRANSMIT_ENABLE_s1_agent:rdata_fifo_sink_ready -> TRANSMIT_ENABLE_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> TRANSMIT_ENABLE_s1_agent:cp_endofpacket
	wire         cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> TRANSMIT_ENABLE_s1_agent:cp_valid
	wire         cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> TRANSMIT_ENABLE_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> TRANSMIT_ENABLE_s1_agent:cp_data
	wire  [20:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> TRANSMIT_ENABLE_s1_agent:cp_channel
	wire         cmd_mux_005_src_ready;                                                     // TRANSMIT_ENABLE_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire         transmit_character_sent_s1_agent_m0_waitrequest;                           // TRANSMIT_CHARACTER_SENT_s1_translator:uav_waitrequest -> TRANSMIT_CHARACTER_SENT_s1_agent:m0_waitrequest
	wire   [2:0] transmit_character_sent_s1_agent_m0_burstcount;                            // TRANSMIT_CHARACTER_SENT_s1_agent:m0_burstcount -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_burstcount
	wire  [31:0] transmit_character_sent_s1_agent_m0_writedata;                             // TRANSMIT_CHARACTER_SENT_s1_agent:m0_writedata -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_writedata
	wire  [13:0] transmit_character_sent_s1_agent_m0_address;                               // TRANSMIT_CHARACTER_SENT_s1_agent:m0_address -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_address
	wire         transmit_character_sent_s1_agent_m0_write;                                 // TRANSMIT_CHARACTER_SENT_s1_agent:m0_write -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_write
	wire         transmit_character_sent_s1_agent_m0_lock;                                  // TRANSMIT_CHARACTER_SENT_s1_agent:m0_lock -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_lock
	wire         transmit_character_sent_s1_agent_m0_read;                                  // TRANSMIT_CHARACTER_SENT_s1_agent:m0_read -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_read
	wire  [31:0] transmit_character_sent_s1_agent_m0_readdata;                              // TRANSMIT_CHARACTER_SENT_s1_translator:uav_readdata -> TRANSMIT_CHARACTER_SENT_s1_agent:m0_readdata
	wire         transmit_character_sent_s1_agent_m0_readdatavalid;                         // TRANSMIT_CHARACTER_SENT_s1_translator:uav_readdatavalid -> TRANSMIT_CHARACTER_SENT_s1_agent:m0_readdatavalid
	wire         transmit_character_sent_s1_agent_m0_debugaccess;                           // TRANSMIT_CHARACTER_SENT_s1_agent:m0_debugaccess -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_debugaccess
	wire   [3:0] transmit_character_sent_s1_agent_m0_byteenable;                            // TRANSMIT_CHARACTER_SENT_s1_agent:m0_byteenable -> TRANSMIT_CHARACTER_SENT_s1_translator:uav_byteenable
	wire         transmit_character_sent_s1_agent_rf_source_endofpacket;                    // TRANSMIT_CHARACTER_SENT_s1_agent:rf_source_endofpacket -> TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:in_endofpacket
	wire         transmit_character_sent_s1_agent_rf_source_valid;                          // TRANSMIT_CHARACTER_SENT_s1_agent:rf_source_valid -> TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:in_valid
	wire         transmit_character_sent_s1_agent_rf_source_startofpacket;                  // TRANSMIT_CHARACTER_SENT_s1_agent:rf_source_startofpacket -> TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] transmit_character_sent_s1_agent_rf_source_data;                           // TRANSMIT_CHARACTER_SENT_s1_agent:rf_source_data -> TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:in_data
	wire         transmit_character_sent_s1_agent_rf_source_ready;                          // TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:in_ready -> TRANSMIT_CHARACTER_SENT_s1_agent:rf_source_ready
	wire         transmit_character_sent_s1_agent_rsp_fifo_out_endofpacket;                 // TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:out_endofpacket -> TRANSMIT_CHARACTER_SENT_s1_agent:rf_sink_endofpacket
	wire         transmit_character_sent_s1_agent_rsp_fifo_out_valid;                       // TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:out_valid -> TRANSMIT_CHARACTER_SENT_s1_agent:rf_sink_valid
	wire         transmit_character_sent_s1_agent_rsp_fifo_out_startofpacket;               // TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:out_startofpacket -> TRANSMIT_CHARACTER_SENT_s1_agent:rf_sink_startofpacket
	wire  [94:0] transmit_character_sent_s1_agent_rsp_fifo_out_data;                        // TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:out_data -> TRANSMIT_CHARACTER_SENT_s1_agent:rf_sink_data
	wire         transmit_character_sent_s1_agent_rsp_fifo_out_ready;                       // TRANSMIT_CHARACTER_SENT_s1_agent:rf_sink_ready -> TRANSMIT_CHARACTER_SENT_s1_agent_rsp_fifo:out_ready
	wire         transmit_character_sent_s1_agent_rdata_fifo_src_valid;                     // TRANSMIT_CHARACTER_SENT_s1_agent:rdata_fifo_src_valid -> TRANSMIT_CHARACTER_SENT_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] transmit_character_sent_s1_agent_rdata_fifo_src_data;                      // TRANSMIT_CHARACTER_SENT_s1_agent:rdata_fifo_src_data -> TRANSMIT_CHARACTER_SENT_s1_agent:rdata_fifo_sink_data
	wire         transmit_character_sent_s1_agent_rdata_fifo_src_ready;                     // TRANSMIT_CHARACTER_SENT_s1_agent:rdata_fifo_sink_ready -> TRANSMIT_CHARACTER_SENT_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> TRANSMIT_CHARACTER_SENT_s1_agent:cp_endofpacket
	wire         cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> TRANSMIT_CHARACTER_SENT_s1_agent:cp_valid
	wire         cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> TRANSMIT_CHARACTER_SENT_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> TRANSMIT_CHARACTER_SENT_s1_agent:cp_data
	wire  [20:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> TRANSMIT_CHARACTER_SENT_s1_agent:cp_channel
	wire         cmd_mux_006_src_ready;                                                     // TRANSMIT_CHARACTER_SENT_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire         transmit_load_s1_agent_m0_waitrequest;                                     // TRANSMIT_LOAD_s1_translator:uav_waitrequest -> TRANSMIT_LOAD_s1_agent:m0_waitrequest
	wire   [2:0] transmit_load_s1_agent_m0_burstcount;                                      // TRANSMIT_LOAD_s1_agent:m0_burstcount -> TRANSMIT_LOAD_s1_translator:uav_burstcount
	wire  [31:0] transmit_load_s1_agent_m0_writedata;                                       // TRANSMIT_LOAD_s1_agent:m0_writedata -> TRANSMIT_LOAD_s1_translator:uav_writedata
	wire  [13:0] transmit_load_s1_agent_m0_address;                                         // TRANSMIT_LOAD_s1_agent:m0_address -> TRANSMIT_LOAD_s1_translator:uav_address
	wire         transmit_load_s1_agent_m0_write;                                           // TRANSMIT_LOAD_s1_agent:m0_write -> TRANSMIT_LOAD_s1_translator:uav_write
	wire         transmit_load_s1_agent_m0_lock;                                            // TRANSMIT_LOAD_s1_agent:m0_lock -> TRANSMIT_LOAD_s1_translator:uav_lock
	wire         transmit_load_s1_agent_m0_read;                                            // TRANSMIT_LOAD_s1_agent:m0_read -> TRANSMIT_LOAD_s1_translator:uav_read
	wire  [31:0] transmit_load_s1_agent_m0_readdata;                                        // TRANSMIT_LOAD_s1_translator:uav_readdata -> TRANSMIT_LOAD_s1_agent:m0_readdata
	wire         transmit_load_s1_agent_m0_readdatavalid;                                   // TRANSMIT_LOAD_s1_translator:uav_readdatavalid -> TRANSMIT_LOAD_s1_agent:m0_readdatavalid
	wire         transmit_load_s1_agent_m0_debugaccess;                                     // TRANSMIT_LOAD_s1_agent:m0_debugaccess -> TRANSMIT_LOAD_s1_translator:uav_debugaccess
	wire   [3:0] transmit_load_s1_agent_m0_byteenable;                                      // TRANSMIT_LOAD_s1_agent:m0_byteenable -> TRANSMIT_LOAD_s1_translator:uav_byteenable
	wire         transmit_load_s1_agent_rf_source_endofpacket;                              // TRANSMIT_LOAD_s1_agent:rf_source_endofpacket -> TRANSMIT_LOAD_s1_agent_rsp_fifo:in_endofpacket
	wire         transmit_load_s1_agent_rf_source_valid;                                    // TRANSMIT_LOAD_s1_agent:rf_source_valid -> TRANSMIT_LOAD_s1_agent_rsp_fifo:in_valid
	wire         transmit_load_s1_agent_rf_source_startofpacket;                            // TRANSMIT_LOAD_s1_agent:rf_source_startofpacket -> TRANSMIT_LOAD_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] transmit_load_s1_agent_rf_source_data;                                     // TRANSMIT_LOAD_s1_agent:rf_source_data -> TRANSMIT_LOAD_s1_agent_rsp_fifo:in_data
	wire         transmit_load_s1_agent_rf_source_ready;                                    // TRANSMIT_LOAD_s1_agent_rsp_fifo:in_ready -> TRANSMIT_LOAD_s1_agent:rf_source_ready
	wire         transmit_load_s1_agent_rsp_fifo_out_endofpacket;                           // TRANSMIT_LOAD_s1_agent_rsp_fifo:out_endofpacket -> TRANSMIT_LOAD_s1_agent:rf_sink_endofpacket
	wire         transmit_load_s1_agent_rsp_fifo_out_valid;                                 // TRANSMIT_LOAD_s1_agent_rsp_fifo:out_valid -> TRANSMIT_LOAD_s1_agent:rf_sink_valid
	wire         transmit_load_s1_agent_rsp_fifo_out_startofpacket;                         // TRANSMIT_LOAD_s1_agent_rsp_fifo:out_startofpacket -> TRANSMIT_LOAD_s1_agent:rf_sink_startofpacket
	wire  [94:0] transmit_load_s1_agent_rsp_fifo_out_data;                                  // TRANSMIT_LOAD_s1_agent_rsp_fifo:out_data -> TRANSMIT_LOAD_s1_agent:rf_sink_data
	wire         transmit_load_s1_agent_rsp_fifo_out_ready;                                 // TRANSMIT_LOAD_s1_agent:rf_sink_ready -> TRANSMIT_LOAD_s1_agent_rsp_fifo:out_ready
	wire         transmit_load_s1_agent_rdata_fifo_src_valid;                               // TRANSMIT_LOAD_s1_agent:rdata_fifo_src_valid -> TRANSMIT_LOAD_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] transmit_load_s1_agent_rdata_fifo_src_data;                                // TRANSMIT_LOAD_s1_agent:rdata_fifo_src_data -> TRANSMIT_LOAD_s1_agent:rdata_fifo_sink_data
	wire         transmit_load_s1_agent_rdata_fifo_src_ready;                               // TRANSMIT_LOAD_s1_agent:rdata_fifo_sink_ready -> TRANSMIT_LOAD_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> TRANSMIT_LOAD_s1_agent:cp_endofpacket
	wire         cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> TRANSMIT_LOAD_s1_agent:cp_valid
	wire         cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> TRANSMIT_LOAD_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> TRANSMIT_LOAD_s1_agent:cp_data
	wire  [20:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> TRANSMIT_LOAD_s1_agent:cp_channel
	wire         cmd_mux_007_src_ready;                                                     // TRANSMIT_LOAD_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire         receive_character_received_s1_agent_m0_waitrequest;                        // RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_waitrequest -> RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_waitrequest
	wire   [2:0] receive_character_received_s1_agent_m0_burstcount;                         // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_burstcount -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_burstcount
	wire  [31:0] receive_character_received_s1_agent_m0_writedata;                          // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_writedata -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_writedata
	wire  [13:0] receive_character_received_s1_agent_m0_address;                            // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_address -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_address
	wire         receive_character_received_s1_agent_m0_write;                              // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_write -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_write
	wire         receive_character_received_s1_agent_m0_lock;                               // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_lock -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_lock
	wire         receive_character_received_s1_agent_m0_read;                               // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_read -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_read
	wire  [31:0] receive_character_received_s1_agent_m0_readdata;                           // RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_readdata -> RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_readdata
	wire         receive_character_received_s1_agent_m0_readdatavalid;                      // RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_readdatavalid -> RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_readdatavalid
	wire         receive_character_received_s1_agent_m0_debugaccess;                        // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_debugaccess -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_debugaccess
	wire   [3:0] receive_character_received_s1_agent_m0_byteenable;                         // RECEIVE_CHARACTER_RECEIVED_s1_agent:m0_byteenable -> RECEIVE_CHARACTER_RECEIVED_s1_translator:uav_byteenable
	wire         receive_character_received_s1_agent_rf_source_endofpacket;                 // RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_source_endofpacket -> RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:in_endofpacket
	wire         receive_character_received_s1_agent_rf_source_valid;                       // RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_source_valid -> RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:in_valid
	wire         receive_character_received_s1_agent_rf_source_startofpacket;               // RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_source_startofpacket -> RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] receive_character_received_s1_agent_rf_source_data;                        // RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_source_data -> RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:in_data
	wire         receive_character_received_s1_agent_rf_source_ready;                       // RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:in_ready -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_source_ready
	wire         receive_character_received_s1_agent_rsp_fifo_out_endofpacket;              // RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:out_endofpacket -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_sink_endofpacket
	wire         receive_character_received_s1_agent_rsp_fifo_out_valid;                    // RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:out_valid -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_sink_valid
	wire         receive_character_received_s1_agent_rsp_fifo_out_startofpacket;            // RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:out_startofpacket -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_sink_startofpacket
	wire  [94:0] receive_character_received_s1_agent_rsp_fifo_out_data;                     // RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:out_data -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_sink_data
	wire         receive_character_received_s1_agent_rsp_fifo_out_ready;                    // RECEIVE_CHARACTER_RECEIVED_s1_agent:rf_sink_ready -> RECEIVE_CHARACTER_RECEIVED_s1_agent_rsp_fifo:out_ready
	wire         receive_character_received_s1_agent_rdata_fifo_src_valid;                  // RECEIVE_CHARACTER_RECEIVED_s1_agent:rdata_fifo_src_valid -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] receive_character_received_s1_agent_rdata_fifo_src_data;                   // RECEIVE_CHARACTER_RECEIVED_s1_agent:rdata_fifo_src_data -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rdata_fifo_sink_data
	wire         receive_character_received_s1_agent_rdata_fifo_src_ready;                  // RECEIVE_CHARACTER_RECEIVED_s1_agent:rdata_fifo_sink_ready -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> RECEIVE_CHARACTER_RECEIVED_s1_agent:cp_endofpacket
	wire         cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> RECEIVE_CHARACTER_RECEIVED_s1_agent:cp_valid
	wire         cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> RECEIVE_CHARACTER_RECEIVED_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> RECEIVE_CHARACTER_RECEIVED_s1_agent:cp_data
	wire  [20:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> RECEIVE_CHARACTER_RECEIVED_s1_agent:cp_channel
	wire         cmd_mux_008_src_ready;                                                     // RECEIVE_CHARACTER_RECEIVED_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire         sram_address_s1_agent_m0_waitrequest;                                      // SRAM_ADDRESS_s1_translator:uav_waitrequest -> SRAM_ADDRESS_s1_agent:m0_waitrequest
	wire   [2:0] sram_address_s1_agent_m0_burstcount;                                       // SRAM_ADDRESS_s1_agent:m0_burstcount -> SRAM_ADDRESS_s1_translator:uav_burstcount
	wire  [31:0] sram_address_s1_agent_m0_writedata;                                        // SRAM_ADDRESS_s1_agent:m0_writedata -> SRAM_ADDRESS_s1_translator:uav_writedata
	wire  [13:0] sram_address_s1_agent_m0_address;                                          // SRAM_ADDRESS_s1_agent:m0_address -> SRAM_ADDRESS_s1_translator:uav_address
	wire         sram_address_s1_agent_m0_write;                                            // SRAM_ADDRESS_s1_agent:m0_write -> SRAM_ADDRESS_s1_translator:uav_write
	wire         sram_address_s1_agent_m0_lock;                                             // SRAM_ADDRESS_s1_agent:m0_lock -> SRAM_ADDRESS_s1_translator:uav_lock
	wire         sram_address_s1_agent_m0_read;                                             // SRAM_ADDRESS_s1_agent:m0_read -> SRAM_ADDRESS_s1_translator:uav_read
	wire  [31:0] sram_address_s1_agent_m0_readdata;                                         // SRAM_ADDRESS_s1_translator:uav_readdata -> SRAM_ADDRESS_s1_agent:m0_readdata
	wire         sram_address_s1_agent_m0_readdatavalid;                                    // SRAM_ADDRESS_s1_translator:uav_readdatavalid -> SRAM_ADDRESS_s1_agent:m0_readdatavalid
	wire         sram_address_s1_agent_m0_debugaccess;                                      // SRAM_ADDRESS_s1_agent:m0_debugaccess -> SRAM_ADDRESS_s1_translator:uav_debugaccess
	wire   [3:0] sram_address_s1_agent_m0_byteenable;                                       // SRAM_ADDRESS_s1_agent:m0_byteenable -> SRAM_ADDRESS_s1_translator:uav_byteenable
	wire         sram_address_s1_agent_rf_source_endofpacket;                               // SRAM_ADDRESS_s1_agent:rf_source_endofpacket -> SRAM_ADDRESS_s1_agent_rsp_fifo:in_endofpacket
	wire         sram_address_s1_agent_rf_source_valid;                                     // SRAM_ADDRESS_s1_agent:rf_source_valid -> SRAM_ADDRESS_s1_agent_rsp_fifo:in_valid
	wire         sram_address_s1_agent_rf_source_startofpacket;                             // SRAM_ADDRESS_s1_agent:rf_source_startofpacket -> SRAM_ADDRESS_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] sram_address_s1_agent_rf_source_data;                                      // SRAM_ADDRESS_s1_agent:rf_source_data -> SRAM_ADDRESS_s1_agent_rsp_fifo:in_data
	wire         sram_address_s1_agent_rf_source_ready;                                     // SRAM_ADDRESS_s1_agent_rsp_fifo:in_ready -> SRAM_ADDRESS_s1_agent:rf_source_ready
	wire         sram_address_s1_agent_rsp_fifo_out_endofpacket;                            // SRAM_ADDRESS_s1_agent_rsp_fifo:out_endofpacket -> SRAM_ADDRESS_s1_agent:rf_sink_endofpacket
	wire         sram_address_s1_agent_rsp_fifo_out_valid;                                  // SRAM_ADDRESS_s1_agent_rsp_fifo:out_valid -> SRAM_ADDRESS_s1_agent:rf_sink_valid
	wire         sram_address_s1_agent_rsp_fifo_out_startofpacket;                          // SRAM_ADDRESS_s1_agent_rsp_fifo:out_startofpacket -> SRAM_ADDRESS_s1_agent:rf_sink_startofpacket
	wire  [94:0] sram_address_s1_agent_rsp_fifo_out_data;                                   // SRAM_ADDRESS_s1_agent_rsp_fifo:out_data -> SRAM_ADDRESS_s1_agent:rf_sink_data
	wire         sram_address_s1_agent_rsp_fifo_out_ready;                                  // SRAM_ADDRESS_s1_agent:rf_sink_ready -> SRAM_ADDRESS_s1_agent_rsp_fifo:out_ready
	wire         sram_address_s1_agent_rdata_fifo_src_valid;                                // SRAM_ADDRESS_s1_agent:rdata_fifo_src_valid -> SRAM_ADDRESS_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sram_address_s1_agent_rdata_fifo_src_data;                                 // SRAM_ADDRESS_s1_agent:rdata_fifo_src_data -> SRAM_ADDRESS_s1_agent:rdata_fifo_sink_data
	wire         sram_address_s1_agent_rdata_fifo_src_ready;                                // SRAM_ADDRESS_s1_agent:rdata_fifo_sink_ready -> SRAM_ADDRESS_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> SRAM_ADDRESS_s1_agent:cp_endofpacket
	wire         cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> SRAM_ADDRESS_s1_agent:cp_valid
	wire         cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> SRAM_ADDRESS_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> SRAM_ADDRESS_s1_agent:cp_data
	wire  [20:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> SRAM_ADDRESS_s1_agent:cp_channel
	wire         cmd_mux_009_src_ready;                                                     // SRAM_ADDRESS_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire         sram_data_s1_agent_m0_waitrequest;                                         // SRAM_DATA_s1_translator:uav_waitrequest -> SRAM_DATA_s1_agent:m0_waitrequest
	wire   [2:0] sram_data_s1_agent_m0_burstcount;                                          // SRAM_DATA_s1_agent:m0_burstcount -> SRAM_DATA_s1_translator:uav_burstcount
	wire  [31:0] sram_data_s1_agent_m0_writedata;                                           // SRAM_DATA_s1_agent:m0_writedata -> SRAM_DATA_s1_translator:uav_writedata
	wire  [13:0] sram_data_s1_agent_m0_address;                                             // SRAM_DATA_s1_agent:m0_address -> SRAM_DATA_s1_translator:uav_address
	wire         sram_data_s1_agent_m0_write;                                               // SRAM_DATA_s1_agent:m0_write -> SRAM_DATA_s1_translator:uav_write
	wire         sram_data_s1_agent_m0_lock;                                                // SRAM_DATA_s1_agent:m0_lock -> SRAM_DATA_s1_translator:uav_lock
	wire         sram_data_s1_agent_m0_read;                                                // SRAM_DATA_s1_agent:m0_read -> SRAM_DATA_s1_translator:uav_read
	wire  [31:0] sram_data_s1_agent_m0_readdata;                                            // SRAM_DATA_s1_translator:uav_readdata -> SRAM_DATA_s1_agent:m0_readdata
	wire         sram_data_s1_agent_m0_readdatavalid;                                       // SRAM_DATA_s1_translator:uav_readdatavalid -> SRAM_DATA_s1_agent:m0_readdatavalid
	wire         sram_data_s1_agent_m0_debugaccess;                                         // SRAM_DATA_s1_agent:m0_debugaccess -> SRAM_DATA_s1_translator:uav_debugaccess
	wire   [3:0] sram_data_s1_agent_m0_byteenable;                                          // SRAM_DATA_s1_agent:m0_byteenable -> SRAM_DATA_s1_translator:uav_byteenable
	wire         sram_data_s1_agent_rf_source_endofpacket;                                  // SRAM_DATA_s1_agent:rf_source_endofpacket -> SRAM_DATA_s1_agent_rsp_fifo:in_endofpacket
	wire         sram_data_s1_agent_rf_source_valid;                                        // SRAM_DATA_s1_agent:rf_source_valid -> SRAM_DATA_s1_agent_rsp_fifo:in_valid
	wire         sram_data_s1_agent_rf_source_startofpacket;                                // SRAM_DATA_s1_agent:rf_source_startofpacket -> SRAM_DATA_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] sram_data_s1_agent_rf_source_data;                                         // SRAM_DATA_s1_agent:rf_source_data -> SRAM_DATA_s1_agent_rsp_fifo:in_data
	wire         sram_data_s1_agent_rf_source_ready;                                        // SRAM_DATA_s1_agent_rsp_fifo:in_ready -> SRAM_DATA_s1_agent:rf_source_ready
	wire         sram_data_s1_agent_rsp_fifo_out_endofpacket;                               // SRAM_DATA_s1_agent_rsp_fifo:out_endofpacket -> SRAM_DATA_s1_agent:rf_sink_endofpacket
	wire         sram_data_s1_agent_rsp_fifo_out_valid;                                     // SRAM_DATA_s1_agent_rsp_fifo:out_valid -> SRAM_DATA_s1_agent:rf_sink_valid
	wire         sram_data_s1_agent_rsp_fifo_out_startofpacket;                             // SRAM_DATA_s1_agent_rsp_fifo:out_startofpacket -> SRAM_DATA_s1_agent:rf_sink_startofpacket
	wire  [94:0] sram_data_s1_agent_rsp_fifo_out_data;                                      // SRAM_DATA_s1_agent_rsp_fifo:out_data -> SRAM_DATA_s1_agent:rf_sink_data
	wire         sram_data_s1_agent_rsp_fifo_out_ready;                                     // SRAM_DATA_s1_agent:rf_sink_ready -> SRAM_DATA_s1_agent_rsp_fifo:out_ready
	wire         sram_data_s1_agent_rdata_fifo_src_valid;                                   // SRAM_DATA_s1_agent:rdata_fifo_src_valid -> SRAM_DATA_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sram_data_s1_agent_rdata_fifo_src_data;                                    // SRAM_DATA_s1_agent:rdata_fifo_src_data -> SRAM_DATA_s1_agent:rdata_fifo_sink_data
	wire         sram_data_s1_agent_rdata_fifo_src_ready;                                   // SRAM_DATA_s1_agent:rdata_fifo_sink_ready -> SRAM_DATA_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> SRAM_DATA_s1_agent:cp_endofpacket
	wire         cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> SRAM_DATA_s1_agent:cp_valid
	wire         cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> SRAM_DATA_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> SRAM_DATA_s1_agent:cp_data
	wire  [20:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> SRAM_DATA_s1_agent:cp_channel
	wire         cmd_mux_010_src_ready;                                                     // SRAM_DATA_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire         sram_enable_s1_agent_m0_waitrequest;                                       // SRAM_ENABLE_s1_translator:uav_waitrequest -> SRAM_ENABLE_s1_agent:m0_waitrequest
	wire   [2:0] sram_enable_s1_agent_m0_burstcount;                                        // SRAM_ENABLE_s1_agent:m0_burstcount -> SRAM_ENABLE_s1_translator:uav_burstcount
	wire  [31:0] sram_enable_s1_agent_m0_writedata;                                         // SRAM_ENABLE_s1_agent:m0_writedata -> SRAM_ENABLE_s1_translator:uav_writedata
	wire  [13:0] sram_enable_s1_agent_m0_address;                                           // SRAM_ENABLE_s1_agent:m0_address -> SRAM_ENABLE_s1_translator:uav_address
	wire         sram_enable_s1_agent_m0_write;                                             // SRAM_ENABLE_s1_agent:m0_write -> SRAM_ENABLE_s1_translator:uav_write
	wire         sram_enable_s1_agent_m0_lock;                                              // SRAM_ENABLE_s1_agent:m0_lock -> SRAM_ENABLE_s1_translator:uav_lock
	wire         sram_enable_s1_agent_m0_read;                                              // SRAM_ENABLE_s1_agent:m0_read -> SRAM_ENABLE_s1_translator:uav_read
	wire  [31:0] sram_enable_s1_agent_m0_readdata;                                          // SRAM_ENABLE_s1_translator:uav_readdata -> SRAM_ENABLE_s1_agent:m0_readdata
	wire         sram_enable_s1_agent_m0_readdatavalid;                                     // SRAM_ENABLE_s1_translator:uav_readdatavalid -> SRAM_ENABLE_s1_agent:m0_readdatavalid
	wire         sram_enable_s1_agent_m0_debugaccess;                                       // SRAM_ENABLE_s1_agent:m0_debugaccess -> SRAM_ENABLE_s1_translator:uav_debugaccess
	wire   [3:0] sram_enable_s1_agent_m0_byteenable;                                        // SRAM_ENABLE_s1_agent:m0_byteenable -> SRAM_ENABLE_s1_translator:uav_byteenable
	wire         sram_enable_s1_agent_rf_source_endofpacket;                                // SRAM_ENABLE_s1_agent:rf_source_endofpacket -> SRAM_ENABLE_s1_agent_rsp_fifo:in_endofpacket
	wire         sram_enable_s1_agent_rf_source_valid;                                      // SRAM_ENABLE_s1_agent:rf_source_valid -> SRAM_ENABLE_s1_agent_rsp_fifo:in_valid
	wire         sram_enable_s1_agent_rf_source_startofpacket;                              // SRAM_ENABLE_s1_agent:rf_source_startofpacket -> SRAM_ENABLE_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] sram_enable_s1_agent_rf_source_data;                                       // SRAM_ENABLE_s1_agent:rf_source_data -> SRAM_ENABLE_s1_agent_rsp_fifo:in_data
	wire         sram_enable_s1_agent_rf_source_ready;                                      // SRAM_ENABLE_s1_agent_rsp_fifo:in_ready -> SRAM_ENABLE_s1_agent:rf_source_ready
	wire         sram_enable_s1_agent_rsp_fifo_out_endofpacket;                             // SRAM_ENABLE_s1_agent_rsp_fifo:out_endofpacket -> SRAM_ENABLE_s1_agent:rf_sink_endofpacket
	wire         sram_enable_s1_agent_rsp_fifo_out_valid;                                   // SRAM_ENABLE_s1_agent_rsp_fifo:out_valid -> SRAM_ENABLE_s1_agent:rf_sink_valid
	wire         sram_enable_s1_agent_rsp_fifo_out_startofpacket;                           // SRAM_ENABLE_s1_agent_rsp_fifo:out_startofpacket -> SRAM_ENABLE_s1_agent:rf_sink_startofpacket
	wire  [94:0] sram_enable_s1_agent_rsp_fifo_out_data;                                    // SRAM_ENABLE_s1_agent_rsp_fifo:out_data -> SRAM_ENABLE_s1_agent:rf_sink_data
	wire         sram_enable_s1_agent_rsp_fifo_out_ready;                                   // SRAM_ENABLE_s1_agent:rf_sink_ready -> SRAM_ENABLE_s1_agent_rsp_fifo:out_ready
	wire         sram_enable_s1_agent_rdata_fifo_src_valid;                                 // SRAM_ENABLE_s1_agent:rdata_fifo_src_valid -> SRAM_ENABLE_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sram_enable_s1_agent_rdata_fifo_src_data;                                  // SRAM_ENABLE_s1_agent:rdata_fifo_src_data -> SRAM_ENABLE_s1_agent:rdata_fifo_sink_data
	wire         sram_enable_s1_agent_rdata_fifo_src_ready;                                 // SRAM_ENABLE_s1_agent:rdata_fifo_sink_ready -> SRAM_ENABLE_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> SRAM_ENABLE_s1_agent:cp_endofpacket
	wire         cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> SRAM_ENABLE_s1_agent:cp_valid
	wire         cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> SRAM_ENABLE_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> SRAM_ENABLE_s1_agent:cp_data
	wire  [20:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> SRAM_ENABLE_s1_agent:cp_channel
	wire         cmd_mux_011_src_ready;                                                     // SRAM_ENABLE_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire         sram_read_write_s1_agent_m0_waitrequest;                                   // SRAM_READ_WRITE_s1_translator:uav_waitrequest -> SRAM_READ_WRITE_s1_agent:m0_waitrequest
	wire   [2:0] sram_read_write_s1_agent_m0_burstcount;                                    // SRAM_READ_WRITE_s1_agent:m0_burstcount -> SRAM_READ_WRITE_s1_translator:uav_burstcount
	wire  [31:0] sram_read_write_s1_agent_m0_writedata;                                     // SRAM_READ_WRITE_s1_agent:m0_writedata -> SRAM_READ_WRITE_s1_translator:uav_writedata
	wire  [13:0] sram_read_write_s1_agent_m0_address;                                       // SRAM_READ_WRITE_s1_agent:m0_address -> SRAM_READ_WRITE_s1_translator:uav_address
	wire         sram_read_write_s1_agent_m0_write;                                         // SRAM_READ_WRITE_s1_agent:m0_write -> SRAM_READ_WRITE_s1_translator:uav_write
	wire         sram_read_write_s1_agent_m0_lock;                                          // SRAM_READ_WRITE_s1_agent:m0_lock -> SRAM_READ_WRITE_s1_translator:uav_lock
	wire         sram_read_write_s1_agent_m0_read;                                          // SRAM_READ_WRITE_s1_agent:m0_read -> SRAM_READ_WRITE_s1_translator:uav_read
	wire  [31:0] sram_read_write_s1_agent_m0_readdata;                                      // SRAM_READ_WRITE_s1_translator:uav_readdata -> SRAM_READ_WRITE_s1_agent:m0_readdata
	wire         sram_read_write_s1_agent_m0_readdatavalid;                                 // SRAM_READ_WRITE_s1_translator:uav_readdatavalid -> SRAM_READ_WRITE_s1_agent:m0_readdatavalid
	wire         sram_read_write_s1_agent_m0_debugaccess;                                   // SRAM_READ_WRITE_s1_agent:m0_debugaccess -> SRAM_READ_WRITE_s1_translator:uav_debugaccess
	wire   [3:0] sram_read_write_s1_agent_m0_byteenable;                                    // SRAM_READ_WRITE_s1_agent:m0_byteenable -> SRAM_READ_WRITE_s1_translator:uav_byteenable
	wire         sram_read_write_s1_agent_rf_source_endofpacket;                            // SRAM_READ_WRITE_s1_agent:rf_source_endofpacket -> SRAM_READ_WRITE_s1_agent_rsp_fifo:in_endofpacket
	wire         sram_read_write_s1_agent_rf_source_valid;                                  // SRAM_READ_WRITE_s1_agent:rf_source_valid -> SRAM_READ_WRITE_s1_agent_rsp_fifo:in_valid
	wire         sram_read_write_s1_agent_rf_source_startofpacket;                          // SRAM_READ_WRITE_s1_agent:rf_source_startofpacket -> SRAM_READ_WRITE_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] sram_read_write_s1_agent_rf_source_data;                                   // SRAM_READ_WRITE_s1_agent:rf_source_data -> SRAM_READ_WRITE_s1_agent_rsp_fifo:in_data
	wire         sram_read_write_s1_agent_rf_source_ready;                                  // SRAM_READ_WRITE_s1_agent_rsp_fifo:in_ready -> SRAM_READ_WRITE_s1_agent:rf_source_ready
	wire         sram_read_write_s1_agent_rsp_fifo_out_endofpacket;                         // SRAM_READ_WRITE_s1_agent_rsp_fifo:out_endofpacket -> SRAM_READ_WRITE_s1_agent:rf_sink_endofpacket
	wire         sram_read_write_s1_agent_rsp_fifo_out_valid;                               // SRAM_READ_WRITE_s1_agent_rsp_fifo:out_valid -> SRAM_READ_WRITE_s1_agent:rf_sink_valid
	wire         sram_read_write_s1_agent_rsp_fifo_out_startofpacket;                       // SRAM_READ_WRITE_s1_agent_rsp_fifo:out_startofpacket -> SRAM_READ_WRITE_s1_agent:rf_sink_startofpacket
	wire  [94:0] sram_read_write_s1_agent_rsp_fifo_out_data;                                // SRAM_READ_WRITE_s1_agent_rsp_fifo:out_data -> SRAM_READ_WRITE_s1_agent:rf_sink_data
	wire         sram_read_write_s1_agent_rsp_fifo_out_ready;                               // SRAM_READ_WRITE_s1_agent:rf_sink_ready -> SRAM_READ_WRITE_s1_agent_rsp_fifo:out_ready
	wire         sram_read_write_s1_agent_rdata_fifo_src_valid;                             // SRAM_READ_WRITE_s1_agent:rdata_fifo_src_valid -> SRAM_READ_WRITE_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sram_read_write_s1_agent_rdata_fifo_src_data;                              // SRAM_READ_WRITE_s1_agent:rdata_fifo_src_data -> SRAM_READ_WRITE_s1_agent:rdata_fifo_sink_data
	wire         sram_read_write_s1_agent_rdata_fifo_src_ready;                             // SRAM_READ_WRITE_s1_agent:rdata_fifo_sink_ready -> SRAM_READ_WRITE_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> SRAM_READ_WRITE_s1_agent:cp_endofpacket
	wire         cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> SRAM_READ_WRITE_s1_agent:cp_valid
	wire         cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> SRAM_READ_WRITE_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> SRAM_READ_WRITE_s1_agent:cp_data
	wire  [20:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> SRAM_READ_WRITE_s1_agent:cp_channel
	wire         cmd_mux_012_src_ready;                                                     // SRAM_READ_WRITE_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire         gunner_left_s1_agent_m0_waitrequest;                                       // GUNNER_LEFT_s1_translator:uav_waitrequest -> GUNNER_LEFT_s1_agent:m0_waitrequest
	wire   [2:0] gunner_left_s1_agent_m0_burstcount;                                        // GUNNER_LEFT_s1_agent:m0_burstcount -> GUNNER_LEFT_s1_translator:uav_burstcount
	wire  [31:0] gunner_left_s1_agent_m0_writedata;                                         // GUNNER_LEFT_s1_agent:m0_writedata -> GUNNER_LEFT_s1_translator:uav_writedata
	wire  [13:0] gunner_left_s1_agent_m0_address;                                           // GUNNER_LEFT_s1_agent:m0_address -> GUNNER_LEFT_s1_translator:uav_address
	wire         gunner_left_s1_agent_m0_write;                                             // GUNNER_LEFT_s1_agent:m0_write -> GUNNER_LEFT_s1_translator:uav_write
	wire         gunner_left_s1_agent_m0_lock;                                              // GUNNER_LEFT_s1_agent:m0_lock -> GUNNER_LEFT_s1_translator:uav_lock
	wire         gunner_left_s1_agent_m0_read;                                              // GUNNER_LEFT_s1_agent:m0_read -> GUNNER_LEFT_s1_translator:uav_read
	wire  [31:0] gunner_left_s1_agent_m0_readdata;                                          // GUNNER_LEFT_s1_translator:uav_readdata -> GUNNER_LEFT_s1_agent:m0_readdata
	wire         gunner_left_s1_agent_m0_readdatavalid;                                     // GUNNER_LEFT_s1_translator:uav_readdatavalid -> GUNNER_LEFT_s1_agent:m0_readdatavalid
	wire         gunner_left_s1_agent_m0_debugaccess;                                       // GUNNER_LEFT_s1_agent:m0_debugaccess -> GUNNER_LEFT_s1_translator:uav_debugaccess
	wire   [3:0] gunner_left_s1_agent_m0_byteenable;                                        // GUNNER_LEFT_s1_agent:m0_byteenable -> GUNNER_LEFT_s1_translator:uav_byteenable
	wire         gunner_left_s1_agent_rf_source_endofpacket;                                // GUNNER_LEFT_s1_agent:rf_source_endofpacket -> GUNNER_LEFT_s1_agent_rsp_fifo:in_endofpacket
	wire         gunner_left_s1_agent_rf_source_valid;                                      // GUNNER_LEFT_s1_agent:rf_source_valid -> GUNNER_LEFT_s1_agent_rsp_fifo:in_valid
	wire         gunner_left_s1_agent_rf_source_startofpacket;                              // GUNNER_LEFT_s1_agent:rf_source_startofpacket -> GUNNER_LEFT_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] gunner_left_s1_agent_rf_source_data;                                       // GUNNER_LEFT_s1_agent:rf_source_data -> GUNNER_LEFT_s1_agent_rsp_fifo:in_data
	wire         gunner_left_s1_agent_rf_source_ready;                                      // GUNNER_LEFT_s1_agent_rsp_fifo:in_ready -> GUNNER_LEFT_s1_agent:rf_source_ready
	wire         gunner_left_s1_agent_rsp_fifo_out_endofpacket;                             // GUNNER_LEFT_s1_agent_rsp_fifo:out_endofpacket -> GUNNER_LEFT_s1_agent:rf_sink_endofpacket
	wire         gunner_left_s1_agent_rsp_fifo_out_valid;                                   // GUNNER_LEFT_s1_agent_rsp_fifo:out_valid -> GUNNER_LEFT_s1_agent:rf_sink_valid
	wire         gunner_left_s1_agent_rsp_fifo_out_startofpacket;                           // GUNNER_LEFT_s1_agent_rsp_fifo:out_startofpacket -> GUNNER_LEFT_s1_agent:rf_sink_startofpacket
	wire  [94:0] gunner_left_s1_agent_rsp_fifo_out_data;                                    // GUNNER_LEFT_s1_agent_rsp_fifo:out_data -> GUNNER_LEFT_s1_agent:rf_sink_data
	wire         gunner_left_s1_agent_rsp_fifo_out_ready;                                   // GUNNER_LEFT_s1_agent:rf_sink_ready -> GUNNER_LEFT_s1_agent_rsp_fifo:out_ready
	wire         gunner_left_s1_agent_rdata_fifo_src_valid;                                 // GUNNER_LEFT_s1_agent:rdata_fifo_src_valid -> GUNNER_LEFT_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] gunner_left_s1_agent_rdata_fifo_src_data;                                  // GUNNER_LEFT_s1_agent:rdata_fifo_src_data -> GUNNER_LEFT_s1_agent:rdata_fifo_sink_data
	wire         gunner_left_s1_agent_rdata_fifo_src_ready;                                 // GUNNER_LEFT_s1_agent:rdata_fifo_sink_ready -> GUNNER_LEFT_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> GUNNER_LEFT_s1_agent:cp_endofpacket
	wire         cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> GUNNER_LEFT_s1_agent:cp_valid
	wire         cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> GUNNER_LEFT_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> GUNNER_LEFT_s1_agent:cp_data
	wire  [20:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> GUNNER_LEFT_s1_agent:cp_channel
	wire         cmd_mux_013_src_ready;                                                     // GUNNER_LEFT_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire         gunner_right_s1_agent_m0_waitrequest;                                      // GUNNER_RIGHT_s1_translator:uav_waitrequest -> GUNNER_RIGHT_s1_agent:m0_waitrequest
	wire   [2:0] gunner_right_s1_agent_m0_burstcount;                                       // GUNNER_RIGHT_s1_agent:m0_burstcount -> GUNNER_RIGHT_s1_translator:uav_burstcount
	wire  [31:0] gunner_right_s1_agent_m0_writedata;                                        // GUNNER_RIGHT_s1_agent:m0_writedata -> GUNNER_RIGHT_s1_translator:uav_writedata
	wire  [13:0] gunner_right_s1_agent_m0_address;                                          // GUNNER_RIGHT_s1_agent:m0_address -> GUNNER_RIGHT_s1_translator:uav_address
	wire         gunner_right_s1_agent_m0_write;                                            // GUNNER_RIGHT_s1_agent:m0_write -> GUNNER_RIGHT_s1_translator:uav_write
	wire         gunner_right_s1_agent_m0_lock;                                             // GUNNER_RIGHT_s1_agent:m0_lock -> GUNNER_RIGHT_s1_translator:uav_lock
	wire         gunner_right_s1_agent_m0_read;                                             // GUNNER_RIGHT_s1_agent:m0_read -> GUNNER_RIGHT_s1_translator:uav_read
	wire  [31:0] gunner_right_s1_agent_m0_readdata;                                         // GUNNER_RIGHT_s1_translator:uav_readdata -> GUNNER_RIGHT_s1_agent:m0_readdata
	wire         gunner_right_s1_agent_m0_readdatavalid;                                    // GUNNER_RIGHT_s1_translator:uav_readdatavalid -> GUNNER_RIGHT_s1_agent:m0_readdatavalid
	wire         gunner_right_s1_agent_m0_debugaccess;                                      // GUNNER_RIGHT_s1_agent:m0_debugaccess -> GUNNER_RIGHT_s1_translator:uav_debugaccess
	wire   [3:0] gunner_right_s1_agent_m0_byteenable;                                       // GUNNER_RIGHT_s1_agent:m0_byteenable -> GUNNER_RIGHT_s1_translator:uav_byteenable
	wire         gunner_right_s1_agent_rf_source_endofpacket;                               // GUNNER_RIGHT_s1_agent:rf_source_endofpacket -> GUNNER_RIGHT_s1_agent_rsp_fifo:in_endofpacket
	wire         gunner_right_s1_agent_rf_source_valid;                                     // GUNNER_RIGHT_s1_agent:rf_source_valid -> GUNNER_RIGHT_s1_agent_rsp_fifo:in_valid
	wire         gunner_right_s1_agent_rf_source_startofpacket;                             // GUNNER_RIGHT_s1_agent:rf_source_startofpacket -> GUNNER_RIGHT_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] gunner_right_s1_agent_rf_source_data;                                      // GUNNER_RIGHT_s1_agent:rf_source_data -> GUNNER_RIGHT_s1_agent_rsp_fifo:in_data
	wire         gunner_right_s1_agent_rf_source_ready;                                     // GUNNER_RIGHT_s1_agent_rsp_fifo:in_ready -> GUNNER_RIGHT_s1_agent:rf_source_ready
	wire         gunner_right_s1_agent_rsp_fifo_out_endofpacket;                            // GUNNER_RIGHT_s1_agent_rsp_fifo:out_endofpacket -> GUNNER_RIGHT_s1_agent:rf_sink_endofpacket
	wire         gunner_right_s1_agent_rsp_fifo_out_valid;                                  // GUNNER_RIGHT_s1_agent_rsp_fifo:out_valid -> GUNNER_RIGHT_s1_agent:rf_sink_valid
	wire         gunner_right_s1_agent_rsp_fifo_out_startofpacket;                          // GUNNER_RIGHT_s1_agent_rsp_fifo:out_startofpacket -> GUNNER_RIGHT_s1_agent:rf_sink_startofpacket
	wire  [94:0] gunner_right_s1_agent_rsp_fifo_out_data;                                   // GUNNER_RIGHT_s1_agent_rsp_fifo:out_data -> GUNNER_RIGHT_s1_agent:rf_sink_data
	wire         gunner_right_s1_agent_rsp_fifo_out_ready;                                  // GUNNER_RIGHT_s1_agent:rf_sink_ready -> GUNNER_RIGHT_s1_agent_rsp_fifo:out_ready
	wire         gunner_right_s1_agent_rdata_fifo_src_valid;                                // GUNNER_RIGHT_s1_agent:rdata_fifo_src_valid -> GUNNER_RIGHT_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] gunner_right_s1_agent_rdata_fifo_src_data;                                 // GUNNER_RIGHT_s1_agent:rdata_fifo_src_data -> GUNNER_RIGHT_s1_agent:rdata_fifo_sink_data
	wire         gunner_right_s1_agent_rdata_fifo_src_ready;                                // GUNNER_RIGHT_s1_agent:rdata_fifo_sink_ready -> GUNNER_RIGHT_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> GUNNER_RIGHT_s1_agent:cp_endofpacket
	wire         cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> GUNNER_RIGHT_s1_agent:cp_valid
	wire         cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> GUNNER_RIGHT_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> GUNNER_RIGHT_s1_agent:cp_data
	wire  [20:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> GUNNER_RIGHT_s1_agent:cp_channel
	wire         cmd_mux_014_src_ready;                                                     // GUNNER_RIGHT_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire         gunner_shoot_s1_agent_m0_waitrequest;                                      // GUNNER_SHOOT_s1_translator:uav_waitrequest -> GUNNER_SHOOT_s1_agent:m0_waitrequest
	wire   [2:0] gunner_shoot_s1_agent_m0_burstcount;                                       // GUNNER_SHOOT_s1_agent:m0_burstcount -> GUNNER_SHOOT_s1_translator:uav_burstcount
	wire  [31:0] gunner_shoot_s1_agent_m0_writedata;                                        // GUNNER_SHOOT_s1_agent:m0_writedata -> GUNNER_SHOOT_s1_translator:uav_writedata
	wire  [13:0] gunner_shoot_s1_agent_m0_address;                                          // GUNNER_SHOOT_s1_agent:m0_address -> GUNNER_SHOOT_s1_translator:uav_address
	wire         gunner_shoot_s1_agent_m0_write;                                            // GUNNER_SHOOT_s1_agent:m0_write -> GUNNER_SHOOT_s1_translator:uav_write
	wire         gunner_shoot_s1_agent_m0_lock;                                             // GUNNER_SHOOT_s1_agent:m0_lock -> GUNNER_SHOOT_s1_translator:uav_lock
	wire         gunner_shoot_s1_agent_m0_read;                                             // GUNNER_SHOOT_s1_agent:m0_read -> GUNNER_SHOOT_s1_translator:uav_read
	wire  [31:0] gunner_shoot_s1_agent_m0_readdata;                                         // GUNNER_SHOOT_s1_translator:uav_readdata -> GUNNER_SHOOT_s1_agent:m0_readdata
	wire         gunner_shoot_s1_agent_m0_readdatavalid;                                    // GUNNER_SHOOT_s1_translator:uav_readdatavalid -> GUNNER_SHOOT_s1_agent:m0_readdatavalid
	wire         gunner_shoot_s1_agent_m0_debugaccess;                                      // GUNNER_SHOOT_s1_agent:m0_debugaccess -> GUNNER_SHOOT_s1_translator:uav_debugaccess
	wire   [3:0] gunner_shoot_s1_agent_m0_byteenable;                                       // GUNNER_SHOOT_s1_agent:m0_byteenable -> GUNNER_SHOOT_s1_translator:uav_byteenable
	wire         gunner_shoot_s1_agent_rf_source_endofpacket;                               // GUNNER_SHOOT_s1_agent:rf_source_endofpacket -> GUNNER_SHOOT_s1_agent_rsp_fifo:in_endofpacket
	wire         gunner_shoot_s1_agent_rf_source_valid;                                     // GUNNER_SHOOT_s1_agent:rf_source_valid -> GUNNER_SHOOT_s1_agent_rsp_fifo:in_valid
	wire         gunner_shoot_s1_agent_rf_source_startofpacket;                             // GUNNER_SHOOT_s1_agent:rf_source_startofpacket -> GUNNER_SHOOT_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] gunner_shoot_s1_agent_rf_source_data;                                      // GUNNER_SHOOT_s1_agent:rf_source_data -> GUNNER_SHOOT_s1_agent_rsp_fifo:in_data
	wire         gunner_shoot_s1_agent_rf_source_ready;                                     // GUNNER_SHOOT_s1_agent_rsp_fifo:in_ready -> GUNNER_SHOOT_s1_agent:rf_source_ready
	wire         gunner_shoot_s1_agent_rsp_fifo_out_endofpacket;                            // GUNNER_SHOOT_s1_agent_rsp_fifo:out_endofpacket -> GUNNER_SHOOT_s1_agent:rf_sink_endofpacket
	wire         gunner_shoot_s1_agent_rsp_fifo_out_valid;                                  // GUNNER_SHOOT_s1_agent_rsp_fifo:out_valid -> GUNNER_SHOOT_s1_agent:rf_sink_valid
	wire         gunner_shoot_s1_agent_rsp_fifo_out_startofpacket;                          // GUNNER_SHOOT_s1_agent_rsp_fifo:out_startofpacket -> GUNNER_SHOOT_s1_agent:rf_sink_startofpacket
	wire  [94:0] gunner_shoot_s1_agent_rsp_fifo_out_data;                                   // GUNNER_SHOOT_s1_agent_rsp_fifo:out_data -> GUNNER_SHOOT_s1_agent:rf_sink_data
	wire         gunner_shoot_s1_agent_rsp_fifo_out_ready;                                  // GUNNER_SHOOT_s1_agent:rf_sink_ready -> GUNNER_SHOOT_s1_agent_rsp_fifo:out_ready
	wire         gunner_shoot_s1_agent_rdata_fifo_src_valid;                                // GUNNER_SHOOT_s1_agent:rdata_fifo_src_valid -> GUNNER_SHOOT_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] gunner_shoot_s1_agent_rdata_fifo_src_data;                                 // GUNNER_SHOOT_s1_agent:rdata_fifo_src_data -> GUNNER_SHOOT_s1_agent:rdata_fifo_sink_data
	wire         gunner_shoot_s1_agent_rdata_fifo_src_ready;                                // GUNNER_SHOOT_s1_agent:rdata_fifo_sink_ready -> GUNNER_SHOOT_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_015_src_endofpacket;                                               // cmd_mux_015:src_endofpacket -> GUNNER_SHOOT_s1_agent:cp_endofpacket
	wire         cmd_mux_015_src_valid;                                                     // cmd_mux_015:src_valid -> GUNNER_SHOOT_s1_agent:cp_valid
	wire         cmd_mux_015_src_startofpacket;                                             // cmd_mux_015:src_startofpacket -> GUNNER_SHOOT_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_015_src_data;                                                      // cmd_mux_015:src_data -> GUNNER_SHOOT_s1_agent:cp_data
	wire  [20:0] cmd_mux_015_src_channel;                                                   // cmd_mux_015:src_channel -> GUNNER_SHOOT_s1_agent:cp_channel
	wire         cmd_mux_015_src_ready;                                                     // GUNNER_SHOOT_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire         alien_shoot_s1_agent_m0_waitrequest;                                       // ALIEN_SHOOT_s1_translator:uav_waitrequest -> ALIEN_SHOOT_s1_agent:m0_waitrequest
	wire   [2:0] alien_shoot_s1_agent_m0_burstcount;                                        // ALIEN_SHOOT_s1_agent:m0_burstcount -> ALIEN_SHOOT_s1_translator:uav_burstcount
	wire  [31:0] alien_shoot_s1_agent_m0_writedata;                                         // ALIEN_SHOOT_s1_agent:m0_writedata -> ALIEN_SHOOT_s1_translator:uav_writedata
	wire  [13:0] alien_shoot_s1_agent_m0_address;                                           // ALIEN_SHOOT_s1_agent:m0_address -> ALIEN_SHOOT_s1_translator:uav_address
	wire         alien_shoot_s1_agent_m0_write;                                             // ALIEN_SHOOT_s1_agent:m0_write -> ALIEN_SHOOT_s1_translator:uav_write
	wire         alien_shoot_s1_agent_m0_lock;                                              // ALIEN_SHOOT_s1_agent:m0_lock -> ALIEN_SHOOT_s1_translator:uav_lock
	wire         alien_shoot_s1_agent_m0_read;                                              // ALIEN_SHOOT_s1_agent:m0_read -> ALIEN_SHOOT_s1_translator:uav_read
	wire  [31:0] alien_shoot_s1_agent_m0_readdata;                                          // ALIEN_SHOOT_s1_translator:uav_readdata -> ALIEN_SHOOT_s1_agent:m0_readdata
	wire         alien_shoot_s1_agent_m0_readdatavalid;                                     // ALIEN_SHOOT_s1_translator:uav_readdatavalid -> ALIEN_SHOOT_s1_agent:m0_readdatavalid
	wire         alien_shoot_s1_agent_m0_debugaccess;                                       // ALIEN_SHOOT_s1_agent:m0_debugaccess -> ALIEN_SHOOT_s1_translator:uav_debugaccess
	wire   [3:0] alien_shoot_s1_agent_m0_byteenable;                                        // ALIEN_SHOOT_s1_agent:m0_byteenable -> ALIEN_SHOOT_s1_translator:uav_byteenable
	wire         alien_shoot_s1_agent_rf_source_endofpacket;                                // ALIEN_SHOOT_s1_agent:rf_source_endofpacket -> ALIEN_SHOOT_s1_agent_rsp_fifo:in_endofpacket
	wire         alien_shoot_s1_agent_rf_source_valid;                                      // ALIEN_SHOOT_s1_agent:rf_source_valid -> ALIEN_SHOOT_s1_agent_rsp_fifo:in_valid
	wire         alien_shoot_s1_agent_rf_source_startofpacket;                              // ALIEN_SHOOT_s1_agent:rf_source_startofpacket -> ALIEN_SHOOT_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] alien_shoot_s1_agent_rf_source_data;                                       // ALIEN_SHOOT_s1_agent:rf_source_data -> ALIEN_SHOOT_s1_agent_rsp_fifo:in_data
	wire         alien_shoot_s1_agent_rf_source_ready;                                      // ALIEN_SHOOT_s1_agent_rsp_fifo:in_ready -> ALIEN_SHOOT_s1_agent:rf_source_ready
	wire         alien_shoot_s1_agent_rsp_fifo_out_endofpacket;                             // ALIEN_SHOOT_s1_agent_rsp_fifo:out_endofpacket -> ALIEN_SHOOT_s1_agent:rf_sink_endofpacket
	wire         alien_shoot_s1_agent_rsp_fifo_out_valid;                                   // ALIEN_SHOOT_s1_agent_rsp_fifo:out_valid -> ALIEN_SHOOT_s1_agent:rf_sink_valid
	wire         alien_shoot_s1_agent_rsp_fifo_out_startofpacket;                           // ALIEN_SHOOT_s1_agent_rsp_fifo:out_startofpacket -> ALIEN_SHOOT_s1_agent:rf_sink_startofpacket
	wire  [94:0] alien_shoot_s1_agent_rsp_fifo_out_data;                                    // ALIEN_SHOOT_s1_agent_rsp_fifo:out_data -> ALIEN_SHOOT_s1_agent:rf_sink_data
	wire         alien_shoot_s1_agent_rsp_fifo_out_ready;                                   // ALIEN_SHOOT_s1_agent:rf_sink_ready -> ALIEN_SHOOT_s1_agent_rsp_fifo:out_ready
	wire         alien_shoot_s1_agent_rdata_fifo_src_valid;                                 // ALIEN_SHOOT_s1_agent:rdata_fifo_src_valid -> ALIEN_SHOOT_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] alien_shoot_s1_agent_rdata_fifo_src_data;                                  // ALIEN_SHOOT_s1_agent:rdata_fifo_src_data -> ALIEN_SHOOT_s1_agent:rdata_fifo_sink_data
	wire         alien_shoot_s1_agent_rdata_fifo_src_ready;                                 // ALIEN_SHOOT_s1_agent:rdata_fifo_sink_ready -> ALIEN_SHOOT_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_016_src_endofpacket;                                               // cmd_mux_016:src_endofpacket -> ALIEN_SHOOT_s1_agent:cp_endofpacket
	wire         cmd_mux_016_src_valid;                                                     // cmd_mux_016:src_valid -> ALIEN_SHOOT_s1_agent:cp_valid
	wire         cmd_mux_016_src_startofpacket;                                             // cmd_mux_016:src_startofpacket -> ALIEN_SHOOT_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_016_src_data;                                                      // cmd_mux_016:src_data -> ALIEN_SHOOT_s1_agent:cp_data
	wire  [20:0] cmd_mux_016_src_channel;                                                   // cmd_mux_016:src_channel -> ALIEN_SHOOT_s1_agent:cp_channel
	wire         cmd_mux_016_src_ready;                                                     // ALIEN_SHOOT_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire         alien_x_position_s1_agent_m0_waitrequest;                                  // ALIEN_X_POSITION_s1_translator:uav_waitrequest -> ALIEN_X_POSITION_s1_agent:m0_waitrequest
	wire   [2:0] alien_x_position_s1_agent_m0_burstcount;                                   // ALIEN_X_POSITION_s1_agent:m0_burstcount -> ALIEN_X_POSITION_s1_translator:uav_burstcount
	wire  [31:0] alien_x_position_s1_agent_m0_writedata;                                    // ALIEN_X_POSITION_s1_agent:m0_writedata -> ALIEN_X_POSITION_s1_translator:uav_writedata
	wire  [13:0] alien_x_position_s1_agent_m0_address;                                      // ALIEN_X_POSITION_s1_agent:m0_address -> ALIEN_X_POSITION_s1_translator:uav_address
	wire         alien_x_position_s1_agent_m0_write;                                        // ALIEN_X_POSITION_s1_agent:m0_write -> ALIEN_X_POSITION_s1_translator:uav_write
	wire         alien_x_position_s1_agent_m0_lock;                                         // ALIEN_X_POSITION_s1_agent:m0_lock -> ALIEN_X_POSITION_s1_translator:uav_lock
	wire         alien_x_position_s1_agent_m0_read;                                         // ALIEN_X_POSITION_s1_agent:m0_read -> ALIEN_X_POSITION_s1_translator:uav_read
	wire  [31:0] alien_x_position_s1_agent_m0_readdata;                                     // ALIEN_X_POSITION_s1_translator:uav_readdata -> ALIEN_X_POSITION_s1_agent:m0_readdata
	wire         alien_x_position_s1_agent_m0_readdatavalid;                                // ALIEN_X_POSITION_s1_translator:uav_readdatavalid -> ALIEN_X_POSITION_s1_agent:m0_readdatavalid
	wire         alien_x_position_s1_agent_m0_debugaccess;                                  // ALIEN_X_POSITION_s1_agent:m0_debugaccess -> ALIEN_X_POSITION_s1_translator:uav_debugaccess
	wire   [3:0] alien_x_position_s1_agent_m0_byteenable;                                   // ALIEN_X_POSITION_s1_agent:m0_byteenable -> ALIEN_X_POSITION_s1_translator:uav_byteenable
	wire         alien_x_position_s1_agent_rf_source_endofpacket;                           // ALIEN_X_POSITION_s1_agent:rf_source_endofpacket -> ALIEN_X_POSITION_s1_agent_rsp_fifo:in_endofpacket
	wire         alien_x_position_s1_agent_rf_source_valid;                                 // ALIEN_X_POSITION_s1_agent:rf_source_valid -> ALIEN_X_POSITION_s1_agent_rsp_fifo:in_valid
	wire         alien_x_position_s1_agent_rf_source_startofpacket;                         // ALIEN_X_POSITION_s1_agent:rf_source_startofpacket -> ALIEN_X_POSITION_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] alien_x_position_s1_agent_rf_source_data;                                  // ALIEN_X_POSITION_s1_agent:rf_source_data -> ALIEN_X_POSITION_s1_agent_rsp_fifo:in_data
	wire         alien_x_position_s1_agent_rf_source_ready;                                 // ALIEN_X_POSITION_s1_agent_rsp_fifo:in_ready -> ALIEN_X_POSITION_s1_agent:rf_source_ready
	wire         alien_x_position_s1_agent_rsp_fifo_out_endofpacket;                        // ALIEN_X_POSITION_s1_agent_rsp_fifo:out_endofpacket -> ALIEN_X_POSITION_s1_agent:rf_sink_endofpacket
	wire         alien_x_position_s1_agent_rsp_fifo_out_valid;                              // ALIEN_X_POSITION_s1_agent_rsp_fifo:out_valid -> ALIEN_X_POSITION_s1_agent:rf_sink_valid
	wire         alien_x_position_s1_agent_rsp_fifo_out_startofpacket;                      // ALIEN_X_POSITION_s1_agent_rsp_fifo:out_startofpacket -> ALIEN_X_POSITION_s1_agent:rf_sink_startofpacket
	wire  [94:0] alien_x_position_s1_agent_rsp_fifo_out_data;                               // ALIEN_X_POSITION_s1_agent_rsp_fifo:out_data -> ALIEN_X_POSITION_s1_agent:rf_sink_data
	wire         alien_x_position_s1_agent_rsp_fifo_out_ready;                              // ALIEN_X_POSITION_s1_agent:rf_sink_ready -> ALIEN_X_POSITION_s1_agent_rsp_fifo:out_ready
	wire         alien_x_position_s1_agent_rdata_fifo_src_valid;                            // ALIEN_X_POSITION_s1_agent:rdata_fifo_src_valid -> ALIEN_X_POSITION_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] alien_x_position_s1_agent_rdata_fifo_src_data;                             // ALIEN_X_POSITION_s1_agent:rdata_fifo_src_data -> ALIEN_X_POSITION_s1_agent:rdata_fifo_sink_data
	wire         alien_x_position_s1_agent_rdata_fifo_src_ready;                            // ALIEN_X_POSITION_s1_agent:rdata_fifo_sink_ready -> ALIEN_X_POSITION_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_017_src_endofpacket;                                               // cmd_mux_017:src_endofpacket -> ALIEN_X_POSITION_s1_agent:cp_endofpacket
	wire         cmd_mux_017_src_valid;                                                     // cmd_mux_017:src_valid -> ALIEN_X_POSITION_s1_agent:cp_valid
	wire         cmd_mux_017_src_startofpacket;                                             // cmd_mux_017:src_startofpacket -> ALIEN_X_POSITION_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_017_src_data;                                                      // cmd_mux_017:src_data -> ALIEN_X_POSITION_s1_agent:cp_data
	wire  [20:0] cmd_mux_017_src_channel;                                                   // cmd_mux_017:src_channel -> ALIEN_X_POSITION_s1_agent:cp_channel
	wire         cmd_mux_017_src_ready;                                                     // ALIEN_X_POSITION_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire         alien_y_position_s1_agent_m0_waitrequest;                                  // ALIEN_Y_POSITION_s1_translator:uav_waitrequest -> ALIEN_Y_POSITION_s1_agent:m0_waitrequest
	wire   [2:0] alien_y_position_s1_agent_m0_burstcount;                                   // ALIEN_Y_POSITION_s1_agent:m0_burstcount -> ALIEN_Y_POSITION_s1_translator:uav_burstcount
	wire  [31:0] alien_y_position_s1_agent_m0_writedata;                                    // ALIEN_Y_POSITION_s1_agent:m0_writedata -> ALIEN_Y_POSITION_s1_translator:uav_writedata
	wire  [13:0] alien_y_position_s1_agent_m0_address;                                      // ALIEN_Y_POSITION_s1_agent:m0_address -> ALIEN_Y_POSITION_s1_translator:uav_address
	wire         alien_y_position_s1_agent_m0_write;                                        // ALIEN_Y_POSITION_s1_agent:m0_write -> ALIEN_Y_POSITION_s1_translator:uav_write
	wire         alien_y_position_s1_agent_m0_lock;                                         // ALIEN_Y_POSITION_s1_agent:m0_lock -> ALIEN_Y_POSITION_s1_translator:uav_lock
	wire         alien_y_position_s1_agent_m0_read;                                         // ALIEN_Y_POSITION_s1_agent:m0_read -> ALIEN_Y_POSITION_s1_translator:uav_read
	wire  [31:0] alien_y_position_s1_agent_m0_readdata;                                     // ALIEN_Y_POSITION_s1_translator:uav_readdata -> ALIEN_Y_POSITION_s1_agent:m0_readdata
	wire         alien_y_position_s1_agent_m0_readdatavalid;                                // ALIEN_Y_POSITION_s1_translator:uav_readdatavalid -> ALIEN_Y_POSITION_s1_agent:m0_readdatavalid
	wire         alien_y_position_s1_agent_m0_debugaccess;                                  // ALIEN_Y_POSITION_s1_agent:m0_debugaccess -> ALIEN_Y_POSITION_s1_translator:uav_debugaccess
	wire   [3:0] alien_y_position_s1_agent_m0_byteenable;                                   // ALIEN_Y_POSITION_s1_agent:m0_byteenable -> ALIEN_Y_POSITION_s1_translator:uav_byteenable
	wire         alien_y_position_s1_agent_rf_source_endofpacket;                           // ALIEN_Y_POSITION_s1_agent:rf_source_endofpacket -> ALIEN_Y_POSITION_s1_agent_rsp_fifo:in_endofpacket
	wire         alien_y_position_s1_agent_rf_source_valid;                                 // ALIEN_Y_POSITION_s1_agent:rf_source_valid -> ALIEN_Y_POSITION_s1_agent_rsp_fifo:in_valid
	wire         alien_y_position_s1_agent_rf_source_startofpacket;                         // ALIEN_Y_POSITION_s1_agent:rf_source_startofpacket -> ALIEN_Y_POSITION_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] alien_y_position_s1_agent_rf_source_data;                                  // ALIEN_Y_POSITION_s1_agent:rf_source_data -> ALIEN_Y_POSITION_s1_agent_rsp_fifo:in_data
	wire         alien_y_position_s1_agent_rf_source_ready;                                 // ALIEN_Y_POSITION_s1_agent_rsp_fifo:in_ready -> ALIEN_Y_POSITION_s1_agent:rf_source_ready
	wire         alien_y_position_s1_agent_rsp_fifo_out_endofpacket;                        // ALIEN_Y_POSITION_s1_agent_rsp_fifo:out_endofpacket -> ALIEN_Y_POSITION_s1_agent:rf_sink_endofpacket
	wire         alien_y_position_s1_agent_rsp_fifo_out_valid;                              // ALIEN_Y_POSITION_s1_agent_rsp_fifo:out_valid -> ALIEN_Y_POSITION_s1_agent:rf_sink_valid
	wire         alien_y_position_s1_agent_rsp_fifo_out_startofpacket;                      // ALIEN_Y_POSITION_s1_agent_rsp_fifo:out_startofpacket -> ALIEN_Y_POSITION_s1_agent:rf_sink_startofpacket
	wire  [94:0] alien_y_position_s1_agent_rsp_fifo_out_data;                               // ALIEN_Y_POSITION_s1_agent_rsp_fifo:out_data -> ALIEN_Y_POSITION_s1_agent:rf_sink_data
	wire         alien_y_position_s1_agent_rsp_fifo_out_ready;                              // ALIEN_Y_POSITION_s1_agent:rf_sink_ready -> ALIEN_Y_POSITION_s1_agent_rsp_fifo:out_ready
	wire         alien_y_position_s1_agent_rdata_fifo_src_valid;                            // ALIEN_Y_POSITION_s1_agent:rdata_fifo_src_valid -> ALIEN_Y_POSITION_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] alien_y_position_s1_agent_rdata_fifo_src_data;                             // ALIEN_Y_POSITION_s1_agent:rdata_fifo_src_data -> ALIEN_Y_POSITION_s1_agent:rdata_fifo_sink_data
	wire         alien_y_position_s1_agent_rdata_fifo_src_ready;                            // ALIEN_Y_POSITION_s1_agent:rdata_fifo_sink_ready -> ALIEN_Y_POSITION_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_018_src_endofpacket;                                               // cmd_mux_018:src_endofpacket -> ALIEN_Y_POSITION_s1_agent:cp_endofpacket
	wire         cmd_mux_018_src_valid;                                                     // cmd_mux_018:src_valid -> ALIEN_Y_POSITION_s1_agent:cp_valid
	wire         cmd_mux_018_src_startofpacket;                                             // cmd_mux_018:src_startofpacket -> ALIEN_Y_POSITION_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_018_src_data;                                                      // cmd_mux_018:src_data -> ALIEN_Y_POSITION_s1_agent:cp_data
	wire  [20:0] cmd_mux_018_src_channel;                                                   // cmd_mux_018:src_channel -> ALIEN_Y_POSITION_s1_agent:cp_channel
	wire         cmd_mux_018_src_ready;                                                     // ALIEN_Y_POSITION_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire         game_timer_s1_agent_m0_waitrequest;                                        // GAME_TIMER_s1_translator:uav_waitrequest -> GAME_TIMER_s1_agent:m0_waitrequest
	wire   [2:0] game_timer_s1_agent_m0_burstcount;                                         // GAME_TIMER_s1_agent:m0_burstcount -> GAME_TIMER_s1_translator:uav_burstcount
	wire  [31:0] game_timer_s1_agent_m0_writedata;                                          // GAME_TIMER_s1_agent:m0_writedata -> GAME_TIMER_s1_translator:uav_writedata
	wire  [13:0] game_timer_s1_agent_m0_address;                                            // GAME_TIMER_s1_agent:m0_address -> GAME_TIMER_s1_translator:uav_address
	wire         game_timer_s1_agent_m0_write;                                              // GAME_TIMER_s1_agent:m0_write -> GAME_TIMER_s1_translator:uav_write
	wire         game_timer_s1_agent_m0_lock;                                               // GAME_TIMER_s1_agent:m0_lock -> GAME_TIMER_s1_translator:uav_lock
	wire         game_timer_s1_agent_m0_read;                                               // GAME_TIMER_s1_agent:m0_read -> GAME_TIMER_s1_translator:uav_read
	wire  [31:0] game_timer_s1_agent_m0_readdata;                                           // GAME_TIMER_s1_translator:uav_readdata -> GAME_TIMER_s1_agent:m0_readdata
	wire         game_timer_s1_agent_m0_readdatavalid;                                      // GAME_TIMER_s1_translator:uav_readdatavalid -> GAME_TIMER_s1_agent:m0_readdatavalid
	wire         game_timer_s1_agent_m0_debugaccess;                                        // GAME_TIMER_s1_agent:m0_debugaccess -> GAME_TIMER_s1_translator:uav_debugaccess
	wire   [3:0] game_timer_s1_agent_m0_byteenable;                                         // GAME_TIMER_s1_agent:m0_byteenable -> GAME_TIMER_s1_translator:uav_byteenable
	wire         game_timer_s1_agent_rf_source_endofpacket;                                 // GAME_TIMER_s1_agent:rf_source_endofpacket -> GAME_TIMER_s1_agent_rsp_fifo:in_endofpacket
	wire         game_timer_s1_agent_rf_source_valid;                                       // GAME_TIMER_s1_agent:rf_source_valid -> GAME_TIMER_s1_agent_rsp_fifo:in_valid
	wire         game_timer_s1_agent_rf_source_startofpacket;                               // GAME_TIMER_s1_agent:rf_source_startofpacket -> GAME_TIMER_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] game_timer_s1_agent_rf_source_data;                                        // GAME_TIMER_s1_agent:rf_source_data -> GAME_TIMER_s1_agent_rsp_fifo:in_data
	wire         game_timer_s1_agent_rf_source_ready;                                       // GAME_TIMER_s1_agent_rsp_fifo:in_ready -> GAME_TIMER_s1_agent:rf_source_ready
	wire         game_timer_s1_agent_rsp_fifo_out_endofpacket;                              // GAME_TIMER_s1_agent_rsp_fifo:out_endofpacket -> GAME_TIMER_s1_agent:rf_sink_endofpacket
	wire         game_timer_s1_agent_rsp_fifo_out_valid;                                    // GAME_TIMER_s1_agent_rsp_fifo:out_valid -> GAME_TIMER_s1_agent:rf_sink_valid
	wire         game_timer_s1_agent_rsp_fifo_out_startofpacket;                            // GAME_TIMER_s1_agent_rsp_fifo:out_startofpacket -> GAME_TIMER_s1_agent:rf_sink_startofpacket
	wire  [94:0] game_timer_s1_agent_rsp_fifo_out_data;                                     // GAME_TIMER_s1_agent_rsp_fifo:out_data -> GAME_TIMER_s1_agent:rf_sink_data
	wire         game_timer_s1_agent_rsp_fifo_out_ready;                                    // GAME_TIMER_s1_agent:rf_sink_ready -> GAME_TIMER_s1_agent_rsp_fifo:out_ready
	wire         game_timer_s1_agent_rdata_fifo_src_valid;                                  // GAME_TIMER_s1_agent:rdata_fifo_src_valid -> GAME_TIMER_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] game_timer_s1_agent_rdata_fifo_src_data;                                   // GAME_TIMER_s1_agent:rdata_fifo_src_data -> GAME_TIMER_s1_agent:rdata_fifo_sink_data
	wire         game_timer_s1_agent_rdata_fifo_src_ready;                                  // GAME_TIMER_s1_agent:rdata_fifo_sink_ready -> GAME_TIMER_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_019_src_endofpacket;                                               // cmd_mux_019:src_endofpacket -> GAME_TIMER_s1_agent:cp_endofpacket
	wire         cmd_mux_019_src_valid;                                                     // cmd_mux_019:src_valid -> GAME_TIMER_s1_agent:cp_valid
	wire         cmd_mux_019_src_startofpacket;                                             // cmd_mux_019:src_startofpacket -> GAME_TIMER_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_019_src_data;                                                      // cmd_mux_019:src_data -> GAME_TIMER_s1_agent:cp_data
	wire  [20:0] cmd_mux_019_src_channel;                                                   // cmd_mux_019:src_channel -> GAME_TIMER_s1_agent:cp_channel
	wire         cmd_mux_019_src_ready;                                                     // GAME_TIMER_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire         random_number_lfsr_output_s1_agent_m0_waitrequest;                         // RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_waitrequest -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_waitrequest
	wire   [2:0] random_number_lfsr_output_s1_agent_m0_burstcount;                          // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_burstcount -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_burstcount
	wire  [31:0] random_number_lfsr_output_s1_agent_m0_writedata;                           // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_writedata -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_writedata
	wire  [13:0] random_number_lfsr_output_s1_agent_m0_address;                             // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_address -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_address
	wire         random_number_lfsr_output_s1_agent_m0_write;                               // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_write -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_write
	wire         random_number_lfsr_output_s1_agent_m0_lock;                                // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_lock -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_lock
	wire         random_number_lfsr_output_s1_agent_m0_read;                                // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_read -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_read
	wire  [31:0] random_number_lfsr_output_s1_agent_m0_readdata;                            // RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_readdata -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_readdata
	wire         random_number_lfsr_output_s1_agent_m0_readdatavalid;                       // RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_readdatavalid -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_readdatavalid
	wire         random_number_lfsr_output_s1_agent_m0_debugaccess;                         // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_debugaccess -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_debugaccess
	wire   [3:0] random_number_lfsr_output_s1_agent_m0_byteenable;                          // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:m0_byteenable -> RANDOM_NUMBER_LFSR_OUTPUT_s1_translator:uav_byteenable
	wire         random_number_lfsr_output_s1_agent_rf_source_endofpacket;                  // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_source_endofpacket -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:in_endofpacket
	wire         random_number_lfsr_output_s1_agent_rf_source_valid;                        // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_source_valid -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:in_valid
	wire         random_number_lfsr_output_s1_agent_rf_source_startofpacket;                // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_source_startofpacket -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:in_startofpacket
	wire  [94:0] random_number_lfsr_output_s1_agent_rf_source_data;                         // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_source_data -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:in_data
	wire         random_number_lfsr_output_s1_agent_rf_source_ready;                        // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:in_ready -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_source_ready
	wire         random_number_lfsr_output_s1_agent_rsp_fifo_out_endofpacket;               // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:out_endofpacket -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_sink_endofpacket
	wire         random_number_lfsr_output_s1_agent_rsp_fifo_out_valid;                     // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:out_valid -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_sink_valid
	wire         random_number_lfsr_output_s1_agent_rsp_fifo_out_startofpacket;             // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:out_startofpacket -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_sink_startofpacket
	wire  [94:0] random_number_lfsr_output_s1_agent_rsp_fifo_out_data;                      // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:out_data -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_sink_data
	wire         random_number_lfsr_output_s1_agent_rsp_fifo_out_ready;                     // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rf_sink_ready -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent_rsp_fifo:out_ready
	wire         random_number_lfsr_output_s1_agent_rdata_fifo_src_valid;                   // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rdata_fifo_src_valid -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] random_number_lfsr_output_s1_agent_rdata_fifo_src_data;                    // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rdata_fifo_src_data -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rdata_fifo_sink_data
	wire         random_number_lfsr_output_s1_agent_rdata_fifo_src_ready;                   // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rdata_fifo_sink_ready -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_020_src_endofpacket;                                               // cmd_mux_020:src_endofpacket -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:cp_endofpacket
	wire         cmd_mux_020_src_valid;                                                     // cmd_mux_020:src_valid -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:cp_valid
	wire         cmd_mux_020_src_startofpacket;                                             // cmd_mux_020:src_startofpacket -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:cp_startofpacket
	wire  [93:0] cmd_mux_020_src_data;                                                      // cmd_mux_020:src_data -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:cp_data
	wire  [20:0] cmd_mux_020_src_channel;                                                   // cmd_mux_020:src_channel -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:cp_channel
	wire         cmd_mux_020_src_ready;                                                     // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire         cpu_instruction_master_agent_cp_endofpacket;                               // cpu_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         cpu_instruction_master_agent_cp_valid;                                     // cpu_instruction_master_agent:cp_valid -> router:sink_valid
	wire         cpu_instruction_master_agent_cp_startofpacket;                             // cpu_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [93:0] cpu_instruction_master_agent_cp_data;                                      // cpu_instruction_master_agent:cp_data -> router:sink_data
	wire         cpu_instruction_master_agent_cp_ready;                                     // router:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire         router_src_endofpacket;                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         router_src_valid;                                                          // router:src_valid -> cmd_demux:sink_valid
	wire         router_src_startofpacket;                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [93:0] router_src_data;                                                           // router:src_data -> cmd_demux:sink_data
	wire  [20:0] router_src_channel;                                                        // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_ready;                                                          // cmd_demux:sink_ready -> router:src_ready
	wire         cpu_data_master_agent_cp_endofpacket;                                      // cpu_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         cpu_data_master_agent_cp_valid;                                            // cpu_data_master_agent:cp_valid -> router_001:sink_valid
	wire         cpu_data_master_agent_cp_startofpacket;                                    // cpu_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [93:0] cpu_data_master_agent_cp_data;                                             // cpu_data_master_agent:cp_data -> router_001:sink_data
	wire         cpu_data_master_agent_cp_ready;                                            // router_001:sink_ready -> cpu_data_master_agent:cp_ready
	wire         router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         router_001_src_valid;                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire         router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [93:0] router_001_src_data;                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire  [20:0] router_001_src_channel;                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_ready;                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire         cpu_jtag_debug_module_agent_rp_endofpacket;                                // cpu_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         cpu_jtag_debug_module_agent_rp_valid;                                      // cpu_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	wire         cpu_jtag_debug_module_agent_rp_startofpacket;                              // cpu_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [93:0] cpu_jtag_debug_module_agent_rp_data;                                       // cpu_jtag_debug_module_agent:rp_data -> router_002:sink_data
	wire         cpu_jtag_debug_module_agent_rp_ready;                                      // router_002:sink_ready -> cpu_jtag_debug_module_agent:rp_ready
	wire         router_002_src_endofpacket;                                                // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                                      // router_002:src_valid -> rsp_demux:sink_valid
	wire         router_002_src_startofpacket;                                              // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [93:0] router_002_src_data;                                                       // router_002:src_data -> rsp_demux:sink_data
	wire  [20:0] router_002_src_channel;                                                    // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_ready;                                                      // rsp_demux:sink_ready -> router_002:src_ready
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                  // onchip_memory2_0_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                        // onchip_memory2_0_s1_agent:rp_valid -> router_003:sink_valid
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                // onchip_memory2_0_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [93:0] onchip_memory2_0_s1_agent_rp_data;                                         // onchip_memory2_0_s1_agent:rp_data -> router_003:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                        // router_003:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         router_003_src_endofpacket;                                                // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_003_src_valid;                                                      // router_003:src_valid -> rsp_demux_001:sink_valid
	wire         router_003_src_startofpacket;                                              // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [93:0] router_003_src_data;                                                       // router_003:src_data -> rsp_demux_001:sink_data
	wire  [20:0] router_003_src_channel;                                                    // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_ready;                                                      // rsp_demux_001:sink_ready -> router_003:src_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                              // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                      // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [93:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                              // router_004:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire         router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire         router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [93:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire  [20:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_ready;                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire         receive_parallel_to_processor_s1_agent_rp_endofpacket;                     // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         receive_parallel_to_processor_s1_agent_rp_valid;                           // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rp_valid -> router_005:sink_valid
	wire         receive_parallel_to_processor_s1_agent_rp_startofpacket;                   // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [93:0] receive_parallel_to_processor_s1_agent_rp_data;                            // RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rp_data -> router_005:sink_data
	wire         receive_parallel_to_processor_s1_agent_rp_ready;                           // router_005:sink_ready -> RECEIVE_PARALLEL_TO_PROCESSOR_s1_agent:rp_ready
	wire         router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire         router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [93:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire  [20:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_ready;                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire         transmit_parallel_from_processor_s1_agent_rp_endofpacket;                  // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         transmit_parallel_from_processor_s1_agent_rp_valid;                        // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rp_valid -> router_006:sink_valid
	wire         transmit_parallel_from_processor_s1_agent_rp_startofpacket;                // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [93:0] transmit_parallel_from_processor_s1_agent_rp_data;                         // TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rp_data -> router_006:sink_data
	wire         transmit_parallel_from_processor_s1_agent_rp_ready;                        // router_006:sink_ready -> TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_agent:rp_ready
	wire         router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire         router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [93:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire  [20:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_ready;                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire         transmit_enable_s1_agent_rp_endofpacket;                                   // TRANSMIT_ENABLE_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         transmit_enable_s1_agent_rp_valid;                                         // TRANSMIT_ENABLE_s1_agent:rp_valid -> router_007:sink_valid
	wire         transmit_enable_s1_agent_rp_startofpacket;                                 // TRANSMIT_ENABLE_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [93:0] transmit_enable_s1_agent_rp_data;                                          // TRANSMIT_ENABLE_s1_agent:rp_data -> router_007:sink_data
	wire         transmit_enable_s1_agent_rp_ready;                                         // router_007:sink_ready -> TRANSMIT_ENABLE_s1_agent:rp_ready
	wire         router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_005:sink_valid
	wire         router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [93:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_005:sink_data
	wire  [20:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_ready;                                                      // rsp_demux_005:sink_ready -> router_007:src_ready
	wire         transmit_character_sent_s1_agent_rp_endofpacket;                           // TRANSMIT_CHARACTER_SENT_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         transmit_character_sent_s1_agent_rp_valid;                                 // TRANSMIT_CHARACTER_SENT_s1_agent:rp_valid -> router_008:sink_valid
	wire         transmit_character_sent_s1_agent_rp_startofpacket;                         // TRANSMIT_CHARACTER_SENT_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [93:0] transmit_character_sent_s1_agent_rp_data;                                  // TRANSMIT_CHARACTER_SENT_s1_agent:rp_data -> router_008:sink_data
	wire         transmit_character_sent_s1_agent_rp_ready;                                 // router_008:sink_ready -> TRANSMIT_CHARACTER_SENT_s1_agent:rp_ready
	wire         router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire         router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [93:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire  [20:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_ready;                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire         transmit_load_s1_agent_rp_endofpacket;                                     // TRANSMIT_LOAD_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         transmit_load_s1_agent_rp_valid;                                           // TRANSMIT_LOAD_s1_agent:rp_valid -> router_009:sink_valid
	wire         transmit_load_s1_agent_rp_startofpacket;                                   // TRANSMIT_LOAD_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [93:0] transmit_load_s1_agent_rp_data;                                            // TRANSMIT_LOAD_s1_agent:rp_data -> router_009:sink_data
	wire         transmit_load_s1_agent_rp_ready;                                           // router_009:sink_ready -> TRANSMIT_LOAD_s1_agent:rp_ready
	wire         router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire         router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [93:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire  [20:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_ready;                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire         receive_character_received_s1_agent_rp_endofpacket;                        // RECEIVE_CHARACTER_RECEIVED_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         receive_character_received_s1_agent_rp_valid;                              // RECEIVE_CHARACTER_RECEIVED_s1_agent:rp_valid -> router_010:sink_valid
	wire         receive_character_received_s1_agent_rp_startofpacket;                      // RECEIVE_CHARACTER_RECEIVED_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [93:0] receive_character_received_s1_agent_rp_data;                               // RECEIVE_CHARACTER_RECEIVED_s1_agent:rp_data -> router_010:sink_data
	wire         receive_character_received_s1_agent_rp_ready;                              // router_010:sink_ready -> RECEIVE_CHARACTER_RECEIVED_s1_agent:rp_ready
	wire         router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire         router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [93:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire  [20:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_ready;                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire         sram_address_s1_agent_rp_endofpacket;                                      // SRAM_ADDRESS_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         sram_address_s1_agent_rp_valid;                                            // SRAM_ADDRESS_s1_agent:rp_valid -> router_011:sink_valid
	wire         sram_address_s1_agent_rp_startofpacket;                                    // SRAM_ADDRESS_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [93:0] sram_address_s1_agent_rp_data;                                             // SRAM_ADDRESS_s1_agent:rp_data -> router_011:sink_data
	wire         sram_address_s1_agent_rp_ready;                                            // router_011:sink_ready -> SRAM_ADDRESS_s1_agent:rp_ready
	wire         router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire         router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [93:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire  [20:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_ready;                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire         sram_data_s1_agent_rp_endofpacket;                                         // SRAM_DATA_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         sram_data_s1_agent_rp_valid;                                               // SRAM_DATA_s1_agent:rp_valid -> router_012:sink_valid
	wire         sram_data_s1_agent_rp_startofpacket;                                       // SRAM_DATA_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [93:0] sram_data_s1_agent_rp_data;                                                // SRAM_DATA_s1_agent:rp_data -> router_012:sink_data
	wire         sram_data_s1_agent_rp_ready;                                               // router_012:sink_ready -> SRAM_DATA_s1_agent:rp_ready
	wire         router_012_src_endofpacket;                                                // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         router_012_src_valid;                                                      // router_012:src_valid -> rsp_demux_010:sink_valid
	wire         router_012_src_startofpacket;                                              // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [93:0] router_012_src_data;                                                       // router_012:src_data -> rsp_demux_010:sink_data
	wire  [20:0] router_012_src_channel;                                                    // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_ready;                                                      // rsp_demux_010:sink_ready -> router_012:src_ready
	wire         sram_enable_s1_agent_rp_endofpacket;                                       // SRAM_ENABLE_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         sram_enable_s1_agent_rp_valid;                                             // SRAM_ENABLE_s1_agent:rp_valid -> router_013:sink_valid
	wire         sram_enable_s1_agent_rp_startofpacket;                                     // SRAM_ENABLE_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [93:0] sram_enable_s1_agent_rp_data;                                              // SRAM_ENABLE_s1_agent:rp_data -> router_013:sink_data
	wire         sram_enable_s1_agent_rp_ready;                                             // router_013:sink_ready -> SRAM_ENABLE_s1_agent:rp_ready
	wire         router_013_src_endofpacket;                                                // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         router_013_src_valid;                                                      // router_013:src_valid -> rsp_demux_011:sink_valid
	wire         router_013_src_startofpacket;                                              // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [93:0] router_013_src_data;                                                       // router_013:src_data -> rsp_demux_011:sink_data
	wire  [20:0] router_013_src_channel;                                                    // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_ready;                                                      // rsp_demux_011:sink_ready -> router_013:src_ready
	wire         sram_read_write_s1_agent_rp_endofpacket;                                   // SRAM_READ_WRITE_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         sram_read_write_s1_agent_rp_valid;                                         // SRAM_READ_WRITE_s1_agent:rp_valid -> router_014:sink_valid
	wire         sram_read_write_s1_agent_rp_startofpacket;                                 // SRAM_READ_WRITE_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [93:0] sram_read_write_s1_agent_rp_data;                                          // SRAM_READ_WRITE_s1_agent:rp_data -> router_014:sink_data
	wire         sram_read_write_s1_agent_rp_ready;                                         // router_014:sink_ready -> SRAM_READ_WRITE_s1_agent:rp_ready
	wire         router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_012:sink_valid
	wire         router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [93:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_012:sink_data
	wire  [20:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_ready;                                                      // rsp_demux_012:sink_ready -> router_014:src_ready
	wire         gunner_left_s1_agent_rp_endofpacket;                                       // GUNNER_LEFT_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         gunner_left_s1_agent_rp_valid;                                             // GUNNER_LEFT_s1_agent:rp_valid -> router_015:sink_valid
	wire         gunner_left_s1_agent_rp_startofpacket;                                     // GUNNER_LEFT_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [93:0] gunner_left_s1_agent_rp_data;                                              // GUNNER_LEFT_s1_agent:rp_data -> router_015:sink_data
	wire         gunner_left_s1_agent_rp_ready;                                             // router_015:sink_ready -> GUNNER_LEFT_s1_agent:rp_ready
	wire         router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_013:sink_valid
	wire         router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [93:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_013:sink_data
	wire  [20:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_ready;                                                      // rsp_demux_013:sink_ready -> router_015:src_ready
	wire         gunner_right_s1_agent_rp_endofpacket;                                      // GUNNER_RIGHT_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         gunner_right_s1_agent_rp_valid;                                            // GUNNER_RIGHT_s1_agent:rp_valid -> router_016:sink_valid
	wire         gunner_right_s1_agent_rp_startofpacket;                                    // GUNNER_RIGHT_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [93:0] gunner_right_s1_agent_rp_data;                                             // GUNNER_RIGHT_s1_agent:rp_data -> router_016:sink_data
	wire         gunner_right_s1_agent_rp_ready;                                            // router_016:sink_ready -> GUNNER_RIGHT_s1_agent:rp_ready
	wire         router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_014:sink_valid
	wire         router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire  [93:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_014:sink_data
	wire  [20:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_ready;                                                      // rsp_demux_014:sink_ready -> router_016:src_ready
	wire         gunner_shoot_s1_agent_rp_endofpacket;                                      // GUNNER_SHOOT_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         gunner_shoot_s1_agent_rp_valid;                                            // GUNNER_SHOOT_s1_agent:rp_valid -> router_017:sink_valid
	wire         gunner_shoot_s1_agent_rp_startofpacket;                                    // GUNNER_SHOOT_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire  [93:0] gunner_shoot_s1_agent_rp_data;                                             // GUNNER_SHOOT_s1_agent:rp_data -> router_017:sink_data
	wire         gunner_shoot_s1_agent_rp_ready;                                            // router_017:sink_ready -> GUNNER_SHOOT_s1_agent:rp_ready
	wire         router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_015:sink_valid
	wire         router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire  [93:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_015:sink_data
	wire  [20:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_ready;                                                      // rsp_demux_015:sink_ready -> router_017:src_ready
	wire         alien_shoot_s1_agent_rp_endofpacket;                                       // ALIEN_SHOOT_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         alien_shoot_s1_agent_rp_valid;                                             // ALIEN_SHOOT_s1_agent:rp_valid -> router_018:sink_valid
	wire         alien_shoot_s1_agent_rp_startofpacket;                                     // ALIEN_SHOOT_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire  [93:0] alien_shoot_s1_agent_rp_data;                                              // ALIEN_SHOOT_s1_agent:rp_data -> router_018:sink_data
	wire         alien_shoot_s1_agent_rp_ready;                                             // router_018:sink_ready -> ALIEN_SHOOT_s1_agent:rp_ready
	wire         router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_016:sink_valid
	wire         router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire  [93:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_016:sink_data
	wire  [20:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_ready;                                                      // rsp_demux_016:sink_ready -> router_018:src_ready
	wire         alien_x_position_s1_agent_rp_endofpacket;                                  // ALIEN_X_POSITION_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         alien_x_position_s1_agent_rp_valid;                                        // ALIEN_X_POSITION_s1_agent:rp_valid -> router_019:sink_valid
	wire         alien_x_position_s1_agent_rp_startofpacket;                                // ALIEN_X_POSITION_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire  [93:0] alien_x_position_s1_agent_rp_data;                                         // ALIEN_X_POSITION_s1_agent:rp_data -> router_019:sink_data
	wire         alien_x_position_s1_agent_rp_ready;                                        // router_019:sink_ready -> ALIEN_X_POSITION_s1_agent:rp_ready
	wire         router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_017:sink_valid
	wire         router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire  [93:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_017:sink_data
	wire  [20:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_017:sink_channel
	wire         router_019_src_ready;                                                      // rsp_demux_017:sink_ready -> router_019:src_ready
	wire         alien_y_position_s1_agent_rp_endofpacket;                                  // ALIEN_Y_POSITION_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire         alien_y_position_s1_agent_rp_valid;                                        // ALIEN_Y_POSITION_s1_agent:rp_valid -> router_020:sink_valid
	wire         alien_y_position_s1_agent_rp_startofpacket;                                // ALIEN_Y_POSITION_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire  [93:0] alien_y_position_s1_agent_rp_data;                                         // ALIEN_Y_POSITION_s1_agent:rp_data -> router_020:sink_data
	wire         alien_y_position_s1_agent_rp_ready;                                        // router_020:sink_ready -> ALIEN_Y_POSITION_s1_agent:rp_ready
	wire         router_020_src_endofpacket;                                                // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         router_020_src_valid;                                                      // router_020:src_valid -> rsp_demux_018:sink_valid
	wire         router_020_src_startofpacket;                                              // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire  [93:0] router_020_src_data;                                                       // router_020:src_data -> rsp_demux_018:sink_data
	wire  [20:0] router_020_src_channel;                                                    // router_020:src_channel -> rsp_demux_018:sink_channel
	wire         router_020_src_ready;                                                      // rsp_demux_018:sink_ready -> router_020:src_ready
	wire         game_timer_s1_agent_rp_endofpacket;                                        // GAME_TIMER_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire         game_timer_s1_agent_rp_valid;                                              // GAME_TIMER_s1_agent:rp_valid -> router_021:sink_valid
	wire         game_timer_s1_agent_rp_startofpacket;                                      // GAME_TIMER_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire  [93:0] game_timer_s1_agent_rp_data;                                               // GAME_TIMER_s1_agent:rp_data -> router_021:sink_data
	wire         game_timer_s1_agent_rp_ready;                                              // router_021:sink_ready -> GAME_TIMER_s1_agent:rp_ready
	wire         router_021_src_endofpacket;                                                // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire         router_021_src_valid;                                                      // router_021:src_valid -> rsp_demux_019:sink_valid
	wire         router_021_src_startofpacket;                                              // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire  [93:0] router_021_src_data;                                                       // router_021:src_data -> rsp_demux_019:sink_data
	wire  [20:0] router_021_src_channel;                                                    // router_021:src_channel -> rsp_demux_019:sink_channel
	wire         router_021_src_ready;                                                      // rsp_demux_019:sink_ready -> router_021:src_ready
	wire         random_number_lfsr_output_s1_agent_rp_endofpacket;                         // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire         random_number_lfsr_output_s1_agent_rp_valid;                               // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rp_valid -> router_022:sink_valid
	wire         random_number_lfsr_output_s1_agent_rp_startofpacket;                       // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire  [93:0] random_number_lfsr_output_s1_agent_rp_data;                                // RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rp_data -> router_022:sink_data
	wire         random_number_lfsr_output_s1_agent_rp_ready;                               // router_022:sink_ready -> RANDOM_NUMBER_LFSR_OUTPUT_s1_agent:rp_ready
	wire         router_022_src_endofpacket;                                                // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire         router_022_src_valid;                                                      // router_022:src_valid -> rsp_demux_020:sink_valid
	wire         router_022_src_startofpacket;                                              // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire  [93:0] router_022_src_data;                                                       // router_022:src_data -> rsp_demux_020:sink_data
	wire  [20:0] router_022_src_channel;                                                    // router_022:src_channel -> rsp_demux_020:sink_channel
	wire         router_022_src_ready;                                                      // rsp_demux_020:sink_ready -> router_022:src_ready
	wire         cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [93:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire  [20:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [93:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire  [20:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire         cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [93:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire  [20:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire         cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire         cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [93:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire  [20:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src1_ready;                                                  // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire         cmd_demux_001_src2_endofpacket;                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_001_src2_valid;                                                  // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_001_src2_startofpacket;                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src2_data;                                                   // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire  [20:0] cmd_demux_001_src2_channel;                                                // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_001_src2_ready;                                                  // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire         cmd_demux_001_src3_endofpacket;                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_001_src3_valid;                                                  // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_001_src3_startofpacket;                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src3_data;                                                   // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire  [20:0] cmd_demux_001_src3_channel;                                                // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_001_src3_ready;                                                  // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire         cmd_demux_001_src4_endofpacket;                                            // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_001_src4_valid;                                                  // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire         cmd_demux_001_src4_startofpacket;                                          // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src4_data;                                                   // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire  [20:0] cmd_demux_001_src4_channel;                                                // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_001_src4_ready;                                                  // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire         cmd_demux_001_src5_endofpacket;                                            // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_001_src5_valid;                                                  // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire         cmd_demux_001_src5_startofpacket;                                          // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src5_data;                                                   // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire  [20:0] cmd_demux_001_src5_channel;                                                // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_001_src5_ready;                                                  // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire         cmd_demux_001_src6_endofpacket;                                            // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_001_src6_valid;                                                  // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire         cmd_demux_001_src6_startofpacket;                                          // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src6_data;                                                   // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire  [20:0] cmd_demux_001_src6_channel;                                                // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_001_src6_ready;                                                  // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire         cmd_demux_001_src7_endofpacket;                                            // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_001_src7_valid;                                                  // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire         cmd_demux_001_src7_startofpacket;                                          // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src7_data;                                                   // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire  [20:0] cmd_demux_001_src7_channel;                                                // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_001_src7_ready;                                                  // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire         cmd_demux_001_src8_endofpacket;                                            // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_001_src8_valid;                                                  // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire         cmd_demux_001_src8_startofpacket;                                          // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src8_data;                                                   // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire  [20:0] cmd_demux_001_src8_channel;                                                // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_001_src8_ready;                                                  // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire         cmd_demux_001_src9_endofpacket;                                            // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_001_src9_valid;                                                  // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire         cmd_demux_001_src9_startofpacket;                                          // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src9_data;                                                   // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire  [20:0] cmd_demux_001_src9_channel;                                                // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_001_src9_ready;                                                  // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire         cmd_demux_001_src10_endofpacket;                                           // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_001_src10_valid;                                                 // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire         cmd_demux_001_src10_startofpacket;                                         // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src10_data;                                                  // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire  [20:0] cmd_demux_001_src10_channel;                                               // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_001_src10_ready;                                                 // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire         cmd_demux_001_src11_endofpacket;                                           // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_001_src11_valid;                                                 // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire         cmd_demux_001_src11_startofpacket;                                         // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src11_data;                                                  // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire  [20:0] cmd_demux_001_src11_channel;                                               // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_001_src11_ready;                                                 // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire         cmd_demux_001_src12_endofpacket;                                           // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_001_src12_valid;                                                 // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire         cmd_demux_001_src12_startofpacket;                                         // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src12_data;                                                  // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire  [20:0] cmd_demux_001_src12_channel;                                               // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_001_src12_ready;                                                 // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire         cmd_demux_001_src13_endofpacket;                                           // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_001_src13_valid;                                                 // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire         cmd_demux_001_src13_startofpacket;                                         // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src13_data;                                                  // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire  [20:0] cmd_demux_001_src13_channel;                                               // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_001_src13_ready;                                                 // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire         cmd_demux_001_src14_endofpacket;                                           // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_001_src14_valid;                                                 // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire         cmd_demux_001_src14_startofpacket;                                         // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src14_data;                                                  // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire  [20:0] cmd_demux_001_src14_channel;                                               // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_001_src14_ready;                                                 // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire         cmd_demux_001_src15_endofpacket;                                           // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_001_src15_valid;                                                 // cmd_demux_001:src15_valid -> cmd_mux_015:sink0_valid
	wire         cmd_demux_001_src15_startofpacket;                                         // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src15_data;                                                  // cmd_demux_001:src15_data -> cmd_mux_015:sink0_data
	wire  [20:0] cmd_demux_001_src15_channel;                                               // cmd_demux_001:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_001_src15_ready;                                                 // cmd_mux_015:sink0_ready -> cmd_demux_001:src15_ready
	wire         cmd_demux_001_src16_endofpacket;                                           // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_001_src16_valid;                                                 // cmd_demux_001:src16_valid -> cmd_mux_016:sink0_valid
	wire         cmd_demux_001_src16_startofpacket;                                         // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src16_data;                                                  // cmd_demux_001:src16_data -> cmd_mux_016:sink0_data
	wire  [20:0] cmd_demux_001_src16_channel;                                               // cmd_demux_001:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_001_src16_ready;                                                 // cmd_mux_016:sink0_ready -> cmd_demux_001:src16_ready
	wire         cmd_demux_001_src17_endofpacket;                                           // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_001_src17_valid;                                                 // cmd_demux_001:src17_valid -> cmd_mux_017:sink0_valid
	wire         cmd_demux_001_src17_startofpacket;                                         // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src17_data;                                                  // cmd_demux_001:src17_data -> cmd_mux_017:sink0_data
	wire  [20:0] cmd_demux_001_src17_channel;                                               // cmd_demux_001:src17_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_001_src17_ready;                                                 // cmd_mux_017:sink0_ready -> cmd_demux_001:src17_ready
	wire         cmd_demux_001_src18_endofpacket;                                           // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         cmd_demux_001_src18_valid;                                                 // cmd_demux_001:src18_valid -> cmd_mux_018:sink0_valid
	wire         cmd_demux_001_src18_startofpacket;                                         // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src18_data;                                                  // cmd_demux_001:src18_data -> cmd_mux_018:sink0_data
	wire  [20:0] cmd_demux_001_src18_channel;                                               // cmd_demux_001:src18_channel -> cmd_mux_018:sink0_channel
	wire         cmd_demux_001_src18_ready;                                                 // cmd_mux_018:sink0_ready -> cmd_demux_001:src18_ready
	wire         cmd_demux_001_src19_endofpacket;                                           // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire         cmd_demux_001_src19_valid;                                                 // cmd_demux_001:src19_valid -> cmd_mux_019:sink0_valid
	wire         cmd_demux_001_src19_startofpacket;                                         // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src19_data;                                                  // cmd_demux_001:src19_data -> cmd_mux_019:sink0_data
	wire  [20:0] cmd_demux_001_src19_channel;                                               // cmd_demux_001:src19_channel -> cmd_mux_019:sink0_channel
	wire         cmd_demux_001_src19_ready;                                                 // cmd_mux_019:sink0_ready -> cmd_demux_001:src19_ready
	wire         cmd_demux_001_src20_endofpacket;                                           // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire         cmd_demux_001_src20_valid;                                                 // cmd_demux_001:src20_valid -> cmd_mux_020:sink0_valid
	wire         cmd_demux_001_src20_startofpacket;                                         // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire  [93:0] cmd_demux_001_src20_data;                                                  // cmd_demux_001:src20_data -> cmd_mux_020:sink0_data
	wire  [20:0] cmd_demux_001_src20_channel;                                               // cmd_demux_001:src20_channel -> cmd_mux_020:sink0_channel
	wire         cmd_demux_001_src20_ready;                                                 // cmd_mux_020:sink0_ready -> cmd_demux_001:src20_ready
	wire         rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [93:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire  [20:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire         rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [93:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire  [20:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire         rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [93:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire  [20:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_001_src1_endofpacket;                                            // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                  // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire         rsp_demux_001_src1_startofpacket;                                          // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [93:0] rsp_demux_001_src1_data;                                                   // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire  [20:0] rsp_demux_001_src1_channel;                                                // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_001_src1_ready;                                                  // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire         rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire         rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [93:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire  [20:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_002_src0_ready;                                                  // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire         rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire         rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [93:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire  [20:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire         rsp_demux_003_src0_ready;                                                  // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire         rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire         rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [93:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire  [20:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire         rsp_demux_004_src0_ready;                                                  // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire         rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire         rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire         rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire  [93:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire  [20:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire         rsp_demux_005_src0_ready;                                                  // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire         rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire         rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire         rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire  [93:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire  [20:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire         rsp_demux_006_src0_ready;                                                  // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire         rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire         rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire         rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire  [93:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire  [20:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire         rsp_demux_007_src0_ready;                                                  // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire         rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire         rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire         rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire  [93:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire  [20:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire         rsp_demux_008_src0_ready;                                                  // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire         rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire         rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire         rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire  [93:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire  [20:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire         rsp_demux_009_src0_ready;                                                  // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire         rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire         rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire         rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire  [93:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire  [20:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire         rsp_demux_010_src0_ready;                                                  // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire         rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire         rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire         rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire  [93:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire  [20:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire         rsp_demux_011_src0_ready;                                                  // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire         rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire         rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire         rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire  [93:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire  [20:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire         rsp_demux_012_src0_ready;                                                  // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire         rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire         rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire         rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire  [93:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire  [20:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire         rsp_demux_013_src0_ready;                                                  // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire         rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire         rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire         rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire  [93:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire  [20:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire         rsp_demux_014_src0_ready;                                                  // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire         rsp_demux_015_src0_endofpacket;                                            // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire         rsp_demux_015_src0_valid;                                                  // rsp_demux_015:src0_valid -> rsp_mux_001:sink15_valid
	wire         rsp_demux_015_src0_startofpacket;                                          // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire  [93:0] rsp_demux_015_src0_data;                                                   // rsp_demux_015:src0_data -> rsp_mux_001:sink15_data
	wire  [20:0] rsp_demux_015_src0_channel;                                                // rsp_demux_015:src0_channel -> rsp_mux_001:sink15_channel
	wire         rsp_demux_015_src0_ready;                                                  // rsp_mux_001:sink15_ready -> rsp_demux_015:src0_ready
	wire         rsp_demux_016_src0_endofpacket;                                            // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire         rsp_demux_016_src0_valid;                                                  // rsp_demux_016:src0_valid -> rsp_mux_001:sink16_valid
	wire         rsp_demux_016_src0_startofpacket;                                          // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire  [93:0] rsp_demux_016_src0_data;                                                   // rsp_demux_016:src0_data -> rsp_mux_001:sink16_data
	wire  [20:0] rsp_demux_016_src0_channel;                                                // rsp_demux_016:src0_channel -> rsp_mux_001:sink16_channel
	wire         rsp_demux_016_src0_ready;                                                  // rsp_mux_001:sink16_ready -> rsp_demux_016:src0_ready
	wire         rsp_demux_017_src0_endofpacket;                                            // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire         rsp_demux_017_src0_valid;                                                  // rsp_demux_017:src0_valid -> rsp_mux_001:sink17_valid
	wire         rsp_demux_017_src0_startofpacket;                                          // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire  [93:0] rsp_demux_017_src0_data;                                                   // rsp_demux_017:src0_data -> rsp_mux_001:sink17_data
	wire  [20:0] rsp_demux_017_src0_channel;                                                // rsp_demux_017:src0_channel -> rsp_mux_001:sink17_channel
	wire         rsp_demux_017_src0_ready;                                                  // rsp_mux_001:sink17_ready -> rsp_demux_017:src0_ready
	wire         rsp_demux_018_src0_endofpacket;                                            // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire         rsp_demux_018_src0_valid;                                                  // rsp_demux_018:src0_valid -> rsp_mux_001:sink18_valid
	wire         rsp_demux_018_src0_startofpacket;                                          // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire  [93:0] rsp_demux_018_src0_data;                                                   // rsp_demux_018:src0_data -> rsp_mux_001:sink18_data
	wire  [20:0] rsp_demux_018_src0_channel;                                                // rsp_demux_018:src0_channel -> rsp_mux_001:sink18_channel
	wire         rsp_demux_018_src0_ready;                                                  // rsp_mux_001:sink18_ready -> rsp_demux_018:src0_ready
	wire         rsp_demux_019_src0_endofpacket;                                            // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire         rsp_demux_019_src0_valid;                                                  // rsp_demux_019:src0_valid -> rsp_mux_001:sink19_valid
	wire         rsp_demux_019_src0_startofpacket;                                          // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire  [93:0] rsp_demux_019_src0_data;                                                   // rsp_demux_019:src0_data -> rsp_mux_001:sink19_data
	wire  [20:0] rsp_demux_019_src0_channel;                                                // rsp_demux_019:src0_channel -> rsp_mux_001:sink19_channel
	wire         rsp_demux_019_src0_ready;                                                  // rsp_mux_001:sink19_ready -> rsp_demux_019:src0_ready
	wire         rsp_demux_020_src0_endofpacket;                                            // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire         rsp_demux_020_src0_valid;                                                  // rsp_demux_020:src0_valid -> rsp_mux_001:sink20_valid
	wire         rsp_demux_020_src0_startofpacket;                                          // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire  [93:0] rsp_demux_020_src0_data;                                                   // rsp_demux_020:src0_data -> rsp_mux_001:sink20_data
	wire  [20:0] rsp_demux_020_src0_channel;                                                // rsp_demux_020:src0_channel -> rsp_mux_001:sink20_channel
	wire         rsp_demux_020_src0_ready;                                                  // rsp_mux_001:sink20_ready -> rsp_demux_020:src0_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                      (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (cpu_instruction_master_read),                                               //                          .read
		.av_readdata              (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                      //               (terminated)
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_readdatavalid         (),                                                                          //               (terminated)
		.av_write                 (1'b0),                                                                      //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_data_master_translator (
		.clk                      (clk_0_clk_clk),                                                      //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (cpu_data_master_read),                                               //                          .read
		.av_readdata              (cpu_data_master_readdata),                                           //                          .readdata
		.av_write                 (cpu_data_master_write),                                              //                          .write
		.av_writedata             (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_readdatavalid         (),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                      (clk_0_clk_clk),                                //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (cpu_jtag_debug_module_write),                  //                         .write
		.av_read                  (cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata              (cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_chipselect            (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                      (clk_0_clk_clk),                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address              (onchip_memory2_0_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_memory2_0_s1_agent_m0_read),          //                         .read
		.uav_write                (onchip_memory2_0_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_memory2_0_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_memory2_0_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_memory2_0_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_memory2_0_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_0_s1_write),                  //                         .write
		.av_readdata              (onchip_memory2_0_s1_readdata),               //                         .readdata
		.av_writedata             (onchip_memory2_0_s1_writedata),              //                         .writedata
		.av_byteenable            (onchip_memory2_0_s1_byteenable),             //                         .byteenable
		.av_chipselect            (onchip_memory2_0_s1_chipselect),             //                         .chipselect
		.av_clken                 (onchip_memory2_0_s1_clken),                  //                         .clken
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                      (clk_0_clk_clk),                                        //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) receive_parallel_to_processor_s1_translator (
		.clk                      (clk_0_clk_clk),                                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (receive_parallel_to_processor_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (receive_parallel_to_processor_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (receive_parallel_to_processor_s1_agent_m0_read),          //                         .read
		.uav_write                (receive_parallel_to_processor_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (receive_parallel_to_processor_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (receive_parallel_to_processor_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (receive_parallel_to_processor_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (receive_parallel_to_processor_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (receive_parallel_to_processor_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (receive_parallel_to_processor_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (receive_parallel_to_processor_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (RECEIVE_PARALLEL_TO_PROCESSOR_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (RECEIVE_PARALLEL_TO_PROCESSOR_s1_readdata),               //                         .readdata
		.av_write                 (),                                                        //              (terminated)
		.av_read                  (),                                                        //              (terminated)
		.av_writedata             (),                                                        //              (terminated)
		.av_begintransfer         (),                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                        //              (terminated)
		.av_burstcount            (),                                                        //              (terminated)
		.av_byteenable            (),                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                    //              (terminated)
		.av_writebyteenable       (),                                                        //              (terminated)
		.av_lock                  (),                                                        //              (terminated)
		.av_chipselect            (),                                                        //              (terminated)
		.av_clken                 (),                                                        //              (terminated)
		.uav_clken                (1'b0),                                                    //              (terminated)
		.av_debugaccess           (),                                                        //              (terminated)
		.av_outputenable          (),                                                        //              (terminated)
		.uav_response             (),                                                        //              (terminated)
		.av_response              (2'b00),                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                        //              (terminated)
		.av_writeresponserequest  (),                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) transmit_parallel_from_processor_s1_translator (
		.clk                      (clk_0_clk_clk),                                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address              (transmit_parallel_from_processor_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (transmit_parallel_from_processor_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (transmit_parallel_from_processor_s1_agent_m0_read),          //                         .read
		.uav_write                (transmit_parallel_from_processor_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (transmit_parallel_from_processor_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (transmit_parallel_from_processor_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (transmit_parallel_from_processor_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (transmit_parallel_from_processor_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (transmit_parallel_from_processor_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (transmit_parallel_from_processor_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (transmit_parallel_from_processor_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_write),                  //                         .write
		.av_readdata              (TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_readdata),               //                         .readdata
		.av_writedata             (TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_writedata),              //                         .writedata
		.av_chipselect            (TRANSMIT_PARALLEL_FROM_PROCESSOR_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                                           //              (terminated)
		.av_begintransfer         (),                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                           //              (terminated)
		.av_burstcount            (),                                                           //              (terminated)
		.av_byteenable            (),                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                       //              (terminated)
		.av_waitrequest           (1'b0),                                                       //              (terminated)
		.av_writebyteenable       (),                                                           //              (terminated)
		.av_lock                  (),                                                           //              (terminated)
		.av_clken                 (),                                                           //              (terminated)
		.uav_clken                (1'b0),                                                       //              (terminated)
		.av_debugaccess           (),                                                           //              (terminated)
		.av_outputenable          (),                                                           //              (terminated)
		.uav_response             (),                                                           //              (terminated)
		.av_response              (2'b00),                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                           //              (terminated)
		.av_writeresponserequest  (),                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) transmit_enable_s1_translator (
		.clk                      (clk_0_clk_clk),                             //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address              (transmit_enable_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (transmit_enable_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (transmit_enable_s1_agent_m0_read),          //                         .read
		.uav_write                (transmit_enable_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (transmit_enable_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (transmit_enable_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (transmit_enable_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (transmit_enable_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (transmit_enable_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (transmit_enable_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (transmit_enable_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (TRANSMIT_ENABLE_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (TRANSMIT_ENABLE_s1_write),                  //                         .write
		.av_readdata              (TRANSMIT_ENABLE_s1_readdata),               //                         .readdata
		.av_writedata             (TRANSMIT_ENABLE_s1_writedata),              //                         .writedata
		.av_chipselect            (TRANSMIT_ENABLE_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                          //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) transmit_character_sent_s1_translator (
		.clk                      (clk_0_clk_clk),                                     //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address              (transmit_character_sent_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (transmit_character_sent_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (transmit_character_sent_s1_agent_m0_read),          //                         .read
		.uav_write                (transmit_character_sent_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (transmit_character_sent_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (transmit_character_sent_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (transmit_character_sent_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (transmit_character_sent_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (transmit_character_sent_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (transmit_character_sent_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (transmit_character_sent_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (TRANSMIT_CHARACTER_SENT_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (TRANSMIT_CHARACTER_SENT_s1_readdata),               //                         .readdata
		.av_write                 (),                                                  //              (terminated)
		.av_read                  (),                                                  //              (terminated)
		.av_writedata             (),                                                  //              (terminated)
		.av_begintransfer         (),                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                  //              (terminated)
		.av_burstcount            (),                                                  //              (terminated)
		.av_byteenable            (),                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                              //              (terminated)
		.av_waitrequest           (1'b0),                                              //              (terminated)
		.av_writebyteenable       (),                                                  //              (terminated)
		.av_lock                  (),                                                  //              (terminated)
		.av_chipselect            (),                                                  //              (terminated)
		.av_clken                 (),                                                  //              (terminated)
		.uav_clken                (1'b0),                                              //              (terminated)
		.av_debugaccess           (),                                                  //              (terminated)
		.av_outputenable          (),                                                  //              (terminated)
		.uav_response             (),                                                  //              (terminated)
		.av_response              (2'b00),                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                  //              (terminated)
		.av_writeresponserequest  (),                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) transmit_load_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (transmit_load_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (transmit_load_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (transmit_load_s1_agent_m0_read),          //                         .read
		.uav_write                (transmit_load_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (transmit_load_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (transmit_load_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (transmit_load_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (transmit_load_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (transmit_load_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (transmit_load_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (transmit_load_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (TRANSMIT_LOAD_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (TRANSMIT_LOAD_s1_write),                  //                         .write
		.av_readdata              (TRANSMIT_LOAD_s1_readdata),               //                         .readdata
		.av_writedata             (TRANSMIT_LOAD_s1_writedata),              //                         .writedata
		.av_chipselect            (TRANSMIT_LOAD_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) receive_character_received_s1_translator (
		.clk                      (clk_0_clk_clk),                                        //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address              (receive_character_received_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (receive_character_received_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (receive_character_received_s1_agent_m0_read),          //                         .read
		.uav_write                (receive_character_received_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (receive_character_received_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (receive_character_received_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (receive_character_received_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (receive_character_received_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (receive_character_received_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (receive_character_received_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (receive_character_received_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (RECEIVE_CHARACTER_RECEIVED_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (RECEIVE_CHARACTER_RECEIVED_s1_readdata),               //                         .readdata
		.av_write                 (),                                                     //              (terminated)
		.av_read                  (),                                                     //              (terminated)
		.av_writedata             (),                                                     //              (terminated)
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_chipselect            (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_address_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sram_address_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount           (sram_address_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read                 (sram_address_s1_agent_m0_read),           //                         .read
		.uav_write                (sram_address_s1_agent_m0_write),          //                         .write
		.uav_waitrequest          (sram_address_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid        (sram_address_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable           (sram_address_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata             (sram_address_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata            (sram_address_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock                 (sram_address_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess          (sram_address_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address               (SRAM_ADDRESS_s1_address),                 //      avalon_anti_slave_0.address
		.av_write                 (SRAM_ADDRESS_s1_write),                   //                         .write
		.av_readdata              (SRAM_ADDRESS_s1_readdata),                //                         .readdata
		.av_writedata             (SRAM_ADDRESS_s1_writedata),               //                         .writedata
		.av_chipselect            (SRAM_ADDRESS_s1_chipselect),              //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_data_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sram_data_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount           (sram_data_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read                 (sram_data_s1_agent_m0_read),              //                         .read
		.uav_write                (sram_data_s1_agent_m0_write),             //                         .write
		.uav_waitrequest          (sram_data_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid        (sram_data_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable           (sram_data_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata             (sram_data_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata            (sram_data_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock                 (sram_data_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess          (sram_data_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address               (SRAM_DATA_s1_address),                    //      avalon_anti_slave_0.address
		.av_write                 (SRAM_DATA_s1_write),                      //                         .write
		.av_readdata              (SRAM_DATA_s1_readdata),                   //                         .readdata
		.av_writedata             (SRAM_DATA_s1_writedata),                  //                         .writedata
		.av_chipselect            (SRAM_DATA_s1_chipselect),                 //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_enable_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sram_enable_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (sram_enable_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (sram_enable_s1_agent_m0_read),            //                         .read
		.uav_write                (sram_enable_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (sram_enable_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (sram_enable_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (sram_enable_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (sram_enable_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (sram_enable_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (sram_enable_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (sram_enable_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (SRAM_ENABLE_s1_address),                  //      avalon_anti_slave_0.address
		.av_write                 (SRAM_ENABLE_s1_write),                    //                         .write
		.av_readdata              (SRAM_ENABLE_s1_readdata),                 //                         .readdata
		.av_writedata             (SRAM_ENABLE_s1_writedata),                //                         .writedata
		.av_chipselect            (SRAM_ENABLE_s1_chipselect),               //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_read_write_s1_translator (
		.clk                      (clk_0_clk_clk),                             //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address              (sram_read_write_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sram_read_write_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sram_read_write_s1_agent_m0_read),          //                         .read
		.uav_write                (sram_read_write_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (sram_read_write_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sram_read_write_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sram_read_write_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sram_read_write_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sram_read_write_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sram_read_write_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sram_read_write_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (SRAM_READ_WRITE_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (SRAM_READ_WRITE_s1_write),                  //                         .write
		.av_readdata              (SRAM_READ_WRITE_s1_readdata),               //                         .readdata
		.av_writedata             (SRAM_READ_WRITE_s1_writedata),              //                         .writedata
		.av_chipselect            (SRAM_READ_WRITE_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                          //              (terminated)
		.av_begintransfer         (),                                          //              (terminated)
		.av_beginbursttransfer    (),                                          //              (terminated)
		.av_burstcount            (),                                          //              (terminated)
		.av_byteenable            (),                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                      //              (terminated)
		.av_waitrequest           (1'b0),                                      //              (terminated)
		.av_writebyteenable       (),                                          //              (terminated)
		.av_lock                  (),                                          //              (terminated)
		.av_clken                 (),                                          //              (terminated)
		.uav_clken                (1'b0),                                      //              (terminated)
		.av_debugaccess           (),                                          //              (terminated)
		.av_outputenable          (),                                          //              (terminated)
		.uav_response             (),                                          //              (terminated)
		.av_response              (2'b00),                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                      //              (terminated)
		.uav_writeresponsevalid   (),                                          //              (terminated)
		.av_writeresponserequest  (),                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gunner_left_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (gunner_left_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (gunner_left_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (gunner_left_s1_agent_m0_read),            //                         .read
		.uav_write                (gunner_left_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (gunner_left_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (gunner_left_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (gunner_left_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (gunner_left_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (gunner_left_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (gunner_left_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (gunner_left_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (GUNNER_LEFT_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata              (GUNNER_LEFT_s1_readdata),                 //                         .readdata
		.av_write                 (),                                        //              (terminated)
		.av_read                  (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gunner_right_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (gunner_right_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount           (gunner_right_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read                 (gunner_right_s1_agent_m0_read),           //                         .read
		.uav_write                (gunner_right_s1_agent_m0_write),          //                         .write
		.uav_waitrequest          (gunner_right_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid        (gunner_right_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable           (gunner_right_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata             (gunner_right_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata            (gunner_right_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock                 (gunner_right_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess          (gunner_right_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address               (GUNNER_RIGHT_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata              (GUNNER_RIGHT_s1_readdata),                //                         .readdata
		.av_write                 (),                                        //              (terminated)
		.av_read                  (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gunner_shoot_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (gunner_shoot_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount           (gunner_shoot_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read                 (gunner_shoot_s1_agent_m0_read),           //                         .read
		.uav_write                (gunner_shoot_s1_agent_m0_write),          //                         .write
		.uav_waitrequest          (gunner_shoot_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid        (gunner_shoot_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable           (gunner_shoot_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata             (gunner_shoot_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata            (gunner_shoot_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock                 (gunner_shoot_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess          (gunner_shoot_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address               (GUNNER_SHOOT_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata              (GUNNER_SHOOT_s1_readdata),                //                         .readdata
		.av_write                 (),                                        //              (terminated)
		.av_read                  (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alien_shoot_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (alien_shoot_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount           (alien_shoot_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read                 (alien_shoot_s1_agent_m0_read),            //                         .read
		.uav_write                (alien_shoot_s1_agent_m0_write),           //                         .write
		.uav_waitrequest          (alien_shoot_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid        (alien_shoot_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable           (alien_shoot_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata             (alien_shoot_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata            (alien_shoot_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock                 (alien_shoot_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess          (alien_shoot_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address               (ALIEN_SHOOT_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata              (ALIEN_SHOOT_s1_readdata),                 //                         .readdata
		.av_write                 (),                                        //              (terminated)
		.av_read                  (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alien_x_position_s1_translator (
		.clk                      (clk_0_clk_clk),                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address              (alien_x_position_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (alien_x_position_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (alien_x_position_s1_agent_m0_read),          //                         .read
		.uav_write                (alien_x_position_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (alien_x_position_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (alien_x_position_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (alien_x_position_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (alien_x_position_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (alien_x_position_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (alien_x_position_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (alien_x_position_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ALIEN_X_POSITION_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (ALIEN_X_POSITION_s1_readdata),               //                         .readdata
		.av_write                 (),                                           //              (terminated)
		.av_read                  (),                                           //              (terminated)
		.av_writedata             (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alien_y_position_s1_translator (
		.clk                      (clk_0_clk_clk),                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address              (alien_y_position_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (alien_y_position_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (alien_y_position_s1_agent_m0_read),          //                         .read
		.uav_write                (alien_y_position_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (alien_y_position_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (alien_y_position_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (alien_y_position_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (alien_y_position_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (alien_y_position_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (alien_y_position_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (alien_y_position_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ALIEN_Y_POSITION_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (ALIEN_Y_POSITION_s1_readdata),               //                         .readdata
		.av_write                 (),                                           //              (terminated)
		.av_read                  (),                                           //              (terminated)
		.av_writedata             (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) game_timer_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (game_timer_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (game_timer_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (game_timer_s1_agent_m0_read),             //                         .read
		.uav_write                (game_timer_s1_agent_m0_write),            //                         .write
		.uav_waitrequest          (game_timer_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (game_timer_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (game_timer_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (game_timer_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (game_timer_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (game_timer_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (game_timer_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (GAME_TIMER_s1_address),                   //      avalon_anti_slave_0.address
		.av_readdata              (GAME_TIMER_s1_readdata),                  //                         .readdata
		.av_write                 (),                                        //              (terminated)
		.av_read                  (),                                        //              (terminated)
		.av_writedata             (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_chipselect            (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) random_number_lfsr_output_s1_translator (
		.clk                      (clk_0_clk_clk),                                       //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address              (random_number_lfsr_output_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (random_number_lfsr_output_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (random_number_lfsr_output_s1_agent_m0_read),          //                         .read
		.uav_write                (random_number_lfsr_output_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (random_number_lfsr_output_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (random_number_lfsr_output_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (random_number_lfsr_output_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (random_number_lfsr_output_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (random_number_lfsr_output_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (random_number_lfsr_output_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (random_number_lfsr_output_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (RANDOM_NUMBER_LFSR_OUTPUT_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (RANDOM_NUMBER_LFSR_OUTPUT_s1_readdata),               //                         .readdata
		.av_write                 (),                                                    //              (terminated)
		.av_read                  (),                                                    //              (terminated)
		.av_writedata             (),                                                    //              (terminated)
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_chipselect            (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BEGIN_BURST           (69),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                     (clk_0_clk_clk),                                                             //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                         //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                          //          .data
		.rp_channel              (rsp_mux_src_channel),                                                       //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                         //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BEGIN_BURST           (69),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (21),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                     (clk_0_clk_clk),                                                      //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_001_src_valid),                                              //        rp.valid
		.rp_data                 (rsp_mux_001_src_data),                                               //          .data
		.rp_channel              (rsp_mux_001_src_channel),                                            //          .channel
		.rp_startofpacket        (rsp_mux_001_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket          (rsp_mux_001_src_endofpacket),                                        //          .endofpacket
		.rp_ready                (rsp_mux_001_src_ready),                                              //          .ready
		.av_response             (),                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponserequest (),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) receive_parallel_to_processor_s1_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (receive_parallel_to_processor_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (receive_parallel_to_processor_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (receive_parallel_to_processor_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (receive_parallel_to_processor_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (receive_parallel_to_processor_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (receive_parallel_to_processor_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (receive_parallel_to_processor_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (receive_parallel_to_processor_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (receive_parallel_to_processor_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (receive_parallel_to_processor_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (receive_parallel_to_processor_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (receive_parallel_to_processor_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (receive_parallel_to_processor_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (receive_parallel_to_processor_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (receive_parallel_to_processor_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (receive_parallel_to_processor_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                           //                .channel
		.rf_sink_ready           (receive_parallel_to_processor_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (receive_parallel_to_processor_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (receive_parallel_to_processor_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (receive_parallel_to_processor_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (receive_parallel_to_processor_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (receive_parallel_to_processor_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (receive_parallel_to_processor_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (receive_parallel_to_processor_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (receive_parallel_to_processor_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (receive_parallel_to_processor_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (receive_parallel_to_processor_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (receive_parallel_to_processor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (receive_parallel_to_processor_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (receive_parallel_to_processor_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (receive_parallel_to_processor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (receive_parallel_to_processor_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) receive_parallel_to_processor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (receive_parallel_to_processor_s1_agent_rf_source_data),             //        in.data
		.in_valid          (receive_parallel_to_processor_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (receive_parallel_to_processor_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (receive_parallel_to_processor_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (receive_parallel_to_processor_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (receive_parallel_to_processor_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (receive_parallel_to_processor_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (receive_parallel_to_processor_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (receive_parallel_to_processor_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (receive_parallel_to_processor_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) transmit_parallel_from_processor_s1_agent (
		.clk                     (clk_0_clk_clk),                                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (transmit_parallel_from_processor_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (transmit_parallel_from_processor_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (transmit_parallel_from_processor_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (transmit_parallel_from_processor_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (transmit_parallel_from_processor_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (transmit_parallel_from_processor_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (transmit_parallel_from_processor_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (transmit_parallel_from_processor_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (transmit_parallel_from_processor_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (transmit_parallel_from_processor_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (transmit_parallel_from_processor_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (transmit_parallel_from_processor_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (transmit_parallel_from_processor_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (transmit_parallel_from_processor_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (transmit_parallel_from_processor_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (transmit_parallel_from_processor_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                              //                .channel
		.rf_sink_ready           (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (transmit_parallel_from_processor_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (transmit_parallel_from_processor_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (transmit_parallel_from_processor_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (transmit_parallel_from_processor_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (transmit_parallel_from_processor_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (transmit_parallel_from_processor_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (transmit_parallel_from_processor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (transmit_parallel_from_processor_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (transmit_parallel_from_processor_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (transmit_parallel_from_processor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (transmit_parallel_from_processor_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponserequest (),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) transmit_parallel_from_processor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (transmit_parallel_from_processor_s1_agent_rf_source_data),             //        in.data
		.in_valid          (transmit_parallel_from_processor_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (transmit_parallel_from_processor_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (transmit_parallel_from_processor_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (transmit_parallel_from_processor_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (transmit_parallel_from_processor_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) transmit_enable_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (transmit_enable_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (transmit_enable_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (transmit_enable_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (transmit_enable_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (transmit_enable_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (transmit_enable_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (transmit_enable_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (transmit_enable_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (transmit_enable_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (transmit_enable_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (transmit_enable_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (transmit_enable_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (transmit_enable_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (transmit_enable_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (transmit_enable_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (transmit_enable_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                             //                .channel
		.rf_sink_ready           (transmit_enable_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (transmit_enable_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (transmit_enable_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (transmit_enable_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (transmit_enable_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (transmit_enable_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (transmit_enable_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (transmit_enable_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (transmit_enable_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (transmit_enable_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (transmit_enable_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (transmit_enable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (transmit_enable_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (transmit_enable_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (transmit_enable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (transmit_enable_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) transmit_enable_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (transmit_enable_s1_agent_rf_source_data),             //        in.data
		.in_valid          (transmit_enable_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (transmit_enable_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (transmit_enable_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (transmit_enable_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (transmit_enable_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (transmit_enable_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (transmit_enable_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (transmit_enable_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (transmit_enable_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) transmit_character_sent_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (transmit_character_sent_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (transmit_character_sent_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (transmit_character_sent_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (transmit_character_sent_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (transmit_character_sent_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (transmit_character_sent_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (transmit_character_sent_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (transmit_character_sent_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (transmit_character_sent_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (transmit_character_sent_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (transmit_character_sent_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (transmit_character_sent_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (transmit_character_sent_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (transmit_character_sent_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (transmit_character_sent_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (transmit_character_sent_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                     //                .channel
		.rf_sink_ready           (transmit_character_sent_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (transmit_character_sent_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (transmit_character_sent_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (transmit_character_sent_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (transmit_character_sent_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (transmit_character_sent_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (transmit_character_sent_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (transmit_character_sent_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (transmit_character_sent_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (transmit_character_sent_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (transmit_character_sent_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (transmit_character_sent_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (transmit_character_sent_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (transmit_character_sent_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (transmit_character_sent_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (transmit_character_sent_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponserequest (),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) transmit_character_sent_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (transmit_character_sent_s1_agent_rf_source_data),             //        in.data
		.in_valid          (transmit_character_sent_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (transmit_character_sent_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (transmit_character_sent_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (transmit_character_sent_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (transmit_character_sent_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (transmit_character_sent_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (transmit_character_sent_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (transmit_character_sent_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (transmit_character_sent_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) transmit_load_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (transmit_load_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (transmit_load_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (transmit_load_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (transmit_load_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (transmit_load_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (transmit_load_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (transmit_load_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (transmit_load_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (transmit_load_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (transmit_load_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (transmit_load_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (transmit_load_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (transmit_load_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (transmit_load_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (transmit_load_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (transmit_load_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_007_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                           //                .channel
		.rf_sink_ready           (transmit_load_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (transmit_load_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (transmit_load_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (transmit_load_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (transmit_load_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (transmit_load_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (transmit_load_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (transmit_load_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (transmit_load_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (transmit_load_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (transmit_load_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (transmit_load_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (transmit_load_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (transmit_load_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (transmit_load_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (transmit_load_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) transmit_load_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (transmit_load_s1_agent_rf_source_data),             //        in.data
		.in_valid          (transmit_load_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (transmit_load_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (transmit_load_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (transmit_load_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (transmit_load_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (transmit_load_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (transmit_load_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (transmit_load_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (transmit_load_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) receive_character_received_s1_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (receive_character_received_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (receive_character_received_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (receive_character_received_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (receive_character_received_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (receive_character_received_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (receive_character_received_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (receive_character_received_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (receive_character_received_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (receive_character_received_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (receive_character_received_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (receive_character_received_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (receive_character_received_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (receive_character_received_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (receive_character_received_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (receive_character_received_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (receive_character_received_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                        //                .channel
		.rf_sink_ready           (receive_character_received_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (receive_character_received_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (receive_character_received_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (receive_character_received_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (receive_character_received_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (receive_character_received_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (receive_character_received_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (receive_character_received_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (receive_character_received_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (receive_character_received_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (receive_character_received_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (receive_character_received_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (receive_character_received_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (receive_character_received_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (receive_character_received_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (receive_character_received_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponserequest (),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) receive_character_received_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (receive_character_received_s1_agent_rf_source_data),             //        in.data
		.in_valid          (receive_character_received_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (receive_character_received_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (receive_character_received_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (receive_character_received_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (receive_character_received_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (receive_character_received_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (receive_character_received_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (receive_character_received_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (receive_character_received_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sram_address_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (sram_address_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_address_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_address_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_address_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_address_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_address_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_address_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_address_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_address_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_address_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_address_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_address_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_address_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_address_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_address_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_address_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_009_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                          //                .channel
		.rf_sink_ready           (sram_address_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_address_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_address_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_address_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_address_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_address_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_address_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_address_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_address_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_address_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sram_address_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sram_address_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sram_address_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sram_address_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_address_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_address_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_address_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (sram_address_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sram_address_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_address_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_address_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_address_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_address_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_address_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_address_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_address_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_address_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sram_data_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sram_data_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_data_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_data_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_data_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_data_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_data_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_data_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_data_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_data_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_data_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_data_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_data_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_data_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_data_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_data_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_data_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                       //                .channel
		.rf_sink_ready           (sram_data_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_data_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_data_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_data_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_data_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_data_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_data_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_data_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_data_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_data_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sram_data_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sram_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sram_data_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sram_data_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_data_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sram_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sram_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sram_enable_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (sram_enable_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_enable_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_enable_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_enable_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_enable_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_enable_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_enable_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_enable_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_enable_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_enable_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_enable_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_enable_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_enable_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_enable_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_enable_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_enable_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_011_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                         //                .channel
		.rf_sink_ready           (sram_enable_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_enable_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_enable_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_enable_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_enable_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_enable_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_enable_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_enable_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_enable_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_enable_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sram_enable_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sram_enable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sram_enable_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sram_enable_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_enable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_enable_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_enable_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sram_enable_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sram_enable_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_enable_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_enable_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_enable_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_enable_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_enable_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_enable_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_enable_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_enable_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sram_read_write_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sram_read_write_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_read_write_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_read_write_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_read_write_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_read_write_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_read_write_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_read_write_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_read_write_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_read_write_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_read_write_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_read_write_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_read_write_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_read_write_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_read_write_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_read_write_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_read_write_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                             //                .channel
		.rf_sink_ready           (sram_read_write_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_read_write_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_read_write_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_read_write_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_read_write_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_read_write_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_read_write_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_read_write_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_read_write_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_read_write_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sram_read_write_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sram_read_write_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sram_read_write_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sram_read_write_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_read_write_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_read_write_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_read_write_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sram_read_write_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sram_read_write_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_read_write_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_read_write_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_read_write_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_read_write_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_read_write_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_read_write_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_read_write_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_read_write_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) gunner_left_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (gunner_left_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gunner_left_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gunner_left_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gunner_left_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gunner_left_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (gunner_left_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gunner_left_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gunner_left_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (gunner_left_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gunner_left_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (gunner_left_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (gunner_left_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gunner_left_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (gunner_left_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (gunner_left_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (gunner_left_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_013_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                         //                .channel
		.rf_sink_ready           (gunner_left_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gunner_left_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gunner_left_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gunner_left_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gunner_left_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gunner_left_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gunner_left_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gunner_left_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gunner_left_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gunner_left_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (gunner_left_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (gunner_left_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (gunner_left_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (gunner_left_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gunner_left_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gunner_left_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gunner_left_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (gunner_left_s1_agent_rf_source_data),             //        in.data
		.in_valid          (gunner_left_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (gunner_left_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gunner_left_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gunner_left_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gunner_left_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gunner_left_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gunner_left_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gunner_left_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gunner_left_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) gunner_right_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (gunner_right_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gunner_right_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gunner_right_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gunner_right_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gunner_right_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (gunner_right_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gunner_right_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gunner_right_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (gunner_right_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gunner_right_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (gunner_right_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (gunner_right_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gunner_right_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (gunner_right_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (gunner_right_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (gunner_right_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_014_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                          //                .channel
		.rf_sink_ready           (gunner_right_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gunner_right_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gunner_right_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gunner_right_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gunner_right_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gunner_right_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gunner_right_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gunner_right_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gunner_right_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gunner_right_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (gunner_right_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (gunner_right_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (gunner_right_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (gunner_right_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gunner_right_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gunner_right_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gunner_right_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (gunner_right_s1_agent_rf_source_data),             //        in.data
		.in_valid          (gunner_right_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (gunner_right_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gunner_right_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gunner_right_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gunner_right_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gunner_right_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gunner_right_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gunner_right_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gunner_right_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) gunner_shoot_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (gunner_shoot_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gunner_shoot_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gunner_shoot_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gunner_shoot_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gunner_shoot_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (gunner_shoot_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gunner_shoot_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gunner_shoot_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (gunner_shoot_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gunner_shoot_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (gunner_shoot_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (gunner_shoot_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gunner_shoot_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (gunner_shoot_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (gunner_shoot_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (gunner_shoot_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_015_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                          //                .channel
		.rf_sink_ready           (gunner_shoot_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gunner_shoot_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gunner_shoot_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gunner_shoot_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gunner_shoot_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gunner_shoot_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gunner_shoot_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gunner_shoot_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gunner_shoot_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gunner_shoot_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (gunner_shoot_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (gunner_shoot_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (gunner_shoot_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (gunner_shoot_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gunner_shoot_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gunner_shoot_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gunner_shoot_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (gunner_shoot_s1_agent_rf_source_data),             //        in.data
		.in_valid          (gunner_shoot_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (gunner_shoot_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gunner_shoot_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gunner_shoot_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gunner_shoot_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gunner_shoot_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gunner_shoot_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gunner_shoot_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gunner_shoot_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alien_shoot_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (alien_shoot_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alien_shoot_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alien_shoot_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alien_shoot_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alien_shoot_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (alien_shoot_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alien_shoot_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alien_shoot_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (alien_shoot_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alien_shoot_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (alien_shoot_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (alien_shoot_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alien_shoot_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (alien_shoot_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (alien_shoot_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (alien_shoot_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_016_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                         //                .channel
		.rf_sink_ready           (alien_shoot_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alien_shoot_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alien_shoot_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alien_shoot_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alien_shoot_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alien_shoot_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alien_shoot_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alien_shoot_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alien_shoot_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alien_shoot_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (alien_shoot_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (alien_shoot_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (alien_shoot_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (alien_shoot_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alien_shoot_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alien_shoot_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alien_shoot_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (alien_shoot_s1_agent_rf_source_data),             //        in.data
		.in_valid          (alien_shoot_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (alien_shoot_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alien_shoot_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alien_shoot_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alien_shoot_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alien_shoot_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alien_shoot_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alien_shoot_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alien_shoot_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alien_x_position_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (alien_x_position_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alien_x_position_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alien_x_position_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alien_x_position_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alien_x_position_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (alien_x_position_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alien_x_position_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alien_x_position_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (alien_x_position_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alien_x_position_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (alien_x_position_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (alien_x_position_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alien_x_position_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (alien_x_position_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (alien_x_position_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (alien_x_position_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                              //                .channel
		.rf_sink_ready           (alien_x_position_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alien_x_position_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alien_x_position_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alien_x_position_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alien_x_position_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alien_x_position_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alien_x_position_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alien_x_position_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alien_x_position_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alien_x_position_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (alien_x_position_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (alien_x_position_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (alien_x_position_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (alien_x_position_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alien_x_position_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alien_x_position_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alien_x_position_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (alien_x_position_s1_agent_rf_source_data),             //        in.data
		.in_valid          (alien_x_position_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (alien_x_position_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alien_x_position_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alien_x_position_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alien_x_position_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alien_x_position_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alien_x_position_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alien_x_position_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alien_x_position_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alien_y_position_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (alien_y_position_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alien_y_position_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alien_y_position_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alien_y_position_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alien_y_position_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (alien_y_position_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alien_y_position_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alien_y_position_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (alien_y_position_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alien_y_position_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (alien_y_position_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (alien_y_position_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alien_y_position_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (alien_y_position_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (alien_y_position_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (alien_y_position_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                              //                .channel
		.rf_sink_ready           (alien_y_position_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alien_y_position_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alien_y_position_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alien_y_position_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alien_y_position_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alien_y_position_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alien_y_position_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alien_y_position_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alien_y_position_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alien_y_position_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (alien_y_position_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (alien_y_position_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (alien_y_position_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (alien_y_position_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alien_y_position_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alien_y_position_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alien_y_position_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (alien_y_position_s1_agent_rf_source_data),             //        in.data
		.in_valid          (alien_y_position_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (alien_y_position_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alien_y_position_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alien_y_position_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alien_y_position_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alien_y_position_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alien_y_position_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alien_y_position_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alien_y_position_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) game_timer_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (game_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (game_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (game_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (game_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (game_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (game_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (game_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (game_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (game_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (game_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (game_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (game_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (game_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (game_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (game_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (game_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_019_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                        //                .channel
		.rf_sink_ready           (game_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (game_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (game_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (game_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (game_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (game_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (game_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (game_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (game_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (game_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (game_timer_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (game_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (game_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (game_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (game_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (game_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) game_timer_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (game_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (game_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (game_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (game_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (game_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (game_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (game_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (game_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (game_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (game_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_ORI_BURST_SIZE_H      (93),
		.ST_CHANNEL_W              (21),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) random_number_lfsr_output_s1_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (random_number_lfsr_output_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (random_number_lfsr_output_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (random_number_lfsr_output_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (random_number_lfsr_output_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (random_number_lfsr_output_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (random_number_lfsr_output_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (random_number_lfsr_output_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (random_number_lfsr_output_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (random_number_lfsr_output_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (random_number_lfsr_output_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (random_number_lfsr_output_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (random_number_lfsr_output_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (random_number_lfsr_output_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (random_number_lfsr_output_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (random_number_lfsr_output_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (random_number_lfsr_output_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                       //                .channel
		.rf_sink_ready           (random_number_lfsr_output_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (random_number_lfsr_output_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (random_number_lfsr_output_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (random_number_lfsr_output_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (random_number_lfsr_output_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (random_number_lfsr_output_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (random_number_lfsr_output_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (random_number_lfsr_output_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (random_number_lfsr_output_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (random_number_lfsr_output_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (random_number_lfsr_output_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (random_number_lfsr_output_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (random_number_lfsr_output_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (random_number_lfsr_output_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (random_number_lfsr_output_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (random_number_lfsr_output_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponserequest (),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) random_number_lfsr_output_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (random_number_lfsr_output_s1_agent_rf_source_data),             //        in.data
		.in_valid          (random_number_lfsr_output_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (random_number_lfsr_output_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (random_number_lfsr_output_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (random_number_lfsr_output_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (random_number_lfsr_output_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (random_number_lfsr_output_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (random_number_lfsr_output_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (random_number_lfsr_output_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (random_number_lfsr_output_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                       //       src.ready
		.src_valid          (router_003_src_valid),                       //          .valid
		.src_data           (router_003_src_data),                        //          .data
		.src_channel        (router_003_src_channel),                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //       src.ready
		.src_valid          (router_004_src_valid),                                 //          .valid
		.src_data           (router_004_src_data),                                  //          .data
		.src_channel        (router_004_src_channel),                               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (receive_parallel_to_processor_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (receive_parallel_to_processor_s1_agent_rp_valid),         //          .valid
		.sink_data          (receive_parallel_to_processor_s1_agent_rp_data),          //          .data
		.sink_startofpacket (receive_parallel_to_processor_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (receive_parallel_to_processor_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (transmit_parallel_from_processor_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (transmit_parallel_from_processor_s1_agent_rp_valid),         //          .valid
		.sink_data          (transmit_parallel_from_processor_s1_agent_rp_data),          //          .data
		.sink_startofpacket (transmit_parallel_from_processor_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (transmit_parallel_from_processor_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_006_src_ready),                                       //       src.ready
		.src_valid          (router_006_src_valid),                                       //          .valid
		.src_data           (router_006_src_data),                                        //          .data
		.src_channel        (router_006_src_channel),                                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (transmit_enable_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (transmit_enable_s1_agent_rp_valid),         //          .valid
		.sink_data          (transmit_enable_s1_agent_rp_data),          //          .data
		.sink_startofpacket (transmit_enable_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (transmit_enable_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_007_src_ready),                      //       src.ready
		.src_valid          (router_007_src_valid),                      //          .valid
		.src_data           (router_007_src_data),                       //          .data
		.src_channel        (router_007_src_channel),                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_008 (
		.sink_ready         (transmit_character_sent_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (transmit_character_sent_s1_agent_rp_valid),         //          .valid
		.sink_data          (transmit_character_sent_s1_agent_rp_data),          //          .data
		.sink_startofpacket (transmit_character_sent_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (transmit_character_sent_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_008_src_ready),                              //       src.ready
		.src_valid          (router_008_src_valid),                              //          .valid
		.src_data           (router_008_src_data),                               //          .data
		.src_channel        (router_008_src_channel),                            //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (transmit_load_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (transmit_load_s1_agent_rp_valid),         //          .valid
		.sink_data          (transmit_load_s1_agent_rp_data),          //          .data
		.sink_startofpacket (transmit_load_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (transmit_load_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (receive_character_received_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (receive_character_received_s1_agent_rp_valid),         //          .valid
		.sink_data          (receive_character_received_s1_agent_rp_data),          //          .data
		.sink_startofpacket (receive_character_received_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (receive_character_received_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_010_src_ready),                                 //       src.ready
		.src_valid          (router_010_src_valid),                                 //          .valid
		.src_data           (router_010_src_data),                                  //          .data
		.src_channel        (router_010_src_channel),                               //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (sram_address_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (sram_address_s1_agent_rp_valid),          //          .valid
		.sink_data          (sram_address_s1_agent_rp_data),           //          .data
		.sink_startofpacket (sram_address_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (sram_address_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                    //       src.ready
		.src_valid          (router_011_src_valid),                    //          .valid
		.src_data           (router_011_src_data),                     //          .data
		.src_channel        (router_011_src_channel),                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (sram_data_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (sram_data_s1_agent_rp_valid),             //          .valid
		.sink_data          (sram_data_s1_agent_rp_data),              //          .data
		.sink_startofpacket (sram_data_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sram_data_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                    //       src.ready
		.src_valid          (router_012_src_valid),                    //          .valid
		.src_data           (router_012_src_data),                     //          .data
		.src_channel        (router_012_src_channel),                  //          .channel
		.src_startofpacket  (router_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (sram_enable_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (sram_enable_s1_agent_rp_valid),           //          .valid
		.sink_data          (sram_enable_s1_agent_rp_data),            //          .data
		.sink_startofpacket (sram_enable_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (sram_enable_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                    //       src.ready
		.src_valid          (router_013_src_valid),                    //          .valid
		.src_data           (router_013_src_data),                     //          .data
		.src_channel        (router_013_src_channel),                  //          .channel
		.src_startofpacket  (router_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (sram_read_write_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (sram_read_write_s1_agent_rp_valid),         //          .valid
		.sink_data          (sram_read_write_s1_agent_rp_data),          //          .data
		.sink_startofpacket (sram_read_write_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_read_write_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_014_src_ready),                      //       src.ready
		.src_valid          (router_014_src_valid),                      //          .valid
		.src_data           (router_014_src_data),                       //          .data
		.src_channel        (router_014_src_channel),                    //          .channel
		.src_startofpacket  (router_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                 //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_015 (
		.sink_ready         (gunner_left_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (gunner_left_s1_agent_rp_valid),           //          .valid
		.sink_data          (gunner_left_s1_agent_rp_data),            //          .data
		.sink_startofpacket (gunner_left_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (gunner_left_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_016 (
		.sink_ready         (gunner_right_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (gunner_right_s1_agent_rp_valid),          //          .valid
		.sink_data          (gunner_right_s1_agent_rp_data),           //          .data
		.sink_startofpacket (gunner_right_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (gunner_right_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                    //       src.ready
		.src_valid          (router_016_src_valid),                    //          .valid
		.src_data           (router_016_src_data),                     //          .data
		.src_channel        (router_016_src_channel),                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_017 (
		.sink_ready         (gunner_shoot_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (gunner_shoot_s1_agent_rp_valid),          //          .valid
		.sink_data          (gunner_shoot_s1_agent_rp_data),           //          .data
		.sink_startofpacket (gunner_shoot_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (gunner_shoot_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                    //       src.ready
		.src_valid          (router_017_src_valid),                    //          .valid
		.src_data           (router_017_src_data),                     //          .data
		.src_channel        (router_017_src_channel),                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_018 (
		.sink_ready         (alien_shoot_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (alien_shoot_s1_agent_rp_valid),           //          .valid
		.sink_data          (alien_shoot_s1_agent_rp_data),            //          .data
		.sink_startofpacket (alien_shoot_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (alien_shoot_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                    //       src.ready
		.src_valid          (router_018_src_valid),                    //          .valid
		.src_data           (router_018_src_data),                     //          .data
		.src_channel        (router_018_src_channel),                  //          .channel
		.src_startofpacket  (router_018_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_019 (
		.sink_ready         (alien_x_position_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (alien_x_position_s1_agent_rp_valid),         //          .valid
		.sink_data          (alien_x_position_s1_agent_rp_data),          //          .data
		.sink_startofpacket (alien_x_position_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (alien_x_position_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_019_src_ready),                       //       src.ready
		.src_valid          (router_019_src_valid),                       //          .valid
		.src_data           (router_019_src_data),                        //          .data
		.src_channel        (router_019_src_channel),                     //          .channel
		.src_startofpacket  (router_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_020 (
		.sink_ready         (alien_y_position_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (alien_y_position_s1_agent_rp_valid),         //          .valid
		.sink_data          (alien_y_position_s1_agent_rp_data),          //          .data
		.sink_startofpacket (alien_y_position_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (alien_y_position_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_020_src_ready),                       //       src.ready
		.src_valid          (router_020_src_valid),                       //          .valid
		.src_data           (router_020_src_data),                        //          .data
		.src_channel        (router_020_src_channel),                     //          .channel
		.src_startofpacket  (router_020_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_021 (
		.sink_ready         (game_timer_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (game_timer_s1_agent_rp_valid),            //          .valid
		.sink_data          (game_timer_s1_agent_rp_data),             //          .data
		.sink_startofpacket (game_timer_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (game_timer_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                    //       src.ready
		.src_valid          (router_021_src_valid),                    //          .valid
		.src_data           (router_021_src_data),                     //          .data
		.src_channel        (router_021_src_channel),                  //          .channel
		.src_startofpacket  (router_021_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_022 (
		.sink_ready         (random_number_lfsr_output_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (random_number_lfsr_output_s1_agent_rp_valid),         //          .valid
		.sink_data          (random_number_lfsr_output_s1_agent_rp_data),          //          .data
		.sink_startofpacket (random_number_lfsr_output_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (random_number_lfsr_output_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_022_src_ready),                                //       src.ready
		.src_valid          (router_022_src_valid),                                //          .valid
		.src_data           (router_022_src_data),                                 //          .data
		.src_channel        (router_022_src_channel),                              //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                        //      sink.ready
		.sink_channel       (router_src_channel),                      //          .channel
		.sink_data          (router_src_data),                         //          .data
		.sink_startofpacket (router_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                    //          .valid
		.src1_data          (cmd_demux_src1_data),                     //          .data
		.src1_channel       (cmd_demux_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                    //      sink.ready
		.sink_channel        (router_001_src_channel),                  //          .channel
		.sink_data           (router_001_src_data),                     //          .data
		.sink_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid          (router_001_src_valid),                    //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                //          .valid
		.src0_data           (cmd_demux_001_src0_data),                 //          .data
		.src0_channel        (cmd_demux_001_src0_channel),              //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                //          .valid
		.src1_data           (cmd_demux_001_src1_data),                 //          .data
		.src1_channel        (cmd_demux_001_src1_channel),              //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                //          .valid
		.src2_data           (cmd_demux_001_src2_data),                 //          .data
		.src2_channel        (cmd_demux_001_src2_channel),              //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                //          .valid
		.src3_data           (cmd_demux_001_src3_data),                 //          .data
		.src3_channel        (cmd_demux_001_src3_channel),              //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                //          .valid
		.src4_data           (cmd_demux_001_src4_data),                 //          .data
		.src4_channel        (cmd_demux_001_src4_channel),              //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),          //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                //          .valid
		.src5_data           (cmd_demux_001_src5_data),                 //          .data
		.src5_channel        (cmd_demux_001_src5_channel),              //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),          //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                //          .valid
		.src6_data           (cmd_demux_001_src6_data),                 //          .data
		.src6_channel        (cmd_demux_001_src6_channel),              //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),          //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                //          .valid
		.src7_data           (cmd_demux_001_src7_data),                 //          .data
		.src7_channel        (cmd_demux_001_src7_channel),              //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),          //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                //          .valid
		.src8_data           (cmd_demux_001_src8_data),                 //          .data
		.src8_channel        (cmd_demux_001_src8_channel),              //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),          //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                //          .valid
		.src9_data           (cmd_demux_001_src9_data),                 //          .data
		.src9_channel        (cmd_demux_001_src9_channel),              //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),          //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),               //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),               //          .valid
		.src10_data          (cmd_demux_001_src10_data),                //          .data
		.src10_channel       (cmd_demux_001_src10_channel),             //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),       //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),         //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),               //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),               //          .valid
		.src11_data          (cmd_demux_001_src11_data),                //          .data
		.src11_channel       (cmd_demux_001_src11_channel),             //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),       //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),         //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),               //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),               //          .valid
		.src12_data          (cmd_demux_001_src12_data),                //          .data
		.src12_channel       (cmd_demux_001_src12_channel),             //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),       //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),         //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),               //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),               //          .valid
		.src13_data          (cmd_demux_001_src13_data),                //          .data
		.src13_channel       (cmd_demux_001_src13_channel),             //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),       //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),         //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),               //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),               //          .valid
		.src14_data          (cmd_demux_001_src14_data),                //          .data
		.src14_channel       (cmd_demux_001_src14_channel),             //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),       //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),         //          .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),               //     src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),               //          .valid
		.src15_data          (cmd_demux_001_src15_data),                //          .data
		.src15_channel       (cmd_demux_001_src15_channel),             //          .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),       //          .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),         //          .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),               //     src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),               //          .valid
		.src16_data          (cmd_demux_001_src16_data),                //          .data
		.src16_channel       (cmd_demux_001_src16_channel),             //          .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),       //          .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),         //          .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),               //     src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),               //          .valid
		.src17_data          (cmd_demux_001_src17_data),                //          .data
		.src17_channel       (cmd_demux_001_src17_channel),             //          .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),       //          .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),         //          .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),               //     src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),               //          .valid
		.src18_data          (cmd_demux_001_src18_data),                //          .data
		.src18_channel       (cmd_demux_001_src18_channel),             //          .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),       //          .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),         //          .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),               //     src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),               //          .valid
		.src19_data          (cmd_demux_001_src19_data),                //          .data
		.src19_channel       (cmd_demux_001_src19_channel),             //          .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),       //          .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),         //          .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),               //     src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),               //          .valid
		.src20_data          (cmd_demux_001_src20_data),                //          .data
		.src20_channel       (cmd_demux_001_src20_channel),             //          .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),       //          .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                   //          .valid
		.src_data            (cmd_mux_011_src_data),                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                   //          .valid
		.src_data            (cmd_mux_012_src_data),                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                   //          .valid
		.src_data            (cmd_mux_013_src_data),                    //          .data
		.src_channel         (cmd_mux_013_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                   //          .valid
		.src_data            (cmd_mux_014_src_data),                    //          .data
		.src_channel         (cmd_mux_014_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                   //          .valid
		.src_data            (cmd_mux_015_src_data),                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                   //          .valid
		.src_data            (cmd_mux_016_src_data),                    //          .data
		.src_channel         (cmd_mux_016_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                   //          .valid
		.src_data            (cmd_mux_017_src_data),                    //          .data
		.src_channel         (cmd_mux_017_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                   //          .valid
		.src_data            (cmd_mux_018_src_data),                    //          .data
		.src_channel         (cmd_mux_018_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                   //          .valid
		.src_data            (cmd_mux_019_src_data),                    //          .data
		.src_channel         (cmd_mux_019_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                   //          .valid
		.src_data            (cmd_mux_020_src_data),                    //          .data
		.src_channel         (cmd_mux_020_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                //          .valid
		.src0_data          (rsp_demux_012_src0_data),                 //          .data
		.src0_channel       (rsp_demux_012_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                //          .valid
		.src0_data          (rsp_demux_013_src0_data),                 //          .data
		.src0_channel       (rsp_demux_013_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                //          .valid
		.src0_data          (rsp_demux_014_src0_data),                 //          .data
		.src0_channel       (rsp_demux_014_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_015 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_016 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                //          .valid
		.src0_data          (rsp_demux_016_src0_data),                 //          .data
		.src0_channel       (rsp_demux_016_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_017 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                //          .valid
		.src0_data          (rsp_demux_017_src0_data),                 //          .data
		.src0_channel       (rsp_demux_017_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_018 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                    //      sink.ready
		.sink_channel       (router_020_src_channel),                  //          .channel
		.sink_data          (router_020_src_data),                     //          .data
		.sink_startofpacket (router_020_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_020_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                //          .valid
		.src0_data          (rsp_demux_018_src0_data),                 //          .data
		.src0_channel       (rsp_demux_018_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_019 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                    //      sink.ready
		.sink_channel       (router_021_src_channel),                  //          .channel
		.sink_data          (router_021_src_data),                     //          .data
		.sink_startofpacket (router_021_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_021_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                //          .valid
		.src0_data          (rsp_demux_019_src0_data),                 //          .data
		.src0_channel       (rsp_demux_019_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_020 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                    //      sink.ready
		.sink_channel       (router_022_src_channel),                  //          .channel
		.sink_data          (router_022_src_data),                     //          .data
		.sink_startofpacket (router_022_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_022_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                //          .valid
		.src0_data          (rsp_demux_020_src0_data),                 //          .data
		.src0_channel       (rsp_demux_020_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                           //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                   //          .valid
		.src_data             (rsp_mux_001_src_data),                    //          .data
		.src_channel          (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                  //          .channel
		.sink0_data           (rsp_demux_src1_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),              //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),              //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                 //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),              //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                 //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),              //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                 //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),              //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                 //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),              //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                 //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),              //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                 //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),              //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                 //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),              //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                 //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),              //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                 //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),              //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                 //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),              //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                 //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),              //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                 //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),              //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                 //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),              //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                 //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),              //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                 //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),              //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                 //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),              //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                 //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket)           //          .endofpacket
	);

endmodule
