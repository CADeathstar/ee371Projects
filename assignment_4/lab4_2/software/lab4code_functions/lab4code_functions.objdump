
lab4code_functions.elf:     file format elf32-littlenios2
lab4code_functions.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000cf4 memsz 0x00000cf4 flags r-x
    LOAD off    0x00001d14 vaddr 0x00000d14 paddr 0x00000e74 align 2**12
         filesz 0x00000160 memsz 0x00000160 flags rw-
    LOAD off    0x00001fd4 vaddr 0x00000fd4 paddr 0x00000fd4 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001e74  2**0
                  CONTENTS
  2 .text         00000cc0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00000ce0  00000ce0  00001ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000160  00000d14  00000e74  00001d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00000fd4  00000fd4  00001fd4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000fec  00000fec  00001e74  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000398  00000000  00000000  00001e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004697  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001abd  00000000  00000000  000068c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c30  00000000  00000000  00008384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000540  00000000  00000000  00009fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000011d3  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d4d  00000000  00000000  0000b6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000c414  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  0000c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000da02  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000da05  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000da08  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000da09  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000da0a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000da13  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000da1c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000da25  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  0000da2c  2**0
                  CONTENTS, READONLY
 26 .jdi          000047e0  00000000  00000000  0000da67  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00053537  00000000  00000000  00012247  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000ce0 l    d  .rodata	00000000 .rodata
00000d14 l    d  .rwdata	00000000 .rwdata
00000fd4 l    d  .bss	00000000 .bss
00000fec l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4code_functions_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00000d14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00000e54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000b84 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000bb4 l     F .text	0000006c udivmodsi4
00000948 g     F .text	0000002c alt_main
00000e74 g       *ABS*	00000000 __flash_rwdata_start
00000fec g       *ABS*	00000000 __alt_heap_start
000000a8 g     F .text	0000003c writeBuffer
000009bc g     F .text	00000038 alt_putstr
00000e58 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000fdc g     O .bss	00000004 errno
00000fe4 g     O .bss	00000004 alt_argv
00008e4c g       *ABS*	00000000 _gp
00000a40 g     F .text	00000004 usleep
00000df4 g     O .rwdata	00000030 alt_fd_list
00000a68 g     F .text	0000005c altera_avalon_jtag_uart_read
00000cd0 g     F .text	00000008 .hidden __udivsi3
00000650 g     F .text	00000050 _sbrk_r
00000e5c g     O .rwdata	00000004 alt_max_fd
0000005c g     F .text	0000004c readBuffer
00000e4c g     O .rwdata	00000004 _global_impure_ptr
00000fec g       *ABS*	00000000 __bss_end
0000080c g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000e24 g     O .rwdata	00000028 alt_dev_null
00000b80 g     F .text	00000004 alt_dcache_flush_all
00000478 g     F .text	0000001c calloc
00000e74 g       *ABS*	00000000 __ram_rwdata_end
00000e60 g     O .rwdata	00000008 alt_dev_list
00000d14 g       *ABS*	00000000 __ram_rodata_end
00000cd8 g     F .text	00000008 .hidden __umodsi3
00000fec g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000ac4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000a64 g     F .text	00000004 alt_sys_init
000006c0 g     F .text	00000028 .hidden __mulsi3
00000d14 g       *ABS*	00000000 __ram_rwdata_start
00000ce0 g       *ABS*	00000000 __ram_rodata_start
00000af8 g     F .text	00000088 alt_busy_sleep
00000fec g       *ABS*	00000000 __alt_stack_base
000009f4 g     F .text	0000004c sbrk
00000494 g     F .text	00000060 _calloc_r
00000fd4 g       *ABS*	00000000 __bss_start
000006a0 g     F .text	00000020 memset
000002d4 g     F .text	000000a8 printIfCharacterReceive
0000037c g     F .text	000000fc main
00000fe0 g     O .bss	00000004 alt_envp
00000194 g     F .text	00000140 transmitIfBufferNotEmpty
00004000 g       *ABS*	00000000 __alt_heap_limit
000004f4 g     F .text	0000015c _malloc_r
00000e70 g     O .rwdata	00000004 alt_errno
00000c20 g     F .text	00000054 .hidden __divsi3
00000ce0 g       *ABS*	00000000 __flash_rodata_start
00000a44 g     F .text	00000020 alt_irq_init
00000134 g     F .text	00000060 readKeyboardToBuffer
00000e50 g     O .rwdata	00000004 _impure_ptr
00000fe8 g     O .bss	00000004 alt_argc
00000e68 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000e74 g       *ABS*	00000000 _edata
00000fec g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000000e4 g     F .text	0000003c isEvenParity
00000120 g     F .text	00000014 getParityBit
00000b90 g     F .text	00000008 altera_nios2_qsys_irq_init
00000c74 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000b98 g     F .text	0000001c strlen
00000974 g     F .text	00000048 alt_putchar
00000fd4 g     O .bss	00000004 __malloc_sbrk_start
00000b8c g     F .text	00000004 alt_icache_flush_all
00000fd8 g     O .bss	00000004 __malloc_free_list
000006e8 g     F .text	00000124 fcntl
00000850 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a39314 	ori	gp,gp,36428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1083f514 	ori	r2,r2,4052

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c3fb14 	ori	r3,r3,4076

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff71f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00008500 	call	850 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00009480 	call	948 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff720c>

0000005c <readBuffer>:
#define data_bus_LEDs (volatile char *) 0x00005040


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
  5c:	20c00017 	ldw	r3,0(r4)
  60:	01401804 	movi	r5,96
  64:	18800003 	ldbu	r2,0(r3)
  68:	11c03fcc 	andi	r7,r2,255
  6c:	39c0201c 	xori	r7,r7,128
  70:	39ffe004 	addi	r7,r7,-128
  74:	39400a26 	beq	r7,r5,a0 <readBuffer+0x44>
  78:	38000a26 	beq	r7,zero,a4 <readBuffer+0x48>
        return '\0';
    } else {
        char c = **pTransmit;
        **pTransmit = 0x60;
  7c:	19400005 	stb	r5,0(r3)

        if((*pTransmit - pBuffer) == (BUFFER_SIZE - 1)) {
  80:	20c00017 	ldw	r3,0(r4)
  84:	197ff3c4 	addi	r5,r3,-49
  88:	2980021e 	bne	r5,r6,94 <readBuffer+0x38>
            *pTransmit = pBuffer;
  8c:	21800015 	stw	r6,0(r4)
  90:	f800283a 	ret
        } else {
            *pTransmit = *pTransmit + sizeof(char);
  94:	18c00044 	addi	r3,r3,1
  98:	20c00015 	stw	r3,0(r4)
  9c:	f800283a 	ret


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
        return '\0';
  a0:	0005883a 	mov	r2,zero
        } else {
            *pTransmit = *pTransmit + sizeof(char);
        }
        return c;
    }
}
  a4:	f800283a 	ret

000000a8 <writeBuffer>:

void writeBuffer(char c, char** pBufferHead, char** pBuffer) {
    if(!(**pBufferHead == 0x60 || **pBufferHead == '\0')) return;
  a8:	28800017 	ldw	r2,0(r5)
  ac:	01c01804 	movi	r7,96
  b0:	10c00007 	ldb	r3,0(r2)
  b4:	19c00126 	beq	r3,r7,bc <writeBuffer+0x14>
  b8:	1800091e 	bne	r3,zero,e0 <writeBuffer+0x38>

    *(*pBufferHead) = c;
  bc:	11000005 	stb	r4,0(r2)
    if((*pBufferHead - *pBuffer) == (BUFFER_SIZE - 1)) {
  c0:	28800017 	ldw	r2,0(r5)
  c4:	30c00017 	ldw	r3,0(r6)
  c8:	113ff3c4 	addi	r4,r2,-49
  cc:	20c0021e 	bne	r4,r3,d8 <writeBuffer+0x30>
        *pBufferHead = *pBuffer;
  d0:	28c00015 	stw	r3,0(r5)
  d4:	f800283a 	ret
    } else {
        *pBufferHead = *pBufferHead + sizeof(char);
  d8:	10800044 	addi	r2,r2,1
  dc:	28800015 	stw	r2,0(r5)
  e0:	f800283a 	ret

000000e4 <isEvenParity>:
unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
        int bit = (data >> i) & 0x01;
  e4:	21003fcc 	andi	r4,r4,255
  e8:	2100201c 	xori	r4,r4,128

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
  ec:	0007883a 	mov	r3,zero
        *pBufferHead = *pBufferHead + sizeof(char);
    }
}

unsigned int isEvenParity(char data) {
    int count = 0;
  f0:	0005883a 	mov	r2,zero

    int i;
    for(i = 0; i < 7; i++) {
        int bit = (data >> i) & 0x01;
  f4:	213fe004 	addi	r4,r4,-128

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
  f8:	018001c4 	movi	r6,7
        int bit = (data >> i) & 0x01;
  fc:	20cbd83a 	sra	r5,r4,r3
 100:	2940004c 	andi	r5,r5,1
        if(bit) {
 104:	28000126 	beq	r5,zero,10c <isEvenParity+0x28>
            count++;
 108:	10800044 	addi	r2,r2,1

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
 10c:	18c00044 	addi	r3,r3,1
 110:	19bffa1e 	bne	r3,r6,fc <_gp+0xffff72b0>
        int bit = (data >> i) & 0x01;
        if(bit) {
            count++;
        }
    }
    return ((count + 1) % 2);
 114:	10800044 	addi	r2,r2,1
}
 118:	1080004c 	andi	r2,r2,1
 11c:	f800283a 	ret

00000120 <getParityBit>:

unsigned int getParityBit(char data) {
    return data < 7;
 120:	21003fcc 	andi	r4,r4,255
 124:	2100201c 	xori	r4,r4,128
 128:	213fe004 	addi	r4,r4,-128
 12c:	208001d0 	cmplti	r2,r4,7
}
 130:	f800283a 	ret

00000134 <readKeyboardToBuffer>:

void readKeyboardToBuffer(char** pBufferHead, char** pBuffer) {
 134:	defffd04 	addi	sp,sp,-12
 138:	dc400115 	stw	r17,4(sp)
 13c:	dc000015 	stw	r16,0(sp)
 140:	2023883a 	mov	r17,r4
 144:	dfc00215 	stw	ra,8(sp)
 148:	2821883a 	mov	r16,r5
	char newC = alt_getchar();
 14c:	000080c0 	call	80c <alt_getchar>
	if(newC > 31 && newC < 128) {
 150:	11003fcc 	andi	r4,r2,255
 154:	2100201c 	xori	r4,r4,128
 158:	213fe004 	addi	r4,r4,-128
 15c:	00c007c4 	movi	r3,31
 160:	1900070e 	bge	r3,r4,180 <readKeyboardToBuffer+0x4c>
		writeBuffer(newC, pBufferHead, pBuffer);
 164:	880b883a 	mov	r5,r17
 168:	800d883a 	mov	r6,r16
	}
}
 16c:	dfc00217 	ldw	ra,8(sp)
 170:	dc400117 	ldw	r17,4(sp)
 174:	dc000017 	ldw	r16,0(sp)
 178:	dec00304 	addi	sp,sp,12
}

void readKeyboardToBuffer(char** pBufferHead, char** pBuffer) {
	char newC = alt_getchar();
	if(newC > 31 && newC < 128) {
		writeBuffer(newC, pBufferHead, pBuffer);
 17c:	00000a81 	jmpi	a8 <writeBuffer>
	}
}
 180:	dfc00217 	ldw	ra,8(sp)
 184:	dc400117 	ldw	r17,4(sp)
 188:	dc000017 	ldw	r16,0(sp)
 18c:	dec00304 	addi	sp,sp,12
 190:	f800283a 	ret

00000194 <transmitIfBufferNotEmpty>:

void transmitIfBufferNotEmpty(char** pTransmit, char* pBufferHead, char* pBuffer, int* write) {
 194:	defffc04 	addi	sp,sp,-16
 198:	dc000015 	stw	r16,0(sp)
 19c:	dfc00315 	stw	ra,12(sp)
 1a0:	dc800215 	stw	r18,8(sp)
 1a4:	dc400115 	stw	r17,4(sp)
	if(*load) {
 1a8:	00d40804 	movi	r3,20512
 1ac:	18800003 	ldbu	r2,0(r3)
	if(newC > 31 && newC < 128) {
		writeBuffer(newC, pBufferHead, pBuffer);
	}
}

void transmitIfBufferNotEmpty(char** pTransmit, char* pBufferHead, char* pBuffer, int* write) {
 1b0:	3821883a 	mov	r16,r7
	if(*load) {
 1b4:	10803fcc 	andi	r2,r2,255
 1b8:	1080201c 	xori	r2,r2,128
 1bc:	10bfe004 	addi	r2,r2,-128
 1c0:	10000426 	beq	r2,zero,1d4 <transmitIfBufferNotEmpty+0x40>
		  *load = 0;
 1c4:	18000005 	stb	zero,0(r3)
		  *transmit_enable = 1;
 1c8:	00940004 	movi	r2,20480
 1cc:	00c00044 	movi	r3,1
 1d0:	10c00005 	stb	r3,0(r2)
	  }

	  char c = '\0';
	  if(*write) {
 1d4:	80800017 	ldw	r2,0(r16)
 1d8:	10002e26 	beq	r2,zero,294 <transmitIfBufferNotEmpty+0x100>
		  c = readBuffer(pTransmit, pBufferHead, pBuffer);
 1dc:	000005c0 	call	5c <readBuffer>
		  if(c != '\0' && c != 0x60 ) {
 1e0:	11003fcc 	andi	r4,r2,255
 1e4:	2100201c 	xori	r4,r4,128
 1e8:	213fe004 	addi	r4,r4,-128
 1ec:	20002926 	beq	r4,zero,294 <transmitIfBufferNotEmpty+0x100>
 1f0:	00801804 	movi	r2,96
 1f4:	20802726 	beq	r4,r2,294 <transmitIfBufferNotEmpty+0x100>
			  *write = 0;
			  *data_bus_output = ((c << 2)>> 1)|0b0000000001;
 1f8:	2107883a 	add	r3,r4,r4
 1fc:	18c7883a 	add	r3,r3,r3
 200:	1807d07a 	srai	r3,r3,1

	  char c = '\0';
	  if(*write) {
		  c = readBuffer(pTransmit, pBufferHead, pBuffer);
		  if(c != '\0' && c != 0x60 ) {
			  *write = 0;
 204:	80000015 	stw	zero,0(r16)
			  *data_bus_output = ((c << 2)>> 1)|0b0000000001;
 208:	00940c04 	movi	r2,20528
 20c:	18c00054 	ori	r3,r3,1
 210:	10c00005 	stb	r3,0(r2)
			  *load = 1;
 214:	04940804 	movi	r18,20512
 218:	00800044 	movi	r2,1
 21c:	90800005 	stb	r2,0(r18)
			  *transmit_enable = 0;
 220:	04540004 	movi	r17,20480
 224:	88000005 	stb	zero,0(r17)
			  alt_putchar(c);
 228:	00009740 	call	974 <alt_putchar>
			  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 22c:	91800003 	ldbu	r6,0(r18)
 230:	88800003 	ldbu	r2,0(r17)
 234:	00d40404 	movi	r3,20496
 238:	18c00003 	ldbu	r3,0(r3)
 23c:	01141404 	movi	r4,20560
 240:	10803fcc 	andi	r2,r2,255
 244:	21000003 	ldbu	r4,0(r4)
 248:	1080201c 	xori	r2,r2,128
 24c:	10bfe004 	addi	r2,r2,-128
 250:	108b883a 	add	r5,r2,r2
 254:	18803fcc 	andi	r2,r3,255
 258:	1080201c 	xori	r2,r2,128
 25c:	20c03fcc 	andi	r3,r4,255
 260:	10bfe004 	addi	r2,r2,-128
 264:	18c0201c 	xori	r3,r3,128
 268:	1085883a 	add	r2,r2,r2
 26c:	18ffe004 	addi	r3,r3,-128
 270:	180690fa 	slli	r3,r3,3
 274:	1085883a 	add	r2,r2,r2
 278:	2884b03a 	or	r2,r5,r2
 27c:	1184b03a 	or	r2,r2,r6
 280:	10c4b03a 	or	r2,r2,r3
 284:	00d41004 	movi	r3,20544
 288:	18800005 	stb	r2,0(r3)
			  //*data_bus_LEDs = c;
			  usleep(10000);
 28c:	0109c404 	movi	r4,10000
 290:	0000a400 	call	a40 <usleep>
		  }
	  }
	  if(*character_sent) {
 294:	00940404 	movi	r2,20496
 298:	10800003 	ldbu	r2,0(r2)
 29c:	10803fcc 	andi	r2,r2,255
 2a0:	1080201c 	xori	r2,r2,128
 2a4:	10bfe004 	addi	r2,r2,-128
 2a8:	10000426 	beq	r2,zero,2bc <transmitIfBufferNotEmpty+0x128>
		  *write = 1;
 2ac:	00800044 	movi	r2,1
 2b0:	80800015 	stw	r2,0(r16)
		  *transmit_enable = 0;
 2b4:	00940004 	movi	r2,20480
 2b8:	10000005 	stb	zero,0(r2)
	  }
}
 2bc:	dfc00317 	ldw	ra,12(sp)
 2c0:	dc800217 	ldw	r18,8(sp)
 2c4:	dc400117 	ldw	r17,4(sp)
 2c8:	dc000017 	ldw	r16,0(sp)
 2cc:	dec00404 	addi	sp,sp,16
 2d0:	f800283a 	ret

000002d4 <printIfCharacterReceive>:

void printIfCharacterReceive(int* read) {
	if(*character_received & *read) {
 2d4:	01541404 	movi	r5,20560
 2d8:	28800003 	ldbu	r2,0(r5)
 2dc:	10c03fcc 	andi	r3,r2,255
 2e0:	20800017 	ldw	r2,0(r4)
 2e4:	18c0201c 	xori	r3,r3,128
 2e8:	18ffe004 	addi	r3,r3,-128
 2ec:	1884703a 	and	r2,r3,r2
 2f0:	10001626 	beq	r2,zero,34c <printIfCharacterReceive+0x78>
		  *write = 1;
		  *transmit_enable = 0;
	  }
}

void printIfCharacterReceive(int* read) {
 2f4:	defffe04 	addi	sp,sp,-8
 2f8:	dfc00115 	stw	ra,4(sp)
 2fc:	dc000015 	stw	r16,0(sp)
	if(*character_received & *read) {
		*read = 0;
 300:	20000015 	stw	zero,0(r4)
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
 304:	00941804 	movi	r2,20576
 308:	14000003 	ldbu	r16,0(r2)
 30c:	84003fcc 	andi	r16,r16,255
 310:	8400201c 	xori	r16,r16,128
 314:	843fe004 	addi	r16,r16,-128
		char parityBit = getParityBit(cRec);
		char calcParityBit = isEvenParity(cRec);
 318:	8021d07a 	srai	r16,r16,1
 31c:	8009883a 	mov	r4,r16
 320:	00000e40 	call	e4 <isEvenParity>
		if(parityBit == calcParityBit) {
 324:	10803fcc 	andi	r2,r2,255
 328:	1080201c 	xori	r2,r2,128
    }
    return ((count + 1) % 2);
}

unsigned int getParityBit(char data) {
    return data < 7;
 32c:	80c001d0 	cmplti	r3,r16,7
	if(*character_received & *read) {
		*read = 0;
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
		char parityBit = getParityBit(cRec);
		char calcParityBit = isEvenParity(cRec);
		if(parityBit == calcParityBit) {
 330:	10bfe004 	addi	r2,r2,-128
 334:	18800d1e 	bne	r3,r2,36c <printIfCharacterReceive+0x98>
			alt_putchar(cRec);
 338:	8009883a 	mov	r4,r16
		}
	} else if(!(*character_received)) {
		*read = 1;
	}
}
 33c:	dfc00117 	ldw	ra,4(sp)
 340:	dc000017 	ldw	r16,0(sp)
 344:	dec00204 	addi	sp,sp,8
		*read = 0;
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
		char parityBit = getParityBit(cRec);
		char calcParityBit = isEvenParity(cRec);
		if(parityBit == calcParityBit) {
			alt_putchar(cRec);
 348:	00009741 	jmpi	974 <alt_putchar>
		}
	} else if(!(*character_received)) {
 34c:	28800003 	ldbu	r2,0(r5)
 350:	10803fcc 	andi	r2,r2,255
 354:	1080201c 	xori	r2,r2,128
 358:	10bfe004 	addi	r2,r2,-128
 35c:	1000061e 	bne	r2,zero,378 <printIfCharacterReceive+0xa4>
		*read = 1;
 360:	00800044 	movi	r2,1
 364:	20800015 	stw	r2,0(r4)
 368:	f800283a 	ret
	}
}
 36c:	dfc00117 	ldw	ra,4(sp)
 370:	dc000017 	ldw	r16,0(sp)
 374:	dec00204 	addi	sp,sp,8
 378:	f800283a 	ret

0000037c <main>:


int main() {
 37c:	defffa04 	addi	sp,sp,-24
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 380:	01400104 	movi	r5,4
 384:	01900004 	movi	r6,16384
 388:	0009883a 	mov	r4,zero
		*read = 1;
	}
}


int main() {
 38c:	dfc00515 	stw	ra,20(sp)
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 390:	00006e80 	call	6e8 <fcntl>

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
 394:	01000034 	movhi	r4,0
 398:	21033804 	addi	r4,r4,3296
 39c:	00009bc0 	call	9bc <alt_putstr>
	int read = 1;
 3a0:	01400044 	movi	r5,1
	int write = 1;

	char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
 3a4:	01000c84 	movi	r4,50

int main() {
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
	int read = 1;
 3a8:	d9400415 	stw	r5,16(sp)
	int write = 1;
 3ac:	d9400315 	stw	r5,12(sp)

	char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
 3b0:	00004780 	call	478 <calloc>
 3b4:	d8800215 	stw	r2,8(sp)
	char* pBufferHead = pBuffer;
 3b8:	d8800115 	stw	r2,4(sp)
	char* pTransmit = pBuffer;
 3bc:	d8800015 	stw	r2,0(sp)

	*load = 0;
 3c0:	00940804 	movi	r2,20512
 3c4:	10000005 	stb	zero,0(r2)
	*transmit_enable = 0;
 3c8:	00940004 	movi	r2,20480
 3cc:	10000005 	stb	zero,0(r2)
	*data_bus_output = 0xFF;
 3d0:	00ffffc4 	movi	r3,-1
 3d4:	00940c04 	movi	r2,20528
 3d8:	10c00005 	stb	r3,0(r2)
	*data_bus_LEDs = 0x00;
 3dc:	00941004 	movi	r2,20544
 3e0:	10000005 	stb	zero,0(r2)

  /* Event loop never exits. */
  while (1) {
	  //*******read keyboard and put characters in buffer********
	  readKeyboardToBuffer(&pBufferHead, &pBuffer);
 3e4:	d9000104 	addi	r4,sp,4
 3e8:	d9400204 	addi	r5,sp,8
 3ec:	00001340 	call	134 <readKeyboardToBuffer>

	  //******transmit*******
	  transmitIfBufferNotEmpty(&pTransmit, pBufferHead, pBuffer, &write);
 3f0:	d9400117 	ldw	r5,4(sp)
 3f4:	d9800217 	ldw	r6,8(sp)
 3f8:	d809883a 	mov	r4,sp
 3fc:	d9c00304 	addi	r7,sp,12
 400:	00001940 	call	194 <transmitIfBufferNotEmpty>

	  //*****receive*********
	  printIfCharacterReceive(&read);
 404:	d9000404 	addi	r4,sp,16
 408:	00002d40 	call	2d4 <printIfCharacterReceive>

	  //******Debug outputs
	  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 40c:	00940804 	movi	r2,20512
 410:	11800003 	ldbu	r6,0(r2)
 414:	00940004 	movi	r2,20480
 418:	10800003 	ldbu	r2,0(r2)
 41c:	00d40404 	movi	r3,20496
 420:	18c00003 	ldbu	r3,0(r3)
 424:	01141404 	movi	r4,20560
 428:	10803fcc 	andi	r2,r2,255
 42c:	21000003 	ldbu	r4,0(r4)
 430:	1080201c 	xori	r2,r2,128
 434:	10bfe004 	addi	r2,r2,-128
 438:	108b883a 	add	r5,r2,r2
 43c:	18803fcc 	andi	r2,r3,255
 440:	1080201c 	xori	r2,r2,128
 444:	20c03fcc 	andi	r3,r4,255
 448:	10bfe004 	addi	r2,r2,-128
 44c:	18c0201c 	xori	r3,r3,128
 450:	1085883a 	add	r2,r2,r2
 454:	18ffe004 	addi	r3,r3,-128
 458:	180690fa 	slli	r3,r3,3
 45c:	1085883a 	add	r2,r2,r2
 460:	2884b03a 	or	r2,r5,r2
 464:	1184b03a 	or	r2,r2,r6
 468:	10c4b03a 	or	r2,r2,r3
 46c:	00d41004 	movi	r3,20544
 470:	18800005 	stb	r2,0(r3)
  }
 474:	003fdb06 	br	3e4 <_gp+0xffff7598>

00000478 <calloc>:
 478:	00c00034 	movhi	r3,0
 47c:	18c39404 	addi	r3,r3,3664
 480:	2005883a 	mov	r2,r4
 484:	19000017 	ldw	r4,0(r3)
 488:	280d883a 	mov	r6,r5
 48c:	100b883a 	mov	r5,r2
 490:	00004941 	jmpi	494 <_calloc_r>

00000494 <_calloc_r>:
 494:	defffd04 	addi	sp,sp,-12
 498:	dc000015 	stw	r16,0(sp)
 49c:	2021883a 	mov	r16,r4
 4a0:	2809883a 	mov	r4,r5
 4a4:	300b883a 	mov	r5,r6
 4a8:	dfc00215 	stw	ra,8(sp)
 4ac:	dc400115 	stw	r17,4(sp)
 4b0:	00006c00 	call	6c0 <__mulsi3>
 4b4:	8009883a 	mov	r4,r16
 4b8:	100b883a 	mov	r5,r2
 4bc:	1023883a 	mov	r17,r2
 4c0:	00004f40 	call	4f4 <_malloc_r>
 4c4:	1021883a 	mov	r16,r2
 4c8:	10000426 	beq	r2,zero,4dc <_calloc_r+0x48>
 4cc:	1009883a 	mov	r4,r2
 4d0:	000b883a 	mov	r5,zero
 4d4:	880d883a 	mov	r6,r17
 4d8:	00006a00 	call	6a0 <memset>
 4dc:	8005883a 	mov	r2,r16
 4e0:	dfc00217 	ldw	ra,8(sp)
 4e4:	dc400117 	ldw	r17,4(sp)
 4e8:	dc000017 	ldw	r16,0(sp)
 4ec:	dec00304 	addi	sp,sp,12
 4f0:	f800283a 	ret

000004f4 <_malloc_r>:
 4f4:	defffb04 	addi	sp,sp,-20
 4f8:	00bfff04 	movi	r2,-4
 4fc:	dc000015 	stw	r16,0(sp)
 500:	2c0000c4 	addi	r16,r5,3
 504:	80a0703a 	and	r16,r16,r2
 508:	dc800215 	stw	r18,8(sp)
 50c:	dfc00415 	stw	ra,16(sp)
 510:	dcc00315 	stw	r19,12(sp)
 514:	dc400115 	stw	r17,4(sp)
 518:	84000204 	addi	r16,r16,8
 51c:	00800304 	movi	r2,12
 520:	2025883a 	mov	r18,r4
 524:	8080022e 	bgeu	r16,r2,530 <_malloc_r+0x3c>
 528:	1021883a 	mov	r16,r2
 52c:	00000506 	br	544 <_malloc_r+0x50>
 530:	8000040e 	bge	r16,zero,544 <_malloc_r+0x50>
 534:	00800304 	movi	r2,12
 538:	90800015 	stw	r2,0(r18)
 53c:	0005883a 	mov	r2,zero
 540:	00003c06 	br	634 <_malloc_r+0x140>
 544:	817ffb36 	bltu	r16,r5,534 <_gp+0xffff76e8>
 548:	01000034 	movhi	r4,0
 54c:	2103f604 	addi	r4,r4,4056
 550:	20800017 	ldw	r2,0(r4)
 554:	1007883a 	mov	r3,r2
 558:	18000926 	beq	r3,zero,580 <_malloc_r+0x8c>
 55c:	19400017 	ldw	r5,0(r3)
 560:	2c0bc83a 	sub	r5,r5,r16
 564:	28001716 	blt	r5,zero,5c4 <_malloc_r+0xd0>
 568:	018002c4 	movi	r6,11
 56c:	31400d2e 	bgeu	r6,r5,5a4 <_malloc_r+0xb0>
 570:	19400015 	stw	r5,0(r3)
 574:	1945883a 	add	r2,r3,r5
 578:	14000015 	stw	r16,0(r2)
 57c:	1000231e 	bne	r2,zero,60c <_malloc_r+0x118>
 580:	04400034 	movhi	r17,0
 584:	8c43f504 	addi	r17,r17,4052
 588:	88800017 	ldw	r2,0(r17)
 58c:	1000101e 	bne	r2,zero,5d0 <_malloc_r+0xdc>
 590:	9009883a 	mov	r4,r18
 594:	000b883a 	mov	r5,zero
 598:	00006500 	call	650 <_sbrk_r>
 59c:	88800015 	stw	r2,0(r17)
 5a0:	00000b06 	br	5d0 <_malloc_r+0xdc>
 5a4:	10c0031e 	bne	r2,r3,5b4 <_malloc_r+0xc0>
 5a8:	10c00117 	ldw	r3,4(r2)
 5ac:	20c00015 	stw	r3,0(r4)
 5b0:	00001606 	br	60c <_malloc_r+0x118>
 5b4:	19000117 	ldw	r4,4(r3)
 5b8:	11000115 	stw	r4,4(r2)
 5bc:	1805883a 	mov	r2,r3
 5c0:	00001206 	br	60c <_malloc_r+0x118>
 5c4:	1805883a 	mov	r2,r3
 5c8:	18c00117 	ldw	r3,4(r3)
 5cc:	003fe206 	br	558 <_gp+0xffff770c>
 5d0:	9009883a 	mov	r4,r18
 5d4:	800b883a 	mov	r5,r16
 5d8:	00006500 	call	650 <_sbrk_r>
 5dc:	04ffffc4 	movi	r19,-1
 5e0:	14ffd426 	beq	r2,r19,534 <_gp+0xffff76e8>
 5e4:	144000c4 	addi	r17,r2,3
 5e8:	00ffff04 	movi	r3,-4
 5ec:	88e2703a 	and	r17,r17,r3
 5f0:	88800526 	beq	r17,r2,608 <_malloc_r+0x114>
 5f4:	9009883a 	mov	r4,r18
 5f8:	888bc83a 	sub	r5,r17,r2
 5fc:	00006500 	call	650 <_sbrk_r>
 600:	14ffcc26 	beq	r2,r19,534 <_gp+0xffff76e8>
 604:	8805883a 	mov	r2,r17
 608:	14000015 	stw	r16,0(r2)
 60c:	114002c4 	addi	r5,r2,11
 610:	00fffe04 	movi	r3,-8
 614:	11000104 	addi	r4,r2,4
 618:	28c6703a 	and	r3,r5,r3
 61c:	1909c83a 	sub	r4,r3,r4
 620:	20000326 	beq	r4,zero,630 <_malloc_r+0x13c>
 624:	110b883a 	add	r5,r2,r4
 628:	0109c83a 	sub	r4,zero,r4
 62c:	29000015 	stw	r4,0(r5)
 630:	1805883a 	mov	r2,r3
 634:	dfc00417 	ldw	ra,16(sp)
 638:	dcc00317 	ldw	r19,12(sp)
 63c:	dc800217 	ldw	r18,8(sp)
 640:	dc400117 	ldw	r17,4(sp)
 644:	dc000017 	ldw	r16,0(sp)
 648:	dec00504 	addi	sp,sp,20
 64c:	f800283a 	ret

00000650 <_sbrk_r>:
 650:	defffd04 	addi	sp,sp,-12
 654:	dc000015 	stw	r16,0(sp)
 658:	04000034 	movhi	r16,0
 65c:	dc400115 	stw	r17,4(sp)
 660:	8403f704 	addi	r16,r16,4060
 664:	2023883a 	mov	r17,r4
 668:	2809883a 	mov	r4,r5
 66c:	dfc00215 	stw	ra,8(sp)
 670:	80000015 	stw	zero,0(r16)
 674:	00009f40 	call	9f4 <sbrk>
 678:	00ffffc4 	movi	r3,-1
 67c:	10c0031e 	bne	r2,r3,68c <_sbrk_r+0x3c>
 680:	80c00017 	ldw	r3,0(r16)
 684:	18000126 	beq	r3,zero,68c <_sbrk_r+0x3c>
 688:	88c00015 	stw	r3,0(r17)
 68c:	dfc00217 	ldw	ra,8(sp)
 690:	dc400117 	ldw	r17,4(sp)
 694:	dc000017 	ldw	r16,0(sp)
 698:	dec00304 	addi	sp,sp,12
 69c:	f800283a 	ret

000006a0 <memset>:
 6a0:	2005883a 	mov	r2,r4
 6a4:	2007883a 	mov	r3,r4
 6a8:	218d883a 	add	r6,r4,r6
 6ac:	19800326 	beq	r3,r6,6bc <memset+0x1c>
 6b0:	19400005 	stb	r5,0(r3)
 6b4:	18c00044 	addi	r3,r3,1
 6b8:	003ffc06 	br	6ac <_gp+0xffff7860>
 6bc:	f800283a 	ret

000006c0 <__mulsi3>:
 6c0:	0005883a 	mov	r2,zero
 6c4:	20000726 	beq	r4,zero,6e4 <__mulsi3+0x24>
 6c8:	20c0004c 	andi	r3,r4,1
 6cc:	2008d07a 	srli	r4,r4,1
 6d0:	18000126 	beq	r3,zero,6d8 <__mulsi3+0x18>
 6d4:	1145883a 	add	r2,r2,r5
 6d8:	294b883a 	add	r5,r5,r5
 6dc:	203ffa1e 	bne	r4,zero,6c8 <_gp+0xffff787c>
 6e0:	f800283a 	ret
 6e4:	f800283a 	ret

000006e8 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 6e8:	defff904 	addi	sp,sp,-28
 6ec:	dcc00315 	stw	r19,12(sp)
 6f0:	2027883a 	mov	r19,r4
 6f4:	dfc00415 	stw	ra,16(sp)
 6f8:	dc800215 	stw	r18,8(sp)
 6fc:	dc400115 	stw	r17,4(sp)
 700:	dc000015 	stw	r16,0(sp)
 704:	d9800515 	stw	r6,20(sp)
 708:	d9c00615 	stw	r7,24(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 70c:	20002d16 	blt	r4,zero,7c4 <fcntl+0xdc>
 710:	2823883a 	mov	r17,r5
 714:	04000034 	movhi	r16,0
 718:	01400304 	movi	r5,12
 71c:	00006c00 	call	6c0 <__mulsi3>
 720:	84037d04 	addi	r16,r16,3572
 724:	1407883a 	add	r3,r2,r16
  
  if (fd)
 728:	18002626 	beq	r3,zero,7c4 <fcntl+0xdc>
  {
    switch (cmd)
 72c:	00c000c4 	movi	r3,3
 730:	88c01126 	beq	r17,r3,778 <fcntl+0x90>
 734:	00c00104 	movi	r3,4
 738:	88c0181e 	bne	r17,r3,79c <fcntl+0xb4>
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 73c:	10800204 	addi	r2,r2,8
 740:	80a3883a 	add	r17,r16,r2
 744:	d8800517 	ldw	r2,20(sp)
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 748:	9809883a 	mov	r4,r19
 74c:	01400304 	movi	r5,12
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 750:	1490020c 	andi	r18,r2,16392
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 754:	00006c00 	call	6c0 <__mulsi3>
 758:	8085883a 	add	r2,r16,r2
 75c:	10800217 	ldw	r2,8(r2)
 760:	00effdc4 	movi	r3,-16393
 764:	10c4703a 	and	r2,r2,r3
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 768:	9084b03a 	or	r2,r18,r2
 76c:	88800015 	stw	r2,0(r17)
      va_end(argp);
      return 0;
 770:	0005883a 	mov	r2,zero
 774:	00001e06 	br	7f0 <fcntl+0x108>
  if (fd)
  {
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 778:	9809883a 	mov	r4,r19
 77c:	01400304 	movi	r5,12
 780:	00006c00 	call	6c0 <__mulsi3>
 784:	8085883a 	add	r2,r16,r2
 788:	10c00217 	ldw	r3,8(r2)
 78c:	00900034 	movhi	r2,16384
 790:	10bfffc4 	addi	r2,r2,-1
 794:	1884703a 	and	r2,r3,r2
 798:	00001506 	br	7f0 <fcntl+0x108>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 79c:	00800034 	movhi	r2,0
 7a0:	10839c04 	addi	r2,r2,3696
 7a4:	10800017 	ldw	r2,0(r2)
 7a8:	10000226 	beq	r2,zero,7b4 <fcntl+0xcc>
 7ac:	103ee83a 	callr	r2
 7b0:	00000206 	br	7bc <fcntl+0xd4>
 7b4:	00800034 	movhi	r2,0
 7b8:	1083f704 	addi	r2,r2,4060
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
      va_end(argp);
      return 0;
    default:
      ALT_ERRNO = EINVAL;
 7bc:	00c00584 	movi	r3,22
 7c0:	00000906 	br	7e8 <fcntl+0x100>
 7c4:	00800034 	movhi	r2,0
 7c8:	10839c04 	addi	r2,r2,3696
 7cc:	10800017 	ldw	r2,0(r2)
 7d0:	10000226 	beq	r2,zero,7dc <fcntl+0xf4>
 7d4:	103ee83a 	callr	r2
 7d8:	00000206 	br	7e4 <fcntl+0xfc>
 7dc:	00800034 	movhi	r2,0
 7e0:	1083f704 	addi	r2,r2,4060
      return -1;
    }
  }

  ALT_ERRNO = EBADFD;
 7e4:	00c01444 	movi	r3,81
 7e8:	10c00015 	stw	r3,0(r2)
  return -1;
 7ec:	00bfffc4 	movi	r2,-1
}
 7f0:	dfc00417 	ldw	ra,16(sp)
 7f4:	dcc00317 	ldw	r19,12(sp)
 7f8:	dc800217 	ldw	r18,8(sp)
 7fc:	dc400117 	ldw	r17,4(sp)
 800:	dc000017 	ldw	r16,0(sp)
 804:	dec00704 	addi	sp,sp,28
 808:	f800283a 	ret

0000080c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 80c:	00800034 	movhi	r2,0
 810:	10837d04 	addi	r2,r2,3572
 814:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 818:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 81c:	01000034 	movhi	r4,0
 820:	21039604 	addi	r4,r4,3672
 824:	d80b883a 	mov	r5,sp
 828:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 82c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 830:	0000a680 	call	a68 <altera_avalon_jtag_uart_read>
 834:	0080020e 	bge	zero,r2,840 <alt_getchar+0x34>
        return -1;
    }
    return c;
 838:	d8800007 	ldb	r2,0(sp)
 83c:	00000106 	br	844 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 840:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 844:	dfc00117 	ldw	ra,4(sp)
 848:	dec00204 	addi	sp,sp,8
 84c:	f800283a 	ret

00000850 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 850:	deffff04 	addi	sp,sp,-4
 854:	01000034 	movhi	r4,0
 858:	01400034 	movhi	r5,0
 85c:	dfc00015 	stw	ra,0(sp)
 860:	21034504 	addi	r4,r4,3348
 864:	29439d04 	addi	r5,r5,3700

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 868:	2140061e 	bne	r4,r5,884 <alt_load+0x34>
 86c:	01000034 	movhi	r4,0
 870:	01400034 	movhi	r5,0
 874:	21000804 	addi	r4,r4,32
 878:	29400804 	addi	r5,r5,32
 87c:	2140141e 	bne	r4,r5,8d0 <alt_load+0x80>
 880:	00000d06 	br	8b8 <alt_load+0x68>
 884:	00c00034 	movhi	r3,0
 888:	18c39d04 	addi	r3,r3,3700
 88c:	00bfff04 	movi	r2,-4
 890:	1907c83a 	sub	r3,r3,r4
 894:	1886703a 	and	r3,r3,r2
 898:	0005883a 	mov	r2,zero
  {
    while( to != end )
 89c:	10fff326 	beq	r2,r3,86c <_gp+0xffff7a20>
 8a0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 8a4:	39c00017 	ldw	r7,0(r7)
 8a8:	110d883a 	add	r6,r2,r4
 8ac:	10800104 	addi	r2,r2,4
 8b0:	31c00015 	stw	r7,0(r6)
 8b4:	003ff906 	br	89c <_gp+0xffff7a50>
 8b8:	01000034 	movhi	r4,0
 8bc:	01400034 	movhi	r5,0
 8c0:	21033804 	addi	r4,r4,3296
 8c4:	29433804 	addi	r5,r5,3296

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8c8:	2140121e 	bne	r4,r5,914 <alt_load+0xc4>
 8cc:	00000d06 	br	904 <alt_load+0xb4>
 8d0:	00c00034 	movhi	r3,0
 8d4:	18c00804 	addi	r3,r3,32
 8d8:	00bfff04 	movi	r2,-4
 8dc:	1907c83a 	sub	r3,r3,r4
 8e0:	1886703a 	and	r3,r3,r2
 8e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8e8:	10fff326 	beq	r2,r3,8b8 <_gp+0xffff7a6c>
 8ec:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 8f0:	39c00017 	ldw	r7,0(r7)
 8f4:	110d883a 	add	r6,r2,r4
 8f8:	10800104 	addi	r2,r2,4
 8fc:	31c00015 	stw	r7,0(r6)
 900:	003ff906 	br	8e8 <_gp+0xffff7a9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 904:	0000b800 	call	b80 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 908:	dfc00017 	ldw	ra,0(sp)
 90c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 910:	0000b8c1 	jmpi	b8c <alt_icache_flush_all>
 914:	00c00034 	movhi	r3,0
 918:	18c34504 	addi	r3,r3,3348
 91c:	00bfff04 	movi	r2,-4
 920:	1907c83a 	sub	r3,r3,r4
 924:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 928:	0005883a 	mov	r2,zero
  {
    while( to != end )
 92c:	10fff526 	beq	r2,r3,904 <_gp+0xffff7ab8>
 930:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 934:	39c00017 	ldw	r7,0(r7)
 938:	110d883a 	add	r6,r2,r4
 93c:	10800104 	addi	r2,r2,4
 940:	31c00015 	stw	r7,0(r6)
 944:	003ff906 	br	92c <_gp+0xffff7ae0>

00000948 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 948:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 94c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 950:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 954:	0000a440 	call	a44 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 958:	0000a640 	call	a64 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 95c:	d1206717 	ldw	r4,-32356(gp)
 960:	d1606617 	ldw	r5,-32360(gp)
 964:	d1a06517 	ldw	r6,-32364(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 968:	dfc00017 	ldw	ra,0(sp)
 96c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 970:	000037c1 	jmpi	37c <main>

00000974 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 974:	defffd04 	addi	sp,sp,-12
 978:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 97c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 980:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 984:	01000034 	movhi	r4,0
 988:	21039604 	addi	r4,r4,3672
 98c:	d80b883a 	mov	r5,sp
 990:	01800044 	movi	r6,1
 994:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 998:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 99c:	0000ac40 	call	ac4 <altera_avalon_jtag_uart_write>
 9a0:	00ffffc4 	movi	r3,-1
 9a4:	10c00126 	beq	r2,r3,9ac <alt_putchar+0x38>
        return -1;
    }
    return c;
 9a8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 9ac:	dfc00217 	ldw	ra,8(sp)
 9b0:	dc000117 	ldw	r16,4(sp)
 9b4:	dec00304 	addi	sp,sp,12
 9b8:	f800283a 	ret

000009bc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 9bc:	defffe04 	addi	sp,sp,-8
 9c0:	dc000015 	stw	r16,0(sp)
 9c4:	dfc00115 	stw	ra,4(sp)
 9c8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 9cc:	0000b980 	call	b98 <strlen>
 9d0:	01000034 	movhi	r4,0
 9d4:	21039604 	addi	r4,r4,3672
 9d8:	800b883a 	mov	r5,r16
 9dc:	100d883a 	mov	r6,r2
 9e0:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 9e4:	dfc00117 	ldw	ra,4(sp)
 9e8:	dc000017 	ldw	r16,0(sp)
 9ec:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 9f0:	0000ac41 	jmpi	ac4 <altera_avalon_jtag_uart_write>

000009f4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 9f4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 9f8:	00bfff84 	movi	r2,-2
 9fc:	2884703a 	and	r2,r5,r2
 a00:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 a04:	d0a00217 	ldw	r2,-32760(gp)
 a08:	00ffff04 	movi	r3,-4
 a0c:	108000c4 	addi	r2,r2,3
 a10:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 a14:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 a18:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 a1c:	1109883a 	add	r4,r2,r4
 a20:	18d00004 	addi	r3,r3,16384
 a24:	1900032e 	bgeu	r3,r4,a34 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a28:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 a2c:	00bfffc4 	movi	r2,-1
 a30:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 a34:	d1200215 	stw	r4,-32760(gp)
 a38:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 a3c:	f800283a 	ret

00000a40 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 a40:	0000af81 	jmpi	af8 <alt_busy_sleep>

00000a44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 a44:	deffff04 	addi	sp,sp,-4
 a48:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 a4c:	0000b900 	call	b90 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 a50:	00800044 	movi	r2,1
 a54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 a58:	dfc00017 	ldw	ra,0(sp)
 a5c:	dec00104 	addi	sp,sp,4
 a60:	f800283a 	ret

00000a64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 a64:	f800283a 	ret

00000a68 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 a68:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 a6c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 a70:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 a74:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 a78:	11800b2e 	bgeu	r2,r6,aa8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 a7c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 a80:	1a60000c 	andi	r9,r3,32768
 a84:	48000326 	beq	r9,zero,a94 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 a88:	10c00005 	stb	r3,0(r2)
 a8c:	10800044 	addi	r2,r2,1
 a90:	003ff906 	br	a78 <_gp+0xffff7c2c>
    else if (ptr != buffer)
 a94:	11400226 	beq	r2,r5,aa0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 a98:	1145c83a 	sub	r2,r2,r5
 a9c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 aa0:	403ff526 	beq	r8,zero,a78 <_gp+0xffff7c2c>
 aa4:	00000106 	br	aac <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 aa8:	117ffb1e 	bne	r2,r5,a98 <_gp+0xffff7c4c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 aac:	39d0000c 	andi	r7,r7,16384
 ab0:	3800021e 	bne	r7,zero,abc <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 ab4:	00bffec4 	movi	r2,-5
 ab8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 abc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 ac0:	f800283a 	ret

00000ac4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 ac4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 ac8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 acc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 ad0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 ad4:	2980072e 	bgeu	r5,r6,af4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 ad8:	38c00037 	ldwio	r3,0(r7)
 adc:	18ffffec 	andhi	r3,r3,65535
 ae0:	183ffc26 	beq	r3,zero,ad4 <_gp+0xffff7c88>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 ae4:	28c00007 	ldb	r3,0(r5)
 ae8:	20c00035 	stwio	r3,0(r4)
 aec:	29400044 	addi	r5,r5,1
 af0:	003ff806 	br	ad4 <_gp+0xffff7c88>

  return count;
}
 af4:	f800283a 	ret

00000af8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 af8:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 afc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 b00:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 b04:	dc000015 	stw	r16,0(sp)
 b08:	dfc00115 	stw	ra,4(sp)
 b0c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 b10:	0000cd00 	call	cd0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 b14:	10001026 	beq	r2,zero,b58 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 b18:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 b1c:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 b20:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 b24:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 b28:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 b2c:	297fffc4 	addi	r5,r5,-1
 b30:	283ffe1e 	bne	r5,zero,b2c <_gp+0xffff7ce0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 b34:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 b38:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 b3c:	18bffb16 	blt	r3,r2,b2c <_gp+0xffff7ce0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 b40:	8009883a 	mov	r4,r16
 b44:	01400144 	movi	r5,5
 b48:	00006c00 	call	6c0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 b4c:	10bfffc4 	addi	r2,r2,-1
 b50:	103ffe1e 	bne	r2,zero,b4c <_gp+0xffff7d00>
 b54:	00000506 	br	b6c <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 b58:	8009883a 	mov	r4,r16
 b5c:	01400144 	movi	r5,5
 b60:	00006c00 	call	6c0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 b64:	10bfffc4 	addi	r2,r2,-1
 b68:	00bffe16 	blt	zero,r2,b64 <_gp+0xffff7d18>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 b6c:	0005883a 	mov	r2,zero
 b70:	dfc00117 	ldw	ra,4(sp)
 b74:	dc000017 	ldw	r16,0(sp)
 b78:	dec00204 	addi	sp,sp,8
 b7c:	f800283a 	ret

00000b80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 b80:	f800283a 	ret

00000b84 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 b84:	3005883a 	mov	r2,r6
 b88:	f800283a 	ret

00000b8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 b8c:	f800283a 	ret

00000b90 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 b90:	000170fa 	wrctl	ienable,zero
 b94:	f800283a 	ret

00000b98 <strlen>:
 b98:	2005883a 	mov	r2,r4
 b9c:	10c00007 	ldb	r3,0(r2)
 ba0:	18000226 	beq	r3,zero,bac <strlen+0x14>
 ba4:	10800044 	addi	r2,r2,1
 ba8:	003ffc06 	br	b9c <_gp+0xffff7d50>
 bac:	1105c83a 	sub	r2,r2,r4
 bb0:	f800283a 	ret

00000bb4 <udivmodsi4>:
 bb4:	2900182e 	bgeu	r5,r4,c18 <udivmodsi4+0x64>
 bb8:	28001716 	blt	r5,zero,c18 <udivmodsi4+0x64>
 bbc:	00800804 	movi	r2,32
 bc0:	00c00044 	movi	r3,1
 bc4:	00000206 	br	bd0 <udivmodsi4+0x1c>
 bc8:	10001126 	beq	r2,zero,c10 <udivmodsi4+0x5c>
 bcc:	28000516 	blt	r5,zero,be4 <udivmodsi4+0x30>
 bd0:	294b883a 	add	r5,r5,r5
 bd4:	10bfffc4 	addi	r2,r2,-1
 bd8:	18c7883a 	add	r3,r3,r3
 bdc:	293ffa36 	bltu	r5,r4,bc8 <_gp+0xffff7d7c>
 be0:	18000b26 	beq	r3,zero,c10 <udivmodsi4+0x5c>
 be4:	0005883a 	mov	r2,zero
 be8:	21400236 	bltu	r4,r5,bf4 <udivmodsi4+0x40>
 bec:	2149c83a 	sub	r4,r4,r5
 bf0:	10c4b03a 	or	r2,r2,r3
 bf4:	1806d07a 	srli	r3,r3,1
 bf8:	280ad07a 	srli	r5,r5,1
 bfc:	183ffa1e 	bne	r3,zero,be8 <_gp+0xffff7d9c>
 c00:	3000011e 	bne	r6,zero,c08 <udivmodsi4+0x54>
 c04:	f800283a 	ret
 c08:	2005883a 	mov	r2,r4
 c0c:	f800283a 	ret
 c10:	0005883a 	mov	r2,zero
 c14:	003ffa06 	br	c00 <_gp+0xffff7db4>
 c18:	00c00044 	movi	r3,1
 c1c:	003ff106 	br	be4 <_gp+0xffff7d98>

00000c20 <__divsi3>:
 c20:	defffe04 	addi	sp,sp,-8
 c24:	dfc00115 	stw	ra,4(sp)
 c28:	dc000015 	stw	r16,0(sp)
 c2c:	20000b16 	blt	r4,zero,c5c <__divsi3+0x3c>
 c30:	0021883a 	mov	r16,zero
 c34:	28000c16 	blt	r5,zero,c68 <__divsi3+0x48>
 c38:	000d883a 	mov	r6,zero
 c3c:	0000bb40 	call	bb4 <udivmodsi4>
 c40:	0407c83a 	sub	r3,zero,r16
 c44:	1884f03a 	xor	r2,r3,r2
 c48:	1405883a 	add	r2,r2,r16
 c4c:	dfc00117 	ldw	ra,4(sp)
 c50:	dc000017 	ldw	r16,0(sp)
 c54:	dec00204 	addi	sp,sp,8
 c58:	f800283a 	ret
 c5c:	0109c83a 	sub	r4,zero,r4
 c60:	04000044 	movi	r16,1
 c64:	283ff40e 	bge	r5,zero,c38 <_gp+0xffff7dec>
 c68:	014bc83a 	sub	r5,zero,r5
 c6c:	8400005c 	xori	r16,r16,1
 c70:	003ff106 	br	c38 <_gp+0xffff7dec>

00000c74 <__modsi3>:
 c74:	defffd04 	addi	sp,sp,-12
 c78:	dfc00215 	stw	ra,8(sp)
 c7c:	dc400115 	stw	r17,4(sp)
 c80:	dc000015 	stw	r16,0(sp)
 c84:	20000c16 	blt	r4,zero,cb8 <__modsi3+0x44>
 c88:	0023883a 	mov	r17,zero
 c8c:	0021883a 	mov	r16,zero
 c90:	28000d16 	blt	r5,zero,cc8 <__modsi3+0x54>
 c94:	01800044 	movi	r6,1
 c98:	0000bb40 	call	bb4 <udivmodsi4>
 c9c:	1404f03a 	xor	r2,r2,r16
 ca0:	8885883a 	add	r2,r17,r2
 ca4:	dfc00217 	ldw	ra,8(sp)
 ca8:	dc400117 	ldw	r17,4(sp)
 cac:	dc000017 	ldw	r16,0(sp)
 cb0:	dec00304 	addi	sp,sp,12
 cb4:	f800283a 	ret
 cb8:	0109c83a 	sub	r4,zero,r4
 cbc:	04400044 	movi	r17,1
 cc0:	043fffc4 	movi	r16,-1
 cc4:	283ff30e 	bge	r5,zero,c94 <_gp+0xffff7e48>
 cc8:	014bc83a 	sub	r5,zero,r5
 ccc:	003ff106 	br	c94 <_gp+0xffff7e48>

00000cd0 <__udivsi3>:
 cd0:	000d883a 	mov	r6,zero
 cd4:	0000bb41 	jmpi	bb4 <udivmodsi4>

00000cd8 <__umodsi3>:
 cd8:	01800044 	movi	r6,1
 cdc:	0000bb41 	jmpi	bb4 <udivmodsi4>
