
lab4code_functions.elf:     file format elf32-littlenios2
lab4code_functions.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c40 memsz 0x00000c40 flags r-x
    LOAD off    0x00001c60 vaddr 0x00000c60 paddr 0x00000dc0 align 2**12
         filesz 0x00000160 memsz 0x00000160 flags rw-
    LOAD off    0x00001f20 vaddr 0x00000f20 paddr 0x00000f20 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001dc0  2**0
                  CONTENTS
  2 .text         00000c0c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00000c2c  00000c2c  00001c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000160  00000c60  00000dc0  00001c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00000f20  00000f20  00001f20  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000f38  00000f38  00001dc0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000398  00000000  00000000  00001de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000464d  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a92  00000000  00000000  000067cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c20  00000000  00000000  0000825f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000518  00000000  00000000  00009e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000011c2  00000000  00000000  0000a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ca9  00000000  00000000  0000b55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000c204  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  0000c248  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d7da  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000d7dd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d7e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d7e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000d7e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000d7eb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000d7f4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000d7fd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  0000d804  2**0
                  CONTENTS, READONLY
 26 .jdi          000047e0  00000000  00000000  0000d83f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00053537  00000000  00000000  0001201f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000c2c l    d  .rodata	00000000 .rodata
00000c60 l    d  .rwdata	00000000 .rwdata
00000f20 l    d  .bss	00000000 .bss
00000f38 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4code_functions_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00000c60 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00000da0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000ad0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000b00 l     F .text	0000006c udivmodsi4
00000894 g     F .text	0000002c alt_main
00000dc0 g       *ABS*	00000000 __flash_rwdata_start
00000f38 g       *ABS*	00000000 __alt_heap_start
000000a8 g     F .text	0000003c writeBuffer
00000908 g     F .text	00000038 alt_putstr
00000da4 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000f28 g     O .bss	00000004 errno
00000f30 g     O .bss	00000004 alt_argv
00008d98 g       *ABS*	00000000 _gp
0000098c g     F .text	00000004 usleep
00000d40 g     O .rwdata	00000030 alt_fd_list
000009b4 g     F .text	0000005c altera_avalon_jtag_uart_read
00000c1c g     F .text	00000008 .hidden __udivsi3
0000059c g     F .text	00000050 _sbrk_r
00000da8 g     O .rwdata	00000004 alt_max_fd
0000005c g     F .text	0000004c readBuffer
00000d98 g     O .rwdata	00000004 _global_impure_ptr
00000f38 g       *ABS*	00000000 __bss_end
00000758 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000d70 g     O .rwdata	00000028 alt_dev_null
00000acc g     F .text	00000004 alt_dcache_flush_all
000003c4 g     F .text	0000001c calloc
00000dc0 g       *ABS*	00000000 __ram_rwdata_end
00000dac g     O .rwdata	00000008 alt_dev_list
00000c60 g       *ABS*	00000000 __ram_rodata_end
00000c24 g     F .text	00000008 .hidden __umodsi3
00000f38 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000a10 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
000009b0 g     F .text	00000004 alt_sys_init
0000060c g     F .text	00000028 .hidden __mulsi3
00000c60 g       *ABS*	00000000 __ram_rwdata_start
00000c2c g       *ABS*	00000000 __ram_rodata_start
00000a44 g     F .text	00000088 alt_busy_sleep
00000f38 g       *ABS*	00000000 __alt_stack_base
00000940 g     F .text	0000004c sbrk
000003e0 g     F .text	00000060 _calloc_r
00000f20 g       *ABS*	00000000 __bss_start
000005ec g     F .text	00000020 memset
00000278 g     F .text	00000054 printIfCharacterReceive
000002cc g     F .text	000000f8 main
00000f2c g     O .bss	00000004 alt_envp
00000194 g     F .text	000000e4 transmitIfBufferNotEmpty
00004000 g       *ABS*	00000000 __alt_heap_limit
00000440 g     F .text	0000015c _malloc_r
00000dbc g     O .rwdata	00000004 alt_errno
00000b6c g     F .text	00000054 .hidden __divsi3
00000c2c g       *ABS*	00000000 __flash_rodata_start
00000990 g     F .text	00000020 alt_irq_init
00000134 g     F .text	00000060 readKeyboardToBuffer
00000d9c g     O .rwdata	00000004 _impure_ptr
00000f34 g     O .bss	00000004 alt_argc
00000db4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000dc0 g       *ABS*	00000000 _edata
00000f38 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000000e4 g     F .text	0000003c isEvenParity
00000120 g     F .text	00000014 getParityBit
00000adc g     F .text	00000008 altera_nios2_qsys_irq_init
00000bc0 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000ae4 g     F .text	0000001c strlen
000008c0 g     F .text	00000048 alt_putchar
00000f20 g     O .bss	00000004 __malloc_sbrk_start
00000ad8 g     F .text	00000004 alt_icache_flush_all
00000f24 g     O .bss	00000004 __malloc_free_list
00000634 g     F .text	00000124 fcntl
0000079c g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a36614 	ori	gp,gp,36248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1083c814 	ori	r2,r2,3872

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c3ce14 	ori	r3,r3,3896

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff72ac>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	000079c0 	call	79c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00008940 	call	894 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff72c0>

0000005c <readBuffer>:
#define data_bus_LEDs (volatile char *) 0x00005040


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
  5c:	20c00017 	ldw	r3,0(r4)
  60:	01401804 	movi	r5,96
  64:	18800003 	ldbu	r2,0(r3)
  68:	11c03fcc 	andi	r7,r2,255
  6c:	39c0201c 	xori	r7,r7,128
  70:	39ffe004 	addi	r7,r7,-128
  74:	39400a26 	beq	r7,r5,a0 <readBuffer+0x44>
  78:	38000a26 	beq	r7,zero,a4 <readBuffer+0x48>
        return '\0';
    } else {
        char c = **pTransmit;
        **pTransmit = 0x60;
  7c:	19400005 	stb	r5,0(r3)

        if((*pTransmit - pBuffer) == (BUFFER_SIZE - 1)) {
  80:	20c00017 	ldw	r3,0(r4)
  84:	197ff3c4 	addi	r5,r3,-49
  88:	2980021e 	bne	r5,r6,94 <readBuffer+0x38>
            *pTransmit = pBuffer;
  8c:	21800015 	stw	r6,0(r4)
  90:	f800283a 	ret
        } else {
            *pTransmit = *pTransmit + sizeof(char);
  94:	18c00044 	addi	r3,r3,1
  98:	20c00015 	stw	r3,0(r4)
  9c:	f800283a 	ret


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
        return '\0';
  a0:	0005883a 	mov	r2,zero
        } else {
            *pTransmit = *pTransmit + sizeof(char);
        }
        return c;
    }
}
  a4:	f800283a 	ret

000000a8 <writeBuffer>:

void writeBuffer(char c, char** pBufferHead, char** pBuffer) {
    if(!(**pBufferHead == 0x60 || **pBufferHead == '\0')) return;
  a8:	28800017 	ldw	r2,0(r5)
  ac:	01c01804 	movi	r7,96
  b0:	10c00007 	ldb	r3,0(r2)
  b4:	19c00126 	beq	r3,r7,bc <writeBuffer+0x14>
  b8:	1800091e 	bne	r3,zero,e0 <writeBuffer+0x38>

    *(*pBufferHead) = c;
  bc:	11000005 	stb	r4,0(r2)
    if((*pBufferHead - *pBuffer) == (BUFFER_SIZE - 1)) {
  c0:	28800017 	ldw	r2,0(r5)
  c4:	30c00017 	ldw	r3,0(r6)
  c8:	113ff3c4 	addi	r4,r2,-49
  cc:	20c0021e 	bne	r4,r3,d8 <writeBuffer+0x30>
        *pBufferHead = *pBuffer;
  d0:	28c00015 	stw	r3,0(r5)
  d4:	f800283a 	ret
    } else {
        *pBufferHead = *pBufferHead + sizeof(char);
  d8:	10800044 	addi	r2,r2,1
  dc:	28800015 	stw	r2,0(r5)
  e0:	f800283a 	ret

000000e4 <isEvenParity>:
unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
        int bit = (data >> i) & 0x01;
  e4:	21003fcc 	andi	r4,r4,255
  e8:	2100201c 	xori	r4,r4,128

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
  ec:	0007883a 	mov	r3,zero
        *pBufferHead = *pBufferHead + sizeof(char);
    }
}

unsigned int isEvenParity(char data) {
    int count = 0;
  f0:	0005883a 	mov	r2,zero

    int i;
    for(i = 0; i < 7; i++) {
        int bit = (data >> i) & 0x01;
  f4:	213fe004 	addi	r4,r4,-128

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
  f8:	018001c4 	movi	r6,7
        int bit = (data >> i) & 0x01;
  fc:	20cbd83a 	sra	r5,r4,r3
 100:	2940004c 	andi	r5,r5,1
        if(bit) {
 104:	28000126 	beq	r5,zero,10c <isEvenParity+0x28>
            count++;
 108:	10800044 	addi	r2,r2,1

unsigned int isEvenParity(char data) {
    int count = 0;

    int i;
    for(i = 0; i < 7; i++) {
 10c:	18c00044 	addi	r3,r3,1
 110:	19bffa1e 	bne	r3,r6,fc <_gp+0xffff7364>
        int bit = (data >> i) & 0x01;
        if(bit) {
            count++;
        }
    }
    return ((count + 1) % 2);
 114:	10800044 	addi	r2,r2,1
}
 118:	1080004c 	andi	r2,r2,1
 11c:	f800283a 	ret

00000120 <getParityBit>:

unsigned int getParityBit(char data) {
    return data < 7;
 120:	21003fcc 	andi	r4,r4,255
 124:	2100201c 	xori	r4,r4,128
 128:	213fe004 	addi	r4,r4,-128
 12c:	208001d0 	cmplti	r2,r4,7
}
 130:	f800283a 	ret

00000134 <readKeyboardToBuffer>:

void readKeyboardToBuffer(char** pBufferHead, char** pBuffer) {
 134:	defffd04 	addi	sp,sp,-12
 138:	dc400115 	stw	r17,4(sp)
 13c:	dc000015 	stw	r16,0(sp)
 140:	2023883a 	mov	r17,r4
 144:	dfc00215 	stw	ra,8(sp)
 148:	2821883a 	mov	r16,r5
	char newC = alt_getchar();
 14c:	00007580 	call	758 <alt_getchar>
	if(newC > 31 && newC < 128) {
 150:	11003fcc 	andi	r4,r2,255
 154:	2100201c 	xori	r4,r4,128
 158:	213fe004 	addi	r4,r4,-128
 15c:	00c007c4 	movi	r3,31
 160:	1900070e 	bge	r3,r4,180 <readKeyboardToBuffer+0x4c>
		writeBuffer(newC, pBufferHead, pBuffer);
 164:	880b883a 	mov	r5,r17
 168:	800d883a 	mov	r6,r16
	}
}
 16c:	dfc00217 	ldw	ra,8(sp)
 170:	dc400117 	ldw	r17,4(sp)
 174:	dc000017 	ldw	r16,0(sp)
 178:	dec00304 	addi	sp,sp,12
}

void readKeyboardToBuffer(char** pBufferHead, char** pBuffer) {
	char newC = alt_getchar();
	if(newC > 31 && newC < 128) {
		writeBuffer(newC, pBufferHead, pBuffer);
 17c:	00000a81 	jmpi	a8 <writeBuffer>
	}
}
 180:	dfc00217 	ldw	ra,8(sp)
 184:	dc400117 	ldw	r17,4(sp)
 188:	dc000017 	ldw	r16,0(sp)
 18c:	dec00304 	addi	sp,sp,12
 190:	f800283a 	ret

00000194 <transmitIfBufferNotEmpty>:

void transmitIfBufferNotEmpty(char** pTransmit, char* pBufferHead, char* pBuffer, int* write) {
 194:	defffd04 	addi	sp,sp,-12
 198:	dc000015 	stw	r16,0(sp)
 19c:	dfc00215 	stw	ra,8(sp)
 1a0:	dc400115 	stw	r17,4(sp)
	if(*load) {
 1a4:	00d40804 	movi	r3,20512
 1a8:	18800003 	ldbu	r2,0(r3)
	if(newC > 31 && newC < 128) {
		writeBuffer(newC, pBufferHead, pBuffer);
	}
}

void transmitIfBufferNotEmpty(char** pTransmit, char* pBufferHead, char* pBuffer, int* write) {
 1ac:	3821883a 	mov	r16,r7
	if(*load) {
 1b0:	10803fcc 	andi	r2,r2,255
 1b4:	1080201c 	xori	r2,r2,128
 1b8:	10bfe004 	addi	r2,r2,-128
 1bc:	10000426 	beq	r2,zero,1d0 <transmitIfBufferNotEmpty+0x3c>
		  *load = 0;
 1c0:	18000005 	stb	zero,0(r3)
		  *transmit_enable = 1;
 1c4:	00940004 	movi	r2,20480
 1c8:	00c00044 	movi	r3,1
 1cc:	10c00005 	stb	r3,0(r2)
	  }

	  char c = '\0';
	  if(*write) {
 1d0:	80800017 	ldw	r2,0(r16)
 1d4:	10001926 	beq	r2,zero,23c <transmitIfBufferNotEmpty+0xa8>
		  c = readBuffer(pTransmit, pBufferHead, pBuffer);
 1d8:	000005c0 	call	5c <readBuffer>
 1dc:	1023883a 	mov	r17,r2
		  if(c != '\0' && c != 0x60 ) {
 1e0:	89003fcc 	andi	r4,r17,255
 1e4:	2100201c 	xori	r4,r4,128
 1e8:	213fe004 	addi	r4,r4,-128
 1ec:	20001326 	beq	r4,zero,23c <transmitIfBufferNotEmpty+0xa8>
 1f0:	00801804 	movi	r2,96
 1f4:	20801126 	beq	r4,r2,23c <transmitIfBufferNotEmpty+0xa8>
			  *write = 0;
			  *data_bus_output = ((c << 2)>> 1)|0b0000000001;
 1f8:	2107883a 	add	r3,r4,r4
 1fc:	18c7883a 	add	r3,r3,r3
 200:	1807d07a 	srai	r3,r3,1

	  char c = '\0';
	  if(*write) {
		  c = readBuffer(pTransmit, pBufferHead, pBuffer);
		  if(c != '\0' && c != 0x60 ) {
			  *write = 0;
 204:	80000015 	stw	zero,0(r16)
			  *data_bus_output = ((c << 2)>> 1)|0b0000000001;
 208:	00940c04 	movi	r2,20528
 20c:	18c00054 	ori	r3,r3,1
 210:	10c00005 	stb	r3,0(r2)
			  *load = 1;
 214:	00c00044 	movi	r3,1
 218:	00940804 	movi	r2,20512
 21c:	10c00005 	stb	r3,0(r2)
			  *transmit_enable = 0;
 220:	00940004 	movi	r2,20480
 224:	10000005 	stb	zero,0(r2)
			  alt_putchar(c);
 228:	00008c00 	call	8c0 <alt_putchar>
			  //*data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
			  *data_bus_LEDs = c;
 22c:	00941004 	movi	r2,20544
 230:	14400005 	stb	r17,0(r2)
			  usleep(10000);
 234:	0109c404 	movi	r4,10000
 238:	000098c0 	call	98c <usleep>
		  }
	  }
	  if(*character_sent) {
 23c:	00940404 	movi	r2,20496
 240:	10800003 	ldbu	r2,0(r2)
 244:	10803fcc 	andi	r2,r2,255
 248:	1080201c 	xori	r2,r2,128
 24c:	10bfe004 	addi	r2,r2,-128
 250:	10000426 	beq	r2,zero,264 <transmitIfBufferNotEmpty+0xd0>
		  *write = 1;
 254:	00800044 	movi	r2,1
 258:	80800015 	stw	r2,0(r16)
		  *transmit_enable = 0;
 25c:	00940004 	movi	r2,20480
 260:	10000005 	stb	zero,0(r2)
	  }
}
 264:	dfc00217 	ldw	ra,8(sp)
 268:	dc400117 	ldw	r17,4(sp)
 26c:	dc000017 	ldw	r16,0(sp)
 270:	dec00304 	addi	sp,sp,12
 274:	f800283a 	ret

00000278 <printIfCharacterReceive>:

void printIfCharacterReceive(int* read) {
	if(*character_received & *read) {
 278:	01541404 	movi	r5,20560
 27c:	28800003 	ldbu	r2,0(r5)
 280:	10c03fcc 	andi	r3,r2,255
 284:	20800017 	ldw	r2,0(r4)
 288:	18c0201c 	xori	r3,r3,128
 28c:	18ffe004 	addi	r3,r3,-128
 290:	1884703a 	and	r2,r3,r2
 294:	10000526 	beq	r2,zero,2ac <printIfCharacterReceive+0x34>
		*read = 0;
 298:	20000015 	stw	zero,0(r4)
		int parity = *data_bus_input & 0x01;
 29c:	00941804 	movi	r2,20576
 2a0:	10c00003 	ldbu	r3,0(r2)
		char cRec = (*data_bus_input >> 1) & 0b0011111111;
 2a4:	10800003 	ldbu	r2,0(r2)
 2a8:	f800283a 	ret
		//alt_putchar((*data_bus_input));
	} else if(!(*character_received)) {
 2ac:	28800003 	ldbu	r2,0(r5)
 2b0:	10803fcc 	andi	r2,r2,255
 2b4:	1080201c 	xori	r2,r2,128
 2b8:	10bfe004 	addi	r2,r2,-128
 2bc:	1000021e 	bne	r2,zero,2c8 <printIfCharacterReceive+0x50>
		*read = 1;
 2c0:	00800044 	movi	r2,1
 2c4:	20800015 	stw	r2,0(r4)
 2c8:	f800283a 	ret

000002cc <main>:
	}
}


int main() {
 2cc:	defffa04 	addi	sp,sp,-24
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 2d0:	01400104 	movi	r5,4
 2d4:	01900004 	movi	r6,16384
 2d8:	0009883a 	mov	r4,zero
		*read = 1;
	}
}


int main() {
 2dc:	dfc00515 	stw	ra,20(sp)
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 2e0:	00006340 	call	634 <fcntl>

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
 2e4:	01000034 	movhi	r4,0
 2e8:	21030b04 	addi	r4,r4,3116
 2ec:	00009080 	call	908 <alt_putstr>
	int read = 1;
 2f0:	01400044 	movi	r5,1
	int write = 1;

	char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
 2f4:	01000c84 	movi	r4,50

int main() {
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
	int read = 1;
 2f8:	d9400415 	stw	r5,16(sp)
	int write = 1;
 2fc:	d9400315 	stw	r5,12(sp)

	char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
 300:	00003c40 	call	3c4 <calloc>
 304:	d8800215 	stw	r2,8(sp)
	char* pBufferHead = pBuffer;
 308:	d8800115 	stw	r2,4(sp)
	char* pTransmit = pBuffer;
 30c:	d8800015 	stw	r2,0(sp)

	*load = 0;
 310:	00940804 	movi	r2,20512
 314:	10000005 	stb	zero,0(r2)
	*transmit_enable = 0;
 318:	00940004 	movi	r2,20480
 31c:	10000005 	stb	zero,0(r2)
	*data_bus_output = 0x00;
 320:	00940c04 	movi	r2,20528
 324:	10000005 	stb	zero,0(r2)
	*data_bus_LEDs = 0x00;
 328:	00941004 	movi	r2,20544
 32c:	10000005 	stb	zero,0(r2)

  /* Event loop never exits. */
  while (1) {
	  //*******read keyboard and put characters in buffer********
	  readKeyboardToBuffer(&pBufferHead, &pBuffer);
 330:	d9000104 	addi	r4,sp,4
 334:	d9400204 	addi	r5,sp,8
 338:	00001340 	call	134 <readKeyboardToBuffer>

	  //******transmit*******
	  transmitIfBufferNotEmpty(&pTransmit, pBufferHead, pBuffer, &write);
 33c:	d9400117 	ldw	r5,4(sp)
 340:	d9800217 	ldw	r6,8(sp)
 344:	d809883a 	mov	r4,sp
 348:	d9c00304 	addi	r7,sp,12
 34c:	00001940 	call	194 <transmitIfBufferNotEmpty>

	  //*****receive*********
	  printIfCharacterReceive(&read);
 350:	d9000404 	addi	r4,sp,16
 354:	00002780 	call	278 <printIfCharacterReceive>

	  //******Debug outputs
	  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 358:	00940804 	movi	r2,20512
 35c:	11800003 	ldbu	r6,0(r2)
 360:	00940004 	movi	r2,20480
 364:	10800003 	ldbu	r2,0(r2)
 368:	00d40404 	movi	r3,20496
 36c:	18c00003 	ldbu	r3,0(r3)
 370:	01141404 	movi	r4,20560
 374:	10803fcc 	andi	r2,r2,255
 378:	21000003 	ldbu	r4,0(r4)
 37c:	1080201c 	xori	r2,r2,128
 380:	10bfe004 	addi	r2,r2,-128
 384:	108b883a 	add	r5,r2,r2
 388:	18803fcc 	andi	r2,r3,255
 38c:	1080201c 	xori	r2,r2,128
 390:	20c03fcc 	andi	r3,r4,255
 394:	10bfe004 	addi	r2,r2,-128
 398:	18c0201c 	xori	r3,r3,128
 39c:	1085883a 	add	r2,r2,r2
 3a0:	18ffe004 	addi	r3,r3,-128
 3a4:	180690fa 	slli	r3,r3,3
 3a8:	1085883a 	add	r2,r2,r2
 3ac:	2884b03a 	or	r2,r5,r2
 3b0:	1184b03a 	or	r2,r2,r6
 3b4:	10c4b03a 	or	r2,r2,r3
 3b8:	00d41004 	movi	r3,20544
 3bc:	18800005 	stb	r2,0(r3)
  }
 3c0:	003fdb06 	br	330 <_gp+0xffff7598>

000003c4 <calloc>:
 3c4:	00c00034 	movhi	r3,0
 3c8:	18c36704 	addi	r3,r3,3484
 3cc:	2005883a 	mov	r2,r4
 3d0:	19000017 	ldw	r4,0(r3)
 3d4:	280d883a 	mov	r6,r5
 3d8:	100b883a 	mov	r5,r2
 3dc:	00003e01 	jmpi	3e0 <_calloc_r>

000003e0 <_calloc_r>:
 3e0:	defffd04 	addi	sp,sp,-12
 3e4:	dc000015 	stw	r16,0(sp)
 3e8:	2021883a 	mov	r16,r4
 3ec:	2809883a 	mov	r4,r5
 3f0:	300b883a 	mov	r5,r6
 3f4:	dfc00215 	stw	ra,8(sp)
 3f8:	dc400115 	stw	r17,4(sp)
 3fc:	000060c0 	call	60c <__mulsi3>
 400:	8009883a 	mov	r4,r16
 404:	100b883a 	mov	r5,r2
 408:	1023883a 	mov	r17,r2
 40c:	00004400 	call	440 <_malloc_r>
 410:	1021883a 	mov	r16,r2
 414:	10000426 	beq	r2,zero,428 <_calloc_r+0x48>
 418:	1009883a 	mov	r4,r2
 41c:	000b883a 	mov	r5,zero
 420:	880d883a 	mov	r6,r17
 424:	00005ec0 	call	5ec <memset>
 428:	8005883a 	mov	r2,r16
 42c:	dfc00217 	ldw	ra,8(sp)
 430:	dc400117 	ldw	r17,4(sp)
 434:	dc000017 	ldw	r16,0(sp)
 438:	dec00304 	addi	sp,sp,12
 43c:	f800283a 	ret

00000440 <_malloc_r>:
 440:	defffb04 	addi	sp,sp,-20
 444:	00bfff04 	movi	r2,-4
 448:	dc000015 	stw	r16,0(sp)
 44c:	2c0000c4 	addi	r16,r5,3
 450:	80a0703a 	and	r16,r16,r2
 454:	dc800215 	stw	r18,8(sp)
 458:	dfc00415 	stw	ra,16(sp)
 45c:	dcc00315 	stw	r19,12(sp)
 460:	dc400115 	stw	r17,4(sp)
 464:	84000204 	addi	r16,r16,8
 468:	00800304 	movi	r2,12
 46c:	2025883a 	mov	r18,r4
 470:	8080022e 	bgeu	r16,r2,47c <_malloc_r+0x3c>
 474:	1021883a 	mov	r16,r2
 478:	00000506 	br	490 <_malloc_r+0x50>
 47c:	8000040e 	bge	r16,zero,490 <_malloc_r+0x50>
 480:	00800304 	movi	r2,12
 484:	90800015 	stw	r2,0(r18)
 488:	0005883a 	mov	r2,zero
 48c:	00003c06 	br	580 <_malloc_r+0x140>
 490:	817ffb36 	bltu	r16,r5,480 <_gp+0xffff76e8>
 494:	01000034 	movhi	r4,0
 498:	2103c904 	addi	r4,r4,3876
 49c:	20800017 	ldw	r2,0(r4)
 4a0:	1007883a 	mov	r3,r2
 4a4:	18000926 	beq	r3,zero,4cc <_malloc_r+0x8c>
 4a8:	19400017 	ldw	r5,0(r3)
 4ac:	2c0bc83a 	sub	r5,r5,r16
 4b0:	28001716 	blt	r5,zero,510 <_malloc_r+0xd0>
 4b4:	018002c4 	movi	r6,11
 4b8:	31400d2e 	bgeu	r6,r5,4f0 <_malloc_r+0xb0>
 4bc:	19400015 	stw	r5,0(r3)
 4c0:	1945883a 	add	r2,r3,r5
 4c4:	14000015 	stw	r16,0(r2)
 4c8:	1000231e 	bne	r2,zero,558 <_malloc_r+0x118>
 4cc:	04400034 	movhi	r17,0
 4d0:	8c43c804 	addi	r17,r17,3872
 4d4:	88800017 	ldw	r2,0(r17)
 4d8:	1000101e 	bne	r2,zero,51c <_malloc_r+0xdc>
 4dc:	9009883a 	mov	r4,r18
 4e0:	000b883a 	mov	r5,zero
 4e4:	000059c0 	call	59c <_sbrk_r>
 4e8:	88800015 	stw	r2,0(r17)
 4ec:	00000b06 	br	51c <_malloc_r+0xdc>
 4f0:	10c0031e 	bne	r2,r3,500 <_malloc_r+0xc0>
 4f4:	10c00117 	ldw	r3,4(r2)
 4f8:	20c00015 	stw	r3,0(r4)
 4fc:	00001606 	br	558 <_malloc_r+0x118>
 500:	19000117 	ldw	r4,4(r3)
 504:	11000115 	stw	r4,4(r2)
 508:	1805883a 	mov	r2,r3
 50c:	00001206 	br	558 <_malloc_r+0x118>
 510:	1805883a 	mov	r2,r3
 514:	18c00117 	ldw	r3,4(r3)
 518:	003fe206 	br	4a4 <_gp+0xffff770c>
 51c:	9009883a 	mov	r4,r18
 520:	800b883a 	mov	r5,r16
 524:	000059c0 	call	59c <_sbrk_r>
 528:	04ffffc4 	movi	r19,-1
 52c:	14ffd426 	beq	r2,r19,480 <_gp+0xffff76e8>
 530:	144000c4 	addi	r17,r2,3
 534:	00ffff04 	movi	r3,-4
 538:	88e2703a 	and	r17,r17,r3
 53c:	88800526 	beq	r17,r2,554 <_malloc_r+0x114>
 540:	9009883a 	mov	r4,r18
 544:	888bc83a 	sub	r5,r17,r2
 548:	000059c0 	call	59c <_sbrk_r>
 54c:	14ffcc26 	beq	r2,r19,480 <_gp+0xffff76e8>
 550:	8805883a 	mov	r2,r17
 554:	14000015 	stw	r16,0(r2)
 558:	114002c4 	addi	r5,r2,11
 55c:	00fffe04 	movi	r3,-8
 560:	11000104 	addi	r4,r2,4
 564:	28c6703a 	and	r3,r5,r3
 568:	1909c83a 	sub	r4,r3,r4
 56c:	20000326 	beq	r4,zero,57c <_malloc_r+0x13c>
 570:	110b883a 	add	r5,r2,r4
 574:	0109c83a 	sub	r4,zero,r4
 578:	29000015 	stw	r4,0(r5)
 57c:	1805883a 	mov	r2,r3
 580:	dfc00417 	ldw	ra,16(sp)
 584:	dcc00317 	ldw	r19,12(sp)
 588:	dc800217 	ldw	r18,8(sp)
 58c:	dc400117 	ldw	r17,4(sp)
 590:	dc000017 	ldw	r16,0(sp)
 594:	dec00504 	addi	sp,sp,20
 598:	f800283a 	ret

0000059c <_sbrk_r>:
 59c:	defffd04 	addi	sp,sp,-12
 5a0:	dc000015 	stw	r16,0(sp)
 5a4:	04000034 	movhi	r16,0
 5a8:	dc400115 	stw	r17,4(sp)
 5ac:	8403ca04 	addi	r16,r16,3880
 5b0:	2023883a 	mov	r17,r4
 5b4:	2809883a 	mov	r4,r5
 5b8:	dfc00215 	stw	ra,8(sp)
 5bc:	80000015 	stw	zero,0(r16)
 5c0:	00009400 	call	940 <sbrk>
 5c4:	00ffffc4 	movi	r3,-1
 5c8:	10c0031e 	bne	r2,r3,5d8 <_sbrk_r+0x3c>
 5cc:	80c00017 	ldw	r3,0(r16)
 5d0:	18000126 	beq	r3,zero,5d8 <_sbrk_r+0x3c>
 5d4:	88c00015 	stw	r3,0(r17)
 5d8:	dfc00217 	ldw	ra,8(sp)
 5dc:	dc400117 	ldw	r17,4(sp)
 5e0:	dc000017 	ldw	r16,0(sp)
 5e4:	dec00304 	addi	sp,sp,12
 5e8:	f800283a 	ret

000005ec <memset>:
 5ec:	2005883a 	mov	r2,r4
 5f0:	2007883a 	mov	r3,r4
 5f4:	218d883a 	add	r6,r4,r6
 5f8:	19800326 	beq	r3,r6,608 <memset+0x1c>
 5fc:	19400005 	stb	r5,0(r3)
 600:	18c00044 	addi	r3,r3,1
 604:	003ffc06 	br	5f8 <_gp+0xffff7860>
 608:	f800283a 	ret

0000060c <__mulsi3>:
 60c:	0005883a 	mov	r2,zero
 610:	20000726 	beq	r4,zero,630 <__mulsi3+0x24>
 614:	20c0004c 	andi	r3,r4,1
 618:	2008d07a 	srli	r4,r4,1
 61c:	18000126 	beq	r3,zero,624 <__mulsi3+0x18>
 620:	1145883a 	add	r2,r2,r5
 624:	294b883a 	add	r5,r5,r5
 628:	203ffa1e 	bne	r4,zero,614 <_gp+0xffff787c>
 62c:	f800283a 	ret
 630:	f800283a 	ret

00000634 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 634:	defff904 	addi	sp,sp,-28
 638:	dcc00315 	stw	r19,12(sp)
 63c:	2027883a 	mov	r19,r4
 640:	dfc00415 	stw	ra,16(sp)
 644:	dc800215 	stw	r18,8(sp)
 648:	dc400115 	stw	r17,4(sp)
 64c:	dc000015 	stw	r16,0(sp)
 650:	d9800515 	stw	r6,20(sp)
 654:	d9c00615 	stw	r7,24(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 658:	20002d16 	blt	r4,zero,710 <fcntl+0xdc>
 65c:	2823883a 	mov	r17,r5
 660:	04000034 	movhi	r16,0
 664:	01400304 	movi	r5,12
 668:	000060c0 	call	60c <__mulsi3>
 66c:	84035004 	addi	r16,r16,3392
 670:	1407883a 	add	r3,r2,r16
  
  if (fd)
 674:	18002626 	beq	r3,zero,710 <fcntl+0xdc>
  {
    switch (cmd)
 678:	00c000c4 	movi	r3,3
 67c:	88c01126 	beq	r17,r3,6c4 <fcntl+0x90>
 680:	00c00104 	movi	r3,4
 684:	88c0181e 	bne	r17,r3,6e8 <fcntl+0xb4>
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 688:	10800204 	addi	r2,r2,8
 68c:	80a3883a 	add	r17,r16,r2
 690:	d8800517 	ldw	r2,20(sp)
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 694:	9809883a 	mov	r4,r19
 698:	01400304 	movi	r5,12
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 69c:	1490020c 	andi	r18,r2,16392
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 6a0:	000060c0 	call	60c <__mulsi3>
 6a4:	8085883a 	add	r2,r16,r2
 6a8:	10800217 	ldw	r2,8(r2)
 6ac:	00effdc4 	movi	r3,-16393
 6b0:	10c4703a 	and	r2,r2,r3
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 6b4:	9084b03a 	or	r2,r18,r2
 6b8:	88800015 	stw	r2,0(r17)
      va_end(argp);
      return 0;
 6bc:	0005883a 	mov	r2,zero
 6c0:	00001e06 	br	73c <fcntl+0x108>
  if (fd)
  {
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 6c4:	9809883a 	mov	r4,r19
 6c8:	01400304 	movi	r5,12
 6cc:	000060c0 	call	60c <__mulsi3>
 6d0:	8085883a 	add	r2,r16,r2
 6d4:	10c00217 	ldw	r3,8(r2)
 6d8:	00900034 	movhi	r2,16384
 6dc:	10bfffc4 	addi	r2,r2,-1
 6e0:	1884703a 	and	r2,r3,r2
 6e4:	00001506 	br	73c <fcntl+0x108>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 6e8:	00800034 	movhi	r2,0
 6ec:	10836f04 	addi	r2,r2,3516
 6f0:	10800017 	ldw	r2,0(r2)
 6f4:	10000226 	beq	r2,zero,700 <fcntl+0xcc>
 6f8:	103ee83a 	callr	r2
 6fc:	00000206 	br	708 <fcntl+0xd4>
 700:	00800034 	movhi	r2,0
 704:	1083ca04 	addi	r2,r2,3880
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
      va_end(argp);
      return 0;
    default:
      ALT_ERRNO = EINVAL;
 708:	00c00584 	movi	r3,22
 70c:	00000906 	br	734 <fcntl+0x100>
 710:	00800034 	movhi	r2,0
 714:	10836f04 	addi	r2,r2,3516
 718:	10800017 	ldw	r2,0(r2)
 71c:	10000226 	beq	r2,zero,728 <fcntl+0xf4>
 720:	103ee83a 	callr	r2
 724:	00000206 	br	730 <fcntl+0xfc>
 728:	00800034 	movhi	r2,0
 72c:	1083ca04 	addi	r2,r2,3880
      return -1;
    }
  }

  ALT_ERRNO = EBADFD;
 730:	00c01444 	movi	r3,81
 734:	10c00015 	stw	r3,0(r2)
  return -1;
 738:	00bfffc4 	movi	r2,-1
}
 73c:	dfc00417 	ldw	ra,16(sp)
 740:	dcc00317 	ldw	r19,12(sp)
 744:	dc800217 	ldw	r18,8(sp)
 748:	dc400117 	ldw	r17,4(sp)
 74c:	dc000017 	ldw	r16,0(sp)
 750:	dec00704 	addi	sp,sp,28
 754:	f800283a 	ret

00000758 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 758:	00800034 	movhi	r2,0
 75c:	10835004 	addi	r2,r2,3392
 760:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 764:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 768:	01000034 	movhi	r4,0
 76c:	21036904 	addi	r4,r4,3492
 770:	d80b883a 	mov	r5,sp
 774:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 778:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 77c:	00009b40 	call	9b4 <altera_avalon_jtag_uart_read>
 780:	0080020e 	bge	zero,r2,78c <alt_getchar+0x34>
        return -1;
    }
    return c;
 784:	d8800007 	ldb	r2,0(sp)
 788:	00000106 	br	790 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 78c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 790:	dfc00117 	ldw	ra,4(sp)
 794:	dec00204 	addi	sp,sp,8
 798:	f800283a 	ret

0000079c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 79c:	deffff04 	addi	sp,sp,-4
 7a0:	01000034 	movhi	r4,0
 7a4:	01400034 	movhi	r5,0
 7a8:	dfc00015 	stw	ra,0(sp)
 7ac:	21031804 	addi	r4,r4,3168
 7b0:	29437004 	addi	r5,r5,3520

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 7b4:	2140061e 	bne	r4,r5,7d0 <alt_load+0x34>
 7b8:	01000034 	movhi	r4,0
 7bc:	01400034 	movhi	r5,0
 7c0:	21000804 	addi	r4,r4,32
 7c4:	29400804 	addi	r5,r5,32
 7c8:	2140141e 	bne	r4,r5,81c <alt_load+0x80>
 7cc:	00000d06 	br	804 <alt_load+0x68>
 7d0:	00c00034 	movhi	r3,0
 7d4:	18c37004 	addi	r3,r3,3520
 7d8:	00bfff04 	movi	r2,-4
 7dc:	1907c83a 	sub	r3,r3,r4
 7e0:	1886703a 	and	r3,r3,r2
 7e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 7e8:	10fff326 	beq	r2,r3,7b8 <_gp+0xffff7a20>
 7ec:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 7f0:	39c00017 	ldw	r7,0(r7)
 7f4:	110d883a 	add	r6,r2,r4
 7f8:	10800104 	addi	r2,r2,4
 7fc:	31c00015 	stw	r7,0(r6)
 800:	003ff906 	br	7e8 <_gp+0xffff7a50>
 804:	01000034 	movhi	r4,0
 808:	01400034 	movhi	r5,0
 80c:	21030b04 	addi	r4,r4,3116
 810:	29430b04 	addi	r5,r5,3116

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 814:	2140121e 	bne	r4,r5,860 <alt_load+0xc4>
 818:	00000d06 	br	850 <alt_load+0xb4>
 81c:	00c00034 	movhi	r3,0
 820:	18c00804 	addi	r3,r3,32
 824:	00bfff04 	movi	r2,-4
 828:	1907c83a 	sub	r3,r3,r4
 82c:	1886703a 	and	r3,r3,r2
 830:	0005883a 	mov	r2,zero
  {
    while( to != end )
 834:	10fff326 	beq	r2,r3,804 <_gp+0xffff7a6c>
 838:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 83c:	39c00017 	ldw	r7,0(r7)
 840:	110d883a 	add	r6,r2,r4
 844:	10800104 	addi	r2,r2,4
 848:	31c00015 	stw	r7,0(r6)
 84c:	003ff906 	br	834 <_gp+0xffff7a9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 850:	0000acc0 	call	acc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 854:	dfc00017 	ldw	ra,0(sp)
 858:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 85c:	0000ad81 	jmpi	ad8 <alt_icache_flush_all>
 860:	00c00034 	movhi	r3,0
 864:	18c31804 	addi	r3,r3,3168
 868:	00bfff04 	movi	r2,-4
 86c:	1907c83a 	sub	r3,r3,r4
 870:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 874:	0005883a 	mov	r2,zero
  {
    while( to != end )
 878:	10fff526 	beq	r2,r3,850 <_gp+0xffff7ab8>
 87c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 880:	39c00017 	ldw	r7,0(r7)
 884:	110d883a 	add	r6,r2,r4
 888:	10800104 	addi	r2,r2,4
 88c:	31c00015 	stw	r7,0(r6)
 890:	003ff906 	br	878 <_gp+0xffff7ae0>

00000894 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 894:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 898:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 89c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8a0:	00009900 	call	990 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8a4:	00009b00 	call	9b0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8a8:	d1206717 	ldw	r4,-32356(gp)
 8ac:	d1606617 	ldw	r5,-32360(gp)
 8b0:	d1a06517 	ldw	r6,-32364(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8b4:	dfc00017 	ldw	ra,0(sp)
 8b8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8bc:	00002cc1 	jmpi	2cc <main>

000008c0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8c0:	defffd04 	addi	sp,sp,-12
 8c4:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 8c8:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8cc:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 8d0:	01000034 	movhi	r4,0
 8d4:	21036904 	addi	r4,r4,3492
 8d8:	d80b883a 	mov	r5,sp
 8dc:	01800044 	movi	r6,1
 8e0:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8e4:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 8e8:	0000a100 	call	a10 <altera_avalon_jtag_uart_write>
 8ec:	00ffffc4 	movi	r3,-1
 8f0:	10c00126 	beq	r2,r3,8f8 <alt_putchar+0x38>
        return -1;
    }
    return c;
 8f4:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 8f8:	dfc00217 	ldw	ra,8(sp)
 8fc:	dc000117 	ldw	r16,4(sp)
 900:	dec00304 	addi	sp,sp,12
 904:	f800283a 	ret

00000908 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 908:	defffe04 	addi	sp,sp,-8
 90c:	dc000015 	stw	r16,0(sp)
 910:	dfc00115 	stw	ra,4(sp)
 914:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 918:	0000ae40 	call	ae4 <strlen>
 91c:	01000034 	movhi	r4,0
 920:	21036904 	addi	r4,r4,3492
 924:	800b883a 	mov	r5,r16
 928:	100d883a 	mov	r6,r2
 92c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 930:	dfc00117 	ldw	ra,4(sp)
 934:	dc000017 	ldw	r16,0(sp)
 938:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 93c:	0000a101 	jmpi	a10 <altera_avalon_jtag_uart_write>

00000940 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 940:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 944:	00bfff84 	movi	r2,-2
 948:	2884703a 	and	r2,r5,r2
 94c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 950:	d0a00217 	ldw	r2,-32760(gp)
 954:	00ffff04 	movi	r3,-4
 958:	108000c4 	addi	r2,r2,3
 95c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 960:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 964:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 968:	1109883a 	add	r4,r2,r4
 96c:	18d00004 	addi	r3,r3,16384
 970:	1900032e 	bgeu	r3,r4,980 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 974:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 978:	00bfffc4 	movi	r2,-1
 97c:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 980:	d1200215 	stw	r4,-32760(gp)
 984:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 988:	f800283a 	ret

0000098c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 98c:	0000a441 	jmpi	a44 <alt_busy_sleep>

00000990 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 990:	deffff04 	addi	sp,sp,-4
 994:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 998:	0000adc0 	call	adc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 99c:	00800044 	movi	r2,1
 9a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 9a4:	dfc00017 	ldw	ra,0(sp)
 9a8:	dec00104 	addi	sp,sp,4
 9ac:	f800283a 	ret

000009b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 9b0:	f800283a 	ret

000009b4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 9b4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 9b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 9bc:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 9c0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 9c4:	11800b2e 	bgeu	r2,r6,9f4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 9c8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 9cc:	1a60000c 	andi	r9,r3,32768
 9d0:	48000326 	beq	r9,zero,9e0 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 9d4:	10c00005 	stb	r3,0(r2)
 9d8:	10800044 	addi	r2,r2,1
 9dc:	003ff906 	br	9c4 <_gp+0xffff7c2c>
    else if (ptr != buffer)
 9e0:	11400226 	beq	r2,r5,9ec <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 9e4:	1145c83a 	sub	r2,r2,r5
 9e8:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 9ec:	403ff526 	beq	r8,zero,9c4 <_gp+0xffff7c2c>
 9f0:	00000106 	br	9f8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 9f4:	117ffb1e 	bne	r2,r5,9e4 <_gp+0xffff7c4c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 9f8:	39d0000c 	andi	r7,r7,16384
 9fc:	3800021e 	bne	r7,zero,a08 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 a00:	00bffec4 	movi	r2,-5
 a04:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 a08:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 a0c:	f800283a 	ret

00000a10 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 a10:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 a14:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 a18:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 a1c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 a20:	2980072e 	bgeu	r5,r6,a40 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 a24:	38c00037 	ldwio	r3,0(r7)
 a28:	18ffffec 	andhi	r3,r3,65535
 a2c:	183ffc26 	beq	r3,zero,a20 <_gp+0xffff7c88>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 a30:	28c00007 	ldb	r3,0(r5)
 a34:	20c00035 	stwio	r3,0(r4)
 a38:	29400044 	addi	r5,r5,1
 a3c:	003ff806 	br	a20 <_gp+0xffff7c88>

  return count;
}
 a40:	f800283a 	ret

00000a44 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 a44:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 a48:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 a4c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 a50:	dc000015 	stw	r16,0(sp)
 a54:	dfc00115 	stw	ra,4(sp)
 a58:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 a5c:	0000c1c0 	call	c1c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 a60:	10001026 	beq	r2,zero,aa4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a64:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a68:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 a6c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a70:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a74:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a78:	297fffc4 	addi	r5,r5,-1
 a7c:	283ffe1e 	bne	r5,zero,a78 <_gp+0xffff7ce0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 a80:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a84:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 a88:	18bffb16 	blt	r3,r2,a78 <_gp+0xffff7ce0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 a8c:	8009883a 	mov	r4,r16
 a90:	01400144 	movi	r5,5
 a94:	000060c0 	call	60c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 a98:	10bfffc4 	addi	r2,r2,-1
 a9c:	103ffe1e 	bne	r2,zero,a98 <_gp+0xffff7d00>
 aa0:	00000506 	br	ab8 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 aa4:	8009883a 	mov	r4,r16
 aa8:	01400144 	movi	r5,5
 aac:	000060c0 	call	60c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 ab0:	10bfffc4 	addi	r2,r2,-1
 ab4:	00bffe16 	blt	zero,r2,ab0 <_gp+0xffff7d18>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 ab8:	0005883a 	mov	r2,zero
 abc:	dfc00117 	ldw	ra,4(sp)
 ac0:	dc000017 	ldw	r16,0(sp)
 ac4:	dec00204 	addi	sp,sp,8
 ac8:	f800283a 	ret

00000acc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 acc:	f800283a 	ret

00000ad0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 ad0:	3005883a 	mov	r2,r6
 ad4:	f800283a 	ret

00000ad8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 ad8:	f800283a 	ret

00000adc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 adc:	000170fa 	wrctl	ienable,zero
 ae0:	f800283a 	ret

00000ae4 <strlen>:
 ae4:	2005883a 	mov	r2,r4
 ae8:	10c00007 	ldb	r3,0(r2)
 aec:	18000226 	beq	r3,zero,af8 <strlen+0x14>
 af0:	10800044 	addi	r2,r2,1
 af4:	003ffc06 	br	ae8 <_gp+0xffff7d50>
 af8:	1105c83a 	sub	r2,r2,r4
 afc:	f800283a 	ret

00000b00 <udivmodsi4>:
 b00:	2900182e 	bgeu	r5,r4,b64 <udivmodsi4+0x64>
 b04:	28001716 	blt	r5,zero,b64 <udivmodsi4+0x64>
 b08:	00800804 	movi	r2,32
 b0c:	00c00044 	movi	r3,1
 b10:	00000206 	br	b1c <udivmodsi4+0x1c>
 b14:	10001126 	beq	r2,zero,b5c <udivmodsi4+0x5c>
 b18:	28000516 	blt	r5,zero,b30 <udivmodsi4+0x30>
 b1c:	294b883a 	add	r5,r5,r5
 b20:	10bfffc4 	addi	r2,r2,-1
 b24:	18c7883a 	add	r3,r3,r3
 b28:	293ffa36 	bltu	r5,r4,b14 <_gp+0xffff7d7c>
 b2c:	18000b26 	beq	r3,zero,b5c <udivmodsi4+0x5c>
 b30:	0005883a 	mov	r2,zero
 b34:	21400236 	bltu	r4,r5,b40 <udivmodsi4+0x40>
 b38:	2149c83a 	sub	r4,r4,r5
 b3c:	10c4b03a 	or	r2,r2,r3
 b40:	1806d07a 	srli	r3,r3,1
 b44:	280ad07a 	srli	r5,r5,1
 b48:	183ffa1e 	bne	r3,zero,b34 <_gp+0xffff7d9c>
 b4c:	3000011e 	bne	r6,zero,b54 <udivmodsi4+0x54>
 b50:	f800283a 	ret
 b54:	2005883a 	mov	r2,r4
 b58:	f800283a 	ret
 b5c:	0005883a 	mov	r2,zero
 b60:	003ffa06 	br	b4c <_gp+0xffff7db4>
 b64:	00c00044 	movi	r3,1
 b68:	003ff106 	br	b30 <_gp+0xffff7d98>

00000b6c <__divsi3>:
 b6c:	defffe04 	addi	sp,sp,-8
 b70:	dfc00115 	stw	ra,4(sp)
 b74:	dc000015 	stw	r16,0(sp)
 b78:	20000b16 	blt	r4,zero,ba8 <__divsi3+0x3c>
 b7c:	0021883a 	mov	r16,zero
 b80:	28000c16 	blt	r5,zero,bb4 <__divsi3+0x48>
 b84:	000d883a 	mov	r6,zero
 b88:	0000b000 	call	b00 <udivmodsi4>
 b8c:	0407c83a 	sub	r3,zero,r16
 b90:	1884f03a 	xor	r2,r3,r2
 b94:	1405883a 	add	r2,r2,r16
 b98:	dfc00117 	ldw	ra,4(sp)
 b9c:	dc000017 	ldw	r16,0(sp)
 ba0:	dec00204 	addi	sp,sp,8
 ba4:	f800283a 	ret
 ba8:	0109c83a 	sub	r4,zero,r4
 bac:	04000044 	movi	r16,1
 bb0:	283ff40e 	bge	r5,zero,b84 <_gp+0xffff7dec>
 bb4:	014bc83a 	sub	r5,zero,r5
 bb8:	8400005c 	xori	r16,r16,1
 bbc:	003ff106 	br	b84 <_gp+0xffff7dec>

00000bc0 <__modsi3>:
 bc0:	defffd04 	addi	sp,sp,-12
 bc4:	dfc00215 	stw	ra,8(sp)
 bc8:	dc400115 	stw	r17,4(sp)
 bcc:	dc000015 	stw	r16,0(sp)
 bd0:	20000c16 	blt	r4,zero,c04 <__modsi3+0x44>
 bd4:	0023883a 	mov	r17,zero
 bd8:	0021883a 	mov	r16,zero
 bdc:	28000d16 	blt	r5,zero,c14 <__modsi3+0x54>
 be0:	01800044 	movi	r6,1
 be4:	0000b000 	call	b00 <udivmodsi4>
 be8:	1404f03a 	xor	r2,r2,r16
 bec:	8885883a 	add	r2,r17,r2
 bf0:	dfc00217 	ldw	ra,8(sp)
 bf4:	dc400117 	ldw	r17,4(sp)
 bf8:	dc000017 	ldw	r16,0(sp)
 bfc:	dec00304 	addi	sp,sp,12
 c00:	f800283a 	ret
 c04:	0109c83a 	sub	r4,zero,r4
 c08:	04400044 	movi	r17,1
 c0c:	043fffc4 	movi	r16,-1
 c10:	283ff30e 	bge	r5,zero,be0 <_gp+0xffff7e48>
 c14:	014bc83a 	sub	r5,zero,r5
 c18:	003ff106 	br	be0 <_gp+0xffff7e48>

00000c1c <__udivsi3>:
 c1c:	000d883a 	mov	r6,zero
 c20:	0000b001 	jmpi	b00 <udivmodsi4>

00000c24 <__umodsi3>:
 c24:	01800044 	movi	r6,1
 c28:	0000b001 	jmpi	b00 <udivmodsi4>
