
lab4code.elf:     file format elf32-littlenios2
lab4code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000508 memsz 0x00000508 flags r-x
    LOAD off    0x00001528 vaddr 0x00000528 paddr 0x0000052c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001530 vaddr 0x00000530 paddr 0x00000530 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000152c  2**0
                  CONTENTS
  2 .text         000004e0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  00000500  00000500  00001500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00000528  0000052c  00001528  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000530  00000530  00001530  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000053c  0000053c  0000152c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000208  00000000  00000000  00001550  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001179  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a00  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000afd  00000000  00000000  000032d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002d4  00000000  00000000  00003dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000805  00000000  00000000  000040a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004bb  00000000  00000000  000048a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00004da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005d36  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00005d39  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005d3c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005d3d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005d3e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005d47  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005d50  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00005d59  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00005d60  2**0
                  CONTENTS, READONLY
 26 .jdi          000047d0  00000000  00000000  00005d99  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00053537  00000000  00000000  0000a569  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000500 l    d  .rodata	00000000 .rodata
00000528 l    d  .rwdata	00000000 .rwdata
00000530 l    d  .bss	00000000 .bss
0000053c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4code_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000003ac l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000001f0 g     F .text	0000002c alt_main
0000052c g       *ABS*	00000000 __flash_rwdata_start
00000264 g     F .text	00000038 alt_putstr
00000528 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000534 g     O .bss	00000004 alt_argv
00008528 g       *ABS*	00000000 _gp
0000029c g     F .text	00000004 usleep
000004c8 g     F .text	00000008 .hidden __udivsi3
0000053c g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000380 g     F .text	00000004 alt_dcache_flush_all
0000052c g       *ABS*	00000000 __ram_rwdata_end
00000528 g       *ABS*	00000000 __ram_rodata_end
000004d0 g     F .text	00000008 .hidden __umodsi3
0000053c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000002c4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
000002c0 g     F .text	00000004 alt_sys_init
000004d8 g     F .text	00000028 .hidden __mulsi3
00000528 g       *ABS*	00000000 __ram_rwdata_start
00000500 g       *ABS*	00000000 __ram_rodata_start
000002f8 g     F .text	00000088 alt_busy_sleep
0000053c g       *ABS*	00000000 __alt_stack_base
00000530 g       *ABS*	00000000 __bss_start
0000005c g     F .text	0000009c main
00000530 g     O .bss	00000004 alt_envp
00000418 g     F .text	00000054 .hidden __divsi3
00000500 g       *ABS*	00000000 __flash_rodata_start
000002a0 g     F .text	00000020 alt_irq_init
00000538 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000052c g       *ABS*	00000000 _edata
0000053c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000388 g     F .text	00000008 altera_nios2_qsys_irq_init
0000046c g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000390 g     F .text	0000001c strlen
0000021c g     F .text	00000048 alt_putchar
00000384 g     F .text	00000004 alt_icache_flush_all
000000f8 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a14a14 	ori	gp,gp,34088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10814c14 	ori	r2,r2,1328

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c14f14 	ori	r3,r3,1340

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7b1c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000f80 	call	f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001f00 	call	1f0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7b30>

0000005c <main>:
#define load 				(volatile char *) 0x00005020
#define data_bus_input 		(volatile char *) 0x00005060
#define character_received 	(volatile char *) 0x00005050
#define data_bus_LEDs 		(volatile char *) 0x00005040

int main() {
  5c:	defffb04 	addi	sp,sp,-20
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
  60:	01000034 	movhi	r4,0
#define load 				(volatile char *) 0x00005020
#define data_bus_input 		(volatile char *) 0x00005060
#define character_received 	(volatile char *) 0x00005050
#define data_bus_LEDs 		(volatile char *) 0x00005040

int main() {
  64:	dc000015 	stw	r16,0(sp)
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
  68:	21014004 	addi	r4,r4,1280

	*load = 0;
  6c:	04140804 	movi	r16,20512
#define load 				(volatile char *) 0x00005020
#define data_bus_input 		(volatile char *) 0x00005060
#define character_received 	(volatile char *) 0x00005050
#define data_bus_LEDs 		(volatile char *) 0x00005040

int main() {
  70:	dfc00415 	stw	ra,16(sp)
  74:	dcc00315 	stw	r19,12(sp)
  78:	dc800215 	stw	r18,8(sp)
  7c:	dc400115 	stw	r17,4(sp)
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
  80:	00002640 	call	264 <alt_putstr>

	*load = 0;
	*transmit_enable = 0;
  84:	04540004 	movi	r17,20480
#define data_bus_LEDs 		(volatile char *) 0x00005040

int main() {
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");

	*load = 0;
  88:	80000005 	stb	zero,0(r16)
	*transmit_enable = 0;
  8c:	88000005 	stb	zero,0(r17)
	*data_bus_output = 0xFF;
  90:	00940c04 	movi	r2,20528
  94:	00ffffc4 	movi	r3,-1
  98:	10c00005 	stb	r3,0(r2)
	*data_bus_LEDs = 0x00;
  9c:	00d41004 	movi	r3,20544
  a0:	18000005 	stb	zero,0(r3)

	*data_bus_output = 0b0011111101;
	usleep(5000);
  a4:	04c4e204 	movi	r19,5000
	*load = 0;
	*transmit_enable = 0;
	*data_bus_output = 0xFF;
	*data_bus_LEDs = 0x00;

	*data_bus_output = 0b0011111101;
  a8:	00ffff44 	movi	r3,-3
  ac:	10c00005 	stb	r3,0(r2)
	usleep(5000);
  b0:	9809883a 	mov	r4,r19
  b4:	000029c0 	call	29c <usleep>
	*load = 1;
  b8:	04800044 	movi	r18,1
	usleep(5000);
  bc:	9809883a 	mov	r4,r19
	*data_bus_output = 0xFF;
	*data_bus_LEDs = 0x00;

	*data_bus_output = 0b0011111101;
	usleep(5000);
	*load = 1;
  c0:	84800005 	stb	r18,0(r16)
	usleep(5000);
  c4:	000029c0 	call	29c <usleep>
	*load = 0;
  c8:	80000005 	stb	zero,0(r16)
	*transmit_enable = 1;
  cc:	8c800005 	stb	r18,0(r17)
	while(!character_sent) {
		alt_putstr("char not sent\n");
	}
	alt_putchar(0b01111110);
  d0:	01001f84 	movi	r4,126
  d4:	000021c0 	call	21c <alt_putchar>

	return 0;
}
  d8:	0005883a 	mov	r2,zero
  dc:	dfc00417 	ldw	ra,16(sp)
  e0:	dcc00317 	ldw	r19,12(sp)
  e4:	dc800217 	ldw	r18,8(sp)
  e8:	dc400117 	ldw	r17,4(sp)
  ec:	dc000017 	ldw	r16,0(sp)
  f0:	dec00504 	addi	sp,sp,20
  f4:	f800283a 	ret

000000f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  f8:	deffff04 	addi	sp,sp,-4
  fc:	01000034 	movhi	r4,0
 100:	01400034 	movhi	r5,0
 104:	dfc00015 	stw	ra,0(sp)
 108:	21014a04 	addi	r4,r4,1320
 10c:	29414b04 	addi	r5,r5,1324

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 110:	2140061e 	bne	r4,r5,12c <alt_load+0x34>
 114:	01000034 	movhi	r4,0
 118:	01400034 	movhi	r5,0
 11c:	21000804 	addi	r4,r4,32
 120:	29400804 	addi	r5,r5,32
 124:	2140141e 	bne	r4,r5,178 <alt_load+0x80>
 128:	00000d06 	br	160 <alt_load+0x68>
 12c:	00c00034 	movhi	r3,0
 130:	18c14b04 	addi	r3,r3,1324
 134:	00bfff04 	movi	r2,-4
 138:	1907c83a 	sub	r3,r3,r4
 13c:	1886703a 	and	r3,r3,r2
 140:	0005883a 	mov	r2,zero
  {
    while( to != end )
 144:	10fff326 	beq	r2,r3,114 <_gp+0xffff7bec>
 148:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 14c:	39c00017 	ldw	r7,0(r7)
 150:	110d883a 	add	r6,r2,r4
 154:	10800104 	addi	r2,r2,4
 158:	31c00015 	stw	r7,0(r6)
 15c:	003ff906 	br	144 <_gp+0xffff7c1c>
 160:	01000034 	movhi	r4,0
 164:	01400034 	movhi	r5,0
 168:	21014004 	addi	r4,r4,1280
 16c:	29414004 	addi	r5,r5,1280

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 170:	2140121e 	bne	r4,r5,1bc <alt_load+0xc4>
 174:	00000d06 	br	1ac <alt_load+0xb4>
 178:	00c00034 	movhi	r3,0
 17c:	18c00804 	addi	r3,r3,32
 180:	00bfff04 	movi	r2,-4
 184:	1907c83a 	sub	r3,r3,r4
 188:	1886703a 	and	r3,r3,r2
 18c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 190:	10fff326 	beq	r2,r3,160 <_gp+0xffff7c38>
 194:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 198:	39c00017 	ldw	r7,0(r7)
 19c:	110d883a 	add	r6,r2,r4
 1a0:	10800104 	addi	r2,r2,4
 1a4:	31c00015 	stw	r7,0(r6)
 1a8:	003ff906 	br	190 <_gp+0xffff7c68>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1ac:	00003800 	call	380 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 1b0:	dfc00017 	ldw	ra,0(sp)
 1b4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 1b8:	00003841 	jmpi	384 <alt_icache_flush_all>
 1bc:	00c00034 	movhi	r3,0
 1c0:	18c14a04 	addi	r3,r3,1320
 1c4:	00bfff04 	movi	r2,-4
 1c8:	1907c83a 	sub	r3,r3,r4
 1cc:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1d4:	10fff526 	beq	r2,r3,1ac <_gp+0xffff7c84>
 1d8:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 1dc:	39c00017 	ldw	r7,0(r7)
 1e0:	110d883a 	add	r6,r2,r4
 1e4:	10800104 	addi	r2,r2,4
 1e8:	31c00015 	stw	r7,0(r6)
 1ec:	003ff906 	br	1d4 <_gp+0xffff7cac>

000001f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1f0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1f4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1f8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1fc:	00002a00 	call	2a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200:	00002c00 	call	2c0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 204:	d1200417 	ldw	r4,-32752(gp)
 208:	d1600317 	ldw	r5,-32756(gp)
 20c:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 210:	dfc00017 	ldw	ra,0(sp)
 214:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 218:	000005c1 	jmpi	5c <main>

0000021c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 21c:	defffd04 	addi	sp,sp,-12
 220:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 224:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 228:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 22c:	01000034 	movhi	r4,0
 230:	21014a04 	addi	r4,r4,1320
 234:	d80b883a 	mov	r5,sp
 238:	01800044 	movi	r6,1
 23c:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 240:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 244:	00002c40 	call	2c4 <altera_avalon_jtag_uart_write>
 248:	00ffffc4 	movi	r3,-1
 24c:	10c00126 	beq	r2,r3,254 <alt_putchar+0x38>
        return -1;
    }
    return c;
 250:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 254:	dfc00217 	ldw	ra,8(sp)
 258:	dc000117 	ldw	r16,4(sp)
 25c:	dec00304 	addi	sp,sp,12
 260:	f800283a 	ret

00000264 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 264:	defffe04 	addi	sp,sp,-8
 268:	dc000015 	stw	r16,0(sp)
 26c:	dfc00115 	stw	ra,4(sp)
 270:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 274:	00003900 	call	390 <strlen>
 278:	01000034 	movhi	r4,0
 27c:	21014a04 	addi	r4,r4,1320
 280:	800b883a 	mov	r5,r16
 284:	100d883a 	mov	r6,r2
 288:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 28c:	dfc00117 	ldw	ra,4(sp)
 290:	dc000017 	ldw	r16,0(sp)
 294:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 298:	00002c41 	jmpi	2c4 <altera_avalon_jtag_uart_write>

0000029c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 29c:	00002f81 	jmpi	2f8 <alt_busy_sleep>

000002a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2a0:	deffff04 	addi	sp,sp,-4
 2a4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2a8:	00003880 	call	388 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2ac:	00800044 	movi	r2,1
 2b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2b4:	dfc00017 	ldw	ra,0(sp)
 2b8:	dec00104 	addi	sp,sp,4
 2bc:	f800283a 	ret

000002c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2c0:	f800283a 	ret

000002c4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 2c4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2c8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 2cc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2d0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 2d4:	2980072e 	bgeu	r5,r6,2f4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2d8:	38c00037 	ldwio	r3,0(r7)
 2dc:	18ffffec 	andhi	r3,r3,65535
 2e0:	183ffc26 	beq	r3,zero,2d4 <_gp+0xffff7dac>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 2e4:	28c00007 	ldb	r3,0(r5)
 2e8:	20c00035 	stwio	r3,0(r4)
 2ec:	29400044 	addi	r5,r5,1
 2f0:	003ff806 	br	2d4 <_gp+0xffff7dac>

  return count;
}
 2f4:	f800283a 	ret

000002f8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2f8:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2fc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 300:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 304:	dc000015 	stw	r16,0(sp)
 308:	dfc00115 	stw	ra,4(sp)
 30c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 310:	00004c80 	call	4c8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 314:	10001026 	beq	r2,zero,358 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 318:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 31c:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 320:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 324:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 328:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 32c:	297fffc4 	addi	r5,r5,-1
 330:	283ffe1e 	bne	r5,zero,32c <_gp+0xffff7e04>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 334:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 338:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 33c:	18bffb16 	blt	r3,r2,32c <_gp+0xffff7e04>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 340:	8009883a 	mov	r4,r16
 344:	01400144 	movi	r5,5
 348:	00004d80 	call	4d8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 34c:	10bfffc4 	addi	r2,r2,-1
 350:	103ffe1e 	bne	r2,zero,34c <_gp+0xffff7e24>
 354:	00000506 	br	36c <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 358:	8009883a 	mov	r4,r16
 35c:	01400144 	movi	r5,5
 360:	00004d80 	call	4d8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 364:	10bfffc4 	addi	r2,r2,-1
 368:	00bffe16 	blt	zero,r2,364 <_gp+0xffff7e3c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 36c:	0005883a 	mov	r2,zero
 370:	dfc00117 	ldw	ra,4(sp)
 374:	dc000017 	ldw	r16,0(sp)
 378:	dec00204 	addi	sp,sp,8
 37c:	f800283a 	ret

00000380 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 380:	f800283a 	ret

00000384 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 384:	f800283a 	ret

00000388 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 388:	000170fa 	wrctl	ienable,zero
 38c:	f800283a 	ret

00000390 <strlen>:
 390:	2005883a 	mov	r2,r4
 394:	10c00007 	ldb	r3,0(r2)
 398:	18000226 	beq	r3,zero,3a4 <strlen+0x14>
 39c:	10800044 	addi	r2,r2,1
 3a0:	003ffc06 	br	394 <_gp+0xffff7e6c>
 3a4:	1105c83a 	sub	r2,r2,r4
 3a8:	f800283a 	ret

000003ac <udivmodsi4>:
 3ac:	2900182e 	bgeu	r5,r4,410 <udivmodsi4+0x64>
 3b0:	28001716 	blt	r5,zero,410 <udivmodsi4+0x64>
 3b4:	00800804 	movi	r2,32
 3b8:	00c00044 	movi	r3,1
 3bc:	00000206 	br	3c8 <udivmodsi4+0x1c>
 3c0:	10001126 	beq	r2,zero,408 <udivmodsi4+0x5c>
 3c4:	28000516 	blt	r5,zero,3dc <udivmodsi4+0x30>
 3c8:	294b883a 	add	r5,r5,r5
 3cc:	10bfffc4 	addi	r2,r2,-1
 3d0:	18c7883a 	add	r3,r3,r3
 3d4:	293ffa36 	bltu	r5,r4,3c0 <_gp+0xffff7e98>
 3d8:	18000b26 	beq	r3,zero,408 <udivmodsi4+0x5c>
 3dc:	0005883a 	mov	r2,zero
 3e0:	21400236 	bltu	r4,r5,3ec <udivmodsi4+0x40>
 3e4:	2149c83a 	sub	r4,r4,r5
 3e8:	10c4b03a 	or	r2,r2,r3
 3ec:	1806d07a 	srli	r3,r3,1
 3f0:	280ad07a 	srli	r5,r5,1
 3f4:	183ffa1e 	bne	r3,zero,3e0 <_gp+0xffff7eb8>
 3f8:	3000011e 	bne	r6,zero,400 <udivmodsi4+0x54>
 3fc:	f800283a 	ret
 400:	2005883a 	mov	r2,r4
 404:	f800283a 	ret
 408:	0005883a 	mov	r2,zero
 40c:	003ffa06 	br	3f8 <_gp+0xffff7ed0>
 410:	00c00044 	movi	r3,1
 414:	003ff106 	br	3dc <_gp+0xffff7eb4>

00000418 <__divsi3>:
 418:	defffe04 	addi	sp,sp,-8
 41c:	dfc00115 	stw	ra,4(sp)
 420:	dc000015 	stw	r16,0(sp)
 424:	20000b16 	blt	r4,zero,454 <__divsi3+0x3c>
 428:	0021883a 	mov	r16,zero
 42c:	28000c16 	blt	r5,zero,460 <__divsi3+0x48>
 430:	000d883a 	mov	r6,zero
 434:	00003ac0 	call	3ac <udivmodsi4>
 438:	0407c83a 	sub	r3,zero,r16
 43c:	1884f03a 	xor	r2,r3,r2
 440:	1405883a 	add	r2,r2,r16
 444:	dfc00117 	ldw	ra,4(sp)
 448:	dc000017 	ldw	r16,0(sp)
 44c:	dec00204 	addi	sp,sp,8
 450:	f800283a 	ret
 454:	0109c83a 	sub	r4,zero,r4
 458:	04000044 	movi	r16,1
 45c:	283ff40e 	bge	r5,zero,430 <_gp+0xffff7f08>
 460:	014bc83a 	sub	r5,zero,r5
 464:	8400005c 	xori	r16,r16,1
 468:	003ff106 	br	430 <_gp+0xffff7f08>

0000046c <__modsi3>:
 46c:	defffd04 	addi	sp,sp,-12
 470:	dfc00215 	stw	ra,8(sp)
 474:	dc400115 	stw	r17,4(sp)
 478:	dc000015 	stw	r16,0(sp)
 47c:	20000c16 	blt	r4,zero,4b0 <__modsi3+0x44>
 480:	0023883a 	mov	r17,zero
 484:	0021883a 	mov	r16,zero
 488:	28000d16 	blt	r5,zero,4c0 <__modsi3+0x54>
 48c:	01800044 	movi	r6,1
 490:	00003ac0 	call	3ac <udivmodsi4>
 494:	1404f03a 	xor	r2,r2,r16
 498:	8885883a 	add	r2,r17,r2
 49c:	dfc00217 	ldw	ra,8(sp)
 4a0:	dc400117 	ldw	r17,4(sp)
 4a4:	dc000017 	ldw	r16,0(sp)
 4a8:	dec00304 	addi	sp,sp,12
 4ac:	f800283a 	ret
 4b0:	0109c83a 	sub	r4,zero,r4
 4b4:	04400044 	movi	r17,1
 4b8:	043fffc4 	movi	r16,-1
 4bc:	283ff30e 	bge	r5,zero,48c <_gp+0xffff7f64>
 4c0:	014bc83a 	sub	r5,zero,r5
 4c4:	003ff106 	br	48c <_gp+0xffff7f64>

000004c8 <__udivsi3>:
 4c8:	000d883a 	mov	r6,zero
 4cc:	00003ac1 	jmpi	3ac <udivmodsi4>

000004d0 <__umodsi3>:
 4d0:	01800044 	movi	r6,1
 4d4:	00003ac1 	jmpi	3ac <udivmodsi4>

000004d8 <__mulsi3>:
 4d8:	0005883a 	mov	r2,zero
 4dc:	20000726 	beq	r4,zero,4fc <__mulsi3+0x24>
 4e0:	20c0004c 	andi	r3,r4,1
 4e4:	2008d07a 	srli	r4,r4,1
 4e8:	18000126 	beq	r3,zero,4f0 <__mulsi3+0x18>
 4ec:	1145883a 	add	r2,r2,r5
 4f0:	294b883a 	add	r5,r5,r5
 4f4:	203ffa1e 	bne	r4,zero,4e0 <_gp+0xffff7fb8>
 4f8:	f800283a 	ret
 4fc:	f800283a 	ret
