
lab4cod8.elf:     file format elf32-littlenios2
lab4cod8.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000bf0 memsz 0x00000bf0 flags r-x
    LOAD off    0x00001c10 vaddr 0x00000c10 paddr 0x00000d70 align 2**12
         filesz 0x00000160 memsz 0x00000160 flags rw-
    LOAD off    0x00001ed0 vaddr 0x00000ed0 paddr 0x00000ed0 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001d70  2**0
                  CONTENTS
  2 .text         00000ba8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00000bc8  00000bc8  00001bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000160  00000c10  00000d70  00001c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00000ed0  00000ed0  00001ed0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000ee8  00000ee8  00001d70  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000398  00000000  00000000  00001d98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000044e5  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a36  00000000  00000000  00006615  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001bf3  00000000  00000000  0000804b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000498  00000000  00000000  00009c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000114e  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b24  00000000  00000000  0000b226  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000130  00000000  00000000  0000bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d248  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000d24b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d24e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d24f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000d259  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000d262  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000d26b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  0000d272  2**0
                  CONTENTS, READONLY
 26 .jdi          00003615  00000000  00000000  0000d2ad  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00053537  00000000  00000000  000108c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000bc8 l    d  .rodata	00000000 .rodata
00000c10 l    d  .rwdata	00000000 .rwdata
00000ed0 l    d  .bss	00000000 .bss
00000ee8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4cod8_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00000c10 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00000d50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000a6c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000a9c l     F .text	0000006c udivmodsi4
00000830 g     F .text	0000002c alt_main
00000d70 g       *ABS*	00000000 __flash_rwdata_start
00000ee8 g       *ABS*	00000000 __alt_heap_start
000000a8 g     F .text	0000003c writeBuffer
000008a4 g     F .text	00000038 alt_putstr
00000d54 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000ed8 g     O .bss	00000004 errno
00000ee0 g     O .bss	00000004 alt_argv
00008d48 g       *ABS*	00000000 _gp
00000928 g     F .text	00000004 usleep
00000cf0 g     O .rwdata	00000030 alt_fd_list
00000950 g     F .text	0000005c altera_avalon_jtag_uart_read
00000bb8 g     F .text	00000008 .hidden __udivsi3
00000538 g     F .text	00000050 _sbrk_r
00000d58 g     O .rwdata	00000004 alt_max_fd
0000005c g     F .text	0000004c readBuffer
00000d48 g     O .rwdata	00000004 _global_impure_ptr
00000ee8 g       *ABS*	00000000 __bss_end
000006f4 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000d20 g     O .rwdata	00000028 alt_dev_null
00000a68 g     F .text	00000004 alt_dcache_flush_all
00000360 g     F .text	0000001c calloc
00000d70 g       *ABS*	00000000 __ram_rwdata_end
00000d5c g     O .rwdata	00000008 alt_dev_list
00000c10 g       *ABS*	00000000 __ram_rodata_end
00000bc0 g     F .text	00000008 .hidden __umodsi3
00000ee8 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000009ac g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
0000094c g     F .text	00000004 alt_sys_init
000005a8 g     F .text	00000028 .hidden __mulsi3
00000c10 g       *ABS*	00000000 __ram_rwdata_start
00000bc8 g       *ABS*	00000000 __ram_rodata_start
000009e0 g     F .text	00000088 alt_busy_sleep
00000ee8 g       *ABS*	00000000 __alt_stack_base
000008dc g     F .text	0000004c sbrk
0000037c g     F .text	00000060 _calloc_r
00000ed0 g       *ABS*	00000000 __bss_start
00000588 g     F .text	00000020 memset
000000e4 g     F .text	0000027c main
00000edc g     O .bss	00000004 alt_envp
00004000 g       *ABS*	00000000 __alt_heap_limit
000003dc g     F .text	0000015c _malloc_r
00000d6c g     O .rwdata	00000004 alt_errno
00000b08 g     F .text	00000054 .hidden __divsi3
00000bc8 g       *ABS*	00000000 __flash_rodata_start
0000092c g     F .text	00000020 alt_irq_init
00000d4c g     O .rwdata	00000004 _impure_ptr
00000ee4 g     O .bss	00000004 alt_argc
00000d64 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000d70 g       *ABS*	00000000 _edata
00000ee8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000a78 g     F .text	00000008 altera_nios2_qsys_irq_init
00000b5c g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000a80 g     F .text	0000001c strlen
0000085c g     F .text	00000048 alt_putchar
00000ed0 g     O .bss	00000004 __malloc_sbrk_start
00000a74 g     F .text	00000004 alt_icache_flush_all
00000ed4 g     O .bss	00000004 __malloc_free_list
000005d0 g     F .text	00000124 fcntl
00000738 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a35214 	ori	gp,gp,36168
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1083b414 	ori	r2,r2,3792

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c3ba14 	ori	r3,r3,3816

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff72fc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00007380 	call	738 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00008300 	call	830 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7310>

0000005c <readBuffer>:
#define data_bus_LEDs (volatile char *) 0x00005040


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
  5c:	20c00017 	ldw	r3,0(r4)
  60:	01401804 	movi	r5,96
  64:	18800003 	ldbu	r2,0(r3)
  68:	11c03fcc 	andi	r7,r2,255
  6c:	39c0201c 	xori	r7,r7,128
  70:	39ffe004 	addi	r7,r7,-128
  74:	39400a26 	beq	r7,r5,a0 <readBuffer+0x44>
  78:	38000a26 	beq	r7,zero,a4 <readBuffer+0x48>
        return '\0';
    } else {
        char c = **pTransmit;
        **pTransmit = 0x60;
  7c:	19400005 	stb	r5,0(r3)

        if((*pTransmit - pBuffer) == (BUFFER_SIZE - 1)) {
  80:	20c00017 	ldw	r3,0(r4)
  84:	197ff3c4 	addi	r5,r3,-49
  88:	2980021e 	bne	r5,r6,94 <readBuffer+0x38>
            *pTransmit = pBuffer;
  8c:	21800015 	stw	r6,0(r4)
  90:	f800283a 	ret
        } else {
            *pTransmit = *pTransmit + sizeof(char);
  94:	18c00044 	addi	r3,r3,1
  98:	20c00015 	stw	r3,0(r4)
  9c:	f800283a 	ret


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
        return '\0';
  a0:	0005883a 	mov	r2,zero
        } else {
            *pTransmit = *pTransmit + sizeof(char);
        }
        return c;
    }
}
  a4:	f800283a 	ret

000000a8 <writeBuffer>:

void writeBuffer(char c, char** pBufferHead, char** pBuffer) {
    if(!(**pBufferHead == 0x60 || **pBufferHead == '\0')) return;
  a8:	28800017 	ldw	r2,0(r5)
  ac:	01c01804 	movi	r7,96
  b0:	10c00007 	ldb	r3,0(r2)
  b4:	19c00126 	beq	r3,r7,bc <writeBuffer+0x14>
  b8:	1800091e 	bne	r3,zero,e0 <writeBuffer+0x38>

    *(*pBufferHead) = c;
  bc:	11000005 	stb	r4,0(r2)
    if((*pBufferHead - *pBuffer) == (BUFFER_SIZE - 1)) {
  c0:	28800017 	ldw	r2,0(r5)
  c4:	30c00017 	ldw	r3,0(r6)
  c8:	113ff3c4 	addi	r4,r2,-49
  cc:	20c0021e 	bne	r4,r3,d8 <writeBuffer+0x30>
        *pBufferHead = *pBuffer;
  d0:	28c00015 	stw	r3,0(r5)
  d4:	f800283a 	ret
    } else {
        *pBufferHead = *pBufferHead + sizeof(char);
  d8:	10800044 	addi	r2,r2,1
  dc:	28800015 	stw	r2,0(r5)
  e0:	f800283a 	ret

000000e4 <main>:
    }
}


int main()
{
  e4:	defff904 	addi	sp,sp,-28
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
  e8:	01400104 	movi	r5,4
  ec:	01900004 	movi	r6,16384
  f0:	0009883a 	mov	r4,zero
    }
}


int main()
{
  f4:	dfc00615 	stw	ra,24(sp)
  f8:	dc400415 	stw	r17,16(sp)
  fc:	dc000315 	stw	r16,12(sp)
 100:	dc800515 	stw	r18,20(sp)
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
 104:	00005d00 	call	5d0 <fcntl>

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
 108:	01000034 	movhi	r4,0
 10c:	2102f204 	addi	r4,r4,3016
 110:	00008a40 	call	8a4 <alt_putstr>
	int read = 1;
	int write = 1;

	char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
 114:	01000c84 	movi	r4,50
 118:	01400044 	movi	r5,1
 11c:	00003600 	call	360 <calloc>
 120:	d8800215 	stw	r2,8(sp)
	char* pBufferHead = pBuffer;
 124:	d8800115 	stw	r2,4(sp)
	char* pTransmit = pBuffer;
 128:	d8800015 	stw	r2,0(sp)



	*load = 0;
 12c:	00940804 	movi	r2,20512
 130:	10000005 	stb	zero,0(r2)
	*transmit_enable = 0;
 134:	00940004 	movi	r2,20480
 138:	10000005 	stb	zero,0(r2)
	*data_bus_output = 0x00;
 13c:	00940c04 	movi	r2,20528
 140:	10000005 	stb	zero,0(r2)
{
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
	int read = 1;
	int write = 1;
 144:	04400044 	movi	r17,1


	*load = 0;
	*transmit_enable = 0;
	*data_bus_output = 0x00;
	*data_bus_LEDs = 0x00;
 148:	00941004 	movi	r2,20544
 14c:	10000005 	stb	zero,0(r2)
int main()
{
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);

	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
	int read = 1;
 150:	8821883a 	mov	r16,r17
	*data_bus_LEDs = 0x00;

  /* Event loop never exits. */
  while (1) {
	  //*******read keyboard and put characters in buffer********
	  char newC = alt_getchar();
 154:	00006f40 	call	6f4 <alt_getchar>
	  if(newC > 31 && newC < 128) {
 158:	11003fcc 	andi	r4,r2,255
 15c:	2100201c 	xori	r4,r4,128
 160:	213fe004 	addi	r4,r4,-128
 164:	008007c4 	movi	r2,31
 168:	1100030e 	bge	r2,r4,178 <main+0x94>
		  writeBuffer(newC, &pBufferHead, &pBuffer);
 16c:	d9400104 	addi	r5,sp,4
 170:	d9800204 	addi	r6,sp,8
 174:	00000a80 	call	a8 <writeBuffer>
	  if(c != '\0' && c != 0x60) {
		  *data_bus_LEDs = c;
	  }*/

	  //******transmit*******
	  if(*load) {
 178:	00d40804 	movi	r3,20512
 17c:	18800003 	ldbu	r2,0(r3)
 180:	10803fcc 	andi	r2,r2,255
 184:	1080201c 	xori	r2,r2,128
 188:	10bfe004 	addi	r2,r2,-128
 18c:	10000426 	beq	r2,zero,1a0 <main+0xbc>
		  *load = 0;
 190:	18000005 	stb	zero,0(r3)
		  *transmit_enable = 1;
 194:	00940004 	movi	r2,20480
 198:	00c00044 	movi	r3,1
 19c:	10c00005 	stb	r3,0(r2)
	  }

	  char c = '\0';
	  if(write) {
 1a0:	88003126 	beq	r17,zero,268 <main+0x184>
		  c = readBuffer(&pTransmit, pBufferHead, pBuffer);
 1a4:	d9400117 	ldw	r5,4(sp)
 1a8:	d9800217 	ldw	r6,8(sp)
 1ac:	d809883a 	mov	r4,sp
 1b0:	000005c0 	call	5c <readBuffer>
		  if(c != '\0' && c != 0x60 ) {
 1b4:	11003fcc 	andi	r4,r2,255
 1b8:	2100201c 	xori	r4,r4,128
 1bc:	213fe004 	addi	r4,r4,-128
 1c0:	20002826 	beq	r4,zero,264 <main+0x180>
 1c4:	00801804 	movi	r2,96
 1c8:	20802626 	beq	r4,r2,264 <main+0x180>
			  write = 0;
			  //*data_bus_output = (c << 1))|0b1000000000;
			  //*data_bus_output = 0b0010011111;
			  *data_bus_output = 0b1010011110;
 1cc:	00ffe784 	movi	r3,-98
 1d0:	00940c04 	movi	r2,20528
 1d4:	10c00005 	stb	r3,0(r2)
			  *load = 1;
 1d8:	04940804 	movi	r18,20512
 1dc:	00800044 	movi	r2,1
			  *transmit_enable = 0;
 1e0:	04540004 	movi	r17,20480
		  if(c != '\0' && c != 0x60 ) {
			  write = 0;
			  //*data_bus_output = (c << 1))|0b1000000000;
			  //*data_bus_output = 0b0010011111;
			  *data_bus_output = 0b1010011110;
			  *load = 1;
 1e4:	90800005 	stb	r2,0(r18)
			  *transmit_enable = 0;
 1e8:	88000005 	stb	zero,0(r17)
			  alt_putchar(c);
 1ec:	000085c0 	call	85c <alt_putchar>
			  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 1f0:	91800003 	ldbu	r6,0(r18)
 1f4:	88800003 	ldbu	r2,0(r17)
 1f8:	00d40404 	movi	r3,20496
 1fc:	18c00003 	ldbu	r3,0(r3)
 200:	01141404 	movi	r4,20560
 204:	10803fcc 	andi	r2,r2,255
 208:	21000003 	ldbu	r4,0(r4)
 20c:	1080201c 	xori	r2,r2,128
 210:	10bfe004 	addi	r2,r2,-128
 214:	108b883a 	add	r5,r2,r2
 218:	18803fcc 	andi	r2,r3,255
 21c:	1080201c 	xori	r2,r2,128
 220:	20c03fcc 	andi	r3,r4,255
 224:	10bfe004 	addi	r2,r2,-128
 228:	18c0201c 	xori	r3,r3,128
 22c:	1085883a 	add	r2,r2,r2
 230:	18ffe004 	addi	r3,r3,-128
 234:	180690fa 	slli	r3,r3,3
 238:	1085883a 	add	r2,r2,r2
 23c:	2884b03a 	or	r2,r5,r2
 240:	1184b03a 	or	r2,r2,r6
 244:	10c4b03a 	or	r2,r2,r3
			  usleep(500000);
 248:	01000234 	movhi	r4,8
			  //*data_bus_output = 0b0010011111;
			  *data_bus_output = 0b1010011110;
			  *load = 1;
			  *transmit_enable = 0;
			  alt_putchar(c);
			  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 24c:	00d41004 	movi	r3,20544
 250:	18800005 	stb	r2,0(r3)
			  usleep(500000);
 254:	21284804 	addi	r4,r4,-24288
 258:	00009280 	call	928 <usleep>

	  char c = '\0';
	  if(write) {
		  c = readBuffer(&pTransmit, pBufferHead, pBuffer);
		  if(c != '\0' && c != 0x60 ) {
			  write = 0;
 25c:	0023883a 	mov	r17,zero
 260:	00000106 	br	268 <main+0x184>
 264:	04400044 	movi	r17,1
			  alt_putchar(c);
			  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
			  usleep(500000);
		  }
	  }
	  if(*character_sent) {
 268:	00940404 	movi	r2,20496
 26c:	10800003 	ldbu	r2,0(r2)
 270:	10803fcc 	andi	r2,r2,255
 274:	1080201c 	xori	r2,r2,128
 278:	10bfe004 	addi	r2,r2,-128
 27c:	10000326 	beq	r2,zero,28c <main+0x1a8>
		  write = 1;
		  *transmit_enable = 0;
 280:	00940004 	movi	r2,20480
 284:	10000005 	stb	zero,0(r2)
			  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
			  usleep(500000);
		  }
	  }
	  if(*character_sent) {
		  write = 1;
 288:	04400044 	movi	r17,1
		  *transmit_enable = 0;
	  }

	  //*****receive*********
	  if(*character_received & read) {
 28c:	00d41404 	movi	r3,20560
 290:	18800003 	ldbu	r2,0(r3)
 294:	10803fcc 	andi	r2,r2,255
 298:	1080201c 	xori	r2,r2,128
 29c:	10bfe004 	addi	r2,r2,-128
 2a0:	8084703a 	and	r2,r16,r2
 2a4:	10000d26 	beq	r2,zero,2dc <main+0x1f8>
		  read = 0;
		  int parity = *data_bus_input & 0x01;
 2a8:	00941804 	movi	r2,20576
 2ac:	10c00003 	ldbu	r3,0(r2)
		  char cRec = (*data_bus_input >> 1) & 0b0011111111;
		  alt_putstr("\ngot char! (");
 2b0:	01000034 	movhi	r4,0

	  //*****receive*********
	  if(*character_received & read) {
		  read = 0;
		  int parity = *data_bus_input & 0x01;
		  char cRec = (*data_bus_input >> 1) & 0b0011111111;
 2b4:	10800003 	ldbu	r2,0(r2)
		  alt_putstr("\ngot char! (");
 2b8:	2102fc04 	addi	r4,r4,3056
 2bc:	00008a40 	call	8a4 <alt_putstr>
		  alt_putchar((0b1010011110 >> 1) & 0b0011111111);
 2c0:	010013c4 	movi	r4,79
 2c4:	000085c0 	call	85c <alt_putchar>
		  alt_putstr(")\n");
 2c8:	01000034 	movhi	r4,0
 2cc:	21030004 	addi	r4,r4,3072
 2d0:	00008a40 	call	8a4 <alt_putstr>
		  *transmit_enable = 0;
	  }

	  //*****receive*********
	  if(*character_received & read) {
		  read = 0;
 2d4:	0021883a 	mov	r16,zero
 2d8:	00000606 	br	2f4 <main+0x210>
		  int parity = *data_bus_input & 0x01;
		  char cRec = (*data_bus_input >> 1) & 0b0011111111;
		  alt_putstr("\ngot char! (");
		  alt_putchar((0b1010011110 >> 1) & 0b0011111111);
		  alt_putstr(")\n");
	  } else if(!(*character_received)) {
 2dc:	18800003 	ldbu	r2,0(r3)
 2e0:	10803fcc 	andi	r2,r2,255
 2e4:	1080201c 	xori	r2,r2,128
 2e8:	10bfe004 	addi	r2,r2,-128
 2ec:	1000011e 	bne	r2,zero,2f4 <main+0x210>
		  read = 1;
 2f0:	04000044 	movi	r16,1
	  }


	  //******Debug outputs
	  *data_bus_LEDs = (*load) | (*transmit_enable << 1) | (*character_sent << 2) | (*character_received << 3);
 2f4:	00940804 	movi	r2,20512
 2f8:	11800003 	ldbu	r6,0(r2)
 2fc:	00940004 	movi	r2,20480
 300:	10800003 	ldbu	r2,0(r2)
 304:	00d40404 	movi	r3,20496
 308:	18c00003 	ldbu	r3,0(r3)
 30c:	01141404 	movi	r4,20560
 310:	10803fcc 	andi	r2,r2,255
 314:	21000003 	ldbu	r4,0(r4)
 318:	1080201c 	xori	r2,r2,128
 31c:	10bfe004 	addi	r2,r2,-128
 320:	108b883a 	add	r5,r2,r2
 324:	18803fcc 	andi	r2,r3,255
 328:	1080201c 	xori	r2,r2,128
 32c:	20c03fcc 	andi	r3,r4,255
 330:	10bfe004 	addi	r2,r2,-128
 334:	18c0201c 	xori	r3,r3,128
 338:	1085883a 	add	r2,r2,r2
 33c:	18ffe004 	addi	r3,r3,-128
 340:	180690fa 	slli	r3,r3,3
 344:	1085883a 	add	r2,r2,r2
 348:	2884b03a 	or	r2,r5,r2
 34c:	1184b03a 	or	r2,r2,r6
 350:	10c4b03a 	or	r2,r2,r3
 354:	00d41004 	movi	r3,20544
 358:	18800005 	stb	r2,0(r3)
	  //*data_bus_LEDs = *data_bus_output >> 2;
  }
 35c:	003f7d06 	br	154 <_gp+0xffff740c>

00000360 <calloc>:
 360:	00c00034 	movhi	r3,0
 364:	18c35304 	addi	r3,r3,3404
 368:	2005883a 	mov	r2,r4
 36c:	19000017 	ldw	r4,0(r3)
 370:	280d883a 	mov	r6,r5
 374:	100b883a 	mov	r5,r2
 378:	000037c1 	jmpi	37c <_calloc_r>

0000037c <_calloc_r>:
 37c:	defffd04 	addi	sp,sp,-12
 380:	dc000015 	stw	r16,0(sp)
 384:	2021883a 	mov	r16,r4
 388:	2809883a 	mov	r4,r5
 38c:	300b883a 	mov	r5,r6
 390:	dfc00215 	stw	ra,8(sp)
 394:	dc400115 	stw	r17,4(sp)
 398:	00005a80 	call	5a8 <__mulsi3>
 39c:	8009883a 	mov	r4,r16
 3a0:	100b883a 	mov	r5,r2
 3a4:	1023883a 	mov	r17,r2
 3a8:	00003dc0 	call	3dc <_malloc_r>
 3ac:	1021883a 	mov	r16,r2
 3b0:	10000426 	beq	r2,zero,3c4 <_calloc_r+0x48>
 3b4:	1009883a 	mov	r4,r2
 3b8:	000b883a 	mov	r5,zero
 3bc:	880d883a 	mov	r6,r17
 3c0:	00005880 	call	588 <memset>
 3c4:	8005883a 	mov	r2,r16
 3c8:	dfc00217 	ldw	ra,8(sp)
 3cc:	dc400117 	ldw	r17,4(sp)
 3d0:	dc000017 	ldw	r16,0(sp)
 3d4:	dec00304 	addi	sp,sp,12
 3d8:	f800283a 	ret

000003dc <_malloc_r>:
 3dc:	defffb04 	addi	sp,sp,-20
 3e0:	00bfff04 	movi	r2,-4
 3e4:	dc000015 	stw	r16,0(sp)
 3e8:	2c0000c4 	addi	r16,r5,3
 3ec:	80a0703a 	and	r16,r16,r2
 3f0:	dc800215 	stw	r18,8(sp)
 3f4:	dfc00415 	stw	ra,16(sp)
 3f8:	dcc00315 	stw	r19,12(sp)
 3fc:	dc400115 	stw	r17,4(sp)
 400:	84000204 	addi	r16,r16,8
 404:	00800304 	movi	r2,12
 408:	2025883a 	mov	r18,r4
 40c:	8080022e 	bgeu	r16,r2,418 <_malloc_r+0x3c>
 410:	1021883a 	mov	r16,r2
 414:	00000506 	br	42c <_malloc_r+0x50>
 418:	8000040e 	bge	r16,zero,42c <_malloc_r+0x50>
 41c:	00800304 	movi	r2,12
 420:	90800015 	stw	r2,0(r18)
 424:	0005883a 	mov	r2,zero
 428:	00003c06 	br	51c <_malloc_r+0x140>
 42c:	817ffb36 	bltu	r16,r5,41c <_gp+0xffff76d4>
 430:	01000034 	movhi	r4,0
 434:	2103b504 	addi	r4,r4,3796
 438:	20800017 	ldw	r2,0(r4)
 43c:	1007883a 	mov	r3,r2
 440:	18000926 	beq	r3,zero,468 <_malloc_r+0x8c>
 444:	19400017 	ldw	r5,0(r3)
 448:	2c0bc83a 	sub	r5,r5,r16
 44c:	28001716 	blt	r5,zero,4ac <_malloc_r+0xd0>
 450:	018002c4 	movi	r6,11
 454:	31400d2e 	bgeu	r6,r5,48c <_malloc_r+0xb0>
 458:	19400015 	stw	r5,0(r3)
 45c:	1945883a 	add	r2,r3,r5
 460:	14000015 	stw	r16,0(r2)
 464:	1000231e 	bne	r2,zero,4f4 <_malloc_r+0x118>
 468:	04400034 	movhi	r17,0
 46c:	8c43b404 	addi	r17,r17,3792
 470:	88800017 	ldw	r2,0(r17)
 474:	1000101e 	bne	r2,zero,4b8 <_malloc_r+0xdc>
 478:	9009883a 	mov	r4,r18
 47c:	000b883a 	mov	r5,zero
 480:	00005380 	call	538 <_sbrk_r>
 484:	88800015 	stw	r2,0(r17)
 488:	00000b06 	br	4b8 <_malloc_r+0xdc>
 48c:	10c0031e 	bne	r2,r3,49c <_malloc_r+0xc0>
 490:	10c00117 	ldw	r3,4(r2)
 494:	20c00015 	stw	r3,0(r4)
 498:	00001606 	br	4f4 <_malloc_r+0x118>
 49c:	19000117 	ldw	r4,4(r3)
 4a0:	11000115 	stw	r4,4(r2)
 4a4:	1805883a 	mov	r2,r3
 4a8:	00001206 	br	4f4 <_malloc_r+0x118>
 4ac:	1805883a 	mov	r2,r3
 4b0:	18c00117 	ldw	r3,4(r3)
 4b4:	003fe206 	br	440 <_gp+0xffff76f8>
 4b8:	9009883a 	mov	r4,r18
 4bc:	800b883a 	mov	r5,r16
 4c0:	00005380 	call	538 <_sbrk_r>
 4c4:	04ffffc4 	movi	r19,-1
 4c8:	14ffd426 	beq	r2,r19,41c <_gp+0xffff76d4>
 4cc:	144000c4 	addi	r17,r2,3
 4d0:	00ffff04 	movi	r3,-4
 4d4:	88e2703a 	and	r17,r17,r3
 4d8:	88800526 	beq	r17,r2,4f0 <_malloc_r+0x114>
 4dc:	9009883a 	mov	r4,r18
 4e0:	888bc83a 	sub	r5,r17,r2
 4e4:	00005380 	call	538 <_sbrk_r>
 4e8:	14ffcc26 	beq	r2,r19,41c <_gp+0xffff76d4>
 4ec:	8805883a 	mov	r2,r17
 4f0:	14000015 	stw	r16,0(r2)
 4f4:	114002c4 	addi	r5,r2,11
 4f8:	00fffe04 	movi	r3,-8
 4fc:	11000104 	addi	r4,r2,4
 500:	28c6703a 	and	r3,r5,r3
 504:	1909c83a 	sub	r4,r3,r4
 508:	20000326 	beq	r4,zero,518 <_malloc_r+0x13c>
 50c:	110b883a 	add	r5,r2,r4
 510:	0109c83a 	sub	r4,zero,r4
 514:	29000015 	stw	r4,0(r5)
 518:	1805883a 	mov	r2,r3
 51c:	dfc00417 	ldw	ra,16(sp)
 520:	dcc00317 	ldw	r19,12(sp)
 524:	dc800217 	ldw	r18,8(sp)
 528:	dc400117 	ldw	r17,4(sp)
 52c:	dc000017 	ldw	r16,0(sp)
 530:	dec00504 	addi	sp,sp,20
 534:	f800283a 	ret

00000538 <_sbrk_r>:
 538:	defffd04 	addi	sp,sp,-12
 53c:	dc000015 	stw	r16,0(sp)
 540:	04000034 	movhi	r16,0
 544:	dc400115 	stw	r17,4(sp)
 548:	8403b604 	addi	r16,r16,3800
 54c:	2023883a 	mov	r17,r4
 550:	2809883a 	mov	r4,r5
 554:	dfc00215 	stw	ra,8(sp)
 558:	80000015 	stw	zero,0(r16)
 55c:	00008dc0 	call	8dc <sbrk>
 560:	00ffffc4 	movi	r3,-1
 564:	10c0031e 	bne	r2,r3,574 <_sbrk_r+0x3c>
 568:	80c00017 	ldw	r3,0(r16)
 56c:	18000126 	beq	r3,zero,574 <_sbrk_r+0x3c>
 570:	88c00015 	stw	r3,0(r17)
 574:	dfc00217 	ldw	ra,8(sp)
 578:	dc400117 	ldw	r17,4(sp)
 57c:	dc000017 	ldw	r16,0(sp)
 580:	dec00304 	addi	sp,sp,12
 584:	f800283a 	ret

00000588 <memset>:
 588:	2005883a 	mov	r2,r4
 58c:	2007883a 	mov	r3,r4
 590:	218d883a 	add	r6,r4,r6
 594:	19800326 	beq	r3,r6,5a4 <memset+0x1c>
 598:	19400005 	stb	r5,0(r3)
 59c:	18c00044 	addi	r3,r3,1
 5a0:	003ffc06 	br	594 <_gp+0xffff784c>
 5a4:	f800283a 	ret

000005a8 <__mulsi3>:
 5a8:	0005883a 	mov	r2,zero
 5ac:	20000726 	beq	r4,zero,5cc <__mulsi3+0x24>
 5b0:	20c0004c 	andi	r3,r4,1
 5b4:	2008d07a 	srli	r4,r4,1
 5b8:	18000126 	beq	r3,zero,5c0 <__mulsi3+0x18>
 5bc:	1145883a 	add	r2,r2,r5
 5c0:	294b883a 	add	r5,r5,r5
 5c4:	203ffa1e 	bne	r4,zero,5b0 <_gp+0xffff7868>
 5c8:	f800283a 	ret
 5cc:	f800283a 	ret

000005d0 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 5d0:	defff904 	addi	sp,sp,-28
 5d4:	dcc00315 	stw	r19,12(sp)
 5d8:	2027883a 	mov	r19,r4
 5dc:	dfc00415 	stw	ra,16(sp)
 5e0:	dc800215 	stw	r18,8(sp)
 5e4:	dc400115 	stw	r17,4(sp)
 5e8:	dc000015 	stw	r16,0(sp)
 5ec:	d9800515 	stw	r6,20(sp)
 5f0:	d9c00615 	stw	r7,24(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5f4:	20002d16 	blt	r4,zero,6ac <fcntl+0xdc>
 5f8:	2823883a 	mov	r17,r5
 5fc:	04000034 	movhi	r16,0
 600:	01400304 	movi	r5,12
 604:	00005a80 	call	5a8 <__mulsi3>
 608:	84033c04 	addi	r16,r16,3312
 60c:	1407883a 	add	r3,r2,r16
  
  if (fd)
 610:	18002626 	beq	r3,zero,6ac <fcntl+0xdc>
  {
    switch (cmd)
 614:	00c000c4 	movi	r3,3
 618:	88c01126 	beq	r17,r3,660 <fcntl+0x90>
 61c:	00c00104 	movi	r3,4
 620:	88c0181e 	bne	r17,r3,684 <fcntl+0xb4>
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 624:	10800204 	addi	r2,r2,8
 628:	80a3883a 	add	r17,r16,r2
 62c:	d8800517 	ldw	r2,20(sp)
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 630:	9809883a 	mov	r4,r19
 634:	01400304 	movi	r5,12
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 638:	1490020c 	andi	r18,r2,16392
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 63c:	00005a80 	call	5a8 <__mulsi3>
 640:	8085883a 	add	r2,r16,r2
 644:	10800217 	ldw	r2,8(r2)
 648:	00effdc4 	movi	r3,-16393
 64c:	10c4703a 	and	r2,r2,r3
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 650:	9084b03a 	or	r2,r18,r2
 654:	88800015 	stw	r2,0(r17)
      va_end(argp);
      return 0;
 658:	0005883a 	mov	r2,zero
 65c:	00001e06 	br	6d8 <fcntl+0x108>
  if (fd)
  {
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 660:	9809883a 	mov	r4,r19
 664:	01400304 	movi	r5,12
 668:	00005a80 	call	5a8 <__mulsi3>
 66c:	8085883a 	add	r2,r16,r2
 670:	10c00217 	ldw	r3,8(r2)
 674:	00900034 	movhi	r2,16384
 678:	10bfffc4 	addi	r2,r2,-1
 67c:	1884703a 	and	r2,r3,r2
 680:	00001506 	br	6d8 <fcntl+0x108>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 684:	00800034 	movhi	r2,0
 688:	10835b04 	addi	r2,r2,3436
 68c:	10800017 	ldw	r2,0(r2)
 690:	10000226 	beq	r2,zero,69c <fcntl+0xcc>
 694:	103ee83a 	callr	r2
 698:	00000206 	br	6a4 <fcntl+0xd4>
 69c:	00800034 	movhi	r2,0
 6a0:	1083b604 	addi	r2,r2,3800
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
      va_end(argp);
      return 0;
    default:
      ALT_ERRNO = EINVAL;
 6a4:	00c00584 	movi	r3,22
 6a8:	00000906 	br	6d0 <fcntl+0x100>
 6ac:	00800034 	movhi	r2,0
 6b0:	10835b04 	addi	r2,r2,3436
 6b4:	10800017 	ldw	r2,0(r2)
 6b8:	10000226 	beq	r2,zero,6c4 <fcntl+0xf4>
 6bc:	103ee83a 	callr	r2
 6c0:	00000206 	br	6cc <fcntl+0xfc>
 6c4:	00800034 	movhi	r2,0
 6c8:	1083b604 	addi	r2,r2,3800
      return -1;
    }
  }

  ALT_ERRNO = EBADFD;
 6cc:	00c01444 	movi	r3,81
 6d0:	10c00015 	stw	r3,0(r2)
  return -1;
 6d4:	00bfffc4 	movi	r2,-1
}
 6d8:	dfc00417 	ldw	ra,16(sp)
 6dc:	dcc00317 	ldw	r19,12(sp)
 6e0:	dc800217 	ldw	r18,8(sp)
 6e4:	dc400117 	ldw	r17,4(sp)
 6e8:	dc000017 	ldw	r16,0(sp)
 6ec:	dec00704 	addi	sp,sp,28
 6f0:	f800283a 	ret

000006f4 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 6f4:	00800034 	movhi	r2,0
 6f8:	10833c04 	addi	r2,r2,3312
 6fc:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 700:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 704:	01000034 	movhi	r4,0
 708:	21035504 	addi	r4,r4,3412
 70c:	d80b883a 	mov	r5,sp
 710:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 714:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 718:	00009500 	call	950 <altera_avalon_jtag_uart_read>
 71c:	0080020e 	bge	zero,r2,728 <alt_getchar+0x34>
        return -1;
    }
    return c;
 720:	d8800007 	ldb	r2,0(sp)
 724:	00000106 	br	72c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 728:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 72c:	dfc00117 	ldw	ra,4(sp)
 730:	dec00204 	addi	sp,sp,8
 734:	f800283a 	ret

00000738 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 738:	deffff04 	addi	sp,sp,-4
 73c:	01000034 	movhi	r4,0
 740:	01400034 	movhi	r5,0
 744:	dfc00015 	stw	ra,0(sp)
 748:	21030404 	addi	r4,r4,3088
 74c:	29435c04 	addi	r5,r5,3440

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 750:	2140061e 	bne	r4,r5,76c <alt_load+0x34>
 754:	01000034 	movhi	r4,0
 758:	01400034 	movhi	r5,0
 75c:	21000804 	addi	r4,r4,32
 760:	29400804 	addi	r5,r5,32
 764:	2140141e 	bne	r4,r5,7b8 <alt_load+0x80>
 768:	00000d06 	br	7a0 <alt_load+0x68>
 76c:	00c00034 	movhi	r3,0
 770:	18c35c04 	addi	r3,r3,3440
 774:	00bfff04 	movi	r2,-4
 778:	1907c83a 	sub	r3,r3,r4
 77c:	1886703a 	and	r3,r3,r2
 780:	0005883a 	mov	r2,zero
  {
    while( to != end )
 784:	10fff326 	beq	r2,r3,754 <_gp+0xffff7a0c>
 788:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 78c:	39c00017 	ldw	r7,0(r7)
 790:	110d883a 	add	r6,r2,r4
 794:	10800104 	addi	r2,r2,4
 798:	31c00015 	stw	r7,0(r6)
 79c:	003ff906 	br	784 <_gp+0xffff7a3c>
 7a0:	01000034 	movhi	r4,0
 7a4:	01400034 	movhi	r5,0
 7a8:	2102f204 	addi	r4,r4,3016
 7ac:	2942f204 	addi	r5,r5,3016

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 7b0:	2140121e 	bne	r4,r5,7fc <alt_load+0xc4>
 7b4:	00000d06 	br	7ec <alt_load+0xb4>
 7b8:	00c00034 	movhi	r3,0
 7bc:	18c00804 	addi	r3,r3,32
 7c0:	00bfff04 	movi	r2,-4
 7c4:	1907c83a 	sub	r3,r3,r4
 7c8:	1886703a 	and	r3,r3,r2
 7cc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 7d0:	10fff326 	beq	r2,r3,7a0 <_gp+0xffff7a58>
 7d4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 7d8:	39c00017 	ldw	r7,0(r7)
 7dc:	110d883a 	add	r6,r2,r4
 7e0:	10800104 	addi	r2,r2,4
 7e4:	31c00015 	stw	r7,0(r6)
 7e8:	003ff906 	br	7d0 <_gp+0xffff7a88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 7ec:	0000a680 	call	a68 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 7f0:	dfc00017 	ldw	ra,0(sp)
 7f4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 7f8:	0000a741 	jmpi	a74 <alt_icache_flush_all>
 7fc:	00c00034 	movhi	r3,0
 800:	18c30404 	addi	r3,r3,3088
 804:	00bfff04 	movi	r2,-4
 808:	1907c83a 	sub	r3,r3,r4
 80c:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 810:	0005883a 	mov	r2,zero
  {
    while( to != end )
 814:	10fff526 	beq	r2,r3,7ec <_gp+0xffff7aa4>
 818:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 81c:	39c00017 	ldw	r7,0(r7)
 820:	110d883a 	add	r6,r2,r4
 824:	10800104 	addi	r2,r2,4
 828:	31c00015 	stw	r7,0(r6)
 82c:	003ff906 	br	814 <_gp+0xffff7acc>

00000830 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 830:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 834:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 838:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 83c:	000092c0 	call	92c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 840:	000094c0 	call	94c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 844:	d1206717 	ldw	r4,-32356(gp)
 848:	d1606617 	ldw	r5,-32360(gp)
 84c:	d1a06517 	ldw	r6,-32364(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 850:	dfc00017 	ldw	ra,0(sp)
 854:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 858:	00000e41 	jmpi	e4 <main>

0000085c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 85c:	defffd04 	addi	sp,sp,-12
 860:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 864:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 868:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 86c:	01000034 	movhi	r4,0
 870:	21035504 	addi	r4,r4,3412
 874:	d80b883a 	mov	r5,sp
 878:	01800044 	movi	r6,1
 87c:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 880:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 884:	00009ac0 	call	9ac <altera_avalon_jtag_uart_write>
 888:	00ffffc4 	movi	r3,-1
 88c:	10c00126 	beq	r2,r3,894 <alt_putchar+0x38>
        return -1;
    }
    return c;
 890:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 894:	dfc00217 	ldw	ra,8(sp)
 898:	dc000117 	ldw	r16,4(sp)
 89c:	dec00304 	addi	sp,sp,12
 8a0:	f800283a 	ret

000008a4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 8a4:	defffe04 	addi	sp,sp,-8
 8a8:	dc000015 	stw	r16,0(sp)
 8ac:	dfc00115 	stw	ra,4(sp)
 8b0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 8b4:	0000a800 	call	a80 <strlen>
 8b8:	01000034 	movhi	r4,0
 8bc:	21035504 	addi	r4,r4,3412
 8c0:	800b883a 	mov	r5,r16
 8c4:	100d883a 	mov	r6,r2
 8c8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 8cc:	dfc00117 	ldw	ra,4(sp)
 8d0:	dc000017 	ldw	r16,0(sp)
 8d4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 8d8:	00009ac1 	jmpi	9ac <altera_avalon_jtag_uart_write>

000008dc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8dc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8e0:	00bfff84 	movi	r2,-2
 8e4:	2884703a 	and	r2,r5,r2
 8e8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8ec:	d0a00217 	ldw	r2,-32760(gp)
 8f0:	00ffff04 	movi	r3,-4
 8f4:	108000c4 	addi	r2,r2,3
 8f8:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8fc:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 900:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 904:	1109883a 	add	r4,r2,r4
 908:	18d00004 	addi	r3,r3,16384
 90c:	1900032e 	bgeu	r3,r4,91c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 910:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 914:	00bfffc4 	movi	r2,-1
 918:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 91c:	d1200215 	stw	r4,-32760(gp)
 920:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 924:	f800283a 	ret

00000928 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 928:	00009e01 	jmpi	9e0 <alt_busy_sleep>

0000092c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 92c:	deffff04 	addi	sp,sp,-4
 930:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 934:	0000a780 	call	a78 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 938:	00800044 	movi	r2,1
 93c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 940:	dfc00017 	ldw	ra,0(sp)
 944:	dec00104 	addi	sp,sp,4
 948:	f800283a 	ret

0000094c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 94c:	f800283a 	ret

00000950 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 950:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 954:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 958:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 95c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 960:	11800b2e 	bgeu	r2,r6,990 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 964:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 968:	1a60000c 	andi	r9,r3,32768
 96c:	48000326 	beq	r9,zero,97c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 970:	10c00005 	stb	r3,0(r2)
 974:	10800044 	addi	r2,r2,1
 978:	003ff906 	br	960 <_gp+0xffff7c18>
    else if (ptr != buffer)
 97c:	11400226 	beq	r2,r5,988 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 980:	1145c83a 	sub	r2,r2,r5
 984:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 988:	403ff526 	beq	r8,zero,960 <_gp+0xffff7c18>
 98c:	00000106 	br	994 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 990:	117ffb1e 	bne	r2,r5,980 <_gp+0xffff7c38>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 994:	39d0000c 	andi	r7,r7,16384
 998:	3800021e 	bne	r7,zero,9a4 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 99c:	00bffec4 	movi	r2,-5
 9a0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 9a4:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 9a8:	f800283a 	ret

000009ac <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 9ac:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 9b0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 9b4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 9b8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 9bc:	2980072e 	bgeu	r5,r6,9dc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 9c0:	38c00037 	ldwio	r3,0(r7)
 9c4:	18ffffec 	andhi	r3,r3,65535
 9c8:	183ffc26 	beq	r3,zero,9bc <_gp+0xffff7c74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 9cc:	28c00007 	ldb	r3,0(r5)
 9d0:	20c00035 	stwio	r3,0(r4)
 9d4:	29400044 	addi	r5,r5,1
 9d8:	003ff806 	br	9bc <_gp+0xffff7c74>

  return count;
}
 9dc:	f800283a 	ret

000009e0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 9e0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 9e4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 9e8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 9ec:	dc000015 	stw	r16,0(sp)
 9f0:	dfc00115 	stw	ra,4(sp)
 9f4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 9f8:	0000bb80 	call	bb8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 9fc:	10001026 	beq	r2,zero,a40 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a00:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a04:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 a08:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a0c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a10:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a14:	297fffc4 	addi	r5,r5,-1
 a18:	283ffe1e 	bne	r5,zero,a14 <_gp+0xffff7ccc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 a1c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a20:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 a24:	18bffb16 	blt	r3,r2,a14 <_gp+0xffff7ccc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 a28:	8009883a 	mov	r4,r16
 a2c:	01400144 	movi	r5,5
 a30:	00005a80 	call	5a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 a34:	10bfffc4 	addi	r2,r2,-1
 a38:	103ffe1e 	bne	r2,zero,a34 <_gp+0xffff7cec>
 a3c:	00000506 	br	a54 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 a40:	8009883a 	mov	r4,r16
 a44:	01400144 	movi	r5,5
 a48:	00005a80 	call	5a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 a4c:	10bfffc4 	addi	r2,r2,-1
 a50:	00bffe16 	blt	zero,r2,a4c <_gp+0xffff7d04>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 a54:	0005883a 	mov	r2,zero
 a58:	dfc00117 	ldw	ra,4(sp)
 a5c:	dc000017 	ldw	r16,0(sp)
 a60:	dec00204 	addi	sp,sp,8
 a64:	f800283a 	ret

00000a68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 a68:	f800283a 	ret

00000a6c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 a6c:	3005883a 	mov	r2,r6
 a70:	f800283a 	ret

00000a74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 a74:	f800283a 	ret

00000a78 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 a78:	000170fa 	wrctl	ienable,zero
 a7c:	f800283a 	ret

00000a80 <strlen>:
 a80:	2005883a 	mov	r2,r4
 a84:	10c00007 	ldb	r3,0(r2)
 a88:	18000226 	beq	r3,zero,a94 <strlen+0x14>
 a8c:	10800044 	addi	r2,r2,1
 a90:	003ffc06 	br	a84 <_gp+0xffff7d3c>
 a94:	1105c83a 	sub	r2,r2,r4
 a98:	f800283a 	ret

00000a9c <udivmodsi4>:
 a9c:	2900182e 	bgeu	r5,r4,b00 <udivmodsi4+0x64>
 aa0:	28001716 	blt	r5,zero,b00 <udivmodsi4+0x64>
 aa4:	00800804 	movi	r2,32
 aa8:	00c00044 	movi	r3,1
 aac:	00000206 	br	ab8 <udivmodsi4+0x1c>
 ab0:	10001126 	beq	r2,zero,af8 <udivmodsi4+0x5c>
 ab4:	28000516 	blt	r5,zero,acc <udivmodsi4+0x30>
 ab8:	294b883a 	add	r5,r5,r5
 abc:	10bfffc4 	addi	r2,r2,-1
 ac0:	18c7883a 	add	r3,r3,r3
 ac4:	293ffa36 	bltu	r5,r4,ab0 <_gp+0xffff7d68>
 ac8:	18000b26 	beq	r3,zero,af8 <udivmodsi4+0x5c>
 acc:	0005883a 	mov	r2,zero
 ad0:	21400236 	bltu	r4,r5,adc <udivmodsi4+0x40>
 ad4:	2149c83a 	sub	r4,r4,r5
 ad8:	10c4b03a 	or	r2,r2,r3
 adc:	1806d07a 	srli	r3,r3,1
 ae0:	280ad07a 	srli	r5,r5,1
 ae4:	183ffa1e 	bne	r3,zero,ad0 <_gp+0xffff7d88>
 ae8:	3000011e 	bne	r6,zero,af0 <udivmodsi4+0x54>
 aec:	f800283a 	ret
 af0:	2005883a 	mov	r2,r4
 af4:	f800283a 	ret
 af8:	0005883a 	mov	r2,zero
 afc:	003ffa06 	br	ae8 <_gp+0xffff7da0>
 b00:	00c00044 	movi	r3,1
 b04:	003ff106 	br	acc <_gp+0xffff7d84>

00000b08 <__divsi3>:
 b08:	defffe04 	addi	sp,sp,-8
 b0c:	dfc00115 	stw	ra,4(sp)
 b10:	dc000015 	stw	r16,0(sp)
 b14:	20000b16 	blt	r4,zero,b44 <__divsi3+0x3c>
 b18:	0021883a 	mov	r16,zero
 b1c:	28000c16 	blt	r5,zero,b50 <__divsi3+0x48>
 b20:	000d883a 	mov	r6,zero
 b24:	0000a9c0 	call	a9c <udivmodsi4>
 b28:	0407c83a 	sub	r3,zero,r16
 b2c:	1884f03a 	xor	r2,r3,r2
 b30:	1405883a 	add	r2,r2,r16
 b34:	dfc00117 	ldw	ra,4(sp)
 b38:	dc000017 	ldw	r16,0(sp)
 b3c:	dec00204 	addi	sp,sp,8
 b40:	f800283a 	ret
 b44:	0109c83a 	sub	r4,zero,r4
 b48:	04000044 	movi	r16,1
 b4c:	283ff40e 	bge	r5,zero,b20 <_gp+0xffff7dd8>
 b50:	014bc83a 	sub	r5,zero,r5
 b54:	8400005c 	xori	r16,r16,1
 b58:	003ff106 	br	b20 <_gp+0xffff7dd8>

00000b5c <__modsi3>:
 b5c:	defffd04 	addi	sp,sp,-12
 b60:	dfc00215 	stw	ra,8(sp)
 b64:	dc400115 	stw	r17,4(sp)
 b68:	dc000015 	stw	r16,0(sp)
 b6c:	20000c16 	blt	r4,zero,ba0 <__modsi3+0x44>
 b70:	0023883a 	mov	r17,zero
 b74:	0021883a 	mov	r16,zero
 b78:	28000d16 	blt	r5,zero,bb0 <__modsi3+0x54>
 b7c:	01800044 	movi	r6,1
 b80:	0000a9c0 	call	a9c <udivmodsi4>
 b84:	1404f03a 	xor	r2,r2,r16
 b88:	8885883a 	add	r2,r17,r2
 b8c:	dfc00217 	ldw	ra,8(sp)
 b90:	dc400117 	ldw	r17,4(sp)
 b94:	dc000017 	ldw	r16,0(sp)
 b98:	dec00304 	addi	sp,sp,12
 b9c:	f800283a 	ret
 ba0:	0109c83a 	sub	r4,zero,r4
 ba4:	04400044 	movi	r17,1
 ba8:	043fffc4 	movi	r16,-1
 bac:	283ff30e 	bge	r5,zero,b7c <_gp+0xffff7e34>
 bb0:	014bc83a 	sub	r5,zero,r5
 bb4:	003ff106 	br	b7c <_gp+0xffff7e34>

00000bb8 <__udivsi3>:
 bb8:	000d883a 	mov	r6,zero
 bbc:	0000a9c1 	jmpi	a9c <udivmodsi4>

00000bc0 <__umodsi3>:
 bc0:	01800044 	movi	r6,1
 bc4:	0000a9c1 	jmpi	a9c <udivmodsi4>
