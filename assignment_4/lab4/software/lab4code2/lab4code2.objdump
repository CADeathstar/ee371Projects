
lab4code2.elf:     file format elf32-littlenios2
lab4code2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000750 memsz 0x00000750 flags r-x
    LOAD off    0x00001770 vaddr 0x00000770 paddr 0x000008cc align 2**12
         filesz 0x0000015c memsz 0x0000015c flags rw-
    LOAD off    0x00001a28 vaddr 0x00000a28 paddr 0x00000a28 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000018cc  2**0
                  CONTENTS
  2 .text         0000071c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  0000073c  0000073c  0000173c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000015c  00000770  000008cc  00001770  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00000a28  00000a28  00001a28  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000a40  00000a40  000018cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e0  00000000  00000000  000018f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000393e  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015bd  00000000  00000000  0000550e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000016a2  00000000  00000000  00006acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000034c  00000000  00000000  00008170  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fd3  00000000  00000000  000084bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000724  00000000  00000000  0000948f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00009bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000130  00000000  00000000  00009bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000aeb4  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000aeb7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000aeba  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000aebb  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000aece  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000aed7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0000aede  2**0
                  CONTENTS, READONLY
 26 .jdi          00003673  00000000  00000000  0000af17  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005352f  00000000  00000000  0000e58a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000073c l    d  .rodata	00000000 .rodata
00000770 l    d  .rwdata	00000000 .rwdata
00000a28 l    d  .bss	00000000 .bss
00000a40 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4code2_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 impure.c
00000770 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000008b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000070c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000005a4 g     F .text	0000002c alt_main
000008cc g       *ABS*	00000000 __flash_rwdata_start
00000a40 g       *ABS*	00000000 __alt_heap_start
000000a8 g     F .text	0000003c writeBuffer
000005d0 g     F .text	00000038 alt_putstr
000008b4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000a30 g     O .bss	00000004 errno
00000a38 g     O .bss	00000004 alt_argv
000088a8 g       *ABS*	00000000 _gp
00000850 g     O .rwdata	00000030 alt_fd_list
00000678 g     F .text	0000005c altera_avalon_jtag_uart_read
000003d0 g     F .text	00000050 _sbrk_r
000008b8 g     O .rwdata	00000004 alt_max_fd
0000005c g     F .text	0000004c readBuffer
000008a8 g     O .rwdata	00000004 _global_impure_ptr
00000a40 g       *ABS*	00000000 __bss_end
00000468 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000880 g     O .rwdata	00000028 alt_dev_null
00000708 g     F .text	00000004 alt_dcache_flush_all
000001f8 g     F .text	0000001c calloc
000008cc g       *ABS*	00000000 __ram_rwdata_end
000008bc g     O .rwdata	00000008 alt_dev_list
00000770 g       *ABS*	00000000 __ram_rodata_end
00000a40 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
000006d4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000674 g     F .text	00000004 alt_sys_init
00000440 g     F .text	00000028 .hidden __mulsi3
00000770 g       *ABS*	00000000 __ram_rwdata_start
0000073c g       *ABS*	00000000 __ram_rodata_start
00000a40 g       *ABS*	00000000 __alt_stack_base
00000608 g     F .text	0000004c sbrk
00000214 g     F .text	00000060 _calloc_r
00000a28 g       *ABS*	00000000 __bss_start
00000420 g     F .text	00000020 memset
000000e4 g     F .text	00000114 main
00000a34 g     O .bss	00000004 alt_envp
00004000 g       *ABS*	00000000 __alt_heap_limit
00000274 g     F .text	0000015c _malloc_r
0000073c g       *ABS*	00000000 __flash_rodata_start
00000654 g     F .text	00000020 alt_irq_init
000008ac g     O .rwdata	00000004 _impure_ptr
00000a3c g     O .bss	00000004 alt_argc
000008c4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000008cc g       *ABS*	00000000 _edata
00000a40 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000718 g     F .text	00000008 altera_nios2_qsys_irq_init
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000720 g     F .text	0000001c strlen
00000a28 g     O .bss	00000004 __malloc_sbrk_start
00000714 g     F .text	00000004 alt_icache_flush_all
00000a2c g     O .bss	00000004 __malloc_free_list
000004ac g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a22a14 	ori	gp,gp,34984
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10828a14 	ori	r2,r2,2600

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c29014 	ori	r3,r3,2624

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff779c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00004ac0 	call	4ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00005a40 	call	5a4 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff77b0>

0000005c <readBuffer>:
#define data_bus_LEDs (volatile char *) 0x00005040


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
  5c:	20c00017 	ldw	r3,0(r4)
  60:	01401804 	movi	r5,96
  64:	18800003 	ldbu	r2,0(r3)
  68:	11c03fcc 	andi	r7,r2,255
  6c:	39c0201c 	xori	r7,r7,128
  70:	39ffe004 	addi	r7,r7,-128
  74:	39400a26 	beq	r7,r5,a0 <readBuffer+0x44>
  78:	38000a26 	beq	r7,zero,a4 <readBuffer+0x48>
        return '\0';
    } else {
        char c = **pTransmit;
        **pTransmit = 0x60;
  7c:	19400005 	stb	r5,0(r3)

        if((*pTransmit - pBuffer) == (BUFFER_SIZE - 1)) {
  80:	20c00017 	ldw	r3,0(r4)
  84:	197ff3c4 	addi	r5,r3,-49
  88:	2980021e 	bne	r5,r6,94 <readBuffer+0x38>
            *pTransmit = pBuffer;
  8c:	21800015 	stw	r6,0(r4)
  90:	f800283a 	ret
        } else {
            *pTransmit = *pTransmit + sizeof(char);
  94:	18c00044 	addi	r3,r3,1
  98:	20c00015 	stw	r3,0(r4)
  9c:	f800283a 	ret


char readBuffer(char** pTransmit, char* pBufferHead, char* pBuffer) {
    //printf("%c %c %i\n", **pTransmit, 0xC8, **pTransmit == 0xC8);
    if(**pTransmit == 0x60 || **pTransmit == '\0') {
        return '\0';
  a0:	0005883a 	mov	r2,zero
        } else {
            *pTransmit = *pTransmit + sizeof(char);
        }
        return c;
    }
}
  a4:	f800283a 	ret

000000a8 <writeBuffer>:

void writeBuffer(char c, char** pBufferHead, char** pBuffer) {
    if(!(**pBufferHead == 0x60 || **pBufferHead == '\0')) return;
  a8:	28800017 	ldw	r2,0(r5)
  ac:	01c01804 	movi	r7,96
  b0:	10c00007 	ldb	r3,0(r2)
  b4:	19c00126 	beq	r3,r7,bc <writeBuffer+0x14>
  b8:	1800091e 	bne	r3,zero,e0 <writeBuffer+0x38>

    *(*pBufferHead) = c;
  bc:	11000005 	stb	r4,0(r2)
    if((*pBufferHead - *pBuffer) == (BUFFER_SIZE - 1)) {
  c0:	28800017 	ldw	r2,0(r5)
  c4:	30c00017 	ldw	r3,0(r6)
  c8:	113ff3c4 	addi	r4,r2,-49
  cc:	20c0021e 	bne	r4,r3,d8 <writeBuffer+0x30>
        *pBufferHead = *pBuffer;
  d0:	28c00015 	stw	r3,0(r5)
  d4:	f800283a 	ret
    } else {
        *pBufferHead = *pBufferHead + sizeof(char);
  d8:	10800044 	addi	r2,r2,1
  dc:	28800015 	stw	r2,0(r5)
  e0:	f800283a 	ret

000000e4 <main>:
}


int main()
{
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
  e4:	01000034 	movhi	r4,0

}


int main()
{
  e8:	defff904 	addi	sp,sp,-28
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
  ec:	2101cf04 	addi	r4,r4,1852

}


int main()
{
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	dc400415 	stw	r17,16(sp)
  f8:	dc000315 	stw	r16,12(sp)
  fc:	dc800515 	stw	r18,20(sp)
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
 100:	00005d00 	call	5d0 <alt_putstr>
	int read = 1;
	int write = 1;
	//int load_toggle = 1;

	char *pBuffer = calloc(BUFFER_SIZE, sizeof(char));
 104:	01000c84 	movi	r4,50
 108:	01400044 	movi	r5,1
 10c:	00001f80 	call	1f8 <calloc>
 110:	d8800215 	stw	r2,8(sp)
	char* pBufferHead = pBuffer;
 114:	d8800115 	stw	r2,4(sp)
	char* pTransmit = pBuffer;
 118:	d8800015 	stw	r2,0(sp)



	*load = 0;
 11c:	04140804 	movi	r16,20512
 120:	80000005 	stb	zero,0(r16)
	*transmit_enable = 0;
 124:	04540004 	movi	r17,20480
 128:	88000005 	stb	zero,0(r17)
	*data_bus_output = 0x00;
 12c:	00940c04 	movi	r2,20528
 130:	10000005 	stb	zero,0(r2)
	*data_bus_LEDs = 0b01010101;
 134:	00c01544 	movi	r3,85
 138:	00941004 	movi	r2,20544
 13c:	10c00005 	stb	r3,0(r2)


int main()
{
	alt_putstr("EE 371 Lab 4 - Adding Communication\n");
	int read = 1;
 140:	04800044 	movi	r18,1
	*data_bus_output = 0x00;
	*data_bus_LEDs = 0b01010101;

  /* Event loop never exits. */
  while (1) {
	  writeBuffer(alt_getchar(), &pBufferHead, &pBuffer);
 144:	00004680 	call	468 <alt_getchar>
 148:	11003fcc 	andi	r4,r2,255
 14c:	2100201c 	xori	r4,r4,128
 150:	213fe004 	addi	r4,r4,-128
 154:	d9400104 	addi	r5,sp,4
 158:	d9800204 	addi	r6,sp,8
 15c:	00000a80 	call	a8 <writeBuffer>

	  //transmit
	  char c = readBuffer(&pTransmit, pBufferHead, pBuffer);
 160:	d9400117 	ldw	r5,4(sp)
 164:	d9800217 	ldw	r6,8(sp)
 168:	d809883a 	mov	r4,sp
 16c:	000005c0 	call	5c <readBuffer>
	  if(load) {
		  *load = 0;
	  }

	  if(c != '\0' && write) {
 170:	10c03fcc 	andi	r3,r2,255
 174:	18c0201c 	xori	r3,r3,128
	  writeBuffer(alt_getchar(), &pBufferHead, &pBuffer);

	  //transmit
	  char c = readBuffer(&pTransmit, pBufferHead, pBuffer);
	  if(load) {
		  *load = 0;
 178:	80000005 	stb	zero,0(r16)
	  }

	  if(c != '\0' && write) {
 17c:	18ffe004 	addi	r3,r3,-128
 180:	18000526 	beq	r3,zero,198 <main+0xb4>
		  write = 0;
		  *transmit_enable = 1;
 184:	00c00044 	movi	r3,1
 188:	88c00005 	stb	r3,0(r17)
		  *data_bus_output = c;
 18c:	01140c04 	movi	r4,20528
 190:	20800005 	stb	r2,0(r4)
		  *load = 1;
 194:	80c00005 	stb	r3,0(r16)
	  }

	  if(character_sent) {
		  write = 1;
		  *transmit_enable = 0;
 198:	88000005 	stb	zero,0(r17)
	  }

	  //receive
	  if(*character_received & read) {
 19c:	00d41404 	movi	r3,20560
 1a0:	18800003 	ldbu	r2,0(r3)
 1a4:	10803fcc 	andi	r2,r2,255
 1a8:	1080201c 	xori	r2,r2,128
 1ac:	10bfe004 	addi	r2,r2,-128
 1b0:	9084703a 	and	r2,r18,r2
 1b4:	10000a26 	beq	r2,zero,1e0 <main+0xfc>
		  read = 0;
		  int parity = *data_bus_input & 0x01;
 1b8:	00941804 	movi	r2,20576
 1bc:	10c00003 	ldbu	r3,0(r2)

		  alt_putstr((*data_bus_input) >> 1);
 1c0:	11000003 	ldbu	r4,0(r2)
		  *transmit_enable = 0;
	  }

	  //receive
	  if(*character_received & read) {
		  read = 0;
 1c4:	0025883a 	mov	r18,zero
		  int parity = *data_bus_input & 0x01;

		  alt_putstr((*data_bus_input) >> 1);
 1c8:	21003fcc 	andi	r4,r4,255
 1cc:	2100201c 	xori	r4,r4,128
 1d0:	213fe004 	addi	r4,r4,-128
 1d4:	2009d07a 	srai	r4,r4,1
 1d8:	00005d00 	call	5d0 <alt_putstr>
 1dc:	003fd906 	br	144 <_gp+0xffff789c>
	  } else if(!(*character_received)) {
 1e0:	18800003 	ldbu	r2,0(r3)
 1e4:	10803fcc 	andi	r2,r2,255
 1e8:	1080201c 	xori	r2,r2,128
 1ec:	10bfe004 	addi	r2,r2,-128
 1f0:	103fd41e 	bne	r2,zero,144 <_gp+0xffff789c>
 1f4:	003fd206 	br	140 <_gp+0xffff7898>

000001f8 <calloc>:
 1f8:	00c00034 	movhi	r3,0
 1fc:	18c22b04 	addi	r3,r3,2220
 200:	2005883a 	mov	r2,r4
 204:	19000017 	ldw	r4,0(r3)
 208:	280d883a 	mov	r6,r5
 20c:	100b883a 	mov	r5,r2
 210:	00002141 	jmpi	214 <_calloc_r>

00000214 <_calloc_r>:
 214:	defffd04 	addi	sp,sp,-12
 218:	dc000015 	stw	r16,0(sp)
 21c:	2021883a 	mov	r16,r4
 220:	2809883a 	mov	r4,r5
 224:	300b883a 	mov	r5,r6
 228:	dfc00215 	stw	ra,8(sp)
 22c:	dc400115 	stw	r17,4(sp)
 230:	00004400 	call	440 <__mulsi3>
 234:	8009883a 	mov	r4,r16
 238:	100b883a 	mov	r5,r2
 23c:	1023883a 	mov	r17,r2
 240:	00002740 	call	274 <_malloc_r>
 244:	1021883a 	mov	r16,r2
 248:	10000426 	beq	r2,zero,25c <_calloc_r+0x48>
 24c:	1009883a 	mov	r4,r2
 250:	000b883a 	mov	r5,zero
 254:	880d883a 	mov	r6,r17
 258:	00004200 	call	420 <memset>
 25c:	8005883a 	mov	r2,r16
 260:	dfc00217 	ldw	ra,8(sp)
 264:	dc400117 	ldw	r17,4(sp)
 268:	dc000017 	ldw	r16,0(sp)
 26c:	dec00304 	addi	sp,sp,12
 270:	f800283a 	ret

00000274 <_malloc_r>:
 274:	defffb04 	addi	sp,sp,-20
 278:	00bfff04 	movi	r2,-4
 27c:	dc000015 	stw	r16,0(sp)
 280:	2c0000c4 	addi	r16,r5,3
 284:	80a0703a 	and	r16,r16,r2
 288:	dc800215 	stw	r18,8(sp)
 28c:	dfc00415 	stw	ra,16(sp)
 290:	dcc00315 	stw	r19,12(sp)
 294:	dc400115 	stw	r17,4(sp)
 298:	84000204 	addi	r16,r16,8
 29c:	00800304 	movi	r2,12
 2a0:	2025883a 	mov	r18,r4
 2a4:	8080022e 	bgeu	r16,r2,2b0 <_malloc_r+0x3c>
 2a8:	1021883a 	mov	r16,r2
 2ac:	00000506 	br	2c4 <_malloc_r+0x50>
 2b0:	8000040e 	bge	r16,zero,2c4 <_malloc_r+0x50>
 2b4:	00800304 	movi	r2,12
 2b8:	90800015 	stw	r2,0(r18)
 2bc:	0005883a 	mov	r2,zero
 2c0:	00003c06 	br	3b4 <_malloc_r+0x140>
 2c4:	817ffb36 	bltu	r16,r5,2b4 <_gp+0xffff7a0c>
 2c8:	01000034 	movhi	r4,0
 2cc:	21028b04 	addi	r4,r4,2604
 2d0:	20800017 	ldw	r2,0(r4)
 2d4:	1007883a 	mov	r3,r2
 2d8:	18000926 	beq	r3,zero,300 <_malloc_r+0x8c>
 2dc:	19400017 	ldw	r5,0(r3)
 2e0:	2c0bc83a 	sub	r5,r5,r16
 2e4:	28001716 	blt	r5,zero,344 <_malloc_r+0xd0>
 2e8:	018002c4 	movi	r6,11
 2ec:	31400d2e 	bgeu	r6,r5,324 <_malloc_r+0xb0>
 2f0:	19400015 	stw	r5,0(r3)
 2f4:	1945883a 	add	r2,r3,r5
 2f8:	14000015 	stw	r16,0(r2)
 2fc:	1000231e 	bne	r2,zero,38c <_malloc_r+0x118>
 300:	04400034 	movhi	r17,0
 304:	8c428a04 	addi	r17,r17,2600
 308:	88800017 	ldw	r2,0(r17)
 30c:	1000101e 	bne	r2,zero,350 <_malloc_r+0xdc>
 310:	9009883a 	mov	r4,r18
 314:	000b883a 	mov	r5,zero
 318:	00003d00 	call	3d0 <_sbrk_r>
 31c:	88800015 	stw	r2,0(r17)
 320:	00000b06 	br	350 <_malloc_r+0xdc>
 324:	10c0031e 	bne	r2,r3,334 <_malloc_r+0xc0>
 328:	10c00117 	ldw	r3,4(r2)
 32c:	20c00015 	stw	r3,0(r4)
 330:	00001606 	br	38c <_malloc_r+0x118>
 334:	19000117 	ldw	r4,4(r3)
 338:	11000115 	stw	r4,4(r2)
 33c:	1805883a 	mov	r2,r3
 340:	00001206 	br	38c <_malloc_r+0x118>
 344:	1805883a 	mov	r2,r3
 348:	18c00117 	ldw	r3,4(r3)
 34c:	003fe206 	br	2d8 <_gp+0xffff7a30>
 350:	9009883a 	mov	r4,r18
 354:	800b883a 	mov	r5,r16
 358:	00003d00 	call	3d0 <_sbrk_r>
 35c:	04ffffc4 	movi	r19,-1
 360:	14ffd426 	beq	r2,r19,2b4 <_gp+0xffff7a0c>
 364:	144000c4 	addi	r17,r2,3
 368:	00ffff04 	movi	r3,-4
 36c:	88e2703a 	and	r17,r17,r3
 370:	88800526 	beq	r17,r2,388 <_malloc_r+0x114>
 374:	9009883a 	mov	r4,r18
 378:	888bc83a 	sub	r5,r17,r2
 37c:	00003d00 	call	3d0 <_sbrk_r>
 380:	14ffcc26 	beq	r2,r19,2b4 <_gp+0xffff7a0c>
 384:	8805883a 	mov	r2,r17
 388:	14000015 	stw	r16,0(r2)
 38c:	114002c4 	addi	r5,r2,11
 390:	00fffe04 	movi	r3,-8
 394:	11000104 	addi	r4,r2,4
 398:	28c6703a 	and	r3,r5,r3
 39c:	1909c83a 	sub	r4,r3,r4
 3a0:	20000326 	beq	r4,zero,3b0 <_malloc_r+0x13c>
 3a4:	110b883a 	add	r5,r2,r4
 3a8:	0109c83a 	sub	r4,zero,r4
 3ac:	29000015 	stw	r4,0(r5)
 3b0:	1805883a 	mov	r2,r3
 3b4:	dfc00417 	ldw	ra,16(sp)
 3b8:	dcc00317 	ldw	r19,12(sp)
 3bc:	dc800217 	ldw	r18,8(sp)
 3c0:	dc400117 	ldw	r17,4(sp)
 3c4:	dc000017 	ldw	r16,0(sp)
 3c8:	dec00504 	addi	sp,sp,20
 3cc:	f800283a 	ret

000003d0 <_sbrk_r>:
 3d0:	defffd04 	addi	sp,sp,-12
 3d4:	dc000015 	stw	r16,0(sp)
 3d8:	04000034 	movhi	r16,0
 3dc:	dc400115 	stw	r17,4(sp)
 3e0:	84028c04 	addi	r16,r16,2608
 3e4:	2023883a 	mov	r17,r4
 3e8:	2809883a 	mov	r4,r5
 3ec:	dfc00215 	stw	ra,8(sp)
 3f0:	80000015 	stw	zero,0(r16)
 3f4:	00006080 	call	608 <sbrk>
 3f8:	00ffffc4 	movi	r3,-1
 3fc:	10c0031e 	bne	r2,r3,40c <_sbrk_r+0x3c>
 400:	80c00017 	ldw	r3,0(r16)
 404:	18000126 	beq	r3,zero,40c <_sbrk_r+0x3c>
 408:	88c00015 	stw	r3,0(r17)
 40c:	dfc00217 	ldw	ra,8(sp)
 410:	dc400117 	ldw	r17,4(sp)
 414:	dc000017 	ldw	r16,0(sp)
 418:	dec00304 	addi	sp,sp,12
 41c:	f800283a 	ret

00000420 <memset>:
 420:	2005883a 	mov	r2,r4
 424:	2007883a 	mov	r3,r4
 428:	218d883a 	add	r6,r4,r6
 42c:	19800326 	beq	r3,r6,43c <memset+0x1c>
 430:	19400005 	stb	r5,0(r3)
 434:	18c00044 	addi	r3,r3,1
 438:	003ffc06 	br	42c <_gp+0xffff7b84>
 43c:	f800283a 	ret

00000440 <__mulsi3>:
 440:	0005883a 	mov	r2,zero
 444:	20000726 	beq	r4,zero,464 <__mulsi3+0x24>
 448:	20c0004c 	andi	r3,r4,1
 44c:	2008d07a 	srli	r4,r4,1
 450:	18000126 	beq	r3,zero,458 <__mulsi3+0x18>
 454:	1145883a 	add	r2,r2,r5
 458:	294b883a 	add	r5,r5,r5
 45c:	203ffa1e 	bne	r4,zero,448 <_gp+0xffff7ba0>
 460:	f800283a 	ret
 464:	f800283a 	ret

00000468 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 468:	00800034 	movhi	r2,0
 46c:	10821404 	addi	r2,r2,2128
 470:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 474:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 478:	01000034 	movhi	r4,0
 47c:	21022d04 	addi	r4,r4,2228
 480:	d80b883a 	mov	r5,sp
 484:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 488:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 48c:	00006780 	call	678 <altera_avalon_jtag_uart_read>
 490:	0080020e 	bge	zero,r2,49c <alt_getchar+0x34>
        return -1;
    }
    return c;
 494:	d8800007 	ldb	r2,0(sp)
 498:	00000106 	br	4a0 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 49c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 4a0:	dfc00117 	ldw	ra,4(sp)
 4a4:	dec00204 	addi	sp,sp,8
 4a8:	f800283a 	ret

000004ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4ac:	deffff04 	addi	sp,sp,-4
 4b0:	01000034 	movhi	r4,0
 4b4:	01400034 	movhi	r5,0
 4b8:	dfc00015 	stw	ra,0(sp)
 4bc:	2101dc04 	addi	r4,r4,1904
 4c0:	29423304 	addi	r5,r5,2252

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4c4:	2140061e 	bne	r4,r5,4e0 <alt_load+0x34>
 4c8:	01000034 	movhi	r4,0
 4cc:	01400034 	movhi	r5,0
 4d0:	21000804 	addi	r4,r4,32
 4d4:	29400804 	addi	r5,r5,32
 4d8:	2140141e 	bne	r4,r5,52c <alt_load+0x80>
 4dc:	00000d06 	br	514 <alt_load+0x68>
 4e0:	00c00034 	movhi	r3,0
 4e4:	18c23304 	addi	r3,r3,2252
 4e8:	00bfff04 	movi	r2,-4
 4ec:	1907c83a 	sub	r3,r3,r4
 4f0:	1886703a 	and	r3,r3,r2
 4f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4f8:	10fff326 	beq	r2,r3,4c8 <_gp+0xffff7c20>
 4fc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 500:	39c00017 	ldw	r7,0(r7)
 504:	110d883a 	add	r6,r2,r4
 508:	10800104 	addi	r2,r2,4
 50c:	31c00015 	stw	r7,0(r6)
 510:	003ff906 	br	4f8 <_gp+0xffff7c50>
 514:	01000034 	movhi	r4,0
 518:	01400034 	movhi	r5,0
 51c:	2101cf04 	addi	r4,r4,1852
 520:	2941cf04 	addi	r5,r5,1852

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 524:	2140121e 	bne	r4,r5,570 <alt_load+0xc4>
 528:	00000d06 	br	560 <alt_load+0xb4>
 52c:	00c00034 	movhi	r3,0
 530:	18c00804 	addi	r3,r3,32
 534:	00bfff04 	movi	r2,-4
 538:	1907c83a 	sub	r3,r3,r4
 53c:	1886703a 	and	r3,r3,r2
 540:	0005883a 	mov	r2,zero
  {
    while( to != end )
 544:	10fff326 	beq	r2,r3,514 <_gp+0xffff7c6c>
 548:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 54c:	39c00017 	ldw	r7,0(r7)
 550:	110d883a 	add	r6,r2,r4
 554:	10800104 	addi	r2,r2,4
 558:	31c00015 	stw	r7,0(r6)
 55c:	003ff906 	br	544 <_gp+0xffff7c9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 560:	00007080 	call	708 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 564:	dfc00017 	ldw	ra,0(sp)
 568:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 56c:	00007141 	jmpi	714 <alt_icache_flush_all>
 570:	00c00034 	movhi	r3,0
 574:	18c1dc04 	addi	r3,r3,1904
 578:	00bfff04 	movi	r2,-4
 57c:	1907c83a 	sub	r3,r3,r4
 580:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 584:	0005883a 	mov	r2,zero
  {
    while( to != end )
 588:	10fff526 	beq	r2,r3,560 <_gp+0xffff7cb8>
 58c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 590:	39c00017 	ldw	r7,0(r7)
 594:	110d883a 	add	r6,r2,r4
 598:	10800104 	addi	r2,r2,4
 59c:	31c00015 	stw	r7,0(r6)
 5a0:	003ff906 	br	588 <_gp+0xffff7ce0>

000005a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 5a4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 5a8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 5ac:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 5b0:	00006540 	call	654 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 5b4:	00006740 	call	674 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 5b8:	d1206517 	ldw	r4,-32364(gp)
 5bc:	d1606417 	ldw	r5,-32368(gp)
 5c0:	d1a06317 	ldw	r6,-32372(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 5c4:	dfc00017 	ldw	ra,0(sp)
 5c8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 5cc:	00000e41 	jmpi	e4 <main>

000005d0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 5d0:	defffe04 	addi	sp,sp,-8
 5d4:	dc000015 	stw	r16,0(sp)
 5d8:	dfc00115 	stw	ra,4(sp)
 5dc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 5e0:	00007200 	call	720 <strlen>
 5e4:	01000034 	movhi	r4,0
 5e8:	21022d04 	addi	r4,r4,2228
 5ec:	800b883a 	mov	r5,r16
 5f0:	100d883a 	mov	r6,r2
 5f4:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 5f8:	dfc00117 	ldw	ra,4(sp)
 5fc:	dc000017 	ldw	r16,0(sp)
 600:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 604:	00006d41 	jmpi	6d4 <altera_avalon_jtag_uart_write>

00000608 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 608:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60c:	00bfff84 	movi	r2,-2
 610:	2884703a 	and	r2,r5,r2
 614:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 618:	d0a00217 	ldw	r2,-32760(gp)
 61c:	00ffff04 	movi	r3,-4
 620:	108000c4 	addi	r2,r2,3
 624:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 628:	00c00034 	movhi	r3,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 62c:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 630:	1109883a 	add	r4,r2,r4
 634:	18d00004 	addi	r3,r3,16384
 638:	1900032e 	bgeu	r3,r4,648 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 63c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 640:	00bfffc4 	movi	r2,-1
 644:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 648:	d1200215 	stw	r4,-32760(gp)
 64c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 650:	f800283a 	ret

00000654 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 654:	deffff04 	addi	sp,sp,-4
 658:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 65c:	00007180 	call	718 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 660:	00800044 	movi	r2,1
 664:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 668:	dfc00017 	ldw	ra,0(sp)
 66c:	dec00104 	addi	sp,sp,4
 670:	f800283a 	ret

00000674 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 674:	f800283a 	ret

00000678 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 678:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 67c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 680:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 684:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 688:	11800b2e 	bgeu	r2,r6,6b8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 68c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 690:	1a60000c 	andi	r9,r3,32768
 694:	48000326 	beq	r9,zero,6a4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 698:	10c00005 	stb	r3,0(r2)
 69c:	10800044 	addi	r2,r2,1
 6a0:	003ff906 	br	688 <_gp+0xffff7de0>
    else if (ptr != buffer)
 6a4:	11400226 	beq	r2,r5,6b0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 6a8:	1145c83a 	sub	r2,r2,r5
 6ac:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 6b0:	403ff526 	beq	r8,zero,688 <_gp+0xffff7de0>
 6b4:	00000106 	br	6bc <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 6b8:	117ffb1e 	bne	r2,r5,6a8 <_gp+0xffff7e00>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 6bc:	39d0000c 	andi	r7,r7,16384
 6c0:	3800021e 	bne	r7,zero,6cc <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 6c4:	00bffec4 	movi	r2,-5
 6c8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 6cc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 6d0:	f800283a 	ret

000006d4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 6d4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 6d8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 6dc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 6e0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 6e4:	2980072e 	bgeu	r5,r6,704 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 6e8:	38c00037 	ldwio	r3,0(r7)
 6ec:	18ffffec 	andhi	r3,r3,65535
 6f0:	183ffc26 	beq	r3,zero,6e4 <_gp+0xffff7e3c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 6f4:	28c00007 	ldb	r3,0(r5)
 6f8:	20c00035 	stwio	r3,0(r4)
 6fc:	29400044 	addi	r5,r5,1
 700:	003ff806 	br	6e4 <_gp+0xffff7e3c>

  return count;
}
 704:	f800283a 	ret

00000708 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 708:	f800283a 	ret

0000070c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 70c:	3005883a 	mov	r2,r6
 710:	f800283a 	ret

00000714 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 714:	f800283a 	ret

00000718 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 718:	000170fa 	wrctl	ienable,zero
 71c:	f800283a 	ret

00000720 <strlen>:
 720:	2005883a 	mov	r2,r4
 724:	10c00007 	ldb	r3,0(r2)
 728:	18000226 	beq	r3,zero,734 <strlen+0x14>
 72c:	10800044 	addi	r2,r2,1
 730:	003ffc06 	br	724 <_gp+0xffff7e7c>
 734:	1105c83a 	sub	r2,r2,r4
 738:	f800283a 	ret
