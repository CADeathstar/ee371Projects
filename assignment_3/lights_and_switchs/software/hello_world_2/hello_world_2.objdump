
hello_world_2.elf:     file format elf32-littlenios2
hello_world_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000ca0 memsz 0x00000ca0 flags r-x
    LOAD off    0x00001cc0 vaddr 0x00000cc0 paddr 0x00000e1c align 2**12
         filesz 0x0000015c memsz 0x0000015c flags rw-
    LOAD off    0x00001f78 vaddr 0x00000f78 paddr 0x00000f78 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001e1c  2**0
                  CONTENTS
  2 .text         00000c64  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00000c84  00000c84  00001c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000015c  00000cc0  00000e1c  00001cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000f78  00000f78  00001f78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000f88  00000f88  00001e1c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000308  00000000  00000000  00001e40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003efd  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000161d  00000000  00000000  00006045  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001811  00000000  00000000  00007662  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000420  00000000  00000000  00008e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001144  00000000  00000000  00009294  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000121b  00000000  00000000  0000a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000b5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f0  00000000  00000000  0000b608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ca23  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000ca26  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000ca29  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000ca2a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000ca2b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000ca34  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000ca3d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0000ca46  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0000ca4a  2**0
                  CONTENTS, READONLY
 26 .jdi          00003495  00000000  00000000  0000ca76  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00034a44  00000000  00000000  0000ff0b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000c84 l    d  .rodata	00000000 .rodata
00000cc0 l    d  .rwdata	00000000 .rwdata
00000f78 l    d  .bss	00000000 .bss
00000f88 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_2_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000013c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000cc0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000858 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000c70 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000ae8 g     F .text	0000002c alt_main
00000e1c g       *ABS*	00000000 __flash_rwdata_start
000000f0 g     F .text	0000004c printf
00000b14 g     F .text	00000038 alt_putstr
00000e00 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000f78 g     O .bss	00000004 errno
00000f80 g     O .bss	00000004 alt_argv
00008df8 g       *ABS*	00000000 _gp
00000da0 g     O .rwdata	00000030 alt_fd_list
00000bdc g     F .text	0000005c altera_avalon_jtag_uart_read
000000b4 g     F .text	0000003c _printf_r
00000974 g     F .text	00000008 .hidden __udivsi3
00000e04 g     O .rwdata	00000004 alt_max_fd
00000df8 g     O .rwdata	00000004 _global_impure_ptr
00000f88 g       *ABS*	00000000 __bss_end
000009ac g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000dd0 g     O .rwdata	00000028 alt_dev_null
00000c6c g     F .text	00000004 alt_dcache_flush_all
00000e1c g       *ABS*	00000000 __ram_rwdata_end
00000e08 g     O .rwdata	00000008 alt_dev_list
00000b4c g     F .text	0000006c write
00000cc0 g       *ABS*	00000000 __ram_rodata_end
0000097c g     F .text	00000008 .hidden __umodsi3
00000f88 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000c38 g     F .text	00000034 altera_avalon_jtag_uart_write
000001a8 g     F .text	0000056c ___vfprintf_internal_r
00000020 g     F .text	0000003c _start
00000bd8 g     F .text	00000004 alt_sys_init
00000984 g     F .text	00000028 .hidden __mulsi3
00000cc0 g       *ABS*	00000000 __ram_rwdata_start
00000c84 g       *ABS*	00000000 __ram_rodata_start
00000f88 g       *ABS*	00000000 __alt_stack_base
00000738 g     F .text	000000ac __sfvwrite_small_dev
00000f78 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000058 main
00000f7c g     O .bss	00000004 alt_envp
00000e18 g     O .rwdata	00000004 alt_errno
000008c4 g     F .text	00000054 .hidden __divsi3
00000c84 g       *ABS*	00000000 __flash_rodata_start
00000bb8 g     F .text	00000020 alt_irq_init
00000800 g     F .text	00000058 _write_r
00000dfc g     O .rwdata	00000004 _impure_ptr
00000f84 g     O .bss	00000004 alt_argc
00000e10 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000e1c g       *ABS*	00000000 _edata
00000f88 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000c7c g     F .text	00000008 altera_nios2_qsys_irq_init
00000918 g     F .text	0000005c .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000007e4 g     F .text	0000001c strlen
00000c78 g     F .text	00000004 alt_icache_flush_all
00000714 g     F .text	00000024 __vfprintf_internal
000009f0 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a37e14 	ori	gp,gp,36344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1083de14 	ori	r2,r2,3960

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c3e214 	ori	r3,r3,3976

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff724c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00009f00 	call	9f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	0000ae80 	call	ae8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7260>

0000005c <main>:
#define switches (volatile char *) 0x0002000
#define leds (volatile char *) 0x0002010

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0

#define switches (volatile char *) 0x0002000
#define leds (volatile char *) 0x0002010

int main()
{ 
  60:	defffe04 	addi	sp,sp,-8
  alt_putstr("Hello from Nios II!\n");
  64:	21032104 	addi	r4,r4,3204

#define switches (volatile char *) 0x0002000
#define leds (volatile char *) 0x0002010

int main()
{ 
  68:	dfc00115 	stw	ra,4(sp)
  6c:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
  70:	0000b140 	call	b14 <alt_putstr>

  printf("Enter 'G' to continue: ");
  74:	01000034 	movhi	r4,0
  78:	21032704 	addi	r4,r4,3228
  7c:	00000f00 	call	f0 <printf>
  char c = alt_getchar();
  80:	00009ac0 	call	9ac <alt_getchar>
  while ('G' != c)
  84:	040011c4 	movi	r16,71
  88:	10803fcc 	andi	r2,r2,255
  8c:	1080201c 	xori	r2,r2,128
  90:	10bfe004 	addi	r2,r2,-128
  94:	14000226 	beq	r2,r16,a0 <main+0x44>
	  c=alt_getchar();
  98:	00009ac0 	call	9ac <alt_getchar>
  9c:	003ffa06 	br	88 <_gp+0xffff7290>

  while (1) {
	  *leds = *switches;
  a0:	01080004 	movi	r4,8192
  a4:	00880404 	movi	r2,8208
  a8:	20c00003 	ldbu	r3,0(r4)
  ac:	10c00005 	stb	r3,0(r2)
  }
  b0:	003ffd06 	br	a8 <_gp+0xffff72b0>

000000b4 <_printf_r>:
  b4:	defffd04 	addi	sp,sp,-12
  b8:	dfc00015 	stw	ra,0(sp)
  bc:	d9800115 	stw	r6,4(sp)
  c0:	d9c00215 	stw	r7,8(sp)
  c4:	20c00217 	ldw	r3,8(r4)
  c8:	280d883a 	mov	r6,r5
  cc:	01400034 	movhi	r5,0
  d0:	2941ce04 	addi	r5,r5,1848
  d4:	19400115 	stw	r5,4(r3)
  d8:	21400217 	ldw	r5,8(r4)
  dc:	d9c00104 	addi	r7,sp,4
  e0:	00001a80 	call	1a8 <___vfprintf_internal_r>
  e4:	dfc00017 	ldw	ra,0(sp)
  e8:	dec00304 	addi	sp,sp,12
  ec:	f800283a 	ret

000000f0 <printf>:
  f0:	defffc04 	addi	sp,sp,-16
  f4:	dfc00015 	stw	ra,0(sp)
  f8:	d9400115 	stw	r5,4(sp)
  fc:	d9800215 	stw	r6,8(sp)
 100:	d9c00315 	stw	r7,12(sp)
 104:	00800034 	movhi	r2,0
 108:	10837f04 	addi	r2,r2,3580
 10c:	10800017 	ldw	r2,0(r2)
 110:	200b883a 	mov	r5,r4
 114:	01000034 	movhi	r4,0
 118:	10c00217 	ldw	r3,8(r2)
 11c:	2101ce04 	addi	r4,r4,1848
 120:	d9800104 	addi	r6,sp,4
 124:	19000115 	stw	r4,4(r3)
 128:	11000217 	ldw	r4,8(r2)
 12c:	00007140 	call	714 <__vfprintf_internal>
 130:	dfc00017 	ldw	ra,0(sp)
 134:	dec00404 	addi	sp,sp,16
 138:	f800283a 	ret

0000013c <print_repeat>:
 13c:	defffb04 	addi	sp,sp,-20
 140:	dc800315 	stw	r18,12(sp)
 144:	dc400215 	stw	r17,8(sp)
 148:	dc000115 	stw	r16,4(sp)
 14c:	dfc00415 	stw	ra,16(sp)
 150:	2025883a 	mov	r18,r4
 154:	2823883a 	mov	r17,r5
 158:	d9800005 	stb	r6,0(sp)
 15c:	3821883a 	mov	r16,r7
 160:	04000a0e 	bge	zero,r16,18c <print_repeat+0x50>
 164:	88800117 	ldw	r2,4(r17)
 168:	9009883a 	mov	r4,r18
 16c:	880b883a 	mov	r5,r17
 170:	d80d883a 	mov	r6,sp
 174:	01c00044 	movi	r7,1
 178:	103ee83a 	callr	r2
 17c:	843fffc4 	addi	r16,r16,-1
 180:	103ff726 	beq	r2,zero,160 <_gp+0xffff7368>
 184:	00bfffc4 	movi	r2,-1
 188:	00000106 	br	190 <print_repeat+0x54>
 18c:	0005883a 	mov	r2,zero
 190:	dfc00417 	ldw	ra,16(sp)
 194:	dc800317 	ldw	r18,12(sp)
 198:	dc400217 	ldw	r17,8(sp)
 19c:	dc000117 	ldw	r16,4(sp)
 1a0:	dec00504 	addi	sp,sp,20
 1a4:	f800283a 	ret

000001a8 <___vfprintf_internal_r>:
 1a8:	deffe304 	addi	sp,sp,-116
 1ac:	d8c00804 	addi	r3,sp,32
 1b0:	df001b15 	stw	fp,108(sp)
 1b4:	ddc01a15 	stw	r23,104(sp)
 1b8:	dd801915 	stw	r22,100(sp)
 1bc:	dd401815 	stw	r21,96(sp)
 1c0:	dd001715 	stw	r20,92(sp)
 1c4:	dcc01615 	stw	r19,88(sp)
 1c8:	dc801515 	stw	r18,84(sp)
 1cc:	dc401415 	stw	r17,80(sp)
 1d0:	dc001315 	stw	r16,76(sp)
 1d4:	dfc01c15 	stw	ra,112(sp)
 1d8:	2029883a 	mov	r20,r4
 1dc:	2823883a 	mov	r17,r5
 1e0:	3839883a 	mov	fp,r7
 1e4:	d9800f15 	stw	r6,60(sp)
 1e8:	0021883a 	mov	r16,zero
 1ec:	d8000e15 	stw	zero,56(sp)
 1f0:	002f883a 	mov	r23,zero
 1f4:	002b883a 	mov	r21,zero
 1f8:	0027883a 	mov	r19,zero
 1fc:	0025883a 	mov	r18,zero
 200:	d8000c15 	stw	zero,48(sp)
 204:	d8000b15 	stw	zero,44(sp)
 208:	002d883a 	mov	r22,zero
 20c:	d8c00915 	stw	r3,36(sp)
 210:	d8c00f17 	ldw	r3,60(sp)
 214:	19000003 	ldbu	r4,0(r3)
 218:	20803fcc 	andi	r2,r4,255
 21c:	1080201c 	xori	r2,r2,128
 220:	10bfe004 	addi	r2,r2,-128
 224:	10012e26 	beq	r2,zero,6e0 <___vfprintf_internal_r+0x538>
 228:	01400044 	movi	r5,1
 22c:	b1401426 	beq	r22,r5,280 <___vfprintf_internal_r+0xd8>
 230:	2d800216 	blt	r5,r22,23c <___vfprintf_internal_r+0x94>
 234:	b0000626 	beq	r22,zero,250 <___vfprintf_internal_r+0xa8>
 238:	00012506 	br	6d0 <___vfprintf_internal_r+0x528>
 23c:	01400084 	movi	r5,2
 240:	b1401d26 	beq	r22,r5,2b8 <___vfprintf_internal_r+0x110>
 244:	014000c4 	movi	r5,3
 248:	b1402b26 	beq	r22,r5,2f8 <___vfprintf_internal_r+0x150>
 24c:	00012006 	br	6d0 <___vfprintf_internal_r+0x528>
 250:	01400944 	movi	r5,37
 254:	11410d26 	beq	r2,r5,68c <___vfprintf_internal_r+0x4e4>
 258:	88800117 	ldw	r2,4(r17)
 25c:	d9000005 	stb	r4,0(sp)
 260:	880b883a 	mov	r5,r17
 264:	a009883a 	mov	r4,r20
 268:	d80d883a 	mov	r6,sp
 26c:	01c00044 	movi	r7,1
 270:	103ee83a 	callr	r2
 274:	1000e81e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 278:	84000044 	addi	r16,r16,1
 27c:	00011406 	br	6d0 <___vfprintf_internal_r+0x528>
 280:	01400c04 	movi	r5,48
 284:	11410a26 	beq	r2,r5,6b0 <___vfprintf_internal_r+0x508>
 288:	01400944 	movi	r5,37
 28c:	11400a1e 	bne	r2,r5,2b8 <___vfprintf_internal_r+0x110>
 290:	d8800005 	stb	r2,0(sp)
 294:	88800117 	ldw	r2,4(r17)
 298:	a009883a 	mov	r4,r20
 29c:	880b883a 	mov	r5,r17
 2a0:	d80d883a 	mov	r6,sp
 2a4:	b00f883a 	mov	r7,r22
 2a8:	103ee83a 	callr	r2
 2ac:	1000da1e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 2b0:	84000044 	addi	r16,r16,1
 2b4:	00010506 	br	6cc <___vfprintf_internal_r+0x524>
 2b8:	25bff404 	addi	r22,r4,-48
 2bc:	b5803fcc 	andi	r22,r22,255
 2c0:	00c00244 	movi	r3,9
 2c4:	1d800936 	bltu	r3,r22,2ec <___vfprintf_internal_r+0x144>
 2c8:	00bfffc4 	movi	r2,-1
 2cc:	90800426 	beq	r18,r2,2e0 <___vfprintf_internal_r+0x138>
 2d0:	9009883a 	mov	r4,r18
 2d4:	01400284 	movi	r5,10
 2d8:	00009840 	call	984 <__mulsi3>
 2dc:	00000106 	br	2e4 <___vfprintf_internal_r+0x13c>
 2e0:	0005883a 	mov	r2,zero
 2e4:	15a5883a 	add	r18,r2,r22
 2e8:	0000f206 	br	6b4 <___vfprintf_internal_r+0x50c>
 2ec:	01400b84 	movi	r5,46
 2f0:	1140f426 	beq	r2,r5,6c4 <___vfprintf_internal_r+0x51c>
 2f4:	05800084 	movi	r22,2
 2f8:	213ff404 	addi	r4,r4,-48
 2fc:	20c03fcc 	andi	r3,r4,255
 300:	01000244 	movi	r4,9
 304:	20c00b36 	bltu	r4,r3,334 <___vfprintf_internal_r+0x18c>
 308:	00bfffc4 	movi	r2,-1
 30c:	98800626 	beq	r19,r2,328 <___vfprintf_internal_r+0x180>
 310:	9809883a 	mov	r4,r19
 314:	01400284 	movi	r5,10
 318:	d8c01115 	stw	r3,68(sp)
 31c:	00009840 	call	984 <__mulsi3>
 320:	d8c01117 	ldw	r3,68(sp)
 324:	00000106 	br	32c <___vfprintf_internal_r+0x184>
 328:	0005883a 	mov	r2,zero
 32c:	10e7883a 	add	r19,r2,r3
 330:	0000e706 	br	6d0 <___vfprintf_internal_r+0x528>
 334:	01401b04 	movi	r5,108
 338:	1140e026 	beq	r2,r5,6bc <___vfprintf_internal_r+0x514>
 33c:	013fffc4 	movi	r4,-1
 340:	99000226 	beq	r19,r4,34c <___vfprintf_internal_r+0x1a4>
 344:	d8000b15 	stw	zero,44(sp)
 348:	00000106 	br	350 <___vfprintf_internal_r+0x1a8>
 34c:	04c00044 	movi	r19,1
 350:	01001a44 	movi	r4,105
 354:	11001626 	beq	r2,r4,3b0 <___vfprintf_internal_r+0x208>
 358:	20800916 	blt	r4,r2,380 <___vfprintf_internal_r+0x1d8>
 35c:	010018c4 	movi	r4,99
 360:	11009626 	beq	r2,r4,5bc <___vfprintf_internal_r+0x414>
 364:	01001904 	movi	r4,100
 368:	11001126 	beq	r2,r4,3b0 <___vfprintf_internal_r+0x208>
 36c:	01001604 	movi	r4,88
 370:	1100d61e 	bne	r2,r4,6cc <___vfprintf_internal_r+0x524>
 374:	00c00044 	movi	r3,1
 378:	d8c00e15 	stw	r3,56(sp)
 37c:	00001406 	br	3d0 <___vfprintf_internal_r+0x228>
 380:	01001cc4 	movi	r4,115
 384:	1100a626 	beq	r2,r4,620 <___vfprintf_internal_r+0x478>
 388:	20800416 	blt	r4,r2,39c <___vfprintf_internal_r+0x1f4>
 38c:	01001bc4 	movi	r4,111
 390:	1100ce1e 	bne	r2,r4,6cc <___vfprintf_internal_r+0x524>
 394:	05400204 	movi	r21,8
 398:	00000e06 	br	3d4 <___vfprintf_internal_r+0x22c>
 39c:	01001d44 	movi	r4,117
 3a0:	11000c26 	beq	r2,r4,3d4 <___vfprintf_internal_r+0x22c>
 3a4:	01001e04 	movi	r4,120
 3a8:	11000926 	beq	r2,r4,3d0 <___vfprintf_internal_r+0x228>
 3ac:	0000c706 	br	6cc <___vfprintf_internal_r+0x524>
 3b0:	e0800104 	addi	r2,fp,4
 3b4:	b8000726 	beq	r23,zero,3d4 <___vfprintf_internal_r+0x22c>
 3b8:	d8800d15 	stw	r2,52(sp)
 3bc:	e7000017 	ldw	fp,0(fp)
 3c0:	e000080e 	bge	fp,zero,3e4 <___vfprintf_internal_r+0x23c>
 3c4:	0739c83a 	sub	fp,zero,fp
 3c8:	02000044 	movi	r8,1
 3cc:	00000606 	br	3e8 <___vfprintf_internal_r+0x240>
 3d0:	05400404 	movi	r21,16
 3d4:	e0c00104 	addi	r3,fp,4
 3d8:	d8c00d15 	stw	r3,52(sp)
 3dc:	e7000017 	ldw	fp,0(fp)
 3e0:	002f883a 	mov	r23,zero
 3e4:	0011883a 	mov	r8,zero
 3e8:	002d883a 	mov	r22,zero
 3ec:	dd87883a 	add	r3,sp,r22
 3f0:	e0001a26 	beq	fp,zero,45c <___vfprintf_internal_r+0x2b4>
 3f4:	e009883a 	mov	r4,fp
 3f8:	a80b883a 	mov	r5,r21
 3fc:	d8c01115 	stw	r3,68(sp)
 400:	da001215 	stw	r8,72(sp)
 404:	00009740 	call	974 <__udivsi3>
 408:	a809883a 	mov	r4,r21
 40c:	100b883a 	mov	r5,r2
 410:	d8801015 	stw	r2,64(sp)
 414:	00009840 	call	984 <__mulsi3>
 418:	e085c83a 	sub	r2,fp,r2
 41c:	01000244 	movi	r4,9
 420:	d8c01117 	ldw	r3,68(sp)
 424:	d9801017 	ldw	r6,64(sp)
 428:	da001217 	ldw	r8,72(sp)
 42c:	20800216 	blt	r4,r2,438 <___vfprintf_internal_r+0x290>
 430:	17000c04 	addi	fp,r2,48
 434:	00000506 	br	44c <___vfprintf_internal_r+0x2a4>
 438:	d9400e17 	ldw	r5,56(sp)
 43c:	28000226 	beq	r5,zero,448 <___vfprintf_internal_r+0x2a0>
 440:	17000dc4 	addi	fp,r2,55
 444:	00000106 	br	44c <___vfprintf_internal_r+0x2a4>
 448:	170015c4 	addi	fp,r2,87
 44c:	1f000005 	stb	fp,0(r3)
 450:	b5800044 	addi	r22,r22,1
 454:	3039883a 	mov	fp,r6
 458:	003fe406 	br	3ec <_gp+0xffff75f4>
 45c:	1ec5c83a 	sub	r2,r3,sp
 460:	d8800a15 	stw	r2,40(sp)
 464:	9885c83a 	sub	r2,r19,r2
 468:	1839883a 	mov	fp,r3
 46c:	00800e0e 	bge	zero,r2,4a8 <___vfprintf_internal_r+0x300>
 470:	182d883a 	mov	r22,r3
 474:	1885883a 	add	r2,r3,r2
 478:	01000c04 	movi	r4,48
 47c:	d9400917 	ldw	r5,36(sp)
 480:	b007883a 	mov	r3,r22
 484:	b140052e 	bgeu	r22,r5,49c <___vfprintf_internal_r+0x2f4>
 488:	b5800044 	addi	r22,r22,1
 48c:	19000005 	stb	r4,0(r3)
 490:	b039883a 	mov	fp,r22
 494:	b0bff91e 	bne	r22,r2,47c <_gp+0xffff7684>
 498:	00000106 	br	4a0 <___vfprintf_internal_r+0x2f8>
 49c:	b039883a 	mov	fp,r22
 4a0:	b6edc83a 	sub	r22,r22,sp
 4a4:	dd800a15 	stw	r22,40(sp)
 4a8:	d8800a17 	ldw	r2,40(sp)
 4ac:	1207883a 	add	r3,r2,r8
 4b0:	90edc83a 	sub	r22,r18,r3
 4b4:	d8c00b17 	ldw	r3,44(sp)
 4b8:	18001726 	beq	r3,zero,518 <___vfprintf_internal_r+0x370>
 4bc:	40000a26 	beq	r8,zero,4e8 <___vfprintf_internal_r+0x340>
 4c0:	00800b44 	movi	r2,45
 4c4:	d8800805 	stb	r2,32(sp)
 4c8:	88800117 	ldw	r2,4(r17)
 4cc:	a009883a 	mov	r4,r20
 4d0:	880b883a 	mov	r5,r17
 4d4:	d9800804 	addi	r6,sp,32
 4d8:	01c00044 	movi	r7,1
 4dc:	103ee83a 	callr	r2
 4e0:	10004d1e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 4e4:	84000044 	addi	r16,r16,1
 4e8:	0580070e 	bge	zero,r22,508 <___vfprintf_internal_r+0x360>
 4ec:	a009883a 	mov	r4,r20
 4f0:	880b883a 	mov	r5,r17
 4f4:	01800c04 	movi	r6,48
 4f8:	b00f883a 	mov	r7,r22
 4fc:	000013c0 	call	13c <print_repeat>
 500:	1000451e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 504:	85a1883a 	add	r16,r16,r22
 508:	d9000a17 	ldw	r4,40(sp)
 50c:	e007883a 	mov	r3,fp
 510:	272dc83a 	sub	r22,r4,fp
 514:	00002206 	br	5a0 <___vfprintf_internal_r+0x3f8>
 518:	0580090e 	bge	zero,r22,540 <___vfprintf_internal_r+0x398>
 51c:	a009883a 	mov	r4,r20
 520:	880b883a 	mov	r5,r17
 524:	01800804 	movi	r6,32
 528:	b00f883a 	mov	r7,r22
 52c:	da001215 	stw	r8,72(sp)
 530:	000013c0 	call	13c <print_repeat>
 534:	da001217 	ldw	r8,72(sp)
 538:	1000371e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 53c:	85a1883a 	add	r16,r16,r22
 540:	403ff126 	beq	r8,zero,508 <_gp+0xffff7710>
 544:	00800b44 	movi	r2,45
 548:	d8800805 	stb	r2,32(sp)
 54c:	88800117 	ldw	r2,4(r17)
 550:	a009883a 	mov	r4,r20
 554:	880b883a 	mov	r5,r17
 558:	d9800804 	addi	r6,sp,32
 55c:	01c00044 	movi	r7,1
 560:	103ee83a 	callr	r2
 564:	10002c1e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 568:	84000044 	addi	r16,r16,1
 56c:	003fe606 	br	508 <_gp+0xffff7710>
 570:	18ffffc4 	addi	r3,r3,-1
 574:	18800003 	ldbu	r2,0(r3)
 578:	a009883a 	mov	r4,r20
 57c:	d8c01115 	stw	r3,68(sp)
 580:	d8800805 	stb	r2,32(sp)
 584:	88800117 	ldw	r2,4(r17)
 588:	880b883a 	mov	r5,r17
 58c:	d9800804 	addi	r6,sp,32
 590:	01c00044 	movi	r7,1
 594:	103ee83a 	callr	r2
 598:	d8c01117 	ldw	r3,68(sp)
 59c:	10001e1e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 5a0:	80c5c83a 	sub	r2,r16,r3
 5a4:	1d89883a 	add	r4,r3,r22
 5a8:	e085883a 	add	r2,fp,r2
 5ac:	013ff016 	blt	zero,r4,570 <_gp+0xffff7778>
 5b0:	1021883a 	mov	r16,r2
 5b4:	df000d17 	ldw	fp,52(sp)
 5b8:	00004406 	br	6cc <___vfprintf_internal_r+0x524>
 5bc:	01000044 	movi	r4,1
 5c0:	2480080e 	bge	r4,r18,5e4 <___vfprintf_internal_r+0x43c>
 5c4:	95bfffc4 	addi	r22,r18,-1
 5c8:	a009883a 	mov	r4,r20
 5cc:	880b883a 	mov	r5,r17
 5d0:	01800804 	movi	r6,32
 5d4:	b00f883a 	mov	r7,r22
 5d8:	000013c0 	call	13c <print_repeat>
 5dc:	10000e1e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 5e0:	85a1883a 	add	r16,r16,r22
 5e4:	e0800017 	ldw	r2,0(fp)
 5e8:	a009883a 	mov	r4,r20
 5ec:	880b883a 	mov	r5,r17
 5f0:	d8800005 	stb	r2,0(sp)
 5f4:	88800117 	ldw	r2,4(r17)
 5f8:	d80d883a 	mov	r6,sp
 5fc:	01c00044 	movi	r7,1
 600:	e5800104 	addi	r22,fp,4
 604:	103ee83a 	callr	r2
 608:	1000031e 	bne	r2,zero,618 <___vfprintf_internal_r+0x470>
 60c:	84000044 	addi	r16,r16,1
 610:	b039883a 	mov	fp,r22
 614:	00002d06 	br	6cc <___vfprintf_internal_r+0x524>
 618:	00bfffc4 	movi	r2,-1
 61c:	00003106 	br	6e4 <___vfprintf_internal_r+0x53c>
 620:	e5800017 	ldw	r22,0(fp)
 624:	e0c00104 	addi	r3,fp,4
 628:	d8c00a15 	stw	r3,40(sp)
 62c:	b009883a 	mov	r4,r22
 630:	00007e40 	call	7e4 <strlen>
 634:	9091c83a 	sub	r8,r18,r2
 638:	1039883a 	mov	fp,r2
 63c:	0200090e 	bge	zero,r8,664 <___vfprintf_internal_r+0x4bc>
 640:	400f883a 	mov	r7,r8
 644:	a009883a 	mov	r4,r20
 648:	880b883a 	mov	r5,r17
 64c:	01800804 	movi	r6,32
 650:	da001215 	stw	r8,72(sp)
 654:	000013c0 	call	13c <print_repeat>
 658:	da001217 	ldw	r8,72(sp)
 65c:	103fee1e 	bne	r2,zero,618 <_gp+0xffff7820>
 660:	8221883a 	add	r16,r16,r8
 664:	88800117 	ldw	r2,4(r17)
 668:	a009883a 	mov	r4,r20
 66c:	880b883a 	mov	r5,r17
 670:	b00d883a 	mov	r6,r22
 674:	e00f883a 	mov	r7,fp
 678:	103ee83a 	callr	r2
 67c:	103fe61e 	bne	r2,zero,618 <_gp+0xffff7820>
 680:	8721883a 	add	r16,r16,fp
 684:	df000a17 	ldw	fp,40(sp)
 688:	00001006 	br	6cc <___vfprintf_internal_r+0x524>
 68c:	05c00044 	movi	r23,1
 690:	04ffffc4 	movi	r19,-1
 694:	d8000e15 	stw	zero,56(sp)
 698:	05400284 	movi	r21,10
 69c:	9825883a 	mov	r18,r19
 6a0:	d8000c15 	stw	zero,48(sp)
 6a4:	d8000b15 	stw	zero,44(sp)
 6a8:	b82d883a 	mov	r22,r23
 6ac:	00000806 	br	6d0 <___vfprintf_internal_r+0x528>
 6b0:	dd800b15 	stw	r22,44(sp)
 6b4:	05800084 	movi	r22,2
 6b8:	00000506 	br	6d0 <___vfprintf_internal_r+0x528>
 6bc:	00c00044 	movi	r3,1
 6c0:	d8c00c15 	stw	r3,48(sp)
 6c4:	058000c4 	movi	r22,3
 6c8:	00000106 	br	6d0 <___vfprintf_internal_r+0x528>
 6cc:	002d883a 	mov	r22,zero
 6d0:	d8c00f17 	ldw	r3,60(sp)
 6d4:	18c00044 	addi	r3,r3,1
 6d8:	d8c00f15 	stw	r3,60(sp)
 6dc:	003ecc06 	br	210 <_gp+0xffff7418>
 6e0:	8005883a 	mov	r2,r16
 6e4:	dfc01c17 	ldw	ra,112(sp)
 6e8:	df001b17 	ldw	fp,108(sp)
 6ec:	ddc01a17 	ldw	r23,104(sp)
 6f0:	dd801917 	ldw	r22,100(sp)
 6f4:	dd401817 	ldw	r21,96(sp)
 6f8:	dd001717 	ldw	r20,92(sp)
 6fc:	dcc01617 	ldw	r19,88(sp)
 700:	dc801517 	ldw	r18,84(sp)
 704:	dc401417 	ldw	r17,80(sp)
 708:	dc001317 	ldw	r16,76(sp)
 70c:	dec01d04 	addi	sp,sp,116
 710:	f800283a 	ret

00000714 <__vfprintf_internal>:
 714:	2007883a 	mov	r3,r4
 718:	01000034 	movhi	r4,0
 71c:	21037f04 	addi	r4,r4,3580
 720:	21000017 	ldw	r4,0(r4)
 724:	2805883a 	mov	r2,r5
 728:	300f883a 	mov	r7,r6
 72c:	180b883a 	mov	r5,r3
 730:	100d883a 	mov	r6,r2
 734:	00001a81 	jmpi	1a8 <___vfprintf_internal_r>

00000738 <__sfvwrite_small_dev>:
 738:	2880000b 	ldhu	r2,0(r5)
 73c:	defffa04 	addi	sp,sp,-24
 740:	dc000015 	stw	r16,0(sp)
 744:	dfc00515 	stw	ra,20(sp)
 748:	dd000415 	stw	r20,16(sp)
 74c:	dcc00315 	stw	r19,12(sp)
 750:	dc800215 	stw	r18,8(sp)
 754:	dc400115 	stw	r17,4(sp)
 758:	1080020c 	andi	r2,r2,8
 75c:	2821883a 	mov	r16,r5
 760:	10001726 	beq	r2,zero,7c0 <__sfvwrite_small_dev+0x88>
 764:	2880008f 	ldh	r2,2(r5)
 768:	10001216 	blt	r2,zero,7b4 <__sfvwrite_small_dev+0x7c>
 76c:	2027883a 	mov	r19,r4
 770:	3025883a 	mov	r18,r6
 774:	3823883a 	mov	r17,r7
 778:	05010004 	movi	r20,1024
 77c:	04400b0e 	bge	zero,r17,7ac <__sfvwrite_small_dev+0x74>
 780:	8140008f 	ldh	r5,2(r16)
 784:	880f883a 	mov	r7,r17
 788:	a440010e 	bge	r20,r17,790 <__sfvwrite_small_dev+0x58>
 78c:	01c10004 	movi	r7,1024
 790:	9809883a 	mov	r4,r19
 794:	900d883a 	mov	r6,r18
 798:	00008000 	call	800 <_write_r>
 79c:	0080050e 	bge	zero,r2,7b4 <__sfvwrite_small_dev+0x7c>
 7a0:	88a3c83a 	sub	r17,r17,r2
 7a4:	90a5883a 	add	r18,r18,r2
 7a8:	003ff406 	br	77c <_gp+0xffff7984>
 7ac:	0005883a 	mov	r2,zero
 7b0:	00000406 	br	7c4 <__sfvwrite_small_dev+0x8c>
 7b4:	8080000b 	ldhu	r2,0(r16)
 7b8:	10801014 	ori	r2,r2,64
 7bc:	8080000d 	sth	r2,0(r16)
 7c0:	00bfffc4 	movi	r2,-1
 7c4:	dfc00517 	ldw	ra,20(sp)
 7c8:	dd000417 	ldw	r20,16(sp)
 7cc:	dcc00317 	ldw	r19,12(sp)
 7d0:	dc800217 	ldw	r18,8(sp)
 7d4:	dc400117 	ldw	r17,4(sp)
 7d8:	dc000017 	ldw	r16,0(sp)
 7dc:	dec00604 	addi	sp,sp,24
 7e0:	f800283a 	ret

000007e4 <strlen>:
 7e4:	2005883a 	mov	r2,r4
 7e8:	10c00007 	ldb	r3,0(r2)
 7ec:	18000226 	beq	r3,zero,7f8 <strlen+0x14>
 7f0:	10800044 	addi	r2,r2,1
 7f4:	003ffc06 	br	7e8 <_gp+0xffff79f0>
 7f8:	1105c83a 	sub	r2,r2,r4
 7fc:	f800283a 	ret

00000800 <_write_r>:
 800:	defffd04 	addi	sp,sp,-12
 804:	dc000015 	stw	r16,0(sp)
 808:	04000034 	movhi	r16,0
 80c:	dc400115 	stw	r17,4(sp)
 810:	8403de04 	addi	r16,r16,3960
 814:	2023883a 	mov	r17,r4
 818:	2809883a 	mov	r4,r5
 81c:	300b883a 	mov	r5,r6
 820:	380d883a 	mov	r6,r7
 824:	dfc00215 	stw	ra,8(sp)
 828:	80000015 	stw	zero,0(r16)
 82c:	0000b4c0 	call	b4c <write>
 830:	00ffffc4 	movi	r3,-1
 834:	10c0031e 	bne	r2,r3,844 <_write_r+0x44>
 838:	80c00017 	ldw	r3,0(r16)
 83c:	18000126 	beq	r3,zero,844 <_write_r+0x44>
 840:	88c00015 	stw	r3,0(r17)
 844:	dfc00217 	ldw	ra,8(sp)
 848:	dc400117 	ldw	r17,4(sp)
 84c:	dc000017 	ldw	r16,0(sp)
 850:	dec00304 	addi	sp,sp,12
 854:	f800283a 	ret

00000858 <udivmodsi4>:
 858:	2900182e 	bgeu	r5,r4,8bc <udivmodsi4+0x64>
 85c:	28001716 	blt	r5,zero,8bc <udivmodsi4+0x64>
 860:	00800804 	movi	r2,32
 864:	00c00044 	movi	r3,1
 868:	00000206 	br	874 <udivmodsi4+0x1c>
 86c:	10001126 	beq	r2,zero,8b4 <udivmodsi4+0x5c>
 870:	28000516 	blt	r5,zero,888 <udivmodsi4+0x30>
 874:	294b883a 	add	r5,r5,r5
 878:	10bfffc4 	addi	r2,r2,-1
 87c:	18c7883a 	add	r3,r3,r3
 880:	293ffa36 	bltu	r5,r4,86c <_gp+0xffff7a74>
 884:	18000b26 	beq	r3,zero,8b4 <udivmodsi4+0x5c>
 888:	0005883a 	mov	r2,zero
 88c:	21400236 	bltu	r4,r5,898 <udivmodsi4+0x40>
 890:	2149c83a 	sub	r4,r4,r5
 894:	10c4b03a 	or	r2,r2,r3
 898:	1806d07a 	srli	r3,r3,1
 89c:	280ad07a 	srli	r5,r5,1
 8a0:	183ffa1e 	bne	r3,zero,88c <_gp+0xffff7a94>
 8a4:	3000011e 	bne	r6,zero,8ac <udivmodsi4+0x54>
 8a8:	f800283a 	ret
 8ac:	2005883a 	mov	r2,r4
 8b0:	f800283a 	ret
 8b4:	0005883a 	mov	r2,zero
 8b8:	003ffa06 	br	8a4 <_gp+0xffff7aac>
 8bc:	00c00044 	movi	r3,1
 8c0:	003ff106 	br	888 <_gp+0xffff7a90>

000008c4 <__divsi3>:
 8c4:	defffe04 	addi	sp,sp,-8
 8c8:	dfc00115 	stw	ra,4(sp)
 8cc:	dc000015 	stw	r16,0(sp)
 8d0:	20000b16 	blt	r4,zero,900 <__divsi3+0x3c>
 8d4:	0021883a 	mov	r16,zero
 8d8:	28000c16 	blt	r5,zero,90c <__divsi3+0x48>
 8dc:	000d883a 	mov	r6,zero
 8e0:	00008580 	call	858 <udivmodsi4>
 8e4:	0407c83a 	sub	r3,zero,r16
 8e8:	1884f03a 	xor	r2,r3,r2
 8ec:	1405883a 	add	r2,r2,r16
 8f0:	dfc00117 	ldw	ra,4(sp)
 8f4:	dc000017 	ldw	r16,0(sp)
 8f8:	dec00204 	addi	sp,sp,8
 8fc:	f800283a 	ret
 900:	0109c83a 	sub	r4,zero,r4
 904:	04000044 	movi	r16,1
 908:	283ff40e 	bge	r5,zero,8dc <_gp+0xffff7ae4>
 90c:	014bc83a 	sub	r5,zero,r5
 910:	8400005c 	xori	r16,r16,1
 914:	003ff106 	br	8dc <_gp+0xffff7ae4>

00000918 <__modsi3>:
 918:	defffd04 	addi	sp,sp,-12
 91c:	dfc00215 	stw	ra,8(sp)
 920:	dc400115 	stw	r17,4(sp)
 924:	dc000015 	stw	r16,0(sp)
 928:	20000c16 	blt	r4,zero,95c <__modsi3+0x44>
 92c:	0023883a 	mov	r17,zero
 930:	0021883a 	mov	r16,zero
 934:	28000d16 	blt	r5,zero,96c <__modsi3+0x54>
 938:	01800044 	movi	r6,1
 93c:	00008580 	call	858 <udivmodsi4>
 940:	1404f03a 	xor	r2,r2,r16
 944:	8885883a 	add	r2,r17,r2
 948:	dfc00217 	ldw	ra,8(sp)
 94c:	dc400117 	ldw	r17,4(sp)
 950:	dc000017 	ldw	r16,0(sp)
 954:	dec00304 	addi	sp,sp,12
 958:	f800283a 	ret
 95c:	0109c83a 	sub	r4,zero,r4
 960:	04400044 	movi	r17,1
 964:	043fffc4 	movi	r16,-1
 968:	283ff30e 	bge	r5,zero,938 <_gp+0xffff7b40>
 96c:	014bc83a 	sub	r5,zero,r5
 970:	003ff106 	br	938 <_gp+0xffff7b40>

00000974 <__udivsi3>:
 974:	000d883a 	mov	r6,zero
 978:	00008581 	jmpi	858 <udivmodsi4>

0000097c <__umodsi3>:
 97c:	01800044 	movi	r6,1
 980:	00008581 	jmpi	858 <udivmodsi4>

00000984 <__mulsi3>:
 984:	0005883a 	mov	r2,zero
 988:	20000726 	beq	r4,zero,9a8 <__mulsi3+0x24>
 98c:	20c0004c 	andi	r3,r4,1
 990:	2008d07a 	srli	r4,r4,1
 994:	18000126 	beq	r3,zero,99c <__mulsi3+0x18>
 998:	1145883a 	add	r2,r2,r5
 99c:	294b883a 	add	r5,r5,r5
 9a0:	203ffa1e 	bne	r4,zero,98c <_gp+0xffff7b94>
 9a4:	f800283a 	ret
 9a8:	f800283a 	ret

000009ac <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 9ac:	00800034 	movhi	r2,0
 9b0:	10836804 	addi	r2,r2,3488
 9b4:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 9b8:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 9bc:	01000034 	movhi	r4,0
 9c0:	21038004 	addi	r4,r4,3584
 9c4:	d80b883a 	mov	r5,sp
 9c8:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 9cc:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 9d0:	0000bdc0 	call	bdc <altera_avalon_jtag_uart_read>
 9d4:	0080020e 	bge	zero,r2,9e0 <alt_getchar+0x34>
        return -1;
    }
    return c;
 9d8:	d8800007 	ldb	r2,0(sp)
 9dc:	00000106 	br	9e4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 9e0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 9e4:	dfc00117 	ldw	ra,4(sp)
 9e8:	dec00204 	addi	sp,sp,8
 9ec:	f800283a 	ret

000009f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 9f0:	deffff04 	addi	sp,sp,-4
 9f4:	01000034 	movhi	r4,0
 9f8:	01400034 	movhi	r5,0
 9fc:	dfc00015 	stw	ra,0(sp)
 a00:	21033004 	addi	r4,r4,3264
 a04:	29438704 	addi	r5,r5,3612

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a08:	2140061e 	bne	r4,r5,a24 <alt_load+0x34>
 a0c:	01000034 	movhi	r4,0
 a10:	01400034 	movhi	r5,0
 a14:	21000804 	addi	r4,r4,32
 a18:	29400804 	addi	r5,r5,32
 a1c:	2140141e 	bne	r4,r5,a70 <alt_load+0x80>
 a20:	00000d06 	br	a58 <alt_load+0x68>
 a24:	00c00034 	movhi	r3,0
 a28:	18c38704 	addi	r3,r3,3612
 a2c:	00bfff04 	movi	r2,-4
 a30:	1907c83a 	sub	r3,r3,r4
 a34:	1886703a 	and	r3,r3,r2
 a38:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a3c:	10fff326 	beq	r2,r3,a0c <_gp+0xffff7c14>
 a40:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 a44:	39c00017 	ldw	r7,0(r7)
 a48:	110d883a 	add	r6,r2,r4
 a4c:	10800104 	addi	r2,r2,4
 a50:	31c00015 	stw	r7,0(r6)
 a54:	003ff906 	br	a3c <_gp+0xffff7c44>
 a58:	01000034 	movhi	r4,0
 a5c:	01400034 	movhi	r5,0
 a60:	21032104 	addi	r4,r4,3204
 a64:	29432104 	addi	r5,r5,3204

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a68:	2140121e 	bne	r4,r5,ab4 <alt_load+0xc4>
 a6c:	00000d06 	br	aa4 <alt_load+0xb4>
 a70:	00c00034 	movhi	r3,0
 a74:	18c00804 	addi	r3,r3,32
 a78:	00bfff04 	movi	r2,-4
 a7c:	1907c83a 	sub	r3,r3,r4
 a80:	1886703a 	and	r3,r3,r2
 a84:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a88:	10fff326 	beq	r2,r3,a58 <_gp+0xffff7c60>
 a8c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 a90:	39c00017 	ldw	r7,0(r7)
 a94:	110d883a 	add	r6,r2,r4
 a98:	10800104 	addi	r2,r2,4
 a9c:	31c00015 	stw	r7,0(r6)
 aa0:	003ff906 	br	a88 <_gp+0xffff7c90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 aa4:	0000c6c0 	call	c6c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 aa8:	dfc00017 	ldw	ra,0(sp)
 aac:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 ab0:	0000c781 	jmpi	c78 <alt_icache_flush_all>
 ab4:	00c00034 	movhi	r3,0
 ab8:	18c33004 	addi	r3,r3,3264
 abc:	00bfff04 	movi	r2,-4
 ac0:	1907c83a 	sub	r3,r3,r4
 ac4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 ac8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 acc:	10fff526 	beq	r2,r3,aa4 <_gp+0xffff7cac>
 ad0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 ad4:	39c00017 	ldw	r7,0(r7)
 ad8:	110d883a 	add	r6,r2,r4
 adc:	10800104 	addi	r2,r2,4
 ae0:	31c00015 	stw	r7,0(r6)
 ae4:	003ff906 	br	acc <_gp+0xffff7cd4>

00000ae8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 ae8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 aec:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 af0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 af4:	0000bb80 	call	bb8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 af8:	0000bd80 	call	bd8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 afc:	d1206317 	ldw	r4,-32372(gp)
 b00:	d1606217 	ldw	r5,-32376(gp)
 b04:	d1a06117 	ldw	r6,-32380(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b08:	dfc00017 	ldw	ra,0(sp)
 b0c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b10:	000005c1 	jmpi	5c <main>

00000b14 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 b14:	defffe04 	addi	sp,sp,-8
 b18:	dc000015 	stw	r16,0(sp)
 b1c:	dfc00115 	stw	ra,4(sp)
 b20:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 b24:	00007e40 	call	7e4 <strlen>
 b28:	01000034 	movhi	r4,0
 b2c:	21038004 	addi	r4,r4,3584
 b30:	800b883a 	mov	r5,r16
 b34:	100d883a 	mov	r6,r2
 b38:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 b3c:	dfc00117 	ldw	ra,4(sp)
 b40:	dc000017 	ldw	r16,0(sp)
 b44:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 b48:	0000c381 	jmpi	c38 <altera_avalon_jtag_uart_write>

00000b4c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 b4c:	00800044 	movi	r2,1
 b50:	20800226 	beq	r4,r2,b5c <write+0x10>
 b54:	00800084 	movi	r2,2
 b58:	2080041e 	bne	r4,r2,b6c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 b5c:	01000034 	movhi	r4,0
 b60:	21038004 	addi	r4,r4,3584
 b64:	000f883a 	mov	r7,zero
 b68:	0000c381 	jmpi	c38 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 b6c:	00800034 	movhi	r2,0
 b70:	10838604 	addi	r2,r2,3608
 b74:	10800017 	ldw	r2,0(r2)
 b78:	10000926 	beq	r2,zero,ba0 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 b7c:	deffff04 	addi	sp,sp,-4
 b80:	dfc00015 	stw	ra,0(sp)
 b84:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b88:	00c01444 	movi	r3,81
 b8c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b90:	00bfffc4 	movi	r2,-1
 b94:	dfc00017 	ldw	ra,0(sp)
 b98:	dec00104 	addi	sp,sp,4
 b9c:	f800283a 	ret
 ba0:	00800034 	movhi	r2,0
 ba4:	1083de04 	addi	r2,r2,3960
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 ba8:	00c01444 	movi	r3,81
 bac:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 bb0:	00bfffc4 	movi	r2,-1
 bb4:	f800283a 	ret

00000bb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 bb8:	deffff04 	addi	sp,sp,-4
 bbc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 bc0:	0000c7c0 	call	c7c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 bc4:	00800044 	movi	r2,1
 bc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 bcc:	dfc00017 	ldw	ra,0(sp)
 bd0:	dec00104 	addi	sp,sp,4
 bd4:	f800283a 	ret

00000bd8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 bd8:	f800283a 	ret

00000bdc <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 bdc:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 be0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 be4:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 be8:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 bec:	11800b2e 	bgeu	r2,r6,c1c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 bf0:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 bf4:	1a60000c 	andi	r9,r3,32768
 bf8:	48000326 	beq	r9,zero,c08 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 bfc:	10c00005 	stb	r3,0(r2)
 c00:	10800044 	addi	r2,r2,1
 c04:	003ff906 	br	bec <_gp+0xffff7df4>
    else if (ptr != buffer)
 c08:	11400226 	beq	r2,r5,c14 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 c0c:	1145c83a 	sub	r2,r2,r5
 c10:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 c14:	403ff526 	beq	r8,zero,bec <_gp+0xffff7df4>
 c18:	00000106 	br	c20 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 c1c:	117ffb1e 	bne	r2,r5,c0c <_gp+0xffff7e14>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 c20:	39d0000c 	andi	r7,r7,16384
 c24:	3800021e 	bne	r7,zero,c30 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 c28:	00bffec4 	movi	r2,-5
 c2c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 c30:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 c34:	f800283a 	ret

00000c38 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 c38:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c3c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 c40:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 c44:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 c48:	2980072e 	bgeu	r5,r6,c68 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 c4c:	38c00037 	ldwio	r3,0(r7)
 c50:	18ffffec 	andhi	r3,r3,65535
 c54:	183ffc26 	beq	r3,zero,c48 <_gp+0xffff7e50>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 c58:	28c00007 	ldb	r3,0(r5)
 c5c:	20c00035 	stwio	r3,0(r4)
 c60:	29400044 	addi	r5,r5,1
 c64:	003ff806 	br	c48 <_gp+0xffff7e50>

  return count;
}
 c68:	f800283a 	ret

00000c6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c6c:	f800283a 	ret

00000c70 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 c70:	3005883a 	mov	r2,r6
 c74:	f800283a 	ret

00000c78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c78:	f800283a 	ret

00000c7c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c7c:	000170fa 	wrctl	ienable,zero
 c80:	f800283a 	ret
