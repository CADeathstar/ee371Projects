
sram_test.elf:     file format elf32-littlenios2
sram_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000004b4 memsz 0x000004b4 flags r-x
    LOAD off    0x000014d4 vaddr 0x000004d4 paddr 0x000004d8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000014dc vaddr 0x000004dc paddr 0x000004dc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000014d8  2**0
                  CONTENTS
  2 .text         0000049c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000004bc  000004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000004d4  000004d8  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000004dc  000004dc  000014dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000004e8  000004e8  000014d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001500  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000101b  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000092c  00000000  00000000  00002703  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000ab7  00000000  00000000  0000302f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000294  00000000  00000000  00003ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007af  00000000  00000000  00003d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000048f  00000000  00000000  0000452b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000049bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00004a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005955  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000595b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000595c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000595d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005966  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000596f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00005978  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  0000597c  2**0
                  CONTENTS, READONLY
 26 .jdi          00003495  00000000  00000000  0000599a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004ced8  00000000  00000000  00008e2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000004bc l    d  .rodata	00000000 .rodata
000004d4 l    d  .rwdata	00000000 .rwdata
000004dc l    d  .bss	00000000 .bss
000004e8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sram_test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000368 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000001f4 g     F .text	0000002c alt_main
000004d8 g       *ABS*	00000000 __flash_rwdata_start
00000220 g     F .text	00000038 alt_putstr
000004d4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004e0 g     O .bss	00000004 alt_argv
000084d4 g       *ABS*	00000000 _gp
00000258 g     F .text	00000004 usleep
00000484 g     F .text	00000008 .hidden __udivsi3
000004e8 g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
0000033c g     F .text	00000004 alt_dcache_flush_all
000004d8 g       *ABS*	00000000 __ram_rwdata_end
000004d4 g       *ABS*	00000000 __ram_rodata_end
0000048c g     F .text	00000008 .hidden __umodsi3
000004e8 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000280 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
0000027c g     F .text	00000004 alt_sys_init
00000494 g     F .text	00000028 .hidden __mulsi3
000004d4 g       *ABS*	00000000 __ram_rwdata_start
000004bc g       *ABS*	00000000 __ram_rodata_start
000002b4 g     F .text	00000088 alt_busy_sleep
000004e8 g       *ABS*	00000000 __alt_stack_base
000004dc g       *ABS*	00000000 __bss_start
0000005c g     F .text	000000a0 main
000004dc g     O .bss	00000004 alt_envp
000003d4 g     F .text	00000054 .hidden __divsi3
000004bc g       *ABS*	00000000 __flash_rodata_start
0000025c g     F .text	00000020 alt_irq_init
000004e4 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000004d8 g       *ABS*	00000000 _edata
000004e8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000344 g     F .text	00000008 altera_nios2_qsys_irq_init
00000428 g     F .text	0000005c .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
0000034c g     F .text	0000001c strlen
00000340 g     F .text	00000004 alt_icache_flush_all
000000fc g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a13514 	ori	gp,gp,34004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10813714 	ori	r2,r2,1244

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c13a14 	ori	r3,r3,1256

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7b70>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000fc0 	call	fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001f40 	call	1f4 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7b84>

0000005c <main>:
#define sram_address (volatile char *) 0x0002010
#define sram_data (volatile char *) 0x0002000

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#define sram_readwrite (volatile char *) 0x0002020
#define sram_address (volatile char *) 0x0002010
#define sram_data (volatile char *) 0x0002000

int main()
{ 
  60:	defffa04 	addi	sp,sp,-24
  alt_putstr("Hello from Nios II!\n");
  64:	21012f04 	addi	r4,r4,1212
#define sram_readwrite (volatile char *) 0x0002020
#define sram_address (volatile char *) 0x0002010
#define sram_data (volatile char *) 0x0002000

int main()
{ 
  68:	dfc00515 	stw	ra,20(sp)
  6c:	dd000415 	stw	r20,16(sp)
  70:	dcc00315 	stw	r19,12(sp)
  74:	dc800215 	stw	r18,8(sp)
  78:	dc400115 	stw	r17,4(sp)
  7c:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");

  *leds = 0x00;
  80:	04c81004 	movi	r19,8256
#define sram_address (volatile char *) 0x0002010
#define sram_data (volatile char *) 0x0002000

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  84:	00002200 	call	220 <alt_putstr>

  *leds = 0x00;

  *sram_enable = 0b1;
  88:	04000044 	movi	r16,1

int main()
{ 
  alt_putstr("Hello from Nios II!\n");

  *leds = 0x00;
  8c:	98000005 	stb	zero,0(r19)

  *sram_enable = 0b1;
  90:	00880c04 	movi	r2,8240
  94:	14000005 	stb	r16,0(r2)
  *sram_readwrite = 0b0;
  98:	05080804 	movi	r20,8224
  9c:	a0000005 	stb	zero,0(r20)

  *sram_address = 0b00000000001;
  a0:	04880404 	movi	r18,8208
  *sram_data = 0xf0;
  a4:	04480004 	movi	r17,8192
  *leds = 0x00;

  *sram_enable = 0b1;
  *sram_readwrite = 0b0;

  *sram_address = 0b00000000001;
  a8:	94000005 	stb	r16,0(r18)
  *sram_data = 0xf0;
  ac:	00bffc04 	movi	r2,-16
  usleep(1000000);
  b0:	010003f4 	movhi	r4,15
  b4:	21109004 	addi	r4,r4,16960

  *sram_enable = 0b1;
  *sram_readwrite = 0b0;

  *sram_address = 0b00000000001;
  *sram_data = 0xf0;
  b8:	88800005 	stb	r2,0(r17)
  usleep(1000000);
  bc:	00002580 	call	258 <usleep>
  *sram_address = 0b00000000010;
  c0:	00800084 	movi	r2,2
  c4:	90800005 	stb	r2,0(r18)
  *sram_data = 0xff;
  usleep(1000000);
  c8:	010003f4 	movhi	r4,15

  *sram_address = 0b00000000001;
  *sram_data = 0xf0;
  usleep(1000000);
  *sram_address = 0b00000000010;
  *sram_data = 0xff;
  cc:	00bfffc4 	movi	r2,-1
  usleep(1000000);
  d0:	21109004 	addi	r4,r4,16960

  *sram_address = 0b00000000001;
  *sram_data = 0xf0;
  usleep(1000000);
  *sram_address = 0b00000000010;
  *sram_data = 0xff;
  d4:	88800005 	stb	r2,0(r17)
  usleep(1000000);
  d8:	00002580 	call	258 <usleep>

  *sram_readwrite = 0b1;
  usleep(1000000);
  dc:	010003f4 	movhi	r4,15
  usleep(1000000);
  *sram_address = 0b00000000010;
  *sram_data = 0xff;
  usleep(1000000);

  *sram_readwrite = 0b1;
  e0:	a4000005 	stb	r16,0(r20)
  usleep(1000000);
  e4:	21109004 	addi	r4,r4,16960
  e8:	00002580 	call	258 <usleep>
  *sram_address = 0b00000000001;
  ec:	94000005 	stb	r16,0(r18)
  *leds = *sram_data;
  f0:	88800003 	ldbu	r2,0(r17)
  f4:	98800005 	stb	r2,0(r19)


  //*leds = 0xf0;

  /* Event loop never exits. */
  while (1);
  f8:	003fff06 	br	f8 <_gp+0xffff7c24>

000000fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  fc:	deffff04 	addi	sp,sp,-4
 100:	01000034 	movhi	r4,0
 104:	01400034 	movhi	r5,0
 108:	dfc00015 	stw	ra,0(sp)
 10c:	21013504 	addi	r4,r4,1236
 110:	29413604 	addi	r5,r5,1240

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 114:	2140061e 	bne	r4,r5,130 <alt_load+0x34>
 118:	01000034 	movhi	r4,0
 11c:	01400034 	movhi	r5,0
 120:	21000804 	addi	r4,r4,32
 124:	29400804 	addi	r5,r5,32
 128:	2140141e 	bne	r4,r5,17c <alt_load+0x80>
 12c:	00000d06 	br	164 <alt_load+0x68>
 130:	00c00034 	movhi	r3,0
 134:	18c13604 	addi	r3,r3,1240
 138:	00bfff04 	movi	r2,-4
 13c:	1907c83a 	sub	r3,r3,r4
 140:	1886703a 	and	r3,r3,r2
 144:	0005883a 	mov	r2,zero
  {
    while( to != end )
 148:	10fff326 	beq	r2,r3,118 <_gp+0xffff7c44>
 14c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 150:	39c00017 	ldw	r7,0(r7)
 154:	110d883a 	add	r6,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	31c00015 	stw	r7,0(r6)
 160:	003ff906 	br	148 <_gp+0xffff7c74>
 164:	01000034 	movhi	r4,0
 168:	01400034 	movhi	r5,0
 16c:	21012f04 	addi	r4,r4,1212
 170:	29412f04 	addi	r5,r5,1212

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 174:	2140121e 	bne	r4,r5,1c0 <alt_load+0xc4>
 178:	00000d06 	br	1b0 <alt_load+0xb4>
 17c:	00c00034 	movhi	r3,0
 180:	18c00804 	addi	r3,r3,32
 184:	00bfff04 	movi	r2,-4
 188:	1907c83a 	sub	r3,r3,r4
 18c:	1886703a 	and	r3,r3,r2
 190:	0005883a 	mov	r2,zero
  {
    while( to != end )
 194:	10fff326 	beq	r2,r3,164 <_gp+0xffff7c90>
 198:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 19c:	39c00017 	ldw	r7,0(r7)
 1a0:	110d883a 	add	r6,r2,r4
 1a4:	10800104 	addi	r2,r2,4
 1a8:	31c00015 	stw	r7,0(r6)
 1ac:	003ff906 	br	194 <_gp+0xffff7cc0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1b0:	000033c0 	call	33c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 1b4:	dfc00017 	ldw	ra,0(sp)
 1b8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 1bc:	00003401 	jmpi	340 <alt_icache_flush_all>
 1c0:	00c00034 	movhi	r3,0
 1c4:	18c13504 	addi	r3,r3,1236
 1c8:	00bfff04 	movi	r2,-4
 1cc:	1907c83a 	sub	r3,r3,r4
 1d0:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1d8:	10fff526 	beq	r2,r3,1b0 <_gp+0xffff7cdc>
 1dc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 1e0:	39c00017 	ldw	r7,0(r7)
 1e4:	110d883a 	add	r6,r2,r4
 1e8:	10800104 	addi	r2,r2,4
 1ec:	31c00015 	stw	r7,0(r6)
 1f0:	003ff906 	br	1d8 <_gp+0xffff7d04>

000001f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1f4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1f8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1fc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200:	000025c0 	call	25c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 204:	000027c0 	call	27c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 208:	d1200417 	ldw	r4,-32752(gp)
 20c:	d1600317 	ldw	r5,-32756(gp)
 210:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 214:	dfc00017 	ldw	ra,0(sp)
 218:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 21c:	000005c1 	jmpi	5c <main>

00000220 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 220:	defffe04 	addi	sp,sp,-8
 224:	dc000015 	stw	r16,0(sp)
 228:	dfc00115 	stw	ra,4(sp)
 22c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 230:	000034c0 	call	34c <strlen>
 234:	01000034 	movhi	r4,0
 238:	21013504 	addi	r4,r4,1236
 23c:	800b883a 	mov	r5,r16
 240:	100d883a 	mov	r6,r2
 244:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 248:	dfc00117 	ldw	ra,4(sp)
 24c:	dc000017 	ldw	r16,0(sp)
 250:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 254:	00002801 	jmpi	280 <altera_avalon_jtag_uart_write>

00000258 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 258:	00002b41 	jmpi	2b4 <alt_busy_sleep>

0000025c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 25c:	deffff04 	addi	sp,sp,-4
 260:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 264:	00003440 	call	344 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 268:	00800044 	movi	r2,1
 26c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 270:	dfc00017 	ldw	ra,0(sp)
 274:	dec00104 	addi	sp,sp,4
 278:	f800283a 	ret

0000027c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 27c:	f800283a 	ret

00000280 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 280:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 284:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 288:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 28c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 290:	2980072e 	bgeu	r5,r6,2b0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 294:	38c00037 	ldwio	r3,0(r7)
 298:	18ffffec 	andhi	r3,r3,65535
 29c:	183ffc26 	beq	r3,zero,290 <_gp+0xffff7dbc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 2a0:	28c00007 	ldb	r3,0(r5)
 2a4:	20c00035 	stwio	r3,0(r4)
 2a8:	29400044 	addi	r5,r5,1
 2ac:	003ff806 	br	290 <_gp+0xffff7dbc>

  return count;
}
 2b0:	f800283a 	ret

000002b4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2b4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2b8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2bc:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2c0:	dc000015 	stw	r16,0(sp)
 2c4:	dfc00115 	stw	ra,4(sp)
 2c8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2cc:	00004840 	call	484 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2d0:	10001026 	beq	r2,zero,314 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2d4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2d8:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2dc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2e0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2e4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2e8:	297fffc4 	addi	r5,r5,-1
 2ec:	283ffe1e 	bne	r5,zero,2e8 <_gp+0xffff7e14>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2f0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2f4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2f8:	18bffb16 	blt	r3,r2,2e8 <_gp+0xffff7e14>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2fc:	8009883a 	mov	r4,r16
 300:	01400144 	movi	r5,5
 304:	00004940 	call	494 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 308:	10bfffc4 	addi	r2,r2,-1
 30c:	103ffe1e 	bne	r2,zero,308 <_gp+0xffff7e34>
 310:	00000506 	br	328 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 314:	8009883a 	mov	r4,r16
 318:	01400144 	movi	r5,5
 31c:	00004940 	call	494 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 320:	10bfffc4 	addi	r2,r2,-1
 324:	00bffe16 	blt	zero,r2,320 <_gp+0xffff7e4c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 328:	0005883a 	mov	r2,zero
 32c:	dfc00117 	ldw	ra,4(sp)
 330:	dc000017 	ldw	r16,0(sp)
 334:	dec00204 	addi	sp,sp,8
 338:	f800283a 	ret

0000033c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 33c:	f800283a 	ret

00000340 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 340:	f800283a 	ret

00000344 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 344:	000170fa 	wrctl	ienable,zero
 348:	f800283a 	ret

0000034c <strlen>:
 34c:	2005883a 	mov	r2,r4
 350:	10c00007 	ldb	r3,0(r2)
 354:	18000226 	beq	r3,zero,360 <strlen+0x14>
 358:	10800044 	addi	r2,r2,1
 35c:	003ffc06 	br	350 <_gp+0xffff7e7c>
 360:	1105c83a 	sub	r2,r2,r4
 364:	f800283a 	ret

00000368 <udivmodsi4>:
 368:	2900182e 	bgeu	r5,r4,3cc <udivmodsi4+0x64>
 36c:	28001716 	blt	r5,zero,3cc <udivmodsi4+0x64>
 370:	00800804 	movi	r2,32
 374:	00c00044 	movi	r3,1
 378:	00000206 	br	384 <udivmodsi4+0x1c>
 37c:	10001126 	beq	r2,zero,3c4 <udivmodsi4+0x5c>
 380:	28000516 	blt	r5,zero,398 <udivmodsi4+0x30>
 384:	294b883a 	add	r5,r5,r5
 388:	10bfffc4 	addi	r2,r2,-1
 38c:	18c7883a 	add	r3,r3,r3
 390:	293ffa36 	bltu	r5,r4,37c <_gp+0xffff7ea8>
 394:	18000b26 	beq	r3,zero,3c4 <udivmodsi4+0x5c>
 398:	0005883a 	mov	r2,zero
 39c:	21400236 	bltu	r4,r5,3a8 <udivmodsi4+0x40>
 3a0:	2149c83a 	sub	r4,r4,r5
 3a4:	10c4b03a 	or	r2,r2,r3
 3a8:	1806d07a 	srli	r3,r3,1
 3ac:	280ad07a 	srli	r5,r5,1
 3b0:	183ffa1e 	bne	r3,zero,39c <_gp+0xffff7ec8>
 3b4:	3000011e 	bne	r6,zero,3bc <udivmodsi4+0x54>
 3b8:	f800283a 	ret
 3bc:	2005883a 	mov	r2,r4
 3c0:	f800283a 	ret
 3c4:	0005883a 	mov	r2,zero
 3c8:	003ffa06 	br	3b4 <_gp+0xffff7ee0>
 3cc:	00c00044 	movi	r3,1
 3d0:	003ff106 	br	398 <_gp+0xffff7ec4>

000003d4 <__divsi3>:
 3d4:	defffe04 	addi	sp,sp,-8
 3d8:	dfc00115 	stw	ra,4(sp)
 3dc:	dc000015 	stw	r16,0(sp)
 3e0:	20000b16 	blt	r4,zero,410 <__divsi3+0x3c>
 3e4:	0021883a 	mov	r16,zero
 3e8:	28000c16 	blt	r5,zero,41c <__divsi3+0x48>
 3ec:	000d883a 	mov	r6,zero
 3f0:	00003680 	call	368 <udivmodsi4>
 3f4:	0407c83a 	sub	r3,zero,r16
 3f8:	1884f03a 	xor	r2,r3,r2
 3fc:	1405883a 	add	r2,r2,r16
 400:	dfc00117 	ldw	ra,4(sp)
 404:	dc000017 	ldw	r16,0(sp)
 408:	dec00204 	addi	sp,sp,8
 40c:	f800283a 	ret
 410:	0109c83a 	sub	r4,zero,r4
 414:	04000044 	movi	r16,1
 418:	283ff40e 	bge	r5,zero,3ec <_gp+0xffff7f18>
 41c:	014bc83a 	sub	r5,zero,r5
 420:	8400005c 	xori	r16,r16,1
 424:	003ff106 	br	3ec <_gp+0xffff7f18>

00000428 <__modsi3>:
 428:	defffd04 	addi	sp,sp,-12
 42c:	dfc00215 	stw	ra,8(sp)
 430:	dc400115 	stw	r17,4(sp)
 434:	dc000015 	stw	r16,0(sp)
 438:	20000c16 	blt	r4,zero,46c <__modsi3+0x44>
 43c:	0023883a 	mov	r17,zero
 440:	0021883a 	mov	r16,zero
 444:	28000d16 	blt	r5,zero,47c <__modsi3+0x54>
 448:	01800044 	movi	r6,1
 44c:	00003680 	call	368 <udivmodsi4>
 450:	1404f03a 	xor	r2,r2,r16
 454:	8885883a 	add	r2,r17,r2
 458:	dfc00217 	ldw	ra,8(sp)
 45c:	dc400117 	ldw	r17,4(sp)
 460:	dc000017 	ldw	r16,0(sp)
 464:	dec00304 	addi	sp,sp,12
 468:	f800283a 	ret
 46c:	0109c83a 	sub	r4,zero,r4
 470:	04400044 	movi	r17,1
 474:	043fffc4 	movi	r16,-1
 478:	283ff30e 	bge	r5,zero,448 <_gp+0xffff7f74>
 47c:	014bc83a 	sub	r5,zero,r5
 480:	003ff106 	br	448 <_gp+0xffff7f74>

00000484 <__udivsi3>:
 484:	000d883a 	mov	r6,zero
 488:	00003681 	jmpi	368 <udivmodsi4>

0000048c <__umodsi3>:
 48c:	01800044 	movi	r6,1
 490:	00003681 	jmpi	368 <udivmodsi4>

00000494 <__mulsi3>:
 494:	0005883a 	mov	r2,zero
 498:	20000726 	beq	r4,zero,4b8 <__mulsi3+0x24>
 49c:	20c0004c 	andi	r3,r4,1
 4a0:	2008d07a 	srli	r4,r4,1
 4a4:	18000126 	beq	r3,zero,4ac <__mulsi3+0x18>
 4a8:	1145883a 	add	r2,r2,r5
 4ac:	294b883a 	add	r5,r5,r5
 4b0:	203ffa1e 	bne	r4,zero,49c <_gp+0xffff7fc8>
 4b4:	f800283a 	ret
 4b8:	f800283a 	ret
