
sram_test.elf:     file format elf32-littlenios2
sram_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000004c8 memsz 0x000004c8 flags r-x
    LOAD off    0x000014e8 vaddr 0x000004e8 paddr 0x000004ec align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000014f0 vaddr 0x000004f0 paddr 0x000004f0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000014ec  2**0
                  CONTENTS
  2 .text         000004b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000004d0  000004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000004e8  000004ec  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000004f0  000004f0  000014f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000004fc  000004fc  000014ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001510  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000100f  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000093b  00000000  00000000  00002707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000aba  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000294  00000000  00000000  00003afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007af  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004c5  00000000  00000000  0000453f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00004a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000599d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000059a3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000059a4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000059a5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000059ae  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000059b7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  000059c0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  000059c4  2**0
                  CONTENTS, READONLY
 26 .jdi          0000466f  00000000  00000000  000059e2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00052f39  00000000  00000000  0000a051  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000004d0 l    d  .rodata	00000000 .rodata
000004e8 l    d  .rwdata	00000000 .rwdata
000004f0 l    d  .bss	00000000 .bss
000004fc l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sram_test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000037c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000208 g     F .text	0000002c alt_main
000004ec g       *ABS*	00000000 __flash_rwdata_start
00000234 g     F .text	00000038 alt_putstr
000004e8 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004f4 g     O .bss	00000004 alt_argv
000084e8 g       *ABS*	00000000 _gp
0000026c g     F .text	00000004 usleep
00000498 g     F .text	00000008 .hidden __udivsi3
000004fc g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00000350 g     F .text	00000004 alt_dcache_flush_all
000004ec g       *ABS*	00000000 __ram_rwdata_end
000004e8 g       *ABS*	00000000 __ram_rodata_end
000004a0 g     F .text	00000008 .hidden __umodsi3
000004fc g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
00000294 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000290 g     F .text	00000004 alt_sys_init
000004a8 g     F .text	00000028 .hidden __mulsi3
000004e8 g       *ABS*	00000000 __ram_rwdata_start
000004d0 g       *ABS*	00000000 __ram_rodata_start
000002c8 g     F .text	00000088 alt_busy_sleep
000004fc g       *ABS*	00000000 __alt_stack_base
000004f0 g       *ABS*	00000000 __bss_start
0000005c g     F .text	000000b4 main
000004f0 g     O .bss	00000004 alt_envp
000003e8 g     F .text	00000054 .hidden __divsi3
000004d0 g       *ABS*	00000000 __flash_rodata_start
00000270 g     F .text	00000020 alt_irq_init
000004f8 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000004ec g       *ABS*	00000000 _edata
000004fc g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000358 g     F .text	00000008 altera_nios2_qsys_irq_init
0000043c g     F .text	0000005c .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000360 g     F .text	0000001c strlen
00000354 g     F .text	00000004 alt_icache_flush_all
00000110 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a13a14 	ori	gp,gp,34024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10813c14 	ori	r2,r2,1264

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c13f14 	ori	r3,r3,1276

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7b5c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00001100 	call	110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00002080 	call	208 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7b70>

0000005c <main>:
#define sram_datain (volatile char *) 0x0002010
#define sram_dataout (volatile char *) 0x0002010

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#define sram_address (volatile char *) 0x0002020
#define sram_datain (volatile char *) 0x0002010
#define sram_dataout (volatile char *) 0x0002010

int main()
{ 
  60:	defffb04 	addi	sp,sp,-20
  alt_putstr("Hello from Nios II!\n");
  64:	21013404 	addi	r4,r4,1232
#define sram_address (volatile char *) 0x0002020
#define sram_datain (volatile char *) 0x0002010
#define sram_dataout (volatile char *) 0x0002010

int main()
{ 
  68:	dcc00315 	stw	r19,12(sp)
  6c:	dc800215 	stw	r18,8(sp)
  70:	dc400115 	stw	r17,4(sp)
  74:	dc000015 	stw	r16,0(sp)
  78:	dfc00415 	stw	ra,16(sp)
  alt_putstr("Hello from Nios II!\n");
  7c:	00002340 	call	234 <alt_putstr>

  *leds = 0x00;
  80:	00881404 	movi	r2,8272
  84:	10000005 	stb	zero,0(r2)

  *sram_readwrite = 0b1;
  usleep(1000000);
  *sram_address = 0b00000000001;
  *leds = *sram_data;*/
  *sram_enable = 0b1;
  88:	00c00044 	movi	r3,1
  8c:	00881004 	movi	r2,8256
  90:	10c00005 	stb	r3,0(r2)
  *sram_readwrite = 0b0;
  94:	00880c04 	movi	r2,8240
  98:	10000005 	stb	zero,0(r2)
  int i = 0;
  9c:	0021883a 	mov	r16,zero
  while(i < 127) {
	  usleep(10000); //0.01 seconds
	  *sram_address = (char)i;
  a0:	04c80804 	movi	r19,8224
	  *sram_datain = (char)i;
  a4:	04880404 	movi	r18,8208
  *sram_address = 0b00000000001;
  *leds = *sram_data;*/
  *sram_enable = 0b1;
  *sram_readwrite = 0b0;
  int i = 0;
  while(i < 127) {
  a8:	04401fc4 	movi	r17,127
	  usleep(10000); //0.01 seconds
  ac:	0109c404 	movi	r4,10000
  b0:	000026c0 	call	26c <usleep>
	  *sram_address = (char)i;
  b4:	9c000005 	stb	r16,0(r19)
	  *sram_datain = (char)i;
  b8:	94000005 	stb	r16,0(r18)
	  i++;
  bc:	84000044 	addi	r16,r16,1
  *sram_address = 0b00000000001;
  *leds = *sram_data;*/
  *sram_enable = 0b1;
  *sram_readwrite = 0b0;
  int i = 0;
  while(i < 127) {
  c0:	847ffa1e 	bne	r16,r17,ac <_gp+0xffff7bc4>
	  *sram_address = (char)i;
	  *sram_datain = (char)i;
	  i++;
  }

  *leds = 0x00;
  c4:	04481404 	movi	r17,8272
  c8:	88000005 	stb	zero,0(r17)

  *sram_readwrite = 0b1;
  cc:	00c00044 	movi	r3,1
  d0:	00880c04 	movi	r2,8240
  d4:	10c00005 	stb	r3,0(r2)
  i = 0;
  d8:	0021883a 	mov	r16,zero
  while (i < 127) {
	  usleep(100000); //0.1 seconds
	  *sram_address = (char)i;
  dc:	04c80804 	movi	r19,8224
	  *leds = *sram_dataout;
  e0:	04880404 	movi	r18,8208
  *leds = 0x00;

  *sram_readwrite = 0b1;
  i = 0;
  while (i < 127) {
	  usleep(100000); //0.1 seconds
  e4:	010000b4 	movhi	r4,2
  e8:	2121a804 	addi	r4,r4,-31072
  ec:	000026c0 	call	26c <usleep>
	  *sram_address = (char)i;
  f0:	9c000005 	stb	r16,0(r19)
	  *leds = *sram_dataout;
  f4:	90800003 	ldbu	r2,0(r18)
  f8:	88800005 	stb	r2,0(r17)
	  *leds = (char)i;
  fc:	8c000005 	stb	r16,0(r17)

  *leds = 0x00;

  *sram_readwrite = 0b1;
  i = 0;
  while (i < 127) {
 100:	00801fc4 	movi	r2,127
	  usleep(100000); //0.1 seconds
	  *sram_address = (char)i;
	  *leds = *sram_dataout;
	  *leds = (char)i;
	  i++;
 104:	84000044 	addi	r16,r16,1

  *leds = 0x00;

  *sram_readwrite = 0b1;
  i = 0;
  while (i < 127) {
 108:	80bff61e 	bne	r16,r2,e4 <_gp+0xffff7bfc>
	  *leds = (char)i;
	  i++;
  }

  /* Event loop never exits. */
  while (1);
 10c:	003fff06 	br	10c <_gp+0xffff7c24>

00000110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 110:	deffff04 	addi	sp,sp,-4
 114:	01000034 	movhi	r4,0
 118:	01400034 	movhi	r5,0
 11c:	dfc00015 	stw	ra,0(sp)
 120:	21013a04 	addi	r4,r4,1256
 124:	29413b04 	addi	r5,r5,1260

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 128:	2140061e 	bne	r4,r5,144 <alt_load+0x34>
 12c:	01000034 	movhi	r4,0
 130:	01400034 	movhi	r5,0
 134:	21000804 	addi	r4,r4,32
 138:	29400804 	addi	r5,r5,32
 13c:	2140141e 	bne	r4,r5,190 <alt_load+0x80>
 140:	00000d06 	br	178 <alt_load+0x68>
 144:	00c00034 	movhi	r3,0
 148:	18c13b04 	addi	r3,r3,1260
 14c:	00bfff04 	movi	r2,-4
 150:	1907c83a 	sub	r3,r3,r4
 154:	1886703a 	and	r3,r3,r2
 158:	0005883a 	mov	r2,zero
  {
    while( to != end )
 15c:	10fff326 	beq	r2,r3,12c <_gp+0xffff7c44>
 160:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 164:	39c00017 	ldw	r7,0(r7)
 168:	110d883a 	add	r6,r2,r4
 16c:	10800104 	addi	r2,r2,4
 170:	31c00015 	stw	r7,0(r6)
 174:	003ff906 	br	15c <_gp+0xffff7c74>
 178:	01000034 	movhi	r4,0
 17c:	01400034 	movhi	r5,0
 180:	21013404 	addi	r4,r4,1232
 184:	29413404 	addi	r5,r5,1232

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 188:	2140121e 	bne	r4,r5,1d4 <alt_load+0xc4>
 18c:	00000d06 	br	1c4 <alt_load+0xb4>
 190:	00c00034 	movhi	r3,0
 194:	18c00804 	addi	r3,r3,32
 198:	00bfff04 	movi	r2,-4
 19c:	1907c83a 	sub	r3,r3,r4
 1a0:	1886703a 	and	r3,r3,r2
 1a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1a8:	10fff326 	beq	r2,r3,178 <_gp+0xffff7c90>
 1ac:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 1b0:	39c00017 	ldw	r7,0(r7)
 1b4:	110d883a 	add	r6,r2,r4
 1b8:	10800104 	addi	r2,r2,4
 1bc:	31c00015 	stw	r7,0(r6)
 1c0:	003ff906 	br	1a8 <_gp+0xffff7cc0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1c4:	00003500 	call	350 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 1c8:	dfc00017 	ldw	ra,0(sp)
 1cc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 1d0:	00003541 	jmpi	354 <alt_icache_flush_all>
 1d4:	00c00034 	movhi	r3,0
 1d8:	18c13a04 	addi	r3,r3,1256
 1dc:	00bfff04 	movi	r2,-4
 1e0:	1907c83a 	sub	r3,r3,r4
 1e4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1ec:	10fff526 	beq	r2,r3,1c4 <_gp+0xffff7cdc>
 1f0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 1f4:	39c00017 	ldw	r7,0(r7)
 1f8:	110d883a 	add	r6,r2,r4
 1fc:	10800104 	addi	r2,r2,4
 200:	31c00015 	stw	r7,0(r6)
 204:	003ff906 	br	1ec <_gp+0xffff7d04>

00000208 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 208:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 210:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 214:	00002700 	call	270 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 218:	00002900 	call	290 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 21c:	d1200417 	ldw	r4,-32752(gp)
 220:	d1600317 	ldw	r5,-32756(gp)
 224:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 228:	dfc00017 	ldw	ra,0(sp)
 22c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 230:	000005c1 	jmpi	5c <main>

00000234 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 234:	defffe04 	addi	sp,sp,-8
 238:	dc000015 	stw	r16,0(sp)
 23c:	dfc00115 	stw	ra,4(sp)
 240:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 244:	00003600 	call	360 <strlen>
 248:	01000034 	movhi	r4,0
 24c:	21013a04 	addi	r4,r4,1256
 250:	800b883a 	mov	r5,r16
 254:	100d883a 	mov	r6,r2
 258:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
 25c:	dfc00117 	ldw	ra,4(sp)
 260:	dc000017 	ldw	r16,0(sp)
 264:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 268:	00002941 	jmpi	294 <altera_avalon_jtag_uart_write>

0000026c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 26c:	00002c81 	jmpi	2c8 <alt_busy_sleep>

00000270 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 270:	deffff04 	addi	sp,sp,-4
 274:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 278:	00003580 	call	358 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 27c:	00800044 	movi	r2,1
 280:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 284:	dfc00017 	ldw	ra,0(sp)
 288:	dec00104 	addi	sp,sp,4
 28c:	f800283a 	ret

00000290 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 290:	f800283a 	ret

00000294 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 294:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 298:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 29c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2a0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 2a4:	2980072e 	bgeu	r5,r6,2c4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2a8:	38c00037 	ldwio	r3,0(r7)
 2ac:	18ffffec 	andhi	r3,r3,65535
 2b0:	183ffc26 	beq	r3,zero,2a4 <_gp+0xffff7dbc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 2b4:	28c00007 	ldb	r3,0(r5)
 2b8:	20c00035 	stwio	r3,0(r4)
 2bc:	29400044 	addi	r5,r5,1
 2c0:	003ff806 	br	2a4 <_gp+0xffff7dbc>

  return count;
}
 2c4:	f800283a 	ret

000002c8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2c8:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2cc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2d0:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2d4:	dc000015 	stw	r16,0(sp)
 2d8:	dfc00115 	stw	ra,4(sp)
 2dc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2e0:	00004980 	call	498 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2e4:	10001026 	beq	r2,zero,328 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2e8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2ec:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2f0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2f4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2f8:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2fc:	297fffc4 	addi	r5,r5,-1
 300:	283ffe1e 	bne	r5,zero,2fc <_gp+0xffff7e14>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 304:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 308:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 30c:	18bffb16 	blt	r3,r2,2fc <_gp+0xffff7e14>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 310:	8009883a 	mov	r4,r16
 314:	01400144 	movi	r5,5
 318:	00004a80 	call	4a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 31c:	10bfffc4 	addi	r2,r2,-1
 320:	103ffe1e 	bne	r2,zero,31c <_gp+0xffff7e34>
 324:	00000506 	br	33c <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 328:	8009883a 	mov	r4,r16
 32c:	01400144 	movi	r5,5
 330:	00004a80 	call	4a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 334:	10bfffc4 	addi	r2,r2,-1
 338:	00bffe16 	blt	zero,r2,334 <_gp+0xffff7e4c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 33c:	0005883a 	mov	r2,zero
 340:	dfc00117 	ldw	ra,4(sp)
 344:	dc000017 	ldw	r16,0(sp)
 348:	dec00204 	addi	sp,sp,8
 34c:	f800283a 	ret

00000350 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 350:	f800283a 	ret

00000354 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 354:	f800283a 	ret

00000358 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 358:	000170fa 	wrctl	ienable,zero
 35c:	f800283a 	ret

00000360 <strlen>:
 360:	2005883a 	mov	r2,r4
 364:	10c00007 	ldb	r3,0(r2)
 368:	18000226 	beq	r3,zero,374 <strlen+0x14>
 36c:	10800044 	addi	r2,r2,1
 370:	003ffc06 	br	364 <_gp+0xffff7e7c>
 374:	1105c83a 	sub	r2,r2,r4
 378:	f800283a 	ret

0000037c <udivmodsi4>:
 37c:	2900182e 	bgeu	r5,r4,3e0 <udivmodsi4+0x64>
 380:	28001716 	blt	r5,zero,3e0 <udivmodsi4+0x64>
 384:	00800804 	movi	r2,32
 388:	00c00044 	movi	r3,1
 38c:	00000206 	br	398 <udivmodsi4+0x1c>
 390:	10001126 	beq	r2,zero,3d8 <udivmodsi4+0x5c>
 394:	28000516 	blt	r5,zero,3ac <udivmodsi4+0x30>
 398:	294b883a 	add	r5,r5,r5
 39c:	10bfffc4 	addi	r2,r2,-1
 3a0:	18c7883a 	add	r3,r3,r3
 3a4:	293ffa36 	bltu	r5,r4,390 <_gp+0xffff7ea8>
 3a8:	18000b26 	beq	r3,zero,3d8 <udivmodsi4+0x5c>
 3ac:	0005883a 	mov	r2,zero
 3b0:	21400236 	bltu	r4,r5,3bc <udivmodsi4+0x40>
 3b4:	2149c83a 	sub	r4,r4,r5
 3b8:	10c4b03a 	or	r2,r2,r3
 3bc:	1806d07a 	srli	r3,r3,1
 3c0:	280ad07a 	srli	r5,r5,1
 3c4:	183ffa1e 	bne	r3,zero,3b0 <_gp+0xffff7ec8>
 3c8:	3000011e 	bne	r6,zero,3d0 <udivmodsi4+0x54>
 3cc:	f800283a 	ret
 3d0:	2005883a 	mov	r2,r4
 3d4:	f800283a 	ret
 3d8:	0005883a 	mov	r2,zero
 3dc:	003ffa06 	br	3c8 <_gp+0xffff7ee0>
 3e0:	00c00044 	movi	r3,1
 3e4:	003ff106 	br	3ac <_gp+0xffff7ec4>

000003e8 <__divsi3>:
 3e8:	defffe04 	addi	sp,sp,-8
 3ec:	dfc00115 	stw	ra,4(sp)
 3f0:	dc000015 	stw	r16,0(sp)
 3f4:	20000b16 	blt	r4,zero,424 <__divsi3+0x3c>
 3f8:	0021883a 	mov	r16,zero
 3fc:	28000c16 	blt	r5,zero,430 <__divsi3+0x48>
 400:	000d883a 	mov	r6,zero
 404:	000037c0 	call	37c <udivmodsi4>
 408:	0407c83a 	sub	r3,zero,r16
 40c:	1884f03a 	xor	r2,r3,r2
 410:	1405883a 	add	r2,r2,r16
 414:	dfc00117 	ldw	ra,4(sp)
 418:	dc000017 	ldw	r16,0(sp)
 41c:	dec00204 	addi	sp,sp,8
 420:	f800283a 	ret
 424:	0109c83a 	sub	r4,zero,r4
 428:	04000044 	movi	r16,1
 42c:	283ff40e 	bge	r5,zero,400 <_gp+0xffff7f18>
 430:	014bc83a 	sub	r5,zero,r5
 434:	8400005c 	xori	r16,r16,1
 438:	003ff106 	br	400 <_gp+0xffff7f18>

0000043c <__modsi3>:
 43c:	defffd04 	addi	sp,sp,-12
 440:	dfc00215 	stw	ra,8(sp)
 444:	dc400115 	stw	r17,4(sp)
 448:	dc000015 	stw	r16,0(sp)
 44c:	20000c16 	blt	r4,zero,480 <__modsi3+0x44>
 450:	0023883a 	mov	r17,zero
 454:	0021883a 	mov	r16,zero
 458:	28000d16 	blt	r5,zero,490 <__modsi3+0x54>
 45c:	01800044 	movi	r6,1
 460:	000037c0 	call	37c <udivmodsi4>
 464:	1404f03a 	xor	r2,r2,r16
 468:	8885883a 	add	r2,r17,r2
 46c:	dfc00217 	ldw	ra,8(sp)
 470:	dc400117 	ldw	r17,4(sp)
 474:	dc000017 	ldw	r16,0(sp)
 478:	dec00304 	addi	sp,sp,12
 47c:	f800283a 	ret
 480:	0109c83a 	sub	r4,zero,r4
 484:	04400044 	movi	r17,1
 488:	043fffc4 	movi	r16,-1
 48c:	283ff30e 	bge	r5,zero,45c <_gp+0xffff7f74>
 490:	014bc83a 	sub	r5,zero,r5
 494:	003ff106 	br	45c <_gp+0xffff7f74>

00000498 <__udivsi3>:
 498:	000d883a 	mov	r6,zero
 49c:	000037c1 	jmpi	37c <udivmodsi4>

000004a0 <__umodsi3>:
 4a0:	01800044 	movi	r6,1
 4a4:	000037c1 	jmpi	37c <udivmodsi4>

000004a8 <__mulsi3>:
 4a8:	0005883a 	mov	r2,zero
 4ac:	20000726 	beq	r4,zero,4cc <__mulsi3+0x24>
 4b0:	20c0004c 	andi	r3,r4,1
 4b4:	2008d07a 	srli	r4,r4,1
 4b8:	18000126 	beq	r3,zero,4c0 <__mulsi3+0x18>
 4bc:	1145883a 	add	r2,r2,r5
 4c0:	294b883a 	add	r5,r5,r5
 4c4:	203ffa1e 	bne	r4,zero,4b0 <_gp+0xffff7fc8>
 4c8:	f800283a 	ret
 4cc:	f800283a 	ret
